
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009384  08009384  00019384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093cc  080093cc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d4  080093d4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080093dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000164  08009540  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08009540  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003308e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be5  00000000  00000000  00053222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002460  00000000  00000000  00056e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002308  00000000  00000000  00059268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282db  00000000  00000000  0005b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbcb  00000000  00000000  0008384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76e9  00000000  00000000  0009f416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c68  00000000  00000000  00196b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800936c 	.word	0x0800936c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800936c 	.word	0x0800936c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f005 fd06 	bl	8005ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f846 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8f6 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8c4 	bl	800065c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80004d4:	f000 f892 	bl	80005fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 80004d8:	2101      	movs	r1, #1
 80004da:	2000      	movs	r0, #0
 80004dc:	f005 f974 	bl	80057c8 <IKS01A2_MOTION_SENSOR_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <main+0x2e>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80004e6:	2101      	movs	r1, #1
 80004e8:	2000      	movs	r0, #0
 80004ea:	f005 fa69 	bl	80059c0 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80004ee:	2102      	movs	r1, #2
 80004f0:	2001      	movs	r0, #1
 80004f2:	f005 f969 	bl	80057c8 <IKS01A2_MOTION_SENSOR_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <main+0x44>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80004fc:	2102      	movs	r1, #2
 80004fe:	2001      	movs	r0, #1
 8000500:	f005 fa5e 	bl	80059c0 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 8000504:	2101      	movs	r1, #1
 8000506:	2000      	movs	r0, #0
 8000508:	f004 fea2 	bl	8005250 <IKS01A2_ENV_SENSOR_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <main+0x5a>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 8000512:	2101      	movs	r1, #1
 8000514:	2000      	movs	r0, #0
 8000516:	f004 ff5b 	bl	80053d0 <IKS01A2_ENV_SENSOR_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 800051a:	4a0c      	ldr	r2, [pc, #48]	; (800054c <main+0x8c>)
 800051c:	2101      	movs	r1, #1
 800051e:	2000      	movs	r0, #0
 8000520:	f004 ff98 	bl	8005454 <IKS01A2_ENV_SENSOR_GetValue>
	  HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	; 0x64
 8000526:	f005 fd49 	bl	8005fbc <HAL_Delay>
	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO, &data_axe_acc);
 800052a:	4a09      	ldr	r2, [pc, #36]	; (8000550 <main+0x90>)
 800052c:	2102      	movs	r1, #2
 800052e:	2001      	movs	r0, #1
 8000530:	f005 fa88 	bl	8005a44 <IKS01A2_MOTION_SENSOR_GetAxes>
	  HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	; 0x64
 8000536:	f005 fd41 	bl	8005fbc <HAL_Delay>
	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_GYRO, &data_axe_gyro);
 800053a:	4a06      	ldr	r2, [pc, #24]	; (8000554 <main+0x94>)
 800053c:	2101      	movs	r1, #1
 800053e:	2000      	movs	r0, #0
 8000540:	f005 fa80 	bl	8005a44 <IKS01A2_MOTION_SENSOR_GetAxes>
	  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f005 fd39 	bl	8005fbc <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 800054a:	e7e6      	b.n	800051a <main+0x5a>
 800054c:	200002d4 	.word	0x200002d4
 8000550:	20000360 	.word	0x20000360
 8000554:	200002c8 	.word	0x200002c8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 fef8 	bl	800935c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f006 ff43 	bl	8007408 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 f8f2 	bl	8000770 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 ff7a 	bl	80074b4 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 f8d3 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 fb4c 	bl	8007c80 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f8bf 	bl	8000770 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	; 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_UART4_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <MX_UART4_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_UART4_Init+0x58>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_UART4_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_UART4_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_UART4_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_UART4_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_UART4_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_UART4_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_UART4_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_UART4_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_UART4_Init+0x58>)
 8000640:	f008 f9e0 	bl	8008a04 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800064a:	f000 f891 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200002d8 	.word	0x200002d8
 8000658:	40004c00 	.word	0x40004c00

0800065c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART2_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x58>)
 80006a0:	f008 f9b0 	bl	8008a04 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f861 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000036c 	.word	0x2000036c
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_GPIO_Init+0xac>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <MX_GPIO_Init+0xac>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_GPIO_Init+0xac>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xac>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xac>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xac>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0xac>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_GPIO_Init+0xac>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_GPIO_Init+0xac>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f005 fff3 	bl	800670c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0xb0>)
 800073e:	f005 fd47 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000742:	2320      	movs	r3, #32
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f005 fd38 	bl	80061d0 <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0ae      	sub	sp, #184	; 0xb8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2288      	movs	r2, #136	; 0x88
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f008 fdb9 	bl	800935c <memset>
  if(huart->Instance==UART4)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a42      	ldr	r2, [pc, #264]	; (80008f8 <HAL_UART_MspInit+0x134>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d13c      	bne.n	800086e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80007f4:	2308      	movs	r3, #8
 80007f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f007 fc43 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800080c:	f7ff ffb0 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000810:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000814:	4a39      	ldr	r2, [pc, #228]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800081a:	6593      	str	r3, [r2, #88]	; 0x58
 800081c:	4b37      	ldr	r3, [pc, #220]	; (80008fc <HAL_UART_MspInit+0x138>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <HAL_UART_MspInit+0x138>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <HAL_UART_MspInit+0x138>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000840:	2303      	movs	r3, #3
 8000842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000858:	2308      	movs	r3, #8
 800085a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f005 fcb2 	bl	80061d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800086c:	e040      	b.n	80008f0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a23      	ldr	r2, [pc, #140]	; (8000900 <HAL_UART_MspInit+0x13c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d13b      	bne.n	80008f0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800087c:	2300      	movs	r3, #0
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4618      	mov	r0, r3
 8000886:	f007 fc01 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000890:	f7ff ff6e 	bl	8000770 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_UART_MspInit+0x138>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_UART_MspInit+0x138>)
 800089a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089e:	6593      	str	r3, [r2, #88]	; 0x58
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_UART_MspInit+0x138>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c4:	230c      	movs	r3, #12
 80008c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008dc:	2307      	movs	r3, #7
 80008de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f005 fc70 	bl	80061d0 <HAL_GPIO_Init>
}
 80008f0:	bf00      	nop
 80008f2:	37b8      	adds	r7, #184	; 0xb8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40004c00 	.word	0x40004c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40004400 	.word	0x40004400

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f005 fb14 	bl	8005f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <BSP_I2C1_Init+0x70>)
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <BSP_I2C1_Init+0x74>)
 8000966:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <BSP_I2C1_Init+0x78>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	4918      	ldr	r1, [pc, #96]	; (80009d0 <BSP_I2C1_Init+0x78>)
 8000970:	600a      	str	r2, [r1, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d122      	bne.n	80009bc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <BSP_I2C1_Init+0x70>)
 8000978:	f006 f9e0 	bl	8006d3c <HAL_I2C_GetState>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d11c      	bne.n	80009bc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <BSP_I2C1_Init+0x70>)
 8000984:	f000 f8fe 	bl	8000b84 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d116      	bne.n	80009bc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <BSP_I2C1_Init+0x70>)
 8000990:	f000 f8b4 	bl	8000afc <MX_I2C1_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800099a:	f06f 0307 	mvn.w	r3, #7
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	e00c      	b.n	80009bc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <BSP_I2C1_Init+0x70>)
 80009a6:	f006 fc89 	bl	80072bc <HAL_I2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80009b0:	f06f 0307 	mvn.w	r3, #7
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	e001      	b.n	80009bc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200003f0 	.word	0x200003f0
 80009cc:	40005400 	.word	0x40005400
 80009d0:	20000180 	.word	0x20000180

080009d4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <BSP_I2C1_DeInit+0x48>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <BSP_I2C1_DeInit+0x48>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <BSP_I2C1_DeInit+0x48>)
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <BSP_I2C1_DeInit+0x48>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10b      	bne.n	8000a10 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <BSP_I2C1_DeInit+0x4c>)
 80009fa:	f000 f909 	bl	8000c10 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <BSP_I2C1_DeInit+0x4c>)
 8000a00:	f005 ff2b 	bl	800685a <HAL_I2C_DeInit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000a0a:	f06f 0307 	mvn.w	r3, #7
 8000a0e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	200003f0 	.word	0x200003f0

08000a24 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	60ba      	str	r2, [r7, #8]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	81fb      	strh	r3, [r7, #14]
 8000a32:	460b      	mov	r3, r1
 8000a34:	81bb      	strh	r3, [r7, #12]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000a3e:	89ba      	ldrh	r2, [r7, #12]
 8000a40:	89f9      	ldrh	r1, [r7, #14]
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <BSP_I2C1_WriteReg+0x60>)
 8000a54:	f005 ff44 	bl	80068e0 <HAL_I2C_Mem_Write>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00c      	beq.n	8000a78 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <BSP_I2C1_WriteReg+0x60>)
 8000a60:	f006 f97a 	bl	8006d58 <HAL_I2C_GetError>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d103      	bne.n	8000a72 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000a6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e002      	b.n	8000a78 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000a72:	f06f 0303 	mvn.w	r3, #3
 8000a76:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000a78:	697b      	ldr	r3, [r7, #20]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200003f0 	.word	0x200003f0

08000a88 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	60ba      	str	r2, [r7, #8]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	81fb      	strh	r3, [r7, #14]
 8000a96:	460b      	mov	r3, r1
 8000a98:	81bb      	strh	r3, [r7, #12]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000aa2:	89ba      	ldrh	r2, [r7, #12]
 8000aa4:	89f9      	ldrh	r1, [r7, #14]
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <BSP_I2C1_ReadReg+0x60>)
 8000ab8:	f006 f826 	bl	8006b08 <HAL_I2C_Mem_Read>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00c      	beq.n	8000adc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <BSP_I2C1_ReadReg+0x60>)
 8000ac4:	f006 f948 	bl	8006d58 <HAL_I2C_GetError>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d103      	bne.n	8000ad6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ace:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e002      	b.n	8000adc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ad6:	f06f 0303 	mvn.w	r3, #3
 8000ada:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000adc:	697b      	ldr	r3, [r7, #20]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200003f0 	.word	0x200003f0

08000aec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000af0:	f005 fa58 	bl	8005fa4 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_I2C1_Init+0x80>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_I2C1_Init+0x84>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f005 fdfc 	bl	800673c <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f006 fbb3 	bl	80072bc <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f006 fbf5 	bl	8007352 <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	10909cec 	.word	0x10909cec

08000b84 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <I2C1_MspInit+0x84>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <I2C1_MspInit+0x84>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <I2C1_MspInit+0x84>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4812      	ldr	r0, [pc, #72]	; (8000c0c <I2C1_MspInit+0x88>)
 8000bc2:	f005 fb05 	bl	80061d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480a      	ldr	r0, [pc, #40]	; (8000c0c <I2C1_MspInit+0x88>)
 8000be4:	f005 faf4 	bl	80061d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <I2C1_MspInit+0x84>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <I2C1_MspInit+0x84>)
 8000bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <I2C1_MspInit+0x84>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400

08000c10 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <I2C1_MspDeInit+0x30>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <I2C1_MspDeInit+0x30>)
 8000c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c22:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <I2C1_MspDeInit+0x34>)
 8000c2a:	f005 fc7b 	bl	8006524 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <I2C1_MspDeInit+0x34>)
 8000c34:	f005 fc76 	bl	8006524 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000400 	.word	0x48000400

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f008 fb3b 	bl	8009314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc0f 	bl	80004c0 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000cb0:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8000cb4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000cb8:	20000454 	.word	0x20000454

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e030      	b.n	8000d3a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	7b1a      	ldrb	r2, [r3, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	695a      	ldr	r2, [r3, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	699a      	ldr	r2, [r3, #24]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HTS221_RegisterBusIO+0x84>)
 8000d14:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HTS221_RegisterBusIO+0x88>)
 8000d1a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4798      	blx	r3
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	e002      	b.n	8000d3a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08001377 	.word	0x08001377
 8000d48:	080013d9 	.word	0x080013d9

08000d4c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d108      	bne.n	8000d70 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 faa4 	bl	80012ac <HTS221_Initialize>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e004      	b.n	8000d7a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d111      	bne.n	8000db8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f878 	bl	8000e8a <HTS221_HUM_Disable>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	e00d      	b.n	8000dc2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f95f 	bl	800106a <HTS221_TEMP_Disable>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e004      	b.n	8000dc2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	331c      	adds	r3, #28
 8000dd8:	6839      	ldr	r1, [r7, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fc28 	bl	8001630 <hts221_device_id_get>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e000      	b.n	8000dee <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2201      	movs	r2, #1
 8000e06:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HTS221_GetCapabilities+0x44>)
 8000e1e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HTS221_GetCapabilities+0x44>)
 8000e24:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	41480000 	.word	0x41480000

08000e40 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e015      	b.n	8000e82 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10b      	bne.n	8000e78 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	331c      	adds	r3, #28
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fbf3 	bl	8001652 <hts221_power_on_set>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e004      	b.n	8000e82 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e015      	b.n	8000ecc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10b      	bne.n	8000ec2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	331c      	adds	r3, #28
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fbce 	bl	8001652 <hts221_power_on_set>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec0:	e004      	b.n	8000ecc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f96f 	bl	80011c4 <HTS221_GetOutputDataRate>
 8000ee6:	4603      	mov	r3, r0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8000efc:	ed97 0a00 	vldr	s0, [r7]
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f9a3 	bl	800124c <HTS221_SetOutputDataRate>
 8000f06:	4603      	mov	r3, r0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	331c      	adds	r3, #28
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fc58 	bl	80017da <hts221_hum_adc_point_0_get>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	e06b      	b.n	800100e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f103 021c 	add.w	r2, r3, #28
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	3304      	adds	r3, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4610      	mov	r0, r2
 8000f46:	f000 fbaa 	bl	800169e <hts221_hum_rh_point_0_get>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	e05b      	b.n	800100e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f103 021c 	add.w	r2, r3, #28
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	3308      	adds	r3, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 fc5c 	bl	8001822 <hts221_hum_adc_point_1_get>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	e04b      	b.n	800100e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 021c 	add.w	r2, r3, #28
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	330c      	adds	r3, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	4610      	mov	r0, r2
 8000f86:	f000 fba8 	bl	80016da <hts221_hum_rh_point_1_get>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e03b      	b.n	800100e <HTS221_HUM_GetHumidity+0xfe>
 8000f96:	2300      	movs	r3, #0
 8000f98:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	331c      	adds	r3, #28
 8000f9e:	f107 021c 	add.w	r2, r7, #28
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fafd 	bl	80015a4 <hts221_humidity_raw_get>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	e02b      	b.n	800100e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8000fb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f99a 	bl	8001304 <Linear_Interpolation>
 8000fd0:	eef0 7a40 	vmov.f32	s15, s0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d503      	bpl.n	8000ff2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001018 <HTS221_HUM_GetHumidity+0x108>
 8000ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	dd02      	ble.n	800100c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HTS221_HUM_GetHumidity+0x10c>)
 800100a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	42c80000 	.word	0x42c80000
 800101c:	42c80000 	.word	0x42c80000

08001020 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e015      	b.n	8001062 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	331c      	adds	r3, #28
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fb03 	bl	8001652 <hts221_power_on_set>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e004      	b.n	8001062 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e015      	b.n	80010ac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10b      	bne.n	80010a2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	331c      	adds	r3, #28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fade 	bl	8001652 <hts221_power_on_set>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e004      	b.n	80010ac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f87f 	bl	80011c4 <HTS221_GetOutputDataRate>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80010dc:	ed97 0a00 	vldr	s0, [r7]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f8b3 	bl	800124c <HTS221_SetOutputDataRate>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	331c      	adds	r3, #28
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fbb0 	bl	800186a <hts221_temp_adc_point_0_get>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	e052      	b.n	80011bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f103 021c 	add.w	r2, r3, #28
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	3304      	adds	r3, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f000 faf6 	bl	8001716 <hts221_temp_deg_point_0_get>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	e042      	b.n	80011bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f103 021c 	add.w	r2, r3, #28
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	3308      	adds	r3, #8
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f000 fbb4 	bl	80018b2 <hts221_temp_adc_point_1_get>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e032      	b.n	80011bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f103 021c 	add.w	r2, r3, #28
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	330c      	adds	r3, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	f000 fb07 	bl	8001778 <hts221_temp_deg_point_1_get>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e022      	b.n	80011bc <HTS221_TEMP_GetTemperature+0xcc>
 8001176:	2300      	movs	r3, #0
 8001178:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	331c      	adds	r3, #28
 800117e:	f107 021c 	add.w	r2, r7, #28
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fa30 	bl	80015ea <hts221_temperature_raw_get>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	e012      	b.n	80011bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001196:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f8aa 	bl	8001304 <Linear_Interpolation>
 80011b0:	eef0 7a40 	vmov.f32	s15, s0
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	331c      	adds	r3, #28
 80011d6:	f107 020b 	add.w	r2, r7, #11
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f983 	bl	80014e8 <hts221_data_rate_get>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e025      	b.n	800123a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d81d      	bhi.n	8001230 <HTS221_GetOutputDataRate+0x6c>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <HTS221_GetOutputDataRate+0x38>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	08001217 	.word	0x08001217
 8001204:	08001221 	.word	0x08001221
 8001208:	08001229 	.word	0x08001229
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
      break;
 8001214:	e010      	b.n	8001238 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800121c:	601a      	str	r2, [r3, #0]
      break;
 800121e:	e00b      	b.n	8001238 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HTS221_GetOutputDataRate+0x80>)
 8001224:	601a      	str	r2, [r3, #0]
      break;
 8001226:	e007      	b.n	8001238 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HTS221_GetOutputDataRate+0x84>)
 800122c:	601a      	str	r2, [r3, #0]
      break;
 800122e:	e003      	b.n	8001238 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	60fb      	str	r3, [r7, #12]
      break;
 8001236:	bf00      	nop
  }

  return ret;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40e00000 	.word	0x40e00000
 8001248:	41480000 	.word	0x41480000

0800124c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001258:	edd7 7a00 	vldr	s15, [r7]
 800125c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	d801      	bhi.n	800126e <HTS221_SetOutputDataRate+0x22>
 800126a:	2301      	movs	r3, #1
 800126c:	e00b      	b.n	8001286 <HTS221_SetOutputDataRate+0x3a>
 800126e:	edd7 7a00 	vldr	s15, [r7]
 8001272:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d801      	bhi.n	8001284 <HTS221_SetOutputDataRate+0x38>
 8001280:	2302      	movs	r3, #2
 8001282:	e000      	b.n	8001286 <HTS221_SetOutputDataRate+0x3a>
 8001284:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001286:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	331c      	adds	r3, #28
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f902 	bl	800149a <hts221_data_rate_set>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e000      	b.n	80012a4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	331c      	adds	r3, #28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9c9 	bl	8001652 <hts221_power_on_set>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e017      	b.n	80012fc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	331c      	adds	r3, #28
 80012d0:	2101      	movs	r1, #1
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f940 	bl	8001558 <hts221_block_data_update_set>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e00b      	b.n	80012fc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80012e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffaf 	bl	800124c <HTS221_SetOutputDataRate>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	e000      	b.n	80012fc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	ed93 7a03 	vldr	s14, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	edd3 7a01 	vldr	s15, [r3, #4]
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	edd7 7a00 	vldr	s15, [r7]
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 6a02 	vldr	s13, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a01 	vldr	s15, [r3, #4]
 8001334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	ed93 6a00 	vldr	s12, [r3]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	edd3 7a03 	vldr	s15, [r3, #12]
 8001344:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001348:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800134c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edd3 6a02 	vldr	s13, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eef0 7a66 	vmov.f32	s15, s13
}
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b087      	sub	sp, #28
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	72fb      	strb	r3, [r7, #11]
 8001386:	4613      	mov	r3, r2
 8001388:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10e      	bne.n	80013b4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	695c      	ldr	r4, [r3, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	7b1b      	ldrb	r3, [r3, #12]
 800139e:	b298      	uxth	r0, r3
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	b299      	uxth	r1, r3
 80013aa:	893b      	ldrh	r3, [r7, #8]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	47a0      	blx	r4
 80013b0:	4603      	mov	r3, r0
 80013b2:	e00d      	b.n	80013d0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	695c      	ldr	r4, [r3, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	7b1b      	ldrb	r3, [r3, #12]
 80013bc:	b298      	uxth	r0, r3
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	b299      	uxth	r1, r3
 80013c8:	893b      	ldrh	r3, [r7, #8]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	47a0      	blx	r4
 80013ce:	4603      	mov	r3, r0
  }
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	72fb      	strb	r3, [r7, #11]
 80013e8:	4613      	mov	r3, r2
 80013ea:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10e      	bne.n	8001416 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	691c      	ldr	r4, [r3, #16]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
 8001400:	b298      	uxth	r0, r3
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001408:	b2db      	uxtb	r3, r3
 800140a:	b299      	uxth	r1, r3
 800140c:	893b      	ldrh	r3, [r7, #8]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	47a0      	blx	r4
 8001412:	4603      	mov	r3, r0
 8001414:	e00d      	b.n	8001432 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	691c      	ldr	r4, [r3, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	b298      	uxth	r0, r3
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001426:	b2db      	uxtb	r3, r3
 8001428:	b299      	uxth	r1, r3
 800142a:	893b      	ldrh	r3, [r7, #8]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	47a0      	blx	r4
 8001430:	4603      	mov	r3, r0
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}

0800143a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b087      	sub	sp, #28
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	461a      	mov	r2, r3
 8001446:	460b      	mov	r3, r1
 8001448:	72fb      	strb	r3, [r7, #11]
 800144a:	4613      	mov	r3, r2
 800144c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	685c      	ldr	r4, [r3, #4]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6898      	ldr	r0, [r3, #8]
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	7af9      	ldrb	r1, [r7, #11]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	47a0      	blx	r4
 800145e:	6178      	str	r0, [r7, #20]
  return ret;
 8001460:	697b      	ldr	r3, [r7, #20]
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}

0800146a <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800146a:	b590      	push	{r4, r7, lr}
 800146c:	b087      	sub	sp, #28
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	461a      	mov	r2, r3
 8001476:	460b      	mov	r3, r1
 8001478:	72fb      	strb	r3, [r7, #11]
 800147a:	4613      	mov	r3, r2
 800147c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681c      	ldr	r4, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6898      	ldr	r0, [r3, #8]
 8001486:	893b      	ldrh	r3, [r7, #8]
 8001488:	7af9      	ldrb	r1, [r7, #11]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	47a0      	blx	r4
 800148e:	6178      	str	r0, [r7, #20]
  return ret;
 8001490:	697b      	ldr	r3, [r7, #20]
}
 8001492:	4618      	mov	r0, r3
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}

0800149a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80014a6:	f107 0208 	add.w	r2, r7, #8
 80014aa:	2301      	movs	r3, #1
 80014ac:	2120      	movs	r1, #32
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffc3 	bl	800143a <hts221_read_reg>
 80014b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10f      	bne.n	80014dc <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	7a3b      	ldrb	r3, [r7, #8]
 80014c6:	f362 0301 	bfi	r3, r2, #0, #2
 80014ca:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80014cc:	f107 0208 	add.w	r2, r7, #8
 80014d0:	2301      	movs	r3, #1
 80014d2:	2120      	movs	r1, #32
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffc8 	bl	800146a <hts221_write_reg>
 80014da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80014f2:	f107 0208 	add.w	r2, r7, #8
 80014f6:	2301      	movs	r3, #1
 80014f8:	2120      	movs	r1, #32
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff9d 	bl	800143a <hts221_read_reg>
 8001500:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8001502:	7a3b      	ldrb	r3, [r7, #8]
 8001504:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b03      	cmp	r3, #3
 800150c:	d81a      	bhi.n	8001544 <hts221_data_rate_get+0x5c>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <hts221_data_rate_get+0x2c>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001525 	.word	0x08001525
 8001518:	0800152d 	.word	0x0800152d
 800151c:	08001535 	.word	0x08001535
 8001520:	0800153d 	.word	0x0800153d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
      break;
 800152a:	e00f      	b.n	800154c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
      break;
 8001532:	e00b      	b.n	800154c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2202      	movs	r2, #2
 8001538:	701a      	strb	r2, [r3, #0]
      break;
 800153a:	e007      	b.n	800154c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2203      	movs	r2, #3
 8001540:	701a      	strb	r2, [r3, #0]
      break;
 8001542:	e003      	b.n	800154c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2204      	movs	r2, #4
 8001548:	701a      	strb	r2, [r3, #0]
      break;
 800154a:	bf00      	nop
  }

  return ret;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop

08001558 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	2301      	movs	r3, #1
 800156a:	2120      	movs	r1, #32
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff64 	bl	800143a <hts221_read_reg>
 8001572:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	7a3b      	ldrb	r3, [r7, #8]
 8001584:	f362 0382 	bfi	r3, r2, #2, #1
 8001588:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800158a:	f107 0208 	add.w	r2, r7, #8
 800158e:	2301      	movs	r3, #1
 8001590:	2120      	movs	r1, #32
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff69 	bl	800146a <hts221_write_reg>
 8001598:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80015ae:	f107 0208 	add.w	r2, r7, #8
 80015b2:	2302      	movs	r3, #2
 80015b4:	2128      	movs	r1, #40	; 0x28
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff3f 	bl	800143a <hts221_read_reg>
 80015bc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80015be:	7a7b      	ldrb	r3, [r7, #9]
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	7a3b      	ldrb	r3, [r7, #8]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b21a      	sxth	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	801a      	strh	r2, [r3, #0]
  return ret;
 80015e0:	68fb      	ldr	r3, [r7, #12]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2302      	movs	r3, #2
 80015fa:	212a      	movs	r1, #42	; 0x2a
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff1c 	bl	800143a <hts221_read_reg>
 8001602:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001604:	7a7b      	ldrb	r3, [r7, #9]
 8001606:	b21a      	sxth	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	b29b      	uxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b29a      	uxth	r2, r3
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21a      	sxth	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	801a      	strh	r2, [r3, #0]
  return ret;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800163a:	2301      	movs	r3, #1
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	210f      	movs	r1, #15
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fefa 	bl	800143a <hts221_read_reg>
 8001646:	60f8      	str	r0, [r7, #12]
  return ret;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	2301      	movs	r3, #1
 8001664:	2120      	movs	r1, #32
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fee7 	bl	800143a <hts221_read_reg>
 800166c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10f      	bne.n	8001694 <hts221_power_on_set+0x42>
    reg.pd = val;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	7a3b      	ldrb	r3, [r7, #8]
 800167e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001682:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	2301      	movs	r3, #1
 800168a:	2120      	movs	r1, #32
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff feec 	bl	800146a <hts221_write_reg>
 8001692:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80016a8:	f107 020b 	add.w	r2, r7, #11
 80016ac:	2301      	movs	r3, #1
 80016ae:	2130      	movs	r1, #48	; 0x30
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fec2 	bl	800143a <hts221_read_reg>
 80016b6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80016e4:	f107 020b 	add.w	r2, r7, #11
 80016e8:	2301      	movs	r3, #1
 80016ea:	2131      	movs	r1, #49	; 0x31
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fea4 	bl	800143a <hts221_read_reg>
 80016f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001720:	f107 020f 	add.w	r2, r7, #15
 8001724:	2301      	movs	r3, #1
 8001726:	2132      	movs	r1, #50	; 0x32
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fe86 	bl	800143a <hts221_read_reg>
 800172e:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d11b      	bne.n	800176e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001736:	f107 0210 	add.w	r2, r7, #16
 800173a:	2301      	movs	r3, #1
 800173c:	2135      	movs	r1, #53	; 0x35
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fe7b 	bl	800143a <hts221_read_reg>
 8001744:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001746:	7c3b      	ldrb	r3, [r7, #16]
 8001748:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800174c:	b2db      	uxtb	r3, r3
 800174e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	4413      	add	r3, r2
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001764:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800176e:	697b      	ldr	r3, [r7, #20]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001782:	f107 020f 	add.w	r2, r7, #15
 8001786:	2301      	movs	r3, #1
 8001788:	2133      	movs	r1, #51	; 0x33
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe55 	bl	800143a <hts221_read_reg>
 8001790:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11b      	bne.n	80017d0 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	2301      	movs	r3, #1
 800179e:	2135      	movs	r1, #53	; 0x35
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fe4a 	bl	800143a <hts221_read_reg>
 80017a6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80017a8:	7c3b      	ldrb	r3, [r7, #16]
 80017aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	4413      	add	r3, r2
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80017c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80017d0:	697b      	ldr	r3, [r7, #20]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	2302      	movs	r3, #2
 80017ea:	2136      	movs	r1, #54	; 0x36
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fe24 	bl	800143a <hts221_read_reg>
 80017f2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	7a3b      	ldrb	r3, [r7, #8]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001806:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800182c:	f107 0208 	add.w	r2, r7, #8
 8001830:	2302      	movs	r3, #2
 8001832:	213a      	movs	r1, #58	; 0x3a
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fe00 	bl	800143a <hts221_read_reg>
 800183a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29b      	uxth	r3, r3
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b29a      	uxth	r2, r3
 8001844:	7a3b      	ldrb	r3, [r7, #8]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800184e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001874:	f107 0208 	add.w	r2, r7, #8
 8001878:	2302      	movs	r3, #2
 800187a:	213c      	movs	r1, #60	; 0x3c
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fddc 	bl	800143a <hts221_read_reg>
 8001882:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001884:	7a7b      	ldrb	r3, [r7, #9]
 8001886:	b29b      	uxth	r3, r3
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b29a      	uxth	r2, r3
 800188c:	7a3b      	ldrb	r3, [r7, #8]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001896:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	2302      	movs	r3, #2
 80018c2:	213e      	movs	r1, #62	; 0x3e
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fdb8 	bl	800143a <hts221_read_reg>
 80018ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80018cc:	7a7b      	ldrb	r3, [r7, #9]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	7a3b      	ldrb	r3, [r7, #8]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80018de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d103      	bne.n	8001918 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e04d      	b.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	7b1a      	ldrb	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <LPS22HB_RegisterBusIO+0xc4>)
 8001954:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <LPS22HB_RegisterBusIO+0xc8>)
 800195a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e020      	b.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4798      	blx	r3
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e016      	b.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d112      	bne.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001998:	2301      	movs	r3, #1
 800199a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	461a      	mov	r2, r3
 80019a0:	2110      	movs	r1, #16
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f9df 	bl	8001d66 <LPS22HB_Write_Reg>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08002027 	.word	0x08002027
 80019c4:	080020ad 	.word	0x080020ad

080019c8 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 faca 	bl	8001f74 <LPS22HB_Initialize>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e004      	b.n	80019f6 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d111      	bne.n	8001a34 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f877 	bl	8001b04 <LPS22HB_PRESS_Disable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e00d      	b.n	8001a3e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f918 	bl	8001c58 <LPS22HB_TEMP_Disable>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e004      	b.n	8001a3e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	331c      	adds	r3, #28
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fcd0 	bl	80023fc <lps22hb_device_id_get>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e000      	b.n	8001a6a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <LPS22HB_GetCapabilities+0x44>)
 8001aa2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <LPS22HB_GetCapabilities+0x44>)
 8001aa8:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	42960000 	.word	0x42960000

08001abc <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e014      	b.n	8001afc <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f103 021c 	add.w	r2, r3, #28
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 fbd5 	bl	8002290 <lps22hb_data_rate_set>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e004      	b.n	8001afc <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e024      	b.n	8001b64 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11a      	bne.n	8001b5a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 021c 	add.w	r2, r3, #28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	332b      	adds	r3, #43	; 0x2b
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f000 fbd3 	bl	80022dc <lps22hb_data_rate_get>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	e010      	b.n	8001b64 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	331c      	adds	r3, #28
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fba1 	bl	8002290 <lps22hb_data_rate_set>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	e004      	b.n	8001b64 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f90f 	bl	8001d9c <LPS22HB_GetOutputDataRate>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d106      	bne.n	8001bac <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001b9e:	ed97 0a00 	vldr	s0, [r7]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f94e 	bl	8001e44 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	e005      	b.n	8001bb8 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001bac:	ed97 0a00 	vldr	s0, [r7]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f99f 	bl	8001ef4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001bb6:	4603      	mov	r3, r0
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	2204      	movs	r2, #4
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f007 fbc2 	bl	800935c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	331c      	adds	r3, #28
 8001bdc:	f107 020c 	add.w	r2, r7, #12
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fbbe 	bl	8002364 <lps22hb_pressure_raw_get>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 facc 	bl	8002194 <lps22hb_from_lsb_to_hpa>
 8001bfc:	eef0 7a40 	vmov.f32	s15, s0
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e014      	b.n	8001c50 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 021c 	add.w	r2, r3, #28
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f000 fb2b 	bl	8002290 <lps22hb_data_rate_set>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	e004      	b.n	8001c50 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e024      	b.n	8001cb8 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11a      	bne.n	8001cae <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f103 021c 	add.w	r2, r3, #28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	332b      	adds	r3, #43	; 0x2b
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f000 fb29 	bl	80022dc <lps22hb_data_rate_get>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	e010      	b.n	8001cb8 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	331c      	adds	r3, #28
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 faf7 	bl	8002290 <lps22hb_data_rate_set>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e004      	b.n	8001cb8 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f865 	bl	8001d9c <LPS22HB_GetOutputDataRate>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d106      	bne.n	8001d00 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001cf2:	ed97 0a00 	vldr	s0, [r7]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8a4 	bl	8001e44 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	e005      	b.n	8001d0c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001d00:	ed97 0a00 	vldr	s0, [r7]
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8f5 	bl	8001ef4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001d0a:	4603      	mov	r3, r0
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2202      	movs	r2, #2
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f007 fb18 	bl	800935c <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	331c      	adds	r3, #28
 8001d30:	f107 020c 	add.w	r2, r7, #12
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fb3d 	bl	80023b6 <lps22hb_temperature_raw_get>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e00a      	b.n	8001d5e <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8001d48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fa39 	bl	80021c4 <lps22hb_from_lsb_to_degc>
 8001d52:	eef0 7a40 	vmov.f32	s15, s0
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
 8001d72:	4613      	mov	r3, r2
 8001d74:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 001c 	add.w	r0, r3, #28
 8001d7c:	1cba      	adds	r2, r7, #2
 8001d7e:	78f9      	ldrb	r1, [r7, #3]
 8001d80:	2301      	movs	r3, #1
 8001d82:	f000 f9ee 	bl	8002162 <lps22hb_write_reg>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e000      	b.n	8001d94 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	331c      	adds	r3, #28
 8001dae:	f107 020b 	add.w	r2, r7, #11
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa91 	bl	80022dc <lps22hb_data_rate_get>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	e031      	b.n	8001e2a <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d829      	bhi.n	8001e20 <LPS22HB_GetOutputDataRate+0x84>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <LPS22HB_GetOutputDataRate+0x38>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001df7 	.word	0x08001df7
 8001ddc:	08001e01 	.word	0x08001e01
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	08001e19 	.word	0x08001e19
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
      break;
 8001df4:	e018      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dfc:	601a      	str	r2, [r3, #0]
      break;
 8001dfe:	e013      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <LPS22HB_GetOutputDataRate+0x98>)
 8001e04:	601a      	str	r2, [r3, #0]
      break;
 8001e06:	e00f      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LPS22HB_GetOutputDataRate+0x9c>)
 8001e0c:	601a      	str	r2, [r3, #0]
      break;
 8001e0e:	e00b      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <LPS22HB_GetOutputDataRate+0xa0>)
 8001e14:	601a      	str	r2, [r3, #0]
      break;
 8001e16:	e007      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <LPS22HB_GetOutputDataRate+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
      break;
 8001e1e:	e003      	b.n	8001e28 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	60fb      	str	r3, [r7, #12]
      break;
 8001e26:	bf00      	nop
  }

  return ret;
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	41200000 	.word	0x41200000
 8001e38:	41c80000 	.word	0x41c80000
 8001e3c:	42480000 	.word	0x42480000
 8001e40:	42960000 	.word	0x42960000

08001e44 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001e50:	edd7 7a00 	vldr	s15, [r7]
 8001e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d801      	bhi.n	8001e66 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e021      	b.n	8001eaa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001e66:	edd7 7a00 	vldr	s15, [r7]
 8001e6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d801      	bhi.n	8001e7c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e016      	b.n	8001eaa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001e7c:	edd7 7a00 	vldr	s15, [r7]
 8001e80:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d801      	bhi.n	8001e92 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e00b      	b.n	8001eaa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001e92:	edd7 7a00 	vldr	s15, [r7]
 8001e96:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ef0 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d801      	bhi.n	8001ea8 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e000      	b.n	8001eaa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001ea8:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001eaa:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	331c      	adds	r3, #28
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f9eb 	bl	8002290 <lps22hb_data_rate_set>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	e00f      	b.n	8001ee6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f103 021c 	add.w	r2, r3, #28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	332b      	adds	r3, #43	; 0x2b
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f000 fa02 	bl	80022dc <lps22hb_data_rate_get>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e000      	b.n	8001ee6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	42480000 	.word	0x42480000

08001ef4 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f00:	edd7 7a00 	vldr	s15, [r7]
 8001f04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d801      	bhi.n	8001f16 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e021      	b.n	8001f5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001f16:	edd7 7a00 	vldr	s15, [r7]
 8001f1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d801      	bhi.n	8001f2c <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e016      	b.n	8001f5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001f2c:	edd7 7a00 	vldr	s15, [r7]
 8001f30:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	d801      	bhi.n	8001f42 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e00b      	b.n	8001f5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001f42:	edd7 7a00 	vldr	s15, [r7]
 8001f46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001f70 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8001f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	d801      	bhi.n	8001f58 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e000      	b.n	8001f5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001f58:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	42480000 	.word	0x42480000

08001f74 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	331c      	adds	r3, #28
 8001f80:	2101      	movs	r1, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fa4b 	bl	800241e <lps22hb_low_power_set>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e044      	b.n	800201e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	331c      	adds	r3, #28
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f978 	bl	8002290 <lps22hb_data_rate_set>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e038      	b.n	800201e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	331c      	adds	r3, #28
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f946 	bl	8002244 <lps22hb_low_pass_filter_mode_set>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e02c      	b.n	800201e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f914 	bl	80021f8 <lps22hb_block_data_update_set>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e020      	b.n	800201e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	331c      	adds	r3, #28
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fa3d 	bl	800246a <lps22hb_auto_add_inc_set>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00e      	beq.n	8002014 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e010      	b.n	800201e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	331c      	adds	r3, #28
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fa31 	bl	800246a <lps22hb_auto_add_inc_set>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e004      	b.n	800201e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b089      	sub	sp, #36	; 0x24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	461a      	mov	r2, r3
 8002032:	460b      	mov	r3, r1
 8002034:	72fb      	strb	r3, [r7, #11]
 8002036:	4613      	mov	r3, r2
 8002038:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	83fb      	strh	r3, [r7, #30]
 800204e:	e018      	b.n	8002082 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	695c      	ldr	r4, [r3, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	7b1b      	ldrb	r3, [r3, #12]
 8002058:	b298      	uxth	r0, r3
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b29a      	uxth	r2, r3
 800205e:	8bfb      	ldrh	r3, [r7, #30]
 8002060:	4413      	add	r3, r2
 8002062:	b299      	uxth	r1, r3
 8002064:	8bfb      	ldrh	r3, [r7, #30]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	441a      	add	r2, r3
 800206a:	2301      	movs	r3, #1
 800206c:	47a0      	blx	r4
 800206e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e013      	b.n	80020a4 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	3301      	adds	r3, #1
 8002080:	83fb      	strh	r3, [r7, #30]
 8002082:	8bfa      	ldrh	r2, [r7, #30]
 8002084:	893b      	ldrh	r3, [r7, #8]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3e2      	bcc.n	8002050 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	e00a      	b.n	80020a4 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	695c      	ldr	r4, [r3, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	b298      	uxth	r0, r3
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	b299      	uxth	r1, r3
 800209c:	893b      	ldrh	r3, [r7, #8]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	47a0      	blx	r4
 80020a2:	4603      	mov	r3, r0
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	461a      	mov	r2, r3
 80020b8:	460b      	mov	r3, r1
 80020ba:	72fb      	strb	r3, [r7, #11]
 80020bc:	4613      	mov	r3, r2
 80020be:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d121      	bne.n	8002114 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	83fb      	strh	r3, [r7, #30]
 80020d4:	e018      	b.n	8002108 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	691c      	ldr	r4, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	7b1b      	ldrb	r3, [r3, #12]
 80020de:	b298      	uxth	r0, r3
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8bfb      	ldrh	r3, [r7, #30]
 80020e6:	4413      	add	r3, r2
 80020e8:	b299      	uxth	r1, r3
 80020ea:	8bfb      	ldrh	r3, [r7, #30]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	441a      	add	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	47a0      	blx	r4
 80020f4:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	e013      	b.n	800212a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002102:	8bfb      	ldrh	r3, [r7, #30]
 8002104:	3301      	adds	r3, #1
 8002106:	83fb      	strh	r3, [r7, #30]
 8002108:	8bfa      	ldrh	r2, [r7, #30]
 800210a:	893b      	ldrh	r3, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3e2      	bcc.n	80020d6 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	e00a      	b.n	800212a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	691c      	ldr	r4, [r3, #16]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	7b1b      	ldrb	r3, [r3, #12]
 800211c:	b298      	uxth	r0, r3
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	b299      	uxth	r1, r3
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	47a0      	blx	r4
 8002128:	4603      	mov	r3, r0
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}

08002132 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002132:	b590      	push	{r4, r7, lr}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	461a      	mov	r2, r3
 800213e:	460b      	mov	r3, r1
 8002140:	72fb      	strb	r3, [r7, #11]
 8002142:	4613      	mov	r3, r2
 8002144:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685c      	ldr	r4, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6898      	ldr	r0, [r3, #8]
 800214e:	893b      	ldrh	r3, [r7, #8]
 8002150:	7af9      	ldrb	r1, [r7, #11]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	47a0      	blx	r4
 8002156:	6178      	str	r0, [r7, #20]
  return ret;
 8002158:	697b      	ldr	r3, [r7, #20]
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}

08002162 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b087      	sub	sp, #28
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	461a      	mov	r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	72fb      	strb	r3, [r7, #11]
 8002172:	4613      	mov	r3, r2
 8002174:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681c      	ldr	r4, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6898      	ldr	r0, [r3, #8]
 800217e:	893b      	ldrh	r3, [r7, #8]
 8002180:	7af9      	ldrb	r1, [r7, #11]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	47a0      	blx	r4
 8002186:	6178      	str	r0, [r7, #20]
  return ret;
 8002188:	697b      	ldr	r3, [r7, #20]
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
	...

08002194 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021c0 <lps22hb_from_lsb_to_hpa+0x2c>
 80021aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	49800000 	.word	0x49800000

080021c4 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021f4 <lps22hb_from_lsb_to_degc+0x30>
 80021de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	42c80000 	.word	0x42c80000

080021f8 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002204:	f107 0208 	add.w	r2, r7, #8
 8002208:	2301      	movs	r3, #1
 800220a:	2110      	movs	r1, #16
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff90 	bl	8002132 <lps22hb_read_reg>
 8002212:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	7a3b      	ldrb	r3, [r7, #8]
 8002224:	f362 0341 	bfi	r3, r2, #1, #1
 8002228:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800222a:	f107 0208 	add.w	r2, r7, #8
 800222e:	2301      	movs	r3, #1
 8002230:	2110      	movs	r1, #16
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff95 	bl	8002162 <lps22hb_write_reg>
 8002238:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002250:	f107 0208 	add.w	r2, r7, #8
 8002254:	2301      	movs	r3, #1
 8002256:	2110      	movs	r1, #16
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff6a 	bl	8002132 <lps22hb_read_reg>
 800225e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	b2da      	uxtb	r2, r3
 800226e:	7a3b      	ldrb	r3, [r7, #8]
 8002270:	f362 0383 	bfi	r3, r2, #2, #2
 8002274:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002276:	f107 0208 	add.w	r2, r7, #8
 800227a:	2301      	movs	r3, #1
 800227c:	2110      	movs	r1, #16
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ff6f 	bl	8002162 <lps22hb_write_reg>
 8002284:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800229c:	f107 0208 	add.w	r2, r7, #8
 80022a0:	2301      	movs	r3, #1
 80022a2:	2110      	movs	r1, #16
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff44 	bl	8002132 <lps22hb_read_reg>
 80022aa:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	7a3b      	ldrb	r3, [r7, #8]
 80022bc:	f362 1306 	bfi	r3, r2, #4, #3
 80022c0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80022c2:	f107 0208 	add.w	r2, r7, #8
 80022c6:	2301      	movs	r3, #1
 80022c8:	2110      	movs	r1, #16
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff49 	bl	8002162 <lps22hb_write_reg>
 80022d0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80022e6:	f107 0208 	add.w	r2, r7, #8
 80022ea:	2301      	movs	r3, #1
 80022ec:	2110      	movs	r1, #16
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff1f 	bl	8002132 <lps22hb_read_reg>
 80022f4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80022f6:	7a3b      	ldrb	r3, [r7, #8]
 80022f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d826      	bhi.n	8002350 <lps22hb_data_rate_get+0x74>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <lps22hb_data_rate_get+0x2c>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002321 	.word	0x08002321
 800230c:	08002329 	.word	0x08002329
 8002310:	08002331 	.word	0x08002331
 8002314:	08002339 	.word	0x08002339
 8002318:	08002341 	.word	0x08002341
 800231c:	08002349 	.word	0x08002349
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
      break;
 8002326:	e017      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
      break;
 800232e:	e013      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
      break;
 8002336:	e00f      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2203      	movs	r2, #3
 800233c:	701a      	strb	r2, [r3, #0]
      break;
 800233e:	e00b      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
      break;
 8002346:	e007      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2205      	movs	r2, #5
 800234c:	701a      	strb	r2, [r3, #0]
      break;
 800234e:	e003      	b.n	8002358 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
      break;
 8002356:	bf00      	nop
  }

  return ret;
 8002358:	68fb      	ldr	r3, [r7, #12]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop

08002364 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800236e:	f107 0208 	add.w	r2, r7, #8
 8002372:	2303      	movs	r3, #3
 8002374:	2128      	movs	r1, #40	; 0x28
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fedb 	bl	8002132 <lps22hb_read_reg>
 800237c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800237e:	7abb      	ldrb	r3, [r7, #10]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	7a7a      	ldrb	r2, [r7, #9]
 800238e:	441a      	add	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	7a3a      	ldrb	r2, [r7, #8]
 800239c:	441a      	add	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	601a      	str	r2, [r3, #0]
  return ret;
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80023c0:	f107 0208 	add.w	r2, r7, #8
 80023c4:	2302      	movs	r3, #2
 80023c6:	212b      	movs	r1, #43	; 0x2b
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff feb2 	bl	8002132 <lps22hb_read_reg>
 80023ce:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	7a3b      	ldrb	r3, [r7, #8]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b21a      	sxth	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	801a      	strh	r2, [r3, #0]
  return ret;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002406:	2301      	movs	r3, #1
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	210f      	movs	r1, #15
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff fe90 	bl	8002132 <lps22hb_read_reg>
 8002412:	60f8      	str	r0, [r7, #12]
  return ret;
 8002414:	68fb      	ldr	r3, [r7, #12]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 800242a:	f107 0208 	add.w	r2, r7, #8
 800242e:	2301      	movs	r3, #1
 8002430:	211a      	movs	r1, #26
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fe7d 	bl	8002132 <lps22hb_read_reg>
 8002438:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	7a3b      	ldrb	r3, [r7, #8]
 800244a:	f362 0300 	bfi	r3, r2, #0, #1
 800244e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002450:	f107 0208 	add.w	r2, r7, #8
 8002454:	2301      	movs	r3, #1
 8002456:	211a      	movs	r1, #26
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe82 	bl	8002162 <lps22hb_write_reg>
 800245e:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	2301      	movs	r3, #1
 800247c:	2111      	movs	r1, #17
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fe57 	bl	8002132 <lps22hb_read_reg>
 8002484:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	7a3b      	ldrb	r3, [r7, #8]
 8002496:	f362 1304 	bfi	r3, r2, #4, #1
 800249a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800249c:	f107 0208 	add.w	r2, r7, #8
 80024a0:	2301      	movs	r3, #1
 80024a2:	2111      	movs	r1, #17
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fe5c 	bl	8002162 <lps22hb_write_reg>
 80024aa:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e04d      	b.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	7b1a      	ldrb	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002510:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002516:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e020      	b.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4798      	blx	r3
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e016      	b.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d112      	bne.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002554:	2301      	movs	r3, #1
 8002556:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	461a      	mov	r2, r3
 800255c:	2123      	movs	r1, #35	; 0x23
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fb55 	bl	8002c0e <LSM303AGR_ACC_Write_Reg>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	e000      	b.n	8002572 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002570:	68fb      	ldr	r3, [r7, #12]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	0800341d 	.word	0x0800341d
 8002580:	0800347f 	.word	0x0800347f

08002584 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	331c      	adds	r3, #28
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f001 f94a 	bl	800382c <lsm303agr_xl_block_data_update_set>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e02c      	b.n	80025fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	331c      	adds	r3, #28
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 faed 	bl	8003b8a <lsm303agr_xl_fifo_mode_set>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e020      	b.n	80025fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2205      	movs	r2, #5
 80025c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	331c      	adds	r3, #28
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f84e 	bl	800366c <lsm303agr_xl_data_rate_set>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e010      	b.n	80025fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	331c      	adds	r3, #28
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f8c4 	bl	8003770 <lsm303agr_xl_full_scale_set>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
 80025f2:	e004      	b.n	80025fe <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f87c 	bl	800270c <LSM303AGR_ACC_Disable>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e008      	b.n	8002632 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	331c      	adds	r3, #28
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f001 fa55 	bl	8003afa <lsm303agr_xl_device_id_get>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	e000      	b.n	800265e <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2200      	movs	r2, #0
 8002682:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2210      	movs	r2, #16
 8002694:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80026a8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	43c80000 	.word	0x43c80000

080026c4 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e014      	b.n	8002704 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f103 021c 	add.w	r2, r3, #28
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f000 ffbf 	bl	800366c <lsm303agr_xl_data_rate_set>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	e004      	b.n	8002704 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e01f      	b.n	8002762 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 021c 	add.w	r2, r3, #28
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	332a      	adds	r3, #42	; 0x2a
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 ffc2 	bl	80036b8 <lsm303agr_xl_data_rate_get>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e010      	b.n	8002762 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	331c      	adds	r3, #28
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ff90 	bl	800366c <lsm303agr_xl_data_rate_set>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e004      	b.n	8002762 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	331c      	adds	r3, #28
 800277c:	f107 020b 	add.w	r2, r7, #11
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f000 ff3e 	bl	8003604 <lsm303agr_xl_operating_mode_get>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295
 8002792:	e031      	b.n	80027f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d01a      	beq.n	80027d0 <LSM303AGR_ACC_GetSensitivity+0x66>
 800279a:	2b02      	cmp	r3, #2
 800279c:	dc22      	bgt.n	80027e4 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d00a      	beq.n	80027bc <LSM303AGR_ACC_GetSensitivity+0x52>
 80027a6:	e01d      	b.n	80027e4 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fca8 	bl	8003100 <LSM303AGR_ACC_GetSensitivityHR>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e01d      	b.n	80027f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fce4 	bl	800318c <LSM303AGR_ACC_GetSensitivityNM>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	e013      	b.n	80027f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd20 	bl	8003218 <LSM303AGR_ACC_GetSensitivityLP>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	e009      	b.n	80027f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	60fb      	str	r3, [r7, #12]
      break;
 80027ea:	e004      	b.n	80027f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027ec:	bf00      	nop
 80027ee:	e002      	b.n	80027f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80027f4:	bf00      	nop
  }

  return ret;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	331c      	adds	r3, #28
 8002812:	f107 020b 	add.w	r2, r7, #11
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fef3 	bl	8003604 <lsm303agr_xl_operating_mode_get>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	e09d      	b.n	8002966 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	331c      	adds	r3, #28
 800282e:	f107 020a 	add.w	r2, r7, #10
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f000 ff3f 	bl	80036b8 <lsm303agr_xl_data_rate_get>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e08f      	b.n	8002966 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d147      	bne.n	80028dc <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 800284c:	7abb      	ldrb	r3, [r7, #10]
 800284e:	2b09      	cmp	r3, #9
 8002850:	d840      	bhi.n	80028d4 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002881 	.word	0x08002881
 800285c:	0800288b 	.word	0x0800288b
 8002860:	08002895 	.word	0x08002895
 8002864:	0800289d 	.word	0x0800289d
 8002868:	080028a5 	.word	0x080028a5
 800286c:	080028ad 	.word	0x080028ad
 8002870:	080028b5 	.word	0x080028b5
 8002874:	080028bd 	.word	0x080028bd
 8002878:	080028c5 	.word	0x080028c5
 800287c:	080028cd 	.word	0x080028cd
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
        break;
 8002888:	e06c      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002890:	601a      	str	r2, [r3, #0]
        break;
 8002892:	e067      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4a36      	ldr	r2, [pc, #216]	; (8002970 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002898:	601a      	str	r2, [r3, #0]
        break;
 800289a:	e063      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80028a0:	601a      	str	r2, [r3, #0]
        break;
 80028a2:	e05f      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4a34      	ldr	r2, [pc, #208]	; (8002978 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80028a8:	601a      	str	r2, [r3, #0]
        break;
 80028aa:	e05b      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80028b0:	601a      	str	r2, [r3, #0]
        break;
 80028b2:	e057      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80028b8:	601a      	str	r2, [r3, #0]
        break;
 80028ba:	e053      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80028c0:	601a      	str	r2, [r3, #0]
        break;
 80028c2:	e04f      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4a30      	ldr	r2, [pc, #192]	; (8002988 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80028c8:	601a      	str	r2, [r3, #0]
        break;
 80028ca:	e04b      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4a2f      	ldr	r2, [pc, #188]	; (800298c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80028d0:	601a      	str	r2, [r3, #0]
        break;
 80028d2:	e047      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e043      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80028dc:	7abb      	ldrb	r3, [r7, #10]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d83c      	bhi.n	800295c <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002911 	.word	0x08002911
 80028ec:	0800291b 	.word	0x0800291b
 80028f0:	08002925 	.word	0x08002925
 80028f4:	0800292d 	.word	0x0800292d
 80028f8:	08002935 	.word	0x08002935
 80028fc:	0800293d 	.word	0x0800293d
 8002900:	08002945 	.word	0x08002945
 8002904:	0800294d 	.word	0x0800294d
 8002908:	0800295d 	.word	0x0800295d
 800290c:	08002955 	.word	0x08002955
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
        break;
 8002918:	e024      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002920:	601a      	str	r2, [r3, #0]
        break;
 8002922:	e01f      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002928:	601a      	str	r2, [r3, #0]
        break;
 800292a:	e01b      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4a11      	ldr	r2, [pc, #68]	; (8002974 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002930:	601a      	str	r2, [r3, #0]
        break;
 8002932:	e017      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002938:	601a      	str	r2, [r3, #0]
        break;
 800293a:	e013      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4a0f      	ldr	r2, [pc, #60]	; (800297c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002940:	601a      	str	r2, [r3, #0]
        break;
 8002942:	e00f      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002948:	601a      	str	r2, [r3, #0]
        break;
 800294a:	e00b      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002950:	601a      	str	r2, [r3, #0]
        break;
 8002952:	e007      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002958:	601a      	str	r2, [r3, #0]
        break;
 800295a:	e003      	b.n	8002964 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	60fb      	str	r3, [r7, #12]
        break;
 8002962:	bf00      	nop
    }
  }

  return ret;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	41200000 	.word	0x41200000
 8002974:	41c80000 	.word	0x41c80000
 8002978:	42480000 	.word	0x42480000
 800297c:	42c80000 	.word	0x42c80000
 8002980:	43480000 	.word	0x43480000
 8002984:	43c80000 	.word	0x43c80000
 8002988:	44ca8000 	.word	0x44ca8000
 800298c:	45a80000 	.word	0x45a80000
 8002990:	44a80000 	.word	0x44a80000

08002994 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80029aa:	ed97 0a00 	vldr	s0, [r7]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fc78 	bl	80032a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	e005      	b.n	80029c4 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80029b8:	ed97 0a00 	vldr	s0, [r7]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fcd3 	bl	8003368 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80029c2:	4603      	mov	r3, r0
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	331c      	adds	r3, #28
 80029de:	f107 020b 	add.w	r2, r7, #11
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fee9 	bl	80037bc <lsm303agr_xl_full_scale_get>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	e023      	b.n	8002a3e <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d81b      	bhi.n	8002a34 <LSM303AGR_ACC_GetFullScale+0x68>
 80029fc:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <LSM303AGR_ACC_GetFullScale+0x38>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a2d 	.word	0x08002a2d
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
      break;
 8002a1a:	e00f      	b.n	8002a3c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	601a      	str	r2, [r3, #0]
      break;
 8002a22:	e00b      	b.n	8002a3c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2208      	movs	r2, #8
 8002a28:	601a      	str	r2, [r3, #0]
      break;
 8002a2a:	e007      	b.n	8002a3c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	601a      	str	r2, [r3, #0]
      break;
 8002a32:	e003      	b.n	8002a3c <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	60fb      	str	r3, [r7, #12]
      break;
 8002a3a:	bf00      	nop
  }

  return ret;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop

08002a48 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	dd0b      	ble.n	8002a70 <LSM303AGR_ACC_SetFullScale+0x28>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	dd06      	ble.n	8002a6c <LSM303AGR_ACC_SetFullScale+0x24>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	dc01      	bgt.n	8002a68 <LSM303AGR_ACC_SetFullScale+0x20>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e004      	b.n	8002a72 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e002      	b.n	8002a72 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a70:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002a72:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	331c      	adds	r3, #28
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fe77 	bl	8003770 <lsm303agr_xl_full_scale_set>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	e000      	b.n	8002a90 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	331c      	adds	r3, #28
 8002aae:	f107 020f 	add.w	r2, r7, #15
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fda5 	bl	8003604 <lsm303agr_xl_operating_mode_get>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	e04a      	b.n	8002b5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d00c      	beq.n	8002ae6 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	dc0e      	bgt.n	8002aee <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d003      	beq.n	8002ae0 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002ad8:	e009      	b.n	8002aee <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002ada:	2310      	movs	r3, #16
 8002adc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ade:	e00a      	b.n	8002af6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002ae0:	2340      	movs	r3, #64	; 0x40
 8002ae2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ae4:	e007      	b.n	8002af6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aea:	83fb      	strh	r3, [r7, #30]
      break;
 8002aec:	e003      	b.n	8002af6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	61bb      	str	r3, [r7, #24]
      break;
 8002af4:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d101      	bne.n	8002b02 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	e02c      	b.n	8002b5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	331c      	adds	r3, #28
 8002b06:	f107 0210 	add.w	r2, r7, #16
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 feb3 	bl	8003878 <lsm303agr_acceleration_raw_get>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	e01e      	b.n	8002b5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002b1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002b32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b40:	b21a      	sxth	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002b46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	809a      	strh	r2, [r3, #4]

  return ret;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff8c 	bl	8002a98 <LSM303AGR_ACC_GetAxesRaw>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e03c      	b.n	8002c06 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fde9 	bl	800276a <LSM303AGR_ACC_GetSensitivity>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e030      	b.n	8002c06 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002ba4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bbc:	ee17 2a90 	vmov	r2, s15
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002bc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bdc:	ee17 2a90 	vmov	r2, s15
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002be4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bfc:	ee17 2a90 	vmov	r2, s15
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f103 001c 	add.w	r0, r3, #28
 8002c24:	1cba      	adds	r2, r7, #2
 8002c26:	78f9      	ldrb	r1, [r7, #3]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f000 fcd3 	bl	80035d4 <lsm303agr_write_reg>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	e000      	b.n	8002c3c <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e04b      	b.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7b1a      	ldrb	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002c9c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002ca2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e01e      	b.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4798      	blx	r3
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e014      	b.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	331c      	adds	r3, #28
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 ff75 	bl	8003bd6 <lsm303agr_mag_i2c_interface_set>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e000      	b.n	8002cfa <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	080034e1 	.word	0x080034e1
 8002d08:	08003543 	.word	0x08003543

08002d0c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	331c      	adds	r3, #28
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fe7c 	bl	8003a18 <lsm303agr_mag_block_data_update_set>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e028      	b.n	8002d7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	331c      	adds	r3, #28
 8002d30:	2102      	movs	r1, #2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fdeb 	bl	800390e <lsm303agr_mag_operating_mode_set>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e01c      	b.n	8002d7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	331c      	adds	r3, #28
 8002d48:	2103      	movs	r1, #3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fe05 	bl	800395a <lsm303agr_mag_data_rate_set>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	e010      	b.n	8002d7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	331c      	adds	r3, #28
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 feeb 	bl	8003b3e <lsm303agr_mag_self_test_set>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e004      	b.n	8002d7e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f874 	bl	8002e7c <LSM303AGR_MAG_Disable>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e004      	b.n	8002daa <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	331c      	adds	r3, #28
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 feaa 	bl	8003b1c <lsm303agr_mag_device_id_get>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e000      	b.n	8002dd6 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2232      	movs	r2, #50	; 0x32
 8002e12:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002e28:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	42c80000 	.word	0x42c80000

08002e3c <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e010      	b.n	8002e74 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	331c      	adds	r3, #28
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fd58 	bl	800390e <lsm303agr_mag_operating_mode_set>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	e004      	b.n	8002e74 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e010      	b.n	8002eb4 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	331c      	adds	r3, #28
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fd38 	bl	800390e <lsm303agr_mag_operating_mode_set>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	e004      	b.n	8002eb4 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002ecc:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	331c      	adds	r3, #28
 8002eee:	f107 020b 	add.w	r2, r7, #11
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fd57 	bl	80039a8 <lsm303agr_mag_data_rate_get>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	e023      	b.n	8002f4e <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d81b      	bhi.n	8002f44 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f2d 	.word	0x08002f2d
 8002f1c:	08002f35 	.word	0x08002f35
 8002f20:	08002f3d 	.word	0x08002f3d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002f28:	601a      	str	r2, [r3, #0]
      break;
 8002f2a:	e00f      	b.n	8002f4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002f30:	601a      	str	r2, [r3, #0]
      break;
 8002f32:	e00b      	b.n	8002f4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002f38:	601a      	str	r2, [r3, #0]
      break;
 8002f3a:	e007      	b.n	8002f4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002f40:	601a      	str	r2, [r3, #0]
      break;
 8002f42:	e003      	b.n	8002f4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	60fb      	str	r3, [r7, #12]
      break;
 8002f4a:	bf00      	nop
  }

  return ret;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	41200000 	.word	0x41200000
 8002f5c:	41a00000 	.word	0x41a00000
 8002f60:	42480000 	.word	0x42480000
 8002f64:	42c80000 	.word	0x42c80000

08002f68 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002f74:	edd7 7a00 	vldr	s15, [r7]
 8002f78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d801      	bhi.n	8002f8a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002f86:	2300      	movs	r3, #0
 8002f88:	e016      	b.n	8002fb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f8a:	edd7 7a00 	vldr	s15, [r7]
 8002f8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	d801      	bhi.n	8002fa0 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e00b      	b.n	8002fb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002fa0:	edd7 7a00 	vldr	s15, [r7]
 8002fa4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002fe0 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb0:	d801      	bhi.n	8002fb6 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e000      	b.n	8002fb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002fb6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002fb8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	331c      	adds	r3, #28
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fcc9 	bl	800395a <lsm303agr_mag_data_rate_set>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e000      	b.n	8002fd6 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	42480000 	.word	0x42480000

08002fe4 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2232      	movs	r2, #50	; 0x32
 8002ff2:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	331c      	adds	r3, #28
 8003028:	f107 0208 	add.w	r2, r7, #8
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd18 	bl	8003a64 <lsm303agr_magnetic_raw_get>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	e00c      	b.n	800305a <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003040:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003048:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003050:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	331c      	adds	r3, #28
 8003070:	f107 0210 	add.w	r2, r7, #16
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fcf4 	bl	8003a64 <lsm303agr_magnetic_raw_get>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e036      	b.n	80030f6 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff14 	bl	8002ebc <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003094:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ac:	ee17 2a90 	vmov	r2, s15
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80030b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030cc:	ee17 2a90 	vmov	r2, s15
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80030d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ec:	ee17 2a90 	vmov	r2, s15
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	331c      	adds	r3, #28
 8003112:	f107 020b 	add.w	r2, r7, #11
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fb4f 	bl	80037bc <lsm303agr_xl_full_scale_get>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	e023      	b.n	8003172 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d81b      	bhi.n	8003168 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003151 	.word	0x08003151
 8003140:	08003159 	.word	0x08003159
 8003144:	08003161 	.word	0x08003161
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4a0c      	ldr	r2, [pc, #48]	; (800317c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 800314c:	601a      	str	r2, [r3, #0]
      break;
 800314e:	e00f      	b.n	8003170 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003154:	601a      	str	r2, [r3, #0]
      break;
 8003156:	e00b      	b.n	8003170 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 800315c:	601a      	str	r2, [r3, #0]
      break;
 800315e:	e007      	b.n	8003170 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003164:	601a      	str	r2, [r3, #0]
      break;
 8003166:	e003      	b.n	8003170 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	60fb      	str	r3, [r7, #12]
      break;
 800316e:	bf00      	nop
  }

  return ret;
 8003170:	68fb      	ldr	r3, [r7, #12]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	3f7ae148 	.word	0x3f7ae148
 8003180:	3ff9999a 	.word	0x3ff9999a
 8003184:	4079999a 	.word	0x4079999a
 8003188:	413b851f 	.word	0x413b851f

0800318c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	331c      	adds	r3, #28
 800319e:	f107 020b 	add.w	r2, r7, #11
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fb09 	bl	80037bc <lsm303agr_xl_full_scale_get>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	e023      	b.n	80031fe <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d81b      	bhi.n	80031f4 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031d5 	.word	0x080031d5
 80031c8:	080031dd 	.word	0x080031dd
 80031cc:	080031e5 	.word	0x080031e5
 80031d0:	080031ed 	.word	0x080031ed
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80031d8:	601a      	str	r2, [r3, #0]
      break;
 80031da:	e00f      	b.n	80031fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80031e0:	601a      	str	r2, [r3, #0]
      break;
 80031e2:	e00b      	b.n	80031fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80031e8:	601a      	str	r2, [r3, #0]
      break;
 80031ea:	e007      	b.n	80031fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80031f0:	601a      	str	r2, [r3, #0]
      break;
 80031f2:	e003      	b.n	80031fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	60fb      	str	r3, [r7, #12]
      break;
 80031fa:	bf00      	nop
  }

  return ret;
 80031fc:	68fb      	ldr	r3, [r7, #12]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	4079999a 	.word	0x4079999a
 800320c:	40fa3d71 	.word	0x40fa3d71
 8003210:	417a147b 	.word	0x417a147b
 8003214:	423b999a 	.word	0x423b999a

08003218 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	331c      	adds	r3, #28
 800322a:	f107 020b 	add.w	r2, r7, #11
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fac3 	bl	80037bc <lsm303agr_xl_full_scale_get>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	e023      	b.n	800328a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d81b      	bhi.n	8003280 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	08003261 	.word	0x08003261
 8003254:	08003269 	.word	0x08003269
 8003258:	08003271 	.word	0x08003271
 800325c:	08003279 	.word	0x08003279
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003264:	601a      	str	r2, [r3, #0]
      break;
 8003266:	e00f      	b.n	8003288 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 800326c:	601a      	str	r2, [r3, #0]
      break;
 800326e:	e00b      	b.n	8003288 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4a0a      	ldr	r2, [pc, #40]	; (800329c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003274:	601a      	str	r2, [r3, #0]
      break;
 8003276:	e007      	b.n	8003288 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800327c:	601a      	str	r2, [r3, #0]
      break;
 800327e:	e003      	b.n	8003288 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	60fb      	str	r3, [r7, #12]
      break;
 8003286:	bf00      	nop
  }

  return ret;
 8003288:	68fb      	ldr	r3, [r7, #12]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	417a147b 	.word	0x417a147b
 8003298:	41fa147b 	.word	0x41fa147b
 800329c:	427a147b 	.word	0x427a147b
 80032a0:	433b947b 	.word	0x433b947b

080032a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d801      	bhi.n	80032c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e037      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032c6:	edd7 7a00 	vldr	s15, [r7]
 80032ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d6:	d801      	bhi.n	80032dc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80032d8:	2302      	movs	r3, #2
 80032da:	e02c      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032dc:	edd7 7a00 	vldr	s15, [r7]
 80032e0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d801      	bhi.n	80032f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e021      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032f2:	edd7 7a00 	vldr	s15, [r7]
 80032f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800335c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80032fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d801      	bhi.n	8003308 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003304:	2304      	movs	r3, #4
 8003306:	e016      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003308:	edd7 7a00 	vldr	s15, [r7]
 800330c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003360 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d801      	bhi.n	800331e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800331a:	2305      	movs	r3, #5
 800331c:	e00b      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800331e:	edd7 7a00 	vldr	s15, [r7]
 8003322:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003364 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	d801      	bhi.n	8003334 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003330:	2306      	movs	r3, #6
 8003332:	e000      	b.n	8003336 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003334:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003336:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	331c      	adds	r3, #28
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f993 	bl	800366c <lsm303agr_xl_data_rate_set>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	e000      	b.n	8003354 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	42480000 	.word	0x42480000
 8003360:	42c80000 	.word	0x42c80000
 8003364:	43480000 	.word	0x43480000

08003368 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d801      	bhi.n	800338a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003386:	2301      	movs	r3, #1
 8003388:	e037      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800338a:	edd7 7a00 	vldr	s15, [r7]
 800338e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	d801      	bhi.n	80033a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800339c:	2302      	movs	r3, #2
 800339e:	e02c      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033a0:	edd7 7a00 	vldr	s15, [r7]
 80033a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d801      	bhi.n	80033b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e021      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033b6:	edd7 7a00 	vldr	s15, [r7]
 80033ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003410 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	d801      	bhi.n	80033cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80033c8:	2304      	movs	r3, #4
 80033ca:	e016      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033cc:	edd7 7a00 	vldr	s15, [r7]
 80033d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003414 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80033d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d801      	bhi.n	80033e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80033de:	2305      	movs	r3, #5
 80033e0:	e00b      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033e2:	edd7 7a00 	vldr	s15, [r7]
 80033e6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003418 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	d801      	bhi.n	80033f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80033f4:	2306      	movs	r3, #6
 80033f6:	e000      	b.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80033f8:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	42480000 	.word	0x42480000
 8003414:	42c80000 	.word	0x42c80000
 8003418:	43480000 	.word	0x43480000

0800341c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	72fb      	strb	r3, [r7, #11]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10e      	bne.n	800345a <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	695c      	ldr	r4, [r3, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	7b1b      	ldrb	r3, [r3, #12]
 8003444:	b298      	uxth	r0, r3
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800344c:	b2db      	uxtb	r3, r3
 800344e:	b299      	uxth	r1, r3
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	47a0      	blx	r4
 8003456:	4603      	mov	r3, r0
 8003458:	e00d      	b.n	8003476 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	695c      	ldr	r4, [r3, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	7b1b      	ldrb	r3, [r3, #12]
 8003462:	b298      	uxth	r0, r3
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346a:	b2db      	uxtb	r3, r3
 800346c:	b299      	uxth	r1, r3
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	47a0      	blx	r4
 8003474:	4603      	mov	r3, r0
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}

0800347e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800347e:	b590      	push	{r4, r7, lr}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	461a      	mov	r2, r3
 800348a:	460b      	mov	r3, r1
 800348c:	72fb      	strb	r3, [r7, #11]
 800348e:	4613      	mov	r3, r2
 8003490:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10e      	bne.n	80034bc <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	691c      	ldr	r4, [r3, #16]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	7b1b      	ldrb	r3, [r3, #12]
 80034a6:	b298      	uxth	r0, r3
 80034a8:	7afb      	ldrb	r3, [r7, #11]
 80034aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b299      	uxth	r1, r3
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	47a0      	blx	r4
 80034b8:	4603      	mov	r3, r0
 80034ba:	e00d      	b.n	80034d8 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	691c      	ldr	r4, [r3, #16]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	7b1b      	ldrb	r3, [r3, #12]
 80034c4:	b298      	uxth	r0, r3
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	b299      	uxth	r1, r3
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	47a0      	blx	r4
 80034d6:	4603      	mov	r3, r0
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}

080034e0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	72fb      	strb	r3, [r7, #11]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10e      	bne.n	800351e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	695c      	ldr	r4, [r3, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	7b1b      	ldrb	r3, [r3, #12]
 8003508:	b298      	uxth	r0, r3
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003510:	b2db      	uxtb	r3, r3
 8003512:	b299      	uxth	r1, r3
 8003514:	893b      	ldrh	r3, [r7, #8]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	47a0      	blx	r4
 800351a:	4603      	mov	r3, r0
 800351c:	e00d      	b.n	800353a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	695c      	ldr	r4, [r3, #20]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	7b1b      	ldrb	r3, [r3, #12]
 8003526:	b298      	uxth	r0, r3
 8003528:	7afb      	ldrb	r3, [r7, #11]
 800352a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352e:	b2db      	uxtb	r3, r3
 8003530:	b299      	uxth	r1, r3
 8003532:	893b      	ldrh	r3, [r7, #8]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	47a0      	blx	r4
 8003538:	4603      	mov	r3, r0
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}

08003542 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003542:	b590      	push	{r4, r7, lr}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	461a      	mov	r2, r3
 800354e:	460b      	mov	r3, r1
 8003550:	72fb      	strb	r3, [r7, #11]
 8003552:	4613      	mov	r3, r2
 8003554:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	691c      	ldr	r4, [r3, #16]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	7b1b      	ldrb	r3, [r3, #12]
 800356a:	b298      	uxth	r0, r3
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003572:	b2db      	uxtb	r3, r3
 8003574:	b299      	uxth	r1, r3
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	47a0      	blx	r4
 800357c:	4603      	mov	r3, r0
 800357e:	e00d      	b.n	800359c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	691c      	ldr	r4, [r3, #16]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	7b1b      	ldrb	r3, [r3, #12]
 8003588:	b298      	uxth	r0, r3
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003590:	b2db      	uxtb	r3, r3
 8003592:	b299      	uxth	r1, r3
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	47a0      	blx	r4
 800359a:	4603      	mov	r3, r0
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	460b      	mov	r3, r1
 80035b2:	72fb      	strb	r3, [r7, #11]
 80035b4:	4613      	mov	r3, r2
 80035b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685c      	ldr	r4, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6898      	ldr	r0, [r3, #8]
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	7af9      	ldrb	r1, [r7, #11]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	47a0      	blx	r4
 80035c8:	6178      	str	r0, [r7, #20]
  return ret;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	461a      	mov	r2, r3
 80035e0:	460b      	mov	r3, r1
 80035e2:	72fb      	strb	r3, [r7, #11]
 80035e4:	4613      	mov	r3, r2
 80035e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681c      	ldr	r4, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6898      	ldr	r0, [r3, #8]
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	7af9      	ldrb	r1, [r7, #11]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	47a0      	blx	r4
 80035f8:	6178      	str	r0, [r7, #20]
  return ret;
 80035fa:	697b      	ldr	r3, [r7, #20]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800360e:	f107 020c 	add.w	r2, r7, #12
 8003612:	2301      	movs	r3, #1
 8003614:	2120      	movs	r1, #32
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ffc4 	bl	80035a4 <lsm303agr_read_reg>
 800361c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003624:	f107 0210 	add.w	r2, r7, #16
 8003628:	2301      	movs	r3, #1
 800362a:	2123      	movs	r1, #35	; 0x23
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ffb9 	bl	80035a4 <lsm303agr_read_reg>
 8003632:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003634:	7b3b      	ldrb	r3, [r7, #12]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2202      	movs	r2, #2
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e00c      	b.n	8003662 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003648:	7c3b      	ldrb	r3, [r7, #16]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e002      	b.n	8003662 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003662:	697b      	ldr	r3, [r7, #20]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003678:	f107 0208 	add.w	r2, r7, #8
 800367c:	2301      	movs	r3, #1
 800367e:	2120      	movs	r1, #32
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff8f 	bl	80035a4 <lsm303agr_read_reg>
 8003686:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	b2da      	uxtb	r2, r3
 8003696:	7a3b      	ldrb	r3, [r7, #8]
 8003698:	f362 1307 	bfi	r3, r2, #4, #4
 800369c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800369e:	f107 0208 	add.w	r2, r7, #8
 80036a2:	2301      	movs	r3, #1
 80036a4:	2120      	movs	r1, #32
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff94 	bl	80035d4 <lsm303agr_write_reg>
 80036ac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80036c2:	f107 0208 	add.w	r2, r7, #8
 80036c6:	2301      	movs	r3, #1
 80036c8:	2120      	movs	r1, #32
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff6a 	bl	80035a4 <lsm303agr_read_reg>
 80036d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80036d2:	7a3b      	ldrb	r3, [r7, #8]
 80036d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b09      	cmp	r3, #9
 80036dc:	d83e      	bhi.n	800375c <lsm303agr_xl_data_rate_get+0xa4>
 80036de:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <lsm303agr_xl_data_rate_get+0x2c>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	08003715 	.word	0x08003715
 80036ec:	0800371d 	.word	0x0800371d
 80036f0:	08003725 	.word	0x08003725
 80036f4:	0800372d 	.word	0x0800372d
 80036f8:	08003735 	.word	0x08003735
 80036fc:	0800373d 	.word	0x0800373d
 8003700:	08003745 	.word	0x08003745
 8003704:	0800374d 	.word	0x0800374d
 8003708:	08003755 	.word	0x08003755
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
      break;
 8003712:	e027      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
      break;
 800371a:	e023      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
      break;
 8003722:	e01f      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2203      	movs	r2, #3
 8003728:	701a      	strb	r2, [r3, #0]
      break;
 800372a:	e01b      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2204      	movs	r2, #4
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	e017      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2205      	movs	r2, #5
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	e013      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2206      	movs	r2, #6
 8003740:	701a      	strb	r2, [r3, #0]
      break;
 8003742:	e00f      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2207      	movs	r2, #7
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e00b      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2208      	movs	r2, #8
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	e007      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2209      	movs	r2, #9
 8003758:	701a      	strb	r2, [r3, #0]
      break;
 800375a:	e003      	b.n	8003764 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
      break;
 8003762:	bf00      	nop
  }

  return ret;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800377c:	f107 0208 	add.w	r2, r7, #8
 8003780:	2301      	movs	r3, #1
 8003782:	2123      	movs	r1, #35	; 0x23
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff0d 	bl	80035a4 <lsm303agr_read_reg>
 800378a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	b2da      	uxtb	r2, r3
 800379a:	7a3b      	ldrb	r3, [r7, #8]
 800379c:	f362 1305 	bfi	r3, r2, #4, #2
 80037a0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80037a2:	f107 0208 	add.w	r2, r7, #8
 80037a6:	2301      	movs	r3, #1
 80037a8:	2123      	movs	r1, #35	; 0x23
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff12 	bl	80035d4 <lsm303agr_write_reg>
 80037b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80037c6:	f107 0208 	add.w	r2, r7, #8
 80037ca:	2301      	movs	r3, #1
 80037cc:	2123      	movs	r1, #35	; 0x23
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fee8 	bl	80035a4 <lsm303agr_read_reg>
 80037d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 80037d6:	7a3b      	ldrb	r3, [r7, #8]
 80037d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d81a      	bhi.n	8003818 <lsm303agr_xl_full_scale_get+0x5c>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <lsm303agr_xl_full_scale_get+0x2c>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003801 	.word	0x08003801
 80037f0:	08003809 	.word	0x08003809
 80037f4:	08003811 	.word	0x08003811
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
      break;
 80037fe:	e00f      	b.n	8003820 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
      break;
 8003806:	e00b      	b.n	8003820 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2202      	movs	r2, #2
 800380c:	701a      	strb	r2, [r3, #0]
      break;
 800380e:	e007      	b.n	8003820 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	701a      	strb	r2, [r3, #0]
      break;
 8003816:	e003      	b.n	8003820 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
      break;
 800381e:	bf00      	nop
  }

  return ret;
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop

0800382c <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003838:	f107 0208 	add.w	r2, r7, #8
 800383c:	2301      	movs	r3, #1
 800383e:	2123      	movs	r1, #35	; 0x23
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff feaf 	bl	80035a4 <lsm303agr_read_reg>
 8003846:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	7a3b      	ldrb	r3, [r7, #8]
 8003858:	f362 13c7 	bfi	r3, r2, #7, #1
 800385c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800385e:	f107 0208 	add.w	r2, r7, #8
 8003862:	2301      	movs	r3, #1
 8003864:	2123      	movs	r1, #35	; 0x23
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff feb4 	bl	80035d4 <lsm303agr_write_reg>
 800386c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003882:	f107 020c 	add.w	r2, r7, #12
 8003886:	2306      	movs	r3, #6
 8003888:	2128      	movs	r1, #40	; 0x28
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fe8a 	bl	80035a4 <lsm303agr_read_reg>
 8003890:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	b21a      	sxth	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	7b3b      	ldrb	r3, [r7, #12]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	3302      	adds	r3, #2
 80038ba:	b212      	sxth	r2, r2
 80038bc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	3302      	adds	r3, #2
 80038c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3302      	adds	r3, #2
 80038d8:	b212      	sxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80038dc:	7c7a      	ldrb	r2, [r7, #17]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	b212      	sxth	r2, r2
 80038e4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3304      	adds	r3, #4
 80038ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	7c3b      	ldrb	r3, [r7, #16]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	3304      	adds	r3, #4
 8003900:	b212      	sxth	r2, r2
 8003902:	801a      	strh	r2, [r3, #0]
  return ret;
 8003904:	697b      	ldr	r3, [r7, #20]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800391a:	f107 0208 	add.w	r2, r7, #8
 800391e:	2301      	movs	r3, #1
 8003920:	2160      	movs	r1, #96	; 0x60
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fe3e 	bl	80035a4 <lsm303agr_read_reg>
 8003928:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	b2da      	uxtb	r2, r3
 8003938:	7a3b      	ldrb	r3, [r7, #8]
 800393a:	f362 0301 	bfi	r3, r2, #0, #2
 800393e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003940:	f107 0208 	add.w	r2, r7, #8
 8003944:	2301      	movs	r3, #1
 8003946:	2160      	movs	r1, #96	; 0x60
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe43 	bl	80035d4 <lsm303agr_write_reg>
 800394e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003966:	f107 0208 	add.w	r2, r7, #8
 800396a:	2301      	movs	r3, #1
 800396c:	2160      	movs	r1, #96	; 0x60
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fe18 	bl	80035a4 <lsm303agr_read_reg>
 8003974:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	b2da      	uxtb	r2, r3
 8003984:	7a3b      	ldrb	r3, [r7, #8]
 8003986:	f362 0383 	bfi	r3, r2, #2, #2
 800398a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800398c:	f107 0208 	add.w	r2, r7, #8
 8003990:	2301      	movs	r3, #1
 8003992:	2160      	movs	r1, #96	; 0x60
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fe1d 	bl	80035d4 <lsm303agr_write_reg>
 800399a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80039b2:	f107 0208 	add.w	r2, r7, #8
 80039b6:	2301      	movs	r3, #1
 80039b8:	2160      	movs	r1, #96	; 0x60
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fdf2 	bl	80035a4 <lsm303agr_read_reg>
 80039c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 80039c2:	7a3b      	ldrb	r3, [r7, #8]
 80039c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d81a      	bhi.n	8003a04 <lsm303agr_mag_data_rate_get+0x5c>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <lsm303agr_mag_data_rate_get+0x2c>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	080039f5 	.word	0x080039f5
 80039e0:	080039fd 	.word	0x080039fd
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e00f      	b.n	8003a0c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
      break;
 80039f2:	e00b      	b.n	8003a0c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2202      	movs	r2, #2
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e007      	b.n	8003a0c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2203      	movs	r2, #3
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	e003      	b.n	8003a0c <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	bf00      	nop
  }

  return ret;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003a24:	f107 0208 	add.w	r2, r7, #8
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2162      	movs	r1, #98	; 0x62
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fdb9 	bl	80035a4 <lsm303agr_read_reg>
 8003a32:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	7a3b      	ldrb	r3, [r7, #8]
 8003a44:	f362 1304 	bfi	r3, r2, #4, #1
 8003a48:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003a4a:	f107 0208 	add.w	r2, r7, #8
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2162      	movs	r1, #98	; 0x62
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fdbe 	bl	80035d4 <lsm303agr_write_reg>
 8003a58:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003a6e:	f107 020c 	add.w	r2, r7, #12
 8003a72:	2306      	movs	r3, #6
 8003a74:	2168      	movs	r1, #104	; 0x68
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fd94 	bl	80035a4 <lsm303agr_read_reg>
 8003a7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003a7e:	7b7b      	ldrb	r3, [r7, #13]
 8003a80:	b21a      	sxth	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	7b3b      	ldrb	r3, [r7, #12]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b21a      	sxth	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	b212      	sxth	r2, r2
 8003aa8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	3302      	adds	r3, #2
 8003aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	b212      	sxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003ac8:	7c7a      	ldrb	r2, [r7, #17]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	b212      	sxth	r2, r2
 8003ad0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	7c3b      	ldrb	r3, [r7, #16]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	3304      	adds	r3, #4
 8003aec:	b212      	sxth	r2, r2
 8003aee:	801a      	strh	r2, [r3, #0]
  return ret;
 8003af0:	697b      	ldr	r3, [r7, #20]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003b04:	2301      	movs	r3, #1
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	210f      	movs	r1, #15
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fd4a 	bl	80035a4 <lsm303agr_read_reg>
 8003b10:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003b26:	2301      	movs	r3, #1
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	214f      	movs	r1, #79	; 0x4f
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fd39 	bl	80035a4 <lsm303agr_read_reg>
 8003b32:	60f8      	str	r0, [r7, #12]
  return ret;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b4a:	f107 0208 	add.w	r2, r7, #8
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2162      	movs	r1, #98	; 0x62
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fd26 	bl	80035a4 <lsm303agr_read_reg>
 8003b58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10f      	bne.n	8003b80 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	7a3b      	ldrb	r3, [r7, #8]
 8003b6a:	f362 0341 	bfi	r3, r2, #1, #1
 8003b6e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2301      	movs	r3, #1
 8003b76:	2162      	movs	r1, #98	; 0x62
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fd2b 	bl	80035d4 <lsm303agr_write_reg>
 8003b7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003b96:	f107 0208 	add.w	r2, r7, #8
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	212e      	movs	r1, #46	; 0x2e
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fd00 	bl	80035a4 <lsm303agr_read_reg>
 8003ba4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	7a3b      	ldrb	r3, [r7, #8]
 8003bb6:	f362 1387 	bfi	r3, r2, #6, #2
 8003bba:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003bbc:	f107 0208 	add.w	r2, r7, #8
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	212e      	movs	r1, #46	; 0x2e
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fd05 	bl	80035d4 <lsm303agr_write_reg>
 8003bca:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003be2:	f107 0208 	add.w	r2, r7, #8
 8003be6:	2301      	movs	r3, #1
 8003be8:	2162      	movs	r1, #98	; 0x62
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fcda 	bl	80035a4 <lsm303agr_read_reg>
 8003bf0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	7a3b      	ldrb	r3, [r7, #8]
 8003c02:	f362 1345 	bfi	r3, r2, #5, #1
 8003c06:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003c08:	f107 0208 	add.w	r2, r7, #8
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	2162      	movs	r1, #98	; 0x62
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fcdf 	bl	80035d4 <lsm303agr_write_reg>
 8003c16:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003c18:	68fb      	ldr	r3, [r7, #12]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e04d      	b.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	7b1a      	ldrb	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <LSM6DSL_RegisterBusIO+0xc4>)
 8003c7c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <LSM6DSL_RegisterBusIO+0xc8>)
 8003c82:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e020      	b.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4798      	blx	r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e016      	b.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d112      	bne.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2112      	movs	r1, #18
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fd2d 	bl	800472a <LSM6DSL_Write_Reg>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	08004b99 	.word	0x08004b99
 8003cec:	08004bcf 	.word	0x08004bcf

08003cf0 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	331c      	adds	r3, #28
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 fa59 	bl	80051b6 <lsm6dsl_auto_increment_set>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e054      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	331c      	adds	r3, #28
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 f980 	bl	800501c <lsm6dsl_block_data_update_set>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	e048      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	331c      	adds	r3, #28
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 fa67 	bl	8005202 <lsm6dsl_fifo_mode_set>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e03c      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	331c      	adds	r3, #28
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 ffe6 	bl	8004d20 <lsm6dsl_xl_data_rate_set>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e02c      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	331c      	adds	r3, #28
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff7c 	bl	8004c64 <lsm6dsl_xl_full_scale_set>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e020      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	331c      	adds	r3, #28
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f8c0 	bl	8004f0c <lsm6dsl_gy_data_rate_set>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e010      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	331c      	adds	r3, #28
 8003d9c:	2106      	movs	r1, #6
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f84c 	bl	8004e3c <lsm6dsl_gy_full_scale_set>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e004      	b.n	8003dba <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f888 	bl	8003ee0 <LSM6DSL_ACC_Disable>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e015      	b.n	8003e08 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa9a 	bl	8004316 <LSM6DSL_GYRO_Disable>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	e00c      	b.n	8003e08 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	331c      	adds	r3, #28
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 f9b7 	bl	8005194 <lsm6dsl_device_id_get>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	e000      	b.n	8003e34 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e64:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <LSM6DSL_GetCapabilities+0x58>)
 8003e76:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <LSM6DSL_GetCapabilities+0x58>)
 8003e7c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	45d02000 	.word	0x45d02000

08003e98 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e014      	b.n	8003ed8 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 021c 	add.w	r2, r3, #28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f000 ff2f 	bl	8004d20 <lsm6dsl_xl_data_rate_set>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	e004      	b.n	8003ed8 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e01f      	b.n	8003f36 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 021c 	add.w	r2, r3, #28
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	332b      	adds	r3, #43	; 0x2b
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 ff32 	bl	8004d6c <lsm6dsl_xl_data_rate_get>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e010      	b.n	8003f36 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	331c      	adds	r3, #28
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 ff00 	bl	8004d20 <lsm6dsl_xl_data_rate_set>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e004      	b.n	8003f36 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	331c      	adds	r3, #28
 8003f52:	f107 020b 	add.w	r2, r7, #11
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fea9 	bl	8004cb0 <lsm6dsl_xl_full_scale_get>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e023      	b.n	8003fb2 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d81b      	bhi.n	8003fa8 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003f91 	.word	0x08003f91
 8003f84:	08003f99 	.word	0x08003f99
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003f8c:	601a      	str	r2, [r3, #0]
      break;
 8003f8e:	e00f      	b.n	8003fb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003f94:	601a      	str	r2, [r3, #0]
      break;
 8003f96:	e00b      	b.n	8003fb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003f9c:	601a      	str	r2, [r3, #0]
      break;
 8003f9e:	e007      	b.n	8003fb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003fa4:	601a      	str	r2, [r3, #0]
      break;
 8003fa6:	e003      	b.n	8003fb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fac:	60fb      	str	r3, [r7, #12]
      break;
 8003fae:	bf00      	nop
  }

  return ret;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	3d79db23 	.word	0x3d79db23
 8003fc0:	3df9db23 	.word	0x3df9db23
 8003fc4:	3e79db23 	.word	0x3e79db23
 8003fc8:	3ef9db23 	.word	0x3ef9db23

08003fcc <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	331c      	adds	r3, #28
 8003fde:	f107 020b 	add.w	r2, r7, #11
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fec1 	bl	8004d6c <lsm6dsl_xl_data_rate_get>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	e054      	b.n	80040a0 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	2b0b      	cmp	r3, #11
 8003ffa:	d84c      	bhi.n	8004096 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004035 	.word	0x08004035
 8004008:	08004047 	.word	0x08004047
 800400c:	0800404f 	.word	0x0800404f
 8004010:	08004057 	.word	0x08004057
 8004014:	0800405f 	.word	0x0800405f
 8004018:	08004067 	.word	0x08004067
 800401c:	0800406f 	.word	0x0800406f
 8004020:	08004077 	.word	0x08004077
 8004024:	0800407f 	.word	0x0800407f
 8004028:	08004087 	.word	0x08004087
 800402c:	0800408f 	.word	0x0800408f
 8004030:	0800403f 	.word	0x0800403f
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
      break;
 800403c:	e02f      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004042:	601a      	str	r2, [r3, #0]
      break;
 8004044:	e02b      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800404a:	601a      	str	r2, [r3, #0]
      break;
 800404c:	e027      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004052:	601a      	str	r2, [r3, #0]
      break;
 8004054:	e023      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800405a:	601a      	str	r2, [r3, #0]
      break;
 800405c:	e01f      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004062:	601a      	str	r2, [r3, #0]
      break;
 8004064:	e01b      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800406a:	601a      	str	r2, [r3, #0]
      break;
 800406c:	e017      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004072:	601a      	str	r2, [r3, #0]
      break;
 8004074:	e013      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800407a:	601a      	str	r2, [r3, #0]
      break;
 800407c:	e00f      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004082:	601a      	str	r2, [r3, #0]
      break;
 8004084:	e00b      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	4a10      	ldr	r2, [pc, #64]	; (80040cc <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800408a:	601a      	str	r2, [r3, #0]
      break;
 800408c:	e007      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004092:	601a      	str	r2, [r3, #0]
      break;
 8004094:	e003      	b.n	800409e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	60fb      	str	r3, [r7, #12]
      break;
 800409c:	bf00      	nop
  }

  return ret;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	3fcccccd 	.word	0x3fcccccd
 80040ac:	41480000 	.word	0x41480000
 80040b0:	41d00000 	.word	0x41d00000
 80040b4:	42500000 	.word	0x42500000
 80040b8:	42d00000 	.word	0x42d00000
 80040bc:	43500000 	.word	0x43500000
 80040c0:	43d00000 	.word	0x43d00000
 80040c4:	44504000 	.word	0x44504000
 80040c8:	44cf8000 	.word	0x44cf8000
 80040cc:	45502000 	.word	0x45502000
 80040d0:	45d02000 	.word	0x45d02000

080040d4 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d106      	bne.n	80040f8 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80040ea:	ed97 0a00 	vldr	s0, [r7]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fb36 	bl	8004760 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	e005      	b.n	8004104 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80040f8:	ed97 0a00 	vldr	s0, [r7]
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fbbb 	bl	8004878 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004102:	4603      	mov	r3, r0
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	331c      	adds	r3, #28
 800411e:	f107 020b 	add.w	r2, r7, #11
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fdc3 	bl	8004cb0 <lsm6dsl_xl_full_scale_get>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	e023      	b.n	800417e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d81b      	bhi.n	8004174 <LSM6DSL_ACC_GetFullScale+0x68>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <LSM6DSL_ACC_GetFullScale+0x38>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	0800416d 	.word	0x0800416d
 800414c:	0800415d 	.word	0x0800415d
 8004150:	08004165 	.word	0x08004165
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
      break;
 800415a:	e00f      	b.n	800417c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	601a      	str	r2, [r3, #0]
      break;
 8004162:	e00b      	b.n	800417c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2208      	movs	r2, #8
 8004168:	601a      	str	r2, [r3, #0]
      break;
 800416a:	e007      	b.n	800417c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	601a      	str	r2, [r3, #0]
      break;
 8004172:	e003      	b.n	800417c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	60fb      	str	r3, [r7, #12]
      break;
 800417a:	bf00      	nop
  }

  return ret;
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b02      	cmp	r3, #2
 8004196:	dd0b      	ble.n	80041b0 <LSM6DSL_ACC_SetFullScale+0x28>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	dd06      	ble.n	80041ac <LSM6DSL_ACC_SetFullScale+0x24>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	dc01      	bgt.n	80041a8 <LSM6DSL_ACC_SetFullScale+0x20>
 80041a4:	2303      	movs	r3, #3
 80041a6:	e004      	b.n	80041b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e002      	b.n	80041b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e000      	b.n	80041b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80041b0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80041b2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	331c      	adds	r3, #28
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd51 	bl	8004c64 <lsm6dsl_xl_full_scale_set>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e000      	b.n	80041d0 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	331c      	adds	r3, #28
 80041e6:	f107 0208 	add.w	r2, r7, #8
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 ff86 	bl	80050fe <lsm6dsl_acceleration_raw_get>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	e00c      	b.n	8004218 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004206:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800420e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	331c      	adds	r3, #28
 8004234:	f107 0210 	add.w	r2, r7, #16
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff5f 	bl	80050fe <lsm6dsl_acceleration_raw_get>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
 800424a:	e03c      	b.n	80042c6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fe74 	bl	8003f40 <LSM6DSL_ACC_GetSensitivity>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e030      	b.n	80042c6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004264:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004268:	ee07 3a90 	vmov	s15, r3
 800426c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004270:	edd7 7a03 	vldr	s15, [r7, #12]
 8004274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800427c:	ee17 2a90 	vmov	r2, s15
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004284:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004290:	edd7 7a03 	vldr	s15, [r7, #12]
 8004294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800429c:	ee17 2a90 	vmov	r2, s15
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80042a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042bc:	ee17 2a90 	vmov	r2, s15
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e014      	b.n	800430e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f103 021c 	add.w	r2, r3, #28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 fe0a 	bl	8004f0c <lsm6dsl_gy_data_rate_set>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e004      	b.n	800430e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e01f      	b.n	800436c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f103 021c 	add.w	r2, r3, #28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	332c      	adds	r3, #44	; 0x2c
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 fe0d 	bl	8004f58 <lsm6dsl_gy_data_rate_get>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	e010      	b.n	800436c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	331c      	adds	r3, #28
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fddb 	bl	8004f0c <lsm6dsl_gy_data_rate_set>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	e004      	b.n	800436c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	331c      	adds	r3, #28
 8004386:	f107 020b 	add.w	r2, r7, #11
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd7b 	bl	8004e88 <lsm6dsl_gy_full_scale_get>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004398:	f04f 33ff 	mov.w	r3, #4294967295
 800439c:	e02d      	b.n	80043fa <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800439e:	7afb      	ldrb	r3, [r7, #11]
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d825      	bhi.n	80043f0 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043c9 	.word	0x080043c9
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043e9 	.word	0x080043e9
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80043cc:	601a      	str	r2, [r3, #0]
      break;
 80043ce:	e013      	b.n	80043f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80043d4:	601a      	str	r2, [r3, #0]
      break;
 80043d6:	e00f      	b.n	80043f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4a0c      	ldr	r2, [pc, #48]	; (800440c <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80043dc:	601a      	str	r2, [r3, #0]
      break;
 80043de:	e00b      	b.n	80043f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80043e4:	601a      	str	r2, [r3, #0]
      break;
 80043e6:	e007      	b.n	80043f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80043ec:	601a      	str	r2, [r3, #0]
      break;
 80043ee:	e003      	b.n	80043f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	60fb      	str	r3, [r7, #12]
      break;
 80043f6:	bf00      	nop
  }

  return ret;
 80043f8:	68fb      	ldr	r3, [r7, #12]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	408c0000 	.word	0x408c0000
 8004408:	410c0000 	.word	0x410c0000
 800440c:	418c0000 	.word	0x418c0000
 8004410:	420c0000 	.word	0x420c0000
 8004414:	428c0000 	.word	0x428c0000

08004418 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	331c      	adds	r3, #28
 800442a:	f107 020b 	add.w	r2, r7, #11
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fd91 	bl	8004f58 <lsm6dsl_gy_data_rate_get>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	e04e      	b.n	80044e0 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004442:	7afb      	ldrb	r3, [r7, #11]
 8004444:	2b0a      	cmp	r3, #10
 8004446:	d846      	bhi.n	80044d6 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004448:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004487 	.word	0x08004487
 8004458:	0800448f 	.word	0x0800448f
 800445c:	08004497 	.word	0x08004497
 8004460:	0800449f 	.word	0x0800449f
 8004464:	080044a7 	.word	0x080044a7
 8004468:	080044af 	.word	0x080044af
 800446c:	080044b7 	.word	0x080044b7
 8004470:	080044bf 	.word	0x080044bf
 8004474:	080044c7 	.word	0x080044c7
 8004478:	080044cf 	.word	0x080044cf
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
      break;
 8004484:	e02b      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800448a:	601a      	str	r2, [r3, #0]
      break;
 800448c:	e027      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4a16      	ldr	r2, [pc, #88]	; (80044ec <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e023      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e01f      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80044a2:	601a      	str	r2, [r3, #0]
      break;
 80044a4:	e01b      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	4a13      	ldr	r2, [pc, #76]	; (80044f8 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80044aa:	601a      	str	r2, [r3, #0]
      break;
 80044ac:	e017      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80044b2:	601a      	str	r2, [r3, #0]
      break;
 80044b4:	e013      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4a11      	ldr	r2, [pc, #68]	; (8004500 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80044ba:	601a      	str	r2, [r3, #0]
      break;
 80044bc:	e00f      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80044c2:	601a      	str	r2, [r3, #0]
      break;
 80044c4:	e00b      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80044ca:	601a      	str	r2, [r3, #0]
      break;
 80044cc:	e007      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	4a0e      	ldr	r2, [pc, #56]	; (800450c <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80044d2:	601a      	str	r2, [r3, #0]
      break;
 80044d4:	e003      	b.n	80044de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	60fb      	str	r3, [r7, #12]
      break;
 80044dc:	bf00      	nop
  }

  return ret;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	41480000 	.word	0x41480000
 80044ec:	41d00000 	.word	0x41d00000
 80044f0:	42500000 	.word	0x42500000
 80044f4:	42d00000 	.word	0x42d00000
 80044f8:	43500000 	.word	0x43500000
 80044fc:	43d00000 	.word	0x43d00000
 8004500:	44504000 	.word	0x44504000
 8004504:	44cf8000 	.word	0x44cf8000
 8004508:	45502000 	.word	0x45502000
 800450c:	45d02000 	.word	0x45d02000

08004510 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004522:	2b01      	cmp	r3, #1
 8004524:	d106      	bne.n	8004534 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004526:	ed97 0a00 	vldr	s0, [r7]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa26 	bl	800497c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004530:	4603      	mov	r3, r0
 8004532:	e005      	b.n	8004540 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004534:	ed97 0a00 	vldr	s0, [r7]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 faab 	bl	8004a94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800453e:	4603      	mov	r3, r0
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	331c      	adds	r3, #28
 800455a:	f107 020b 	add.w	r2, r7, #11
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fc91 	bl	8004e88 <lsm6dsl_gy_full_scale_get>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	e030      	b.n	80045d4 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	2b06      	cmp	r3, #6
 8004576:	d828      	bhi.n	80045ca <LSM6DSL_GYRO_GetFullScale+0x82>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045a5 	.word	0x080045a5
 8004584:	0800459d 	.word	0x0800459d
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045b7 	.word	0x080045b7
 8004594:	080045cb 	.word	0x080045cb
 8004598:	080045c1 	.word	0x080045c1
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	227d      	movs	r2, #125	; 0x7d
 80045a0:	601a      	str	r2, [r3, #0]
      break;
 80045a2:	e016      	b.n	80045d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	22fa      	movs	r2, #250	; 0xfa
 80045a8:	601a      	str	r2, [r3, #0]
      break;
 80045aa:	e012      	b.n	80045d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045b2:	601a      	str	r2, [r3, #0]
      break;
 80045b4:	e00d      	b.n	80045d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045bc:	601a      	str	r2, [r3, #0]
      break;
 80045be:	e008      	b.n	80045d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045c6:	601a      	str	r2, [r3, #0]
      break;
 80045c8:	e003      	b.n	80045d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	60fb      	str	r3, [r7, #12]
      break;
 80045d0:	bf00      	nop
  }

  return ret;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b7d      	cmp	r3, #125	; 0x7d
 80045ea:	dd12      	ble.n	8004612 <LSM6DSL_GYRO_SetFullScale+0x36>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2bfa      	cmp	r3, #250	; 0xfa
 80045f0:	dd0d      	ble.n	800460e <LSM6DSL_GYRO_SetFullScale+0x32>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045f8:	dd07      	ble.n	800460a <LSM6DSL_GYRO_SetFullScale+0x2e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004600:	dc01      	bgt.n	8004606 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004602:	2304      	movs	r3, #4
 8004604:	e006      	b.n	8004614 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004606:	2306      	movs	r3, #6
 8004608:	e004      	b.n	8004614 <LSM6DSL_GYRO_SetFullScale+0x38>
 800460a:	2302      	movs	r3, #2
 800460c:	e002      	b.n	8004614 <LSM6DSL_GYRO_SetFullScale+0x38>
 800460e:	2300      	movs	r3, #0
 8004610:	e000      	b.n	8004614 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004612:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004614:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	331c      	adds	r3, #28
 800461a:	7bfa      	ldrb	r2, [r7, #15]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fc0c 	bl	8004e3c <lsm6dsl_gy_full_scale_set>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e000      	b.n	8004632 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	331c      	adds	r3, #28
 8004648:	f107 0208 	add.w	r2, r7, #8
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fd0a 	bl	8005068 <lsm6dsl_angular_rate_raw_get>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	e00c      	b.n	800467a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004660:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004668:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004670:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	331c      	adds	r3, #28
 8004690:	f107 0210 	add.w	r2, r7, #16
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fce6 	bl	8005068 <lsm6dsl_angular_rate_raw_get>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80046a2:	f04f 33ff 	mov.w	r3, #4294967295
 80046a6:	e03c      	b.n	8004722 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe60 	bl	8004374 <LSM6DSL_GYRO_GetSensitivity>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	e030      	b.n	8004722 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80046c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d8:	ee17 2a90 	vmov	r2, s15
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80046e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80046f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f8:	ee17 2a90 	vmov	r2, s15
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004700:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800470c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004718:	ee17 2a90 	vmov	r2, s15
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	70fb      	strb	r3, [r7, #3]
 8004736:	4613      	mov	r3, r2
 8004738:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f103 001c 	add.w	r0, r3, #28
 8004740:	1cba      	adds	r2, r7, #2
 8004742:	78f9      	ldrb	r1, [r7, #3]
 8004744:	2301      	movs	r3, #1
 8004746:	f000 fa75 	bl	8004c34 <lsm6dsl_write_reg>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e000      	b.n	8004758 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800476c:	edd7 7a00 	vldr	s15, [r7]
 8004770:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477c:	d801      	bhi.n	8004782 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800477e:	2301      	movs	r3, #1
 8004780:	e058      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004782:	edd7 7a00 	vldr	s15, [r7]
 8004786:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800478a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d801      	bhi.n	8004798 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004794:	2302      	movs	r3, #2
 8004796:	e04d      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004798:	edd7 7a00 	vldr	s15, [r7]
 800479c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800485c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80047a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	d801      	bhi.n	80047ae <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80047aa:	2303      	movs	r3, #3
 80047ac:	e042      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047ae:	edd7 7a00 	vldr	s15, [r7]
 80047b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004860 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80047b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047be:	d801      	bhi.n	80047c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e037      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047c4:	edd7 7a00 	vldr	s15, [r7]
 80047c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004864 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80047cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	d801      	bhi.n	80047da <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80047d6:	2305      	movs	r3, #5
 80047d8:	e02c      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047da:	edd7 7a00 	vldr	s15, [r7]
 80047de:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004868 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80047e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ea:	d801      	bhi.n	80047f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80047ec:	2306      	movs	r3, #6
 80047ee:	e021      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047f0:	edd7 7a00 	vldr	s15, [r7]
 80047f4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800486c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80047f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d801      	bhi.n	8004806 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004802:	2307      	movs	r3, #7
 8004804:	e016      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004806:	edd7 7a00 	vldr	s15, [r7]
 800480a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004870 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800480e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	d801      	bhi.n	800481c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004818:	2308      	movs	r3, #8
 800481a:	e00b      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800481c:	edd7 7a00 	vldr	s15, [r7]
 8004820:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004874 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482c:	d801      	bhi.n	8004832 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800482e:	2309      	movs	r3, #9
 8004830:	e000      	b.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004832:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004834:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	331c      	adds	r3, #28
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fa6e 	bl	8004d20 <lsm6dsl_xl_data_rate_set>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	e000      	b.n	8004852 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	42500000 	.word	0x42500000
 8004860:	42d00000 	.word	0x42d00000
 8004864:	43500000 	.word	0x43500000
 8004868:	43d00000 	.word	0x43d00000
 800486c:	44504000 	.word	0x44504000
 8004870:	44cf8000 	.word	0x44cf8000
 8004874:	45502000 	.word	0x45502000

08004878 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004884:	edd7 7a00 	vldr	s15, [r7]
 8004888:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800488c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004894:	d801      	bhi.n	800489a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004896:	2301      	movs	r3, #1
 8004898:	e058      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800489a:	edd7 7a00 	vldr	s15, [r7]
 800489e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d801      	bhi.n	80048b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e04d      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048b0:	edd7 7a00 	vldr	s15, [r7]
 80048b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004960 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80048b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	d801      	bhi.n	80048c6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e042      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048c6:	edd7 7a00 	vldr	s15, [r7]
 80048ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004964 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80048ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d6:	d801      	bhi.n	80048dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80048d8:	2304      	movs	r3, #4
 80048da:	e037      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048dc:	edd7 7a00 	vldr	s15, [r7]
 80048e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80048e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	d801      	bhi.n	80048f2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80048ee:	2305      	movs	r3, #5
 80048f0:	e02c      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048f2:	edd7 7a00 	vldr	s15, [r7]
 80048f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800496c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80048fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d801      	bhi.n	8004908 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004904:	2306      	movs	r3, #6
 8004906:	e021      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004908:	edd7 7a00 	vldr	s15, [r7]
 800490c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004970 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	d801      	bhi.n	800491e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800491a:	2307      	movs	r3, #7
 800491c:	e016      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800491e:	edd7 7a00 	vldr	s15, [r7]
 8004922:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004974 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d801      	bhi.n	8004934 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004930:	2308      	movs	r3, #8
 8004932:	e00b      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004934:	edd7 7a00 	vldr	s15, [r7]
 8004938:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004978 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800493c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	d801      	bhi.n	800494a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004946:	2309      	movs	r3, #9
 8004948:	e000      	b.n	800494c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800494a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	42500000 	.word	0x42500000
 8004964:	42d00000 	.word	0x42d00000
 8004968:	43500000 	.word	0x43500000
 800496c:	43d00000 	.word	0x43d00000
 8004970:	44504000 	.word	0x44504000
 8004974:	44cf8000 	.word	0x44cf8000
 8004978:	45502000 	.word	0x45502000

0800497c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004988:	edd7 7a00 	vldr	s15, [r7]
 800498c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004998:	d801      	bhi.n	800499e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800499a:	2301      	movs	r3, #1
 800499c:	e058      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800499e:	edd7 7a00 	vldr	s15, [r7]
 80049a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	d801      	bhi.n	80049b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e04d      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049b4:	edd7 7a00 	vldr	s15, [r7]
 80049b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004a78 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80049bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	d801      	bhi.n	80049ca <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e042      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049ca:	edd7 7a00 	vldr	s15, [r7]
 80049ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004a7c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80049d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	d801      	bhi.n	80049e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80049dc:	2304      	movs	r3, #4
 80049de:	e037      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049e0:	edd7 7a00 	vldr	s15, [r7]
 80049e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80049e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f0:	d801      	bhi.n	80049f6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80049f2:	2305      	movs	r3, #5
 80049f4:	e02c      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049f6:	edd7 7a00 	vldr	s15, [r7]
 80049fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004a84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80049fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	d801      	bhi.n	8004a0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004a08:	2306      	movs	r3, #6
 8004a0a:	e021      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a0c:	edd7 7a00 	vldr	s15, [r7]
 8004a10:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1c:	d801      	bhi.n	8004a22 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004a1e:	2307      	movs	r3, #7
 8004a20:	e016      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a22:	edd7 7a00 	vldr	s15, [r7]
 8004a26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004a8c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d801      	bhi.n	8004a38 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004a34:	2308      	movs	r3, #8
 8004a36:	e00b      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a38:	edd7 7a00 	vldr	s15, [r7]
 8004a3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a90 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a48:	d801      	bhi.n	8004a4e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004a4a:	2309      	movs	r3, #9
 8004a4c:	e000      	b.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a4e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004a50:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	331c      	adds	r3, #28
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fa56 	bl	8004f0c <lsm6dsl_gy_data_rate_set>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	e000      	b.n	8004a6e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	42500000 	.word	0x42500000
 8004a7c:	42d00000 	.word	0x42d00000
 8004a80:	43500000 	.word	0x43500000
 8004a84:	43d00000 	.word	0x43d00000
 8004a88:	44504000 	.word	0x44504000
 8004a8c:	44cf8000 	.word	0x44cf8000
 8004a90:	45502000 	.word	0x45502000

08004a94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004aa0:	edd7 7a00 	vldr	s15, [r7]
 8004aa4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d801      	bhi.n	8004ab6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e058      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ab6:	edd7 7a00 	vldr	s15, [r7]
 8004aba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	d801      	bhi.n	8004acc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e04d      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004acc:	edd7 7a00 	vldr	s15, [r7]
 8004ad0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004b7c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004adc:	d801      	bhi.n	8004ae2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e042      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ae2:	edd7 7a00 	vldr	s15, [r7]
 8004ae6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b80 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	d801      	bhi.n	8004af8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004af4:	2304      	movs	r3, #4
 8004af6:	e037      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004af8:	edd7 7a00 	vldr	s15, [r7]
 8004afc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	d801      	bhi.n	8004b0e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	e02c      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b0e:	edd7 7a00 	vldr	s15, [r7]
 8004b12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1e:	d801      	bhi.n	8004b24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004b20:	2306      	movs	r3, #6
 8004b22:	e021      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b24:	edd7 7a00 	vldr	s15, [r7]
 8004b28:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004b8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	d801      	bhi.n	8004b3a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004b36:	2307      	movs	r3, #7
 8004b38:	e016      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b3a:	edd7 7a00 	vldr	s15, [r7]
 8004b3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	d801      	bhi.n	8004b50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	e00b      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b50:	edd7 7a00 	vldr	s15, [r7]
 8004b54:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b60:	d801      	bhi.n	8004b66 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004b62:	2309      	movs	r3, #9
 8004b64:	e000      	b.n	8004b68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b66:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	42500000 	.word	0x42500000
 8004b80:	42d00000 	.word	0x42d00000
 8004b84:	43500000 	.word	0x43500000
 8004b88:	43d00000 	.word	0x43d00000
 8004b8c:	44504000 	.word	0x44504000
 8004b90:	44cf8000 	.word	0x44cf8000
 8004b94:	45502000 	.word	0x45502000

08004b98 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	72fb      	strb	r3, [r7, #11]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	695c      	ldr	r4, [r3, #20]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	7b1b      	ldrb	r3, [r3, #12]
 8004bb8:	b298      	uxth	r0, r3
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	893b      	ldrh	r3, [r7, #8]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	47a0      	blx	r4
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}

08004bce <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b087      	sub	sp, #28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	460b      	mov	r3, r1
 8004bdc:	72fb      	strb	r3, [r7, #11]
 8004bde:	4613      	mov	r3, r2
 8004be0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	691c      	ldr	r4, [r3, #16]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	7b1b      	ldrb	r3, [r3, #12]
 8004bee:	b298      	uxth	r0, r3
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	b299      	uxth	r1, r3
 8004bf4:	893b      	ldrh	r3, [r7, #8]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	47a0      	blx	r4
 8004bfa:	4603      	mov	r3, r0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}

08004c04 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	460b      	mov	r3, r1
 8004c12:	72fb      	strb	r3, [r7, #11]
 8004c14:	4613      	mov	r3, r2
 8004c16:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685c      	ldr	r4, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6898      	ldr	r0, [r3, #8]
 8004c20:	893b      	ldrh	r3, [r7, #8]
 8004c22:	7af9      	ldrb	r1, [r7, #11]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	47a0      	blx	r4
 8004c28:	6178      	str	r0, [r7, #20]
  return ret;
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}

08004c34 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	460b      	mov	r3, r1
 8004c42:	72fb      	strb	r3, [r7, #11]
 8004c44:	4613      	mov	r3, r2
 8004c46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681c      	ldr	r4, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6898      	ldr	r0, [r3, #8]
 8004c50:	893b      	ldrh	r3, [r7, #8]
 8004c52:	7af9      	ldrb	r1, [r7, #11]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	47a0      	blx	r4
 8004c58:	6178      	str	r0, [r7, #20]
  return ret;
 8004c5a:	697b      	ldr	r3, [r7, #20]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd90      	pop	{r4, r7, pc}

08004c64 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c70:	f107 0208 	add.w	r2, r7, #8
 8004c74:	2301      	movs	r3, #1
 8004c76:	2110      	movs	r1, #16
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ffc3 	bl	8004c04 <lsm6dsl_read_reg>
 8004c7e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	7a3b      	ldrb	r3, [r7, #8]
 8004c90:	f362 0383 	bfi	r3, r2, #2, #2
 8004c94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c96:	f107 0208 	add.w	r2, r7, #8
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ffc8 	bl	8004c34 <lsm6dsl_write_reg>
 8004ca4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004cba:	f107 0208 	add.w	r2, r7, #8
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff ff9e 	bl	8004c04 <lsm6dsl_read_reg>
 8004cc8:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004cca:	7a3b      	ldrb	r3, [r7, #8]
 8004ccc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d81a      	bhi.n	8004d0c <lsm6dsl_xl_full_scale_get+0x5c>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <lsm6dsl_xl_full_scale_get+0x2c>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004cf5 	.word	0x08004cf5
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004d05 	.word	0x08004d05
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
      break;
 8004cf2:	e00f      	b.n	8004d14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
      break;
 8004cfa:	e00b      	b.n	8004d14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e007      	b.n	8004d14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2203      	movs	r2, #3
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e003      	b.n	8004d14 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	701a      	strb	r2, [r3, #0]
      break;
 8004d12:	bf00      	nop
  }

  return ret;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop

08004d20 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d2c:	f107 0208 	add.w	r2, r7, #8
 8004d30:	2301      	movs	r3, #1
 8004d32:	2110      	movs	r1, #16
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff65 	bl	8004c04 <lsm6dsl_read_reg>
 8004d3a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	7a3b      	ldrb	r3, [r7, #8]
 8004d4c:	f362 1307 	bfi	r3, r2, #4, #4
 8004d50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d52:	f107 0208 	add.w	r2, r7, #8
 8004d56:	2301      	movs	r3, #1
 8004d58:	2110      	movs	r1, #16
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff ff6a 	bl	8004c34 <lsm6dsl_write_reg>
 8004d60:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d76:	f107 0208 	add.w	r2, r7, #8
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ff40 	bl	8004c04 <lsm6dsl_read_reg>
 8004d84:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004d86:	7a3b      	ldrb	r3, [r7, #8]
 8004d88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b0b      	cmp	r3, #11
 8004d90:	d84a      	bhi.n	8004e28 <lsm6dsl_xl_data_rate_get+0xbc>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004dc9 	.word	0x08004dc9
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004dd9 	.word	0x08004dd9
 8004da4:	08004de1 	.word	0x08004de1
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	08004df9 	.word	0x08004df9
 8004db4:	08004e01 	.word	0x08004e01
 8004db8:	08004e09 	.word	0x08004e09
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e21 	.word	0x08004e21
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e02f      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e02b      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e027      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2203      	movs	r2, #3
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	e023      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2204      	movs	r2, #4
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e01f      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e01b      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2206      	movs	r2, #6
 8004dfc:	701a      	strb	r2, [r3, #0]
      break;
 8004dfe:	e017      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2207      	movs	r2, #7
 8004e04:	701a      	strb	r2, [r3, #0]
      break;
 8004e06:	e013      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	701a      	strb	r2, [r3, #0]
      break;
 8004e0e:	e00f      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2209      	movs	r2, #9
 8004e14:	701a      	strb	r2, [r3, #0]
      break;
 8004e16:	e00b      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	220a      	movs	r2, #10
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e007      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	220b      	movs	r2, #11
 8004e24:	701a      	strb	r2, [r3, #0]
      break;
 8004e26:	e003      	b.n	8004e30 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	220c      	movs	r2, #12
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	bf00      	nop
  }

  return ret;
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop

08004e3c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e48:	f107 0208 	add.w	r2, r7, #8
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	2111      	movs	r1, #17
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fed7 	bl	8004c04 <lsm6dsl_read_reg>
 8004e56:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	7a3b      	ldrb	r3, [r7, #8]
 8004e68:	f362 0343 	bfi	r3, r2, #1, #3
 8004e6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e6e:	f107 0208 	add.w	r2, r7, #8
 8004e72:	2301      	movs	r3, #1
 8004e74:	2111      	movs	r1, #17
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fedc 	bl	8004c34 <lsm6dsl_write_reg>
 8004e7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	2301      	movs	r3, #1
 8004e98:	2111      	movs	r1, #17
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff feb2 	bl	8004c04 <lsm6dsl_read_reg>
 8004ea0:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004ea2:	7a3b      	ldrb	r3, [r7, #8]
 8004ea4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d824      	bhi.n	8004ef8 <lsm6dsl_gy_full_scale_get+0x70>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ed9 	.word	0x08004ed9
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ef1 	.word	0x08004ef1
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e013      	b.n	8004f00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
      break;
 8004ede:	e00f      	b.n	8004f00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
      break;
 8004ee6:	e00b      	b.n	8004f00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2204      	movs	r2, #4
 8004eec:	701a      	strb	r2, [r3, #0]
      break;
 8004eee:	e007      	b.n	8004f00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2206      	movs	r2, #6
 8004ef4:	701a      	strb	r2, [r3, #0]
      break;
 8004ef6:	e003      	b.n	8004f00 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2207      	movs	r2, #7
 8004efc:	701a      	strb	r2, [r3, #0]
      break;
 8004efe:	bf00      	nop
  }

  return ret;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop

08004f0c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f18:	f107 0208 	add.w	r2, r7, #8
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	2111      	movs	r1, #17
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fe6f 	bl	8004c04 <lsm6dsl_read_reg>
 8004f26:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	7a3b      	ldrb	r3, [r7, #8]
 8004f38:	f362 1307 	bfi	r3, r2, #4, #4
 8004f3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f3e:	f107 0208 	add.w	r2, r7, #8
 8004f42:	2301      	movs	r3, #1
 8004f44:	2111      	movs	r1, #17
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe74 	bl	8004c34 <lsm6dsl_write_reg>
 8004f4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f62:	f107 0208 	add.w	r2, r7, #8
 8004f66:	2301      	movs	r3, #1
 8004f68:	2111      	movs	r1, #17
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fe4a 	bl	8004c04 <lsm6dsl_read_reg>
 8004f70:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8004f72:	7a3b      	ldrb	r3, [r7, #8]
 8004f74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b0a      	cmp	r3, #10
 8004f7c:	d844      	bhi.n	8005008 <lsm6dsl_gy_data_rate_get+0xb0>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fd1 	.word	0x08004fd1
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fe1 	.word	0x08004fe1
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004ff9 	.word	0x08004ff9
 8004fac:	08005001 	.word	0x08005001
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
      break;
 8004fb6:	e02b      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
      break;
 8004fbe:	e027      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	701a      	strb	r2, [r3, #0]
      break;
 8004fc6:	e023      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	701a      	strb	r2, [r3, #0]
      break;
 8004fce:	e01f      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	701a      	strb	r2, [r3, #0]
      break;
 8004fd6:	e01b      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2205      	movs	r2, #5
 8004fdc:	701a      	strb	r2, [r3, #0]
      break;
 8004fde:	e017      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2206      	movs	r2, #6
 8004fe4:	701a      	strb	r2, [r3, #0]
      break;
 8004fe6:	e013      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2207      	movs	r2, #7
 8004fec:	701a      	strb	r2, [r3, #0]
      break;
 8004fee:	e00f      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	701a      	strb	r2, [r3, #0]
      break;
 8004ff6:	e00b      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2209      	movs	r2, #9
 8004ffc:	701a      	strb	r2, [r3, #0]
      break;
 8004ffe:	e007      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	220a      	movs	r2, #10
 8005004:	701a      	strb	r2, [r3, #0]
      break;
 8005006:	e003      	b.n	8005010 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	220b      	movs	r2, #11
 800500c:	701a      	strb	r2, [r3, #0]
      break;
 800500e:	bf00      	nop
  }

  return ret;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop

0800501c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005028:	f107 0208 	add.w	r2, r7, #8
 800502c:	2301      	movs	r3, #1
 800502e:	2112      	movs	r1, #18
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fde7 	bl	8004c04 <lsm6dsl_read_reg>
 8005036:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	b2da      	uxtb	r2, r3
 8005046:	7a3b      	ldrb	r3, [r7, #8]
 8005048:	f362 1386 	bfi	r3, r2, #6, #1
 800504c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800504e:	f107 0208 	add.w	r2, r7, #8
 8005052:	2301      	movs	r3, #1
 8005054:	2112      	movs	r1, #18
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fdec 	bl	8004c34 <lsm6dsl_write_reg>
 800505c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005072:	f107 020c 	add.w	r2, r7, #12
 8005076:	2306      	movs	r3, #6
 8005078:	2122      	movs	r1, #34	; 0x22
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fdc2 	bl	8004c04 <lsm6dsl_read_reg>
 8005080:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005082:	7b7b      	ldrb	r3, [r7, #13]
 8005084:	b21a      	sxth	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005090:	b29b      	uxth	r3, r3
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	b29a      	uxth	r2, r3
 8005096:	7b3b      	ldrb	r3, [r7, #12]
 8005098:	b29b      	uxth	r3, r3
 800509a:	4413      	add	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	b21a      	sxth	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3302      	adds	r3, #2
 80050aa:	b212      	sxth	r2, r2
 80050ac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3302      	adds	r3, #2
 80050b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3302      	adds	r3, #2
 80050c8:	b212      	sxth	r2, r2
 80050ca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80050cc:	7c7a      	ldrb	r2, [r7, #17]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3304      	adds	r3, #4
 80050d2:	b212      	sxth	r2, r2
 80050d4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	7c3b      	ldrb	r3, [r7, #16]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	b212      	sxth	r2, r2
 80050f2:	801a      	strh	r2, [r3, #0]
  return ret;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005108:	f107 020c 	add.w	r2, r7, #12
 800510c:	2306      	movs	r3, #6
 800510e:	2128      	movs	r1, #40	; 0x28
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fd77 	bl	8004c04 <lsm6dsl_read_reg>
 8005116:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005118:	7b7b      	ldrb	r3, [r7, #13]
 800511a:	b21a      	sxth	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005126:	b29b      	uxth	r3, r3
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	b29a      	uxth	r2, r3
 800512c:	7b3b      	ldrb	r3, [r7, #12]
 800512e:	b29b      	uxth	r3, r3
 8005130:	4413      	add	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	b21a      	sxth	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800513a:	7bfa      	ldrb	r2, [r7, #15]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	3302      	adds	r3, #2
 8005140:	b212      	sxth	r2, r2
 8005142:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	3302      	adds	r3, #2
 8005148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800514c:	b29b      	uxth	r3, r3
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	b29a      	uxth	r2, r3
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	b29b      	uxth	r3, r3
 8005156:	4413      	add	r3, r2
 8005158:	b29a      	uxth	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	3302      	adds	r3, #2
 800515e:	b212      	sxth	r2, r2
 8005160:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005162:	7c7a      	ldrb	r2, [r7, #17]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	3304      	adds	r3, #4
 8005168:	b212      	sxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005174:	b29b      	uxth	r3, r3
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	b29a      	uxth	r2, r3
 800517a:	7c3b      	ldrb	r3, [r7, #16]
 800517c:	b29b      	uxth	r3, r3
 800517e:	4413      	add	r3, r2
 8005180:	b29a      	uxth	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	3304      	adds	r3, #4
 8005186:	b212      	sxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
  return ret;
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800519e:	2301      	movs	r3, #1
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	210f      	movs	r1, #15
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fd2d 	bl	8004c04 <lsm6dsl_read_reg>
 80051aa:	60f8      	str	r0, [r7, #12]
  return ret;
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80051c2:	f107 0208 	add.w	r2, r7, #8
 80051c6:	2301      	movs	r3, #1
 80051c8:	2112      	movs	r1, #18
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff fd1a 	bl	8004c04 <lsm6dsl_read_reg>
 80051d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	7a3b      	ldrb	r3, [r7, #8]
 80051e2:	f362 0382 	bfi	r3, r2, #2, #1
 80051e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80051e8:	f107 0208 	add.w	r2, r7, #8
 80051ec:	2301      	movs	r3, #1
 80051ee:	2112      	movs	r1, #18
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fd1f 	bl	8004c34 <lsm6dsl_write_reg>
 80051f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800520e:	f107 0208 	add.w	r2, r7, #8
 8005212:	2301      	movs	r3, #1
 8005214:	210a      	movs	r1, #10
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff fcf4 	bl	8004c04 <lsm6dsl_read_reg>
 800521c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	b2da      	uxtb	r2, r3
 800522c:	7a3b      	ldrb	r3, [r7, #8]
 800522e:	f362 0302 	bfi	r3, r2, #0, #3
 8005232:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005234:	f107 0208 	add.w	r2, r7, #8
 8005238:	2301      	movs	r3, #1
 800523a:	210a      	movs	r1, #10
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff fcf9 	bl	8004c34 <lsm6dsl_write_reg>
 8005242:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800525e:	2301      	movs	r3, #1
 8005260:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <IKS01A2_ENV_SENSOR_Init+0x24>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d032      	beq.n	80052d8 <IKS01A2_ENV_SENSOR_Init+0x88>
 8005272:	e063      	b.n	800533c <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005274:	6838      	ldr	r0, [r7, #0]
 8005276:	f000 f931 	bl	80054dc <HTS221_0_Probe>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	e098      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005286:	4a4e      	ldr	r2, [pc, #312]	; (80053c0 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	494c      	ldr	r1, [pc, #304]	; (80053c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005298:	f107 0108 	add.w	r1, r7, #8
 800529c:	4610      	mov	r0, r2
 800529e:	4798      	blx	r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80052a6:	f06f 0306 	mvn.w	r3, #6
 80052aa:	e085      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80052ac:	7a3b      	ldrb	r3, [r7, #8]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d103      	bne.n	80052ba <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80052ba:	7abb      	ldrb	r3, [r7, #10]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d103      	bne.n	80052c8 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f043 0304 	orr.w	r3, r3, #4
 80052c6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80052c8:	7a7b      	ldrb	r3, [r7, #9]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d13a      	bne.n	8005344 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
      }
      break;
 80052d6:	e035      	b.n	8005344 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80052d8:	6838      	ldr	r0, [r7, #0]
 80052da:	f000 f9b9 	bl	8005650 <LPS22HB_0_Probe>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295
 80052e8:	e066      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80052ea:	4a35      	ldr	r2, [pc, #212]	; (80053c0 <IKS01A2_ENV_SENSOR_Init+0x170>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4933      	ldr	r1, [pc, #204]	; (80053c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80052fc:	f107 0108 	add.w	r1, r7, #8
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800530a:	f06f 0306 	mvn.w	r3, #6
 800530e:	e053      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005310:	7a3b      	ldrb	r3, [r7, #8]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d103      	bne.n	800531e <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800531e:	7abb      	ldrb	r3, [r7, #10]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d103      	bne.n	800532c <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f043 0304 	orr.w	r3, r3, #4
 800532a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800532c:	7a7b      	ldrb	r3, [r7, #9]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10a      	bne.n	8005348 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	61bb      	str	r3, [r7, #24]
      }
      break;
 800533a:	e005      	b.n	8005348 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800533c:	f06f 0301 	mvn.w	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005342:	e002      	b.n	800534a <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005348:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	e031      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e02a      	b.n	80053b0 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	4013      	ands	r3, r2
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	429a      	cmp	r2, r3
 8005364:	d11e      	bne.n	80053a4 <IKS01A2_ENV_SENSOR_Init+0x154>
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	4013      	ands	r3, r2
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	429a      	cmp	r2, r3
 8005370:	d118      	bne.n	80053a4 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800537a:	4814      	ldr	r0, [pc, #80]	; (80053cc <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	440b      	add	r3, r1
 8005386:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	490d      	ldr	r1, [pc, #52]	; (80053c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800539e:	f06f 0304 	mvn.w	r3, #4
 80053a2:	e009      	b.n	80053b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d9d1      	bls.n	800535a <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3728      	adds	r7, #40	; 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000019c 	.word	0x2000019c
 80053c4:	2000043c 	.word	0x2000043c
 80053c8:	20000134 	.word	0x20000134
 80053cc:	20000184 	.word	0x20000184

080053d0 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d903      	bls.n	80053e8 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053e0:	f06f 0301 	mvn.w	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e028      	b.n	800543a <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80053e8:	4a16      	ldr	r2, [pc, #88]	; (8005444 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4013      	ands	r3, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d11c      	bne.n	8005434 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005402:	4812      	ldr	r0, [pc, #72]	; (800544c <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	440b      	add	r3, r1
 800540e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	490e      	ldr	r1, [pc, #56]	; (8005450 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800541c:	4610      	mov	r0, r2
 800541e:	4798      	blx	r3
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005426:	f06f 0304 	mvn.w	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e005      	b.n	800543a <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e002      	b.n	800543a <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005434:	f06f 0301 	mvn.w	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800543a:	68fb      	ldr	r3, [r7, #12]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200001a4 	.word	0x200001a4
 8005448:	20000134 	.word	0x20000134
 800544c:	20000184 	.word	0x20000184
 8005450:	2000043c 	.word	0x2000043c

08005454 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d903      	bls.n	800546e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005466:	f06f 0301 	mvn.w	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e029      	b.n	80054c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d11d      	bne.n	80054bc <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005488:	4812      	ldr	r0, [pc, #72]	; (80054d4 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	440b      	add	r3, r1
 8005494:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	490f      	ldr	r1, [pc, #60]	; (80054d8 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4610      	mov	r0, r2
 80054a6:	4798      	blx	r3
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ae:	f06f 0304 	mvn.w	r3, #4
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e005      	b.n	80054c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e002      	b.n	80054c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80054bc:	f06f 0301 	mvn.w	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80054c2:	697b      	ldr	r3, [r7, #20]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200001a4 	.word	0x200001a4
 80054d0:	20000134 	.word	0x20000134
 80054d4:	20000184 	.word	0x20000184
 80054d8:	2000043c 	.word	0x2000043c

080054dc <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b090      	sub	sp, #64	; 0x40
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80054e8:	2300      	movs	r3, #0
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80054ec:	23bf      	movs	r3, #191	; 0xbf
 80054ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80054f2:	4b49      	ldr	r3, [pc, #292]	; (8005618 <HTS221_0_Probe+0x13c>)
 80054f4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80054f6:	4b49      	ldr	r3, [pc, #292]	; (800561c <HTS221_0_Probe+0x140>)
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80054fa:	4b49      	ldr	r3, [pc, #292]	; (8005620 <HTS221_0_Probe+0x144>)
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80054fe:	4b49      	ldr	r3, [pc, #292]	; (8005624 <HTS221_0_Probe+0x148>)
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005502:	4b49      	ldr	r3, [pc, #292]	; (8005628 <HTS221_0_Probe+0x14c>)
 8005504:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005506:	f107 0320 	add.w	r3, r7, #32
 800550a:	4619      	mov	r1, r3
 800550c:	4847      	ldr	r0, [pc, #284]	; (800562c <HTS221_0_Probe+0x150>)
 800550e:	f7fb fbd7 	bl	8000cc0 <HTS221_RegisterBusIO>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005518:	f06f 0306 	mvn.w	r3, #6
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551e:	e076      	b.n	800560e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8005520:	f107 031f 	add.w	r3, r7, #31
 8005524:	4619      	mov	r1, r3
 8005526:	4841      	ldr	r0, [pc, #260]	; (800562c <HTS221_0_Probe+0x150>)
 8005528:	f7fb fc4f 	bl	8000dca <HTS221_ReadID>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005532:	f06f 0306 	mvn.w	r3, #6
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e069      	b.n	800560e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800553a:	7ffb      	ldrb	r3, [r7, #31]
 800553c:	2bbc      	cmp	r3, #188	; 0xbc
 800553e:	d003      	beq.n	8005548 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005540:	f06f 0306 	mvn.w	r3, #6
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005546:	e062      	b.n	800560e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	4619      	mov	r1, r3
 800554e:	4837      	ldr	r0, [pc, #220]	; (800562c <HTS221_0_Probe+0x150>)
 8005550:	f7fb fc52 	bl	8000df8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005554:	7b3b      	ldrb	r3, [r7, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	7b7b      	ldrb	r3, [r7, #13]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005562:	4313      	orrs	r3, r2
 8005564:	4a32      	ldr	r2, [pc, #200]	; (8005630 <HTS221_0_Probe+0x154>)
 8005566:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005568:	4b32      	ldr	r3, [pc, #200]	; (8005634 <HTS221_0_Probe+0x158>)
 800556a:	4a30      	ldr	r2, [pc, #192]	; (800562c <HTS221_0_Probe+0x150>)
 800556c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800556e:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HTS221_0_Probe+0x15c>)
 8005570:	4a32      	ldr	r2, [pc, #200]	; (800563c <HTS221_0_Probe+0x160>)
 8005572:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11d      	bne.n	80055b6 <HTS221_0_Probe+0xda>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d018      	beq.n	80055b6 <HTS221_0_Probe+0xda>
 8005584:	7b3b      	ldrb	r3, [r7, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d115      	bne.n	80055b6 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800558a:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <HTS221_0_Probe+0x164>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <HTS221_0_Probe+0x168>)
 8005590:	492d      	ldr	r1, [pc, #180]	; (8005648 <HTS221_0_Probe+0x16c>)
 8005592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005596:	4b28      	ldr	r3, [pc, #160]	; (8005638 <HTS221_0_Probe+0x15c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <HTS221_0_Probe+0x158>)
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	4610      	mov	r0, r2
 80055a2:	4798      	blx	r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055aa:	f06f 0304 	mvn.w	r3, #4
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b0:	e001      	b.n	80055b6 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11d      	bne.n	80055f8 <HTS221_0_Probe+0x11c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <HTS221_0_Probe+0x11c>
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d115      	bne.n	80055f8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80055cc:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <HTS221_0_Probe+0x164>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	4a1c      	ldr	r2, [pc, #112]	; (8005644 <HTS221_0_Probe+0x168>)
 80055d2:	491e      	ldr	r1, [pc, #120]	; (800564c <HTS221_0_Probe+0x170>)
 80055d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <HTS221_0_Probe+0x15c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HTS221_0_Probe+0x158>)
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4610      	mov	r0, r2
 80055e4:	4798      	blx	r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055ec:	f06f 0304 	mvn.w	r3, #4
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f2:	e001      	b.n	80055f8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <HTS221_0_Probe+0x132>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005608:	f06f 0304 	mvn.w	r3, #4
 800560c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005610:	4618      	mov	r0, r3
 8005612:	3740      	adds	r7, #64	; 0x40
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08000959 	.word	0x08000959
 800561c:	080009d5 	.word	0x080009d5
 8005620:	08000a89 	.word	0x08000a89
 8005624:	08000a25 	.word	0x08000a25
 8005628:	08000aed 	.word	0x08000aed
 800562c:	200001ac 	.word	0x200001ac
 8005630:	200001a4 	.word	0x200001a4
 8005634:	2000043c 	.word	0x2000043c
 8005638:	2000019c 	.word	0x2000019c
 800563c:	20000004 	.word	0x20000004
 8005640:	20000134 	.word	0x20000134
 8005644:	20000184 	.word	0x20000184
 8005648:	20000028 	.word	0x20000028
 800564c:	20000014 	.word	0x20000014

08005650 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b090      	sub	sp, #64	; 0x40
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005658:	2300      	movs	r3, #0
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800565c:	2300      	movs	r3, #0
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005660:	23bb      	movs	r3, #187	; 0xbb
 8005662:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005666:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <LPS22HB_0_Probe+0x140>)
 8005668:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <LPS22HB_0_Probe+0x144>)
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800566e:	4b4a      	ldr	r3, [pc, #296]	; (8005798 <LPS22HB_0_Probe+0x148>)
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005672:	4b4a      	ldr	r3, [pc, #296]	; (800579c <LPS22HB_0_Probe+0x14c>)
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005676:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <LPS22HB_0_Probe+0x150>)
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800567a:	f107 0320 	add.w	r3, r7, #32
 800567e:	4619      	mov	r1, r3
 8005680:	4848      	ldr	r0, [pc, #288]	; (80057a4 <LPS22HB_0_Probe+0x154>)
 8005682:	f7fc f93b 	bl	80018fc <LPS22HB_RegisterBusIO>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800568c:	f06f 0306 	mvn.w	r3, #6
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005692:	e078      	b.n	8005786 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005694:	f107 031f 	add.w	r3, r7, #31
 8005698:	4619      	mov	r1, r3
 800569a:	4842      	ldr	r0, [pc, #264]	; (80057a4 <LPS22HB_0_Probe+0x154>)
 800569c:	f7fc f9d3 	bl	8001a46 <LPS22HB_ReadID>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056a6:	f06f 0306 	mvn.w	r3, #6
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ac:	e06b      	b.n	8005786 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
 80056b0:	2bb1      	cmp	r3, #177	; 0xb1
 80056b2:	d003      	beq.n	80056bc <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056b4:	f06f 0306 	mvn.w	r3, #6
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ba:	e064      	b.n	8005786 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4619      	mov	r1, r3
 80056c2:	4838      	ldr	r0, [pc, #224]	; (80057a4 <LPS22HB_0_Probe+0x154>)
 80056c4:	f7fc f9d6 	bl	8001a74 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056c8:	7b3b      	ldrb	r3, [r7, #12]
 80056ca:	461a      	mov	r2, r3
 80056cc:	7b7b      	ldrb	r3, [r7, #13]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056d6:	4313      	orrs	r3, r2
 80056d8:	4a33      	ldr	r2, [pc, #204]	; (80057a8 <LPS22HB_0_Probe+0x158>)
 80056da:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80056dc:	4b33      	ldr	r3, [pc, #204]	; (80057ac <LPS22HB_0_Probe+0x15c>)
 80056de:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <LPS22HB_0_Probe+0x154>)
 80056e0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80056e2:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <LPS22HB_0_Probe+0x160>)
 80056e4:	4a33      	ldr	r2, [pc, #204]	; (80057b4 <LPS22HB_0_Probe+0x164>)
 80056e6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11e      	bne.n	800572c <LPS22HB_0_Probe+0xdc>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d019      	beq.n	800572c <LPS22HB_0_Probe+0xdc>
 80056f8:	7b3b      	ldrb	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d116      	bne.n	800572c <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <LPS22HB_0_Probe+0x168>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <LPS22HB_0_Probe+0x16c>)
 8005704:	3303      	adds	r3, #3
 8005706:	492e      	ldr	r1, [pc, #184]	; (80057c0 <LPS22HB_0_Probe+0x170>)
 8005708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800570c:	4b28      	ldr	r3, [pc, #160]	; (80057b0 <LPS22HB_0_Probe+0x160>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a26      	ldr	r2, [pc, #152]	; (80057ac <LPS22HB_0_Probe+0x15c>)
 8005714:	6852      	ldr	r2, [r2, #4]
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005720:	f06f 0304 	mvn.w	r3, #4
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005726:	e001      	b.n	800572c <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11e      	bne.n	8005770 <LPS22HB_0_Probe+0x120>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d019      	beq.n	8005770 <LPS22HB_0_Probe+0x120>
 800573c:	7b7b      	ldrb	r3, [r7, #13]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d116      	bne.n	8005770 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005742:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <LPS22HB_0_Probe+0x168>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <LPS22HB_0_Probe+0x16c>)
 8005748:	3303      	adds	r3, #3
 800574a:	491e      	ldr	r1, [pc, #120]	; (80057c4 <LPS22HB_0_Probe+0x174>)
 800574c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <LPS22HB_0_Probe+0x160>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a15      	ldr	r2, [pc, #84]	; (80057ac <LPS22HB_0_Probe+0x15c>)
 8005758:	6852      	ldr	r2, [r2, #4]
 800575a:	4610      	mov	r0, r2
 800575c:	4798      	blx	r3
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005764:	f06f 0304 	mvn.w	r3, #4
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800576a:	e001      	b.n	8005770 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <LPS22HB_0_Probe+0x136>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005780:	f06f 0304 	mvn.w	r3, #4
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005788:	4618      	mov	r0, r3
 800578a:	3740      	adds	r7, #64	; 0x40
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	08000959 	.word	0x08000959
 8005794:	080009d5 	.word	0x080009d5
 8005798:	08000a89 	.word	0x08000a89
 800579c:	08000a25 	.word	0x08000a25
 80057a0:	08000aed 	.word	0x08000aed
 80057a4:	200001d8 	.word	0x200001d8
 80057a8:	200001a4 	.word	0x200001a4
 80057ac:	2000043c 	.word	0x2000043c
 80057b0:	2000019c 	.word	0x2000019c
 80057b4:	2000003c 	.word	0x2000003c
 80057b8:	20000134 	.word	0x20000134
 80057bc:	20000184 	.word	0x20000184
 80057c0:	20000060 	.word	0x20000060
 80057c4:	2000004c 	.word	0x2000004c

080057c8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	; 0x38
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80057d6:	2301      	movs	r3, #1
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d06e      	beq.n	80058c2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f200 809d 	bhi.w	8005926 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <IKS01A2_MOTION_SENSOR_Init+0x32>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d032      	beq.n	800585e <IKS01A2_MOTION_SENSOR_Init+0x96>
 80057f8:	e095      	b.n	8005926 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80057fa:	6838      	ldr	r0, [r7, #0]
 80057fc:	f000 f966 	bl	8005acc <LSM6DSL_0_Probe>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	e0cc      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800580c:	4a68      	ldr	r2, [pc, #416]	; (80059b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4967      	ldr	r1, [pc, #412]	; (80059b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800581e:	f107 010c 	add.w	r1, r7, #12
 8005822:	4610      	mov	r0, r2
 8005824:	4798      	blx	r3
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800582c:	f06f 0306 	mvn.w	r3, #6
 8005830:	e0b9      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005832:	7b3b      	ldrb	r3, [r7, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d103      	bne.n	8005840 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	f043 0302 	orr.w	r3, r3, #2
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005840:	7b7b      	ldrb	r3, [r7, #13]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d103      	bne.n	800584e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d16c      	bne.n	800592e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800585c:	e067      	b.n	800592e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800585e:	6838      	ldr	r0, [r7, #0]
 8005860:	f000 f9f0 	bl	8005c44 <LSM303AGR_ACC_0_Probe>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	e09a      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005870:	4a4f      	ldr	r2, [pc, #316]	; (80059b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	494e      	ldr	r1, [pc, #312]	; (80059b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005882:	f107 010c 	add.w	r1, r7, #12
 8005886:	4610      	mov	r0, r2
 8005888:	4798      	blx	r3
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005890:	f06f 0306 	mvn.w	r3, #6
 8005894:	e087      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005896:	7b3b      	ldrb	r3, [r7, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d103      	bne.n	80058a4 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80058a4:	7b7b      	ldrb	r3, [r7, #13]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d103      	bne.n	80058b2 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d13c      	bne.n	8005932 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f043 0304 	orr.w	r3, r3, #4
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80058c0:	e037      	b.n	8005932 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80058c2:	6838      	ldr	r0, [r7, #0]
 80058c4:	f000 fa62 	bl	8005d8c <LSM303AGR_MAG_0_Probe>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	e068      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80058d4:	4a36      	ldr	r2, [pc, #216]	; (80059b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4935      	ldr	r1, [pc, #212]	; (80059b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058e6:	f107 010c 	add.w	r1, r7, #12
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80058f4:	f06f 0306 	mvn.w	r3, #6
 80058f8:	e055      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80058fa:	7b3b      	ldrb	r3, [r7, #12]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d103      	bne.n	8005908 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f043 0302 	orr.w	r3, r3, #2
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005908:	7b7b      	ldrb	r3, [r7, #13]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d103      	bne.n	8005916 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005916:	7bbb      	ldrb	r3, [r7, #14]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10c      	bne.n	8005936 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005924:	e007      	b.n	8005936 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005926:	f06f 0301 	mvn.w	r3, #1
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800592c:	e004      	b.n	8005938 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005936:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	e031      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005946:	e02a      	b.n	800599e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	4013      	ands	r3, r2
 800594e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005950:	429a      	cmp	r2, r3
 8005952:	d11e      	bne.n	8005992 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	4013      	ands	r3, r2
 800595a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595c:	429a      	cmp	r2, r3
 800595e:	d118      	bne.n	8005992 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005968:	4814      	ldr	r0, [pc, #80]	; (80059bc <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	440b      	add	r3, r1
 8005974:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	490e      	ldr	r1, [pc, #56]	; (80059b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005982:	4610      	mov	r0, r2
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800598c:	f06f 0304 	mvn.w	r3, #4
 8005990:	e009      	b.n	80059a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	3301      	adds	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d9d1      	bls.n	8005948 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3738      	adds	r7, #56	; 0x38
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000228 	.word	0x20000228
 80059b4:	20000444 	.word	0x20000444
 80059b8:	20000148 	.word	0x20000148
 80059bc:	20000204 	.word	0x20000204

080059c0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d903      	bls.n	80059d8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059d0:	f06f 0301 	mvn.w	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e028      	b.n	8005a2a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80059d8:	4a16      	ldr	r2, [pc, #88]	; (8005a34 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4013      	ands	r3, r2
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d11c      	bne.n	8005a24 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059f2:	4812      	ldr	r0, [pc, #72]	; (8005a3c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	440b      	add	r3, r1
 80059fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a16:	f06f 0304 	mvn.w	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e005      	b.n	8005a2a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e002      	b.n	8005a2a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a24:	f06f 0301 	mvn.w	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000234 	.word	0x20000234
 8005a38:	20000148 	.word	0x20000148
 8005a3c:	20000204 	.word	0x20000204
 8005a40:	20000444 	.word	0x20000444

08005a44 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d903      	bls.n	8005a5e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a56:	f06f 0301 	mvn.w	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e029      	b.n	8005ab2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005a5e:	4a17      	ldr	r2, [pc, #92]	; (8005abc <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d11d      	bne.n	8005aac <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a78:	4812      	ldr	r0, [pc, #72]	; (8005ac4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4413      	add	r3, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	490f      	ldr	r1, [pc, #60]	; (8005ac8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4610      	mov	r0, r2
 8005a96:	4798      	blx	r3
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a9e:	f06f 0304 	mvn.w	r3, #4
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e005      	b.n	8005ab2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e002      	b.n	8005ab2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005aac:	f06f 0301 	mvn.w	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000234 	.word	0x20000234
 8005ac0:	20000148 	.word	0x20000148
 8005ac4:	20000204 	.word	0x20000204
 8005ac8:	20000444 	.word	0x20000444

08005acc <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b092      	sub	sp, #72	; 0x48
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005adc:	23d7      	movs	r3, #215	; 0xd7
 8005ade:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ae2:	4b4a      	ldr	r3, [pc, #296]	; (8005c0c <LSM6DSL_0_Probe+0x140>)
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <LSM6DSL_0_Probe+0x144>)
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005aea:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <LSM6DSL_0_Probe+0x148>)
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005aee:	4b4a      	ldr	r3, [pc, #296]	; (8005c18 <LSM6DSL_0_Probe+0x14c>)
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005af2:	4b4a      	ldr	r3, [pc, #296]	; (8005c1c <LSM6DSL_0_Probe+0x150>)
 8005af4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005afa:	4619      	mov	r1, r3
 8005afc:	4848      	ldr	r0, [pc, #288]	; (8005c20 <LSM6DSL_0_Probe+0x154>)
 8005afe:	f7fe f891 	bl	8003c24 <LSM6DSL_RegisterBusIO>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b08:	f06f 0306 	mvn.w	r3, #6
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0e:	e077      	b.n	8005c00 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005b10:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005b14:	4619      	mov	r1, r3
 8005b16:	4842      	ldr	r0, [pc, #264]	; (8005c20 <LSM6DSL_0_Probe+0x154>)
 8005b18:	f7fe f97a 	bl	8003e10 <LSM6DSL_ReadID>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b22:	f06f 0306 	mvn.w	r3, #6
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
 8005b28:	e06a      	b.n	8005c00 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b2e:	2b6a      	cmp	r3, #106	; 0x6a
 8005b30:	d003      	beq.n	8005b3a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b32:	f06f 0306 	mvn.w	r3, #6
 8005b36:	647b      	str	r3, [r7, #68]	; 0x44
 8005b38:	e062      	b.n	8005c00 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4837      	ldr	r0, [pc, #220]	; (8005c20 <LSM6DSL_0_Probe+0x154>)
 8005b42:	f7fe f97b 	bl	8003e3c <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b46:	7a7b      	ldrb	r3, [r7, #9]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	7a3b      	ldrb	r3, [r7, #8]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	7abb      	ldrb	r3, [r7, #10]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4313      	orrs	r3, r2
 8005b56:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <LSM6DSL_0_Probe+0x158>)
 8005b58:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <LSM6DSL_0_Probe+0x15c>)
 8005b5c:	4a30      	ldr	r2, [pc, #192]	; (8005c20 <LSM6DSL_0_Probe+0x154>)
 8005b5e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005b60:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <LSM6DSL_0_Probe+0x160>)
 8005b62:	4a33      	ldr	r2, [pc, #204]	; (8005c30 <LSM6DSL_0_Probe+0x164>)
 8005b64:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11d      	bne.n	8005ba8 <LSM6DSL_0_Probe+0xdc>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <LSM6DSL_0_Probe+0xdc>
 8005b76:	7a7b      	ldrb	r3, [r7, #9]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d115      	bne.n	8005ba8 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005b7c:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <LSM6DSL_0_Probe+0x168>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <LSM6DSL_0_Probe+0x16c>)
 8005b82:	492e      	ldr	r1, [pc, #184]	; (8005c3c <LSM6DSL_0_Probe+0x170>)
 8005b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <LSM6DSL_0_Probe+0x160>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a26      	ldr	r2, [pc, #152]	; (8005c28 <LSM6DSL_0_Probe+0x15c>)
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	4610      	mov	r0, r2
 8005b94:	4798      	blx	r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b9c:	f06f 0304 	mvn.w	r3, #4
 8005ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba2:	e001      	b.n	8005ba8 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11d      	bne.n	8005bea <LSM6DSL_0_Probe+0x11e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d018      	beq.n	8005bea <LSM6DSL_0_Probe+0x11e>
 8005bb8:	7a3b      	ldrb	r3, [r7, #8]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d115      	bne.n	8005bea <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <LSM6DSL_0_Probe+0x168>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <LSM6DSL_0_Probe+0x16c>)
 8005bc4:	491e      	ldr	r1, [pc, #120]	; (8005c40 <LSM6DSL_0_Probe+0x174>)
 8005bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005bca:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <LSM6DSL_0_Probe+0x160>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <LSM6DSL_0_Probe+0x15c>)
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bde:	f06f 0304 	mvn.w	r3, #4
 8005be2:	647b      	str	r3, [r7, #68]	; 0x44
 8005be4:	e001      	b.n	8005bea <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d107      	bne.n	8005c00 <LSM6DSL_0_Probe+0x134>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bfa:	f06f 0304 	mvn.w	r3, #4
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3748      	adds	r7, #72	; 0x48
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	08000959 	.word	0x08000959
 8005c10:	080009d5 	.word	0x080009d5
 8005c14:	08000a89 	.word	0x08000a89
 8005c18:	08000a25 	.word	0x08000a25
 8005c1c:	08000aed 	.word	0x08000aed
 8005c20:	20000240 	.word	0x20000240
 8005c24:	20000234 	.word	0x20000234
 8005c28:	20000444 	.word	0x20000444
 8005c2c:	20000228 	.word	0x20000228
 8005c30:	200000dc 	.word	0x200000dc
 8005c34:	20000148 	.word	0x20000148
 8005c38:	20000204 	.word	0x20000204
 8005c3c:	20000110 	.word	0x20000110
 8005c40:	200000ec 	.word	0x200000ec

08005c44 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b092      	sub	sp, #72	; 0x48
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005c50:	2300      	movs	r3, #0
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005c54:	2333      	movs	r3, #51	; 0x33
 8005c56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005c5a:	4b3f      	ldr	r3, [pc, #252]	; (8005d58 <LSM303AGR_ACC_0_Probe+0x114>)
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <LSM303AGR_ACC_0_Probe+0x118>)
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <LSM303AGR_ACC_0_Probe+0x120>)
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <LSM303AGR_ACC_0_Probe+0x124>)
 8005c6c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c72:	4619      	mov	r1, r3
 8005c74:	483d      	ldr	r0, [pc, #244]	; (8005d6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005c76:	f7fc fc1f 	bl	80024b8 <LSM303AGR_ACC_RegisterBusIO>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c80:	f06f 0306 	mvn.w	r3, #6
 8005c84:	647b      	str	r3, [r7, #68]	; 0x44
 8005c86:	e062      	b.n	8005d4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005c88:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4837      	ldr	r0, [pc, #220]	; (8005d6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005c90:	f7fc fcd3 	bl	800263a <LSM303AGR_ACC_ReadID>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c9a:	f06f 0306 	mvn.w	r3, #6
 8005c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca0:	e055      	b.n	8005d4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca6:	2b33      	cmp	r3, #51	; 0x33
 8005ca8:	d003      	beq.n	8005cb2 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005caa:	f06f 0306 	mvn.w	r3, #6
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb0:	e04d      	b.n	8005d4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	482c      	ldr	r0, [pc, #176]	; (8005d6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005cba:	f7fc fcd5 	bl	8002668 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005cbe:	7a7b      	ldrb	r3, [r7, #9]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	7a3b      	ldrb	r3, [r7, #8]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005cc8:	7abb      	ldrb	r3, [r7, #10]
 8005cca:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005cd0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x130>)
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005cd6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <LSM303AGR_ACC_0_Probe+0x134>)
 8005cda:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <LSM303AGR_ACC_0_Probe+0x138>)
 8005cdc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d11e      	bne.n	8005d22 <LSM303AGR_ACC_0_Probe+0xde>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d019      	beq.n	8005d22 <LSM303AGR_ACC_0_Probe+0xde>
 8005cee:	7a3b      	ldrb	r3, [r7, #8]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d116      	bne.n	8005d22 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005cf4:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <LSM303AGR_ACC_0_Probe+0x140>)
 8005cfa:	3303      	adds	r3, #3
 8005cfc:	4922      	ldr	r1, [pc, #136]	; (8005d88 <LSM303AGR_ACC_0_Probe+0x144>)
 8005cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <LSM303AGR_ACC_0_Probe+0x134>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <LSM303AGR_ACC_0_Probe+0x130>)
 8005d0a:	6852      	ldr	r2, [r2, #4]
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d16:	f06f 0304 	mvn.w	r3, #4
 8005d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1c:	e001      	b.n	8005d22 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <LSM303AGR_ACC_0_Probe+0xf4>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d32:	f06f 0304 	mvn.w	r3, #4
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <LSM303AGR_ACC_0_Probe+0x10a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d48:	f06f 0304 	mvn.w	r3, #4
 8005d4c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3748      	adds	r7, #72	; 0x48
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	08000959 	.word	0x08000959
 8005d5c:	080009d5 	.word	0x080009d5
 8005d60:	08000a89 	.word	0x08000a89
 8005d64:	08000a25 	.word	0x08000a25
 8005d68:	08000aed 	.word	0x08000aed
 8005d6c:	20000270 	.word	0x20000270
 8005d70:	20000234 	.word	0x20000234
 8005d74:	20000444 	.word	0x20000444
 8005d78:	20000228 	.word	0x20000228
 8005d7c:	20000074 	.word	0x20000074
 8005d80:	20000148 	.word	0x20000148
 8005d84:	20000204 	.word	0x20000204
 8005d88:	20000084 	.word	0x20000084

08005d8c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b092      	sub	sp, #72	; 0x48
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005d9c:	233d      	movs	r3, #61	; 0x3d
 8005d9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005da2:	4b3f      	ldr	r3, [pc, #252]	; (8005ea0 <LSM303AGR_MAG_0_Probe+0x114>)
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005da6:	4b3f      	ldr	r3, [pc, #252]	; (8005ea4 <LSM303AGR_MAG_0_Probe+0x118>)
 8005da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005daa:	4b3f      	ldr	r3, [pc, #252]	; (8005ea8 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005dae:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <LSM303AGR_MAG_0_Probe+0x120>)
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <LSM303AGR_MAG_0_Probe+0x124>)
 8005db4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dba:	4619      	mov	r1, r3
 8005dbc:	483d      	ldr	r0, [pc, #244]	; (8005eb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005dbe:	f7fc ff41 	bl	8002c44 <LSM303AGR_MAG_RegisterBusIO>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dc8:	f06f 0306 	mvn.w	r3, #6
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dce:	e062      	b.n	8005e96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005dd0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4837      	ldr	r0, [pc, #220]	; (8005eb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005dd8:	f7fc ffeb 	bl	8002db2 <LSM303AGR_MAG_ReadID>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005de2:	f06f 0306 	mvn.w	r3, #6
 8005de6:	647b      	str	r3, [r7, #68]	; 0x44
 8005de8:	e055      	b.n	8005e96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d003      	beq.n	8005dfa <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005df2:	f06f 0306 	mvn.w	r3, #6
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
 8005df8:	e04d      	b.n	8005e96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005dfa:	f107 0308 	add.w	r3, r7, #8
 8005dfe:	4619      	mov	r1, r3
 8005e00:	482c      	ldr	r0, [pc, #176]	; (8005eb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005e02:	f7fc ffed 	bl	8002de0 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e06:	7a7b      	ldrb	r3, [r7, #9]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	7a3b      	ldrb	r3, [r7, #8]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005e10:	7abb      	ldrb	r3, [r7, #10]
 8005e12:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e14:	4313      	orrs	r3, r2
 8005e16:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005e18:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005e1a:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x130>)
 8005e1c:	4a25      	ldr	r2, [pc, #148]	; (8005eb4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005e1e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <LSM303AGR_MAG_0_Probe+0x134>)
 8005e22:	4a28      	ldr	r2, [pc, #160]	; (8005ec4 <LSM303AGR_MAG_0_Probe+0x138>)
 8005e24:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11e      	bne.n	8005e6a <LSM303AGR_MAG_0_Probe+0xde>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d019      	beq.n	8005e6a <LSM303AGR_MAG_0_Probe+0xde>
 8005e36:	7abb      	ldrb	r3, [r7, #10]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d116      	bne.n	8005e6a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e3c:	4b22      	ldr	r3, [pc, #136]	; (8005ec8 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <LSM303AGR_MAG_0_Probe+0x140>)
 8005e42:	3306      	adds	r3, #6
 8005e44:	4922      	ldr	r1, [pc, #136]	; (8005ed0 <LSM303AGR_MAG_0_Probe+0x144>)
 8005e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005e4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <LSM303AGR_MAG_0_Probe+0x134>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <LSM303AGR_MAG_0_Probe+0x130>)
 8005e52:	6892      	ldr	r2, [r2, #8]
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e5e:	f06f 0304 	mvn.w	r3, #4
 8005e62:	647b      	str	r3, [r7, #68]	; 0x44
 8005e64:	e001      	b.n	8005e6a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d107      	bne.n	8005e80 <LSM303AGR_MAG_0_Probe+0xf4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e7a:	f06f 0304 	mvn.w	r3, #4
 8005e7e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d107      	bne.n	8005e96 <LSM303AGR_MAG_0_Probe+0x10a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e90:	f06f 0304 	mvn.w	r3, #4
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3748      	adds	r7, #72	; 0x48
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	08000959 	.word	0x08000959
 8005ea4:	080009d5 	.word	0x080009d5
 8005ea8:	08000a89 	.word	0x08000a89
 8005eac:	08000a25 	.word	0x08000a25
 8005eb0:	08000aed 	.word	0x08000aed
 8005eb4:	2000029c 	.word	0x2000029c
 8005eb8:	20000234 	.word	0x20000234
 8005ebc:	20000444 	.word	0x20000444
 8005ec0:	20000228 	.word	0x20000228
 8005ec4:	200000a8 	.word	0x200000a8
 8005ec8:	20000148 	.word	0x20000148
 8005ecc:	20000204 	.word	0x20000204
 8005ed0:	200000b8 	.word	0x200000b8

08005ed4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ede:	2003      	movs	r0, #3
 8005ee0:	f000 f942 	bl	8006168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f000 f80d 	bl	8005f04 <HAL_InitTick>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	71fb      	strb	r3, [r7, #7]
 8005ef4:	e001      	b.n	8005efa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ef6:	f7fa fc41 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005efa:	79fb      	ldrb	r3, [r7, #7]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005f10:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <HAL_InitTick+0x6c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d023      	beq.n	8005f60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_InitTick+0x70>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <HAL_InitTick+0x6c>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f941 	bl	80061b6 <HAL_SYSTICK_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d809      	bhi.n	8005f54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f40:	2200      	movs	r2, #0
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	f000 f919 	bl	800617e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_InitTick+0x74>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e007      	b.n	8005f64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	e004      	b.n	8005f64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	73fb      	strb	r3, [r7, #15]
 8005f5e:	e001      	b.n	8005f64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000160 	.word	0x20000160
 8005f74:	20000000 	.word	0x20000000
 8005f78:	2000015c 	.word	0x2000015c

08005f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_IncTick+0x20>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f8e:	6013      	str	r3, [r2, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000160 	.word	0x20000160
 8005fa0:	20000450 	.word	0x20000450

08005fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_GetTick+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000450 	.word	0x20000450

08005fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fc4:	f7ff ffee 	bl	8005fa4 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d005      	beq.n	8005fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_Delay+0x44>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fe2:	bf00      	nop
 8005fe4:	f7ff ffde 	bl	8005fa4 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d8f7      	bhi.n	8005fe4 <HAL_Delay+0x28>
  {
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000160 	.word	0x20000160

08006004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <__NVIC_SetPriorityGrouping+0x44>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006020:	4013      	ands	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800602c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006036:	4a04      	ldr	r2, [pc, #16]	; (8006048 <__NVIC_SetPriorityGrouping+0x44>)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	60d3      	str	r3, [r2, #12]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <__NVIC_GetPriorityGrouping+0x18>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	0a1b      	lsrs	r3, r3, #8
 8006056:	f003 0307 	and.w	r3, r3, #7
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	e000ed00 	.word	0xe000ed00

08006068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	2b00      	cmp	r3, #0
 800607a:	db0a      	blt.n	8006092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	490c      	ldr	r1, [pc, #48]	; (80060b4 <__NVIC_SetPriority+0x4c>)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	0112      	lsls	r2, r2, #4
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	440b      	add	r3, r1
 800608c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006090:	e00a      	b.n	80060a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4908      	ldr	r1, [pc, #32]	; (80060b8 <__NVIC_SetPriority+0x50>)
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	3b04      	subs	r3, #4
 80060a0:	0112      	lsls	r2, r2, #4
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	440b      	add	r3, r1
 80060a6:	761a      	strb	r2, [r3, #24]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	e000e100 	.word	0xe000e100
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060bc:	b480      	push	{r7}
 80060be:	b089      	sub	sp, #36	; 0x24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f1c3 0307 	rsb	r3, r3, #7
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf28      	it	cs
 80060da:	2304      	movcs	r3, #4
 80060dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3304      	adds	r3, #4
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d902      	bls.n	80060ec <NVIC_EncodePriority+0x30>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3b03      	subs	r3, #3
 80060ea:	e000      	b.n	80060ee <NVIC_EncodePriority+0x32>
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	401a      	ands	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006104:	f04f 31ff 	mov.w	r1, #4294967295
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	43d9      	mvns	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006114:	4313      	orrs	r3, r2
         );
}
 8006116:	4618      	mov	r0, r3
 8006118:	3724      	adds	r7, #36	; 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3b01      	subs	r3, #1
 8006130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006134:	d301      	bcc.n	800613a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006136:	2301      	movs	r3, #1
 8006138:	e00f      	b.n	800615a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <SysTick_Config+0x40>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006142:	210f      	movs	r1, #15
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	f7ff ff8e 	bl	8006068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <SysTick_Config+0x40>)
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006152:	4b04      	ldr	r3, [pc, #16]	; (8006164 <SysTick_Config+0x40>)
 8006154:	2207      	movs	r2, #7
 8006156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	e000e010 	.word	0xe000e010

08006168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff ff47 	bl	8006004 <__NVIC_SetPriorityGrouping>
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	4603      	mov	r3, r0
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006190:	f7ff ff5c 	bl	800604c <__NVIC_GetPriorityGrouping>
 8006194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff8e 	bl	80060bc <NVIC_EncodePriority>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff5d 	bl	8006068 <__NVIC_SetPriority>
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff ffb0 	bl	8006124 <SysTick_Config>
 80061c4:	4603      	mov	r3, r0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061de:	e17f      	b.n	80064e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2101      	movs	r1, #1
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	4013      	ands	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8171 	beq.w	80064da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d005      	beq.n	8006210 <HAL_GPIO_Init+0x40>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d130      	bne.n	8006272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	2203      	movs	r2, #3
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4013      	ands	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006246:	2201      	movs	r2, #1
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43db      	mvns	r3, r3
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4013      	ands	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0201 	and.w	r2, r3, #1
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d118      	bne.n	80062b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006284:	2201      	movs	r2, #1
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4013      	ands	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	08db      	lsrs	r3, r3, #3
 800629a:	f003 0201 	and.w	r2, r3, #1
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d017      	beq.n	80062ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	2203      	movs	r2, #3
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	43db      	mvns	r3, r3
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d123      	bne.n	8006340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	08da      	lsrs	r2, r3, #3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3208      	adds	r2, #8
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	220f      	movs	r2, #15
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4013      	ands	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	08da      	lsrs	r2, r3, #3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3208      	adds	r2, #8
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	2203      	movs	r2, #3
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0203 	and.w	r2, r3, #3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80ac 	beq.w	80064da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006382:	4b5f      	ldr	r3, [pc, #380]	; (8006500 <HAL_GPIO_Init+0x330>)
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	4a5e      	ldr	r2, [pc, #376]	; (8006500 <HAL_GPIO_Init+0x330>)
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	6613      	str	r3, [r2, #96]	; 0x60
 800638e:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <HAL_GPIO_Init+0x330>)
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800639a:	4a5a      	ldr	r2, [pc, #360]	; (8006504 <HAL_GPIO_Init+0x334>)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	3302      	adds	r3, #2
 80063a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	220f      	movs	r2, #15
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4013      	ands	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80063c4:	d025      	beq.n	8006412 <HAL_GPIO_Init+0x242>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a4f      	ldr	r2, [pc, #316]	; (8006508 <HAL_GPIO_Init+0x338>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01f      	beq.n	800640e <HAL_GPIO_Init+0x23e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a4e      	ldr	r2, [pc, #312]	; (800650c <HAL_GPIO_Init+0x33c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d019      	beq.n	800640a <HAL_GPIO_Init+0x23a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4d      	ldr	r2, [pc, #308]	; (8006510 <HAL_GPIO_Init+0x340>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_GPIO_Init+0x236>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4c      	ldr	r2, [pc, #304]	; (8006514 <HAL_GPIO_Init+0x344>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00d      	beq.n	8006402 <HAL_GPIO_Init+0x232>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a4b      	ldr	r2, [pc, #300]	; (8006518 <HAL_GPIO_Init+0x348>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <HAL_GPIO_Init+0x22e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_GPIO_Init+0x34c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <HAL_GPIO_Init+0x22a>
 80063f6:	2306      	movs	r3, #6
 80063f8:	e00c      	b.n	8006414 <HAL_GPIO_Init+0x244>
 80063fa:	2307      	movs	r3, #7
 80063fc:	e00a      	b.n	8006414 <HAL_GPIO_Init+0x244>
 80063fe:	2305      	movs	r3, #5
 8006400:	e008      	b.n	8006414 <HAL_GPIO_Init+0x244>
 8006402:	2304      	movs	r3, #4
 8006404:	e006      	b.n	8006414 <HAL_GPIO_Init+0x244>
 8006406:	2303      	movs	r3, #3
 8006408:	e004      	b.n	8006414 <HAL_GPIO_Init+0x244>
 800640a:	2302      	movs	r3, #2
 800640c:	e002      	b.n	8006414 <HAL_GPIO_Init+0x244>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_GPIO_Init+0x244>
 8006412:	2300      	movs	r3, #0
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	f002 0203 	and.w	r2, r2, #3
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	4093      	lsls	r3, r2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006424:	4937      	ldr	r1, [pc, #220]	; (8006504 <HAL_GPIO_Init+0x334>)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	089b      	lsrs	r3, r3, #2
 800642a:	3302      	adds	r3, #2
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006432:	4b3b      	ldr	r3, [pc, #236]	; (8006520 <HAL_GPIO_Init+0x350>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	43db      	mvns	r3, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4013      	ands	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006456:	4a32      	ldr	r2, [pc, #200]	; (8006520 <HAL_GPIO_Init+0x350>)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800645c:	4b30      	ldr	r3, [pc, #192]	; (8006520 <HAL_GPIO_Init+0x350>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	43db      	mvns	r3, r3
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4013      	ands	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <HAL_GPIO_Init+0x350>)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006486:	4b26      	ldr	r3, [pc, #152]	; (8006520 <HAL_GPIO_Init+0x350>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	43db      	mvns	r3, r3
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4013      	ands	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80064aa:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_GPIO_Init+0x350>)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <HAL_GPIO_Init+0x350>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064d4:	4a12      	ldr	r2, [pc, #72]	; (8006520 <HAL_GPIO_Init+0x350>)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	3301      	adds	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f47f ae78 	bne.w	80061e0 <HAL_GPIO_Init+0x10>
  }
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40021000 	.word	0x40021000
 8006504:	40010000 	.word	0x40010000
 8006508:	48000400 	.word	0x48000400
 800650c:	48000800 	.word	0x48000800
 8006510:	48000c00 	.word	0x48000c00
 8006514:	48001000 	.word	0x48001000
 8006518:	48001400 	.word	0x48001400
 800651c:	48001800 	.word	0x48001800
 8006520:	40010400 	.word	0x40010400

08006524 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006532:	e0cd      	b.n	80066d0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006534:	2201      	movs	r2, #1
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4013      	ands	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80c0 	beq.w	80066ca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800654a:	4a68      	ldr	r2, [pc, #416]	; (80066ec <HAL_GPIO_DeInit+0x1c8>)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	3302      	adds	r3, #2
 8006552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006556:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	220f      	movs	r2, #15
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006572:	d025      	beq.n	80065c0 <HAL_GPIO_DeInit+0x9c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a5e      	ldr	r2, [pc, #376]	; (80066f0 <HAL_GPIO_DeInit+0x1cc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01f      	beq.n	80065bc <HAL_GPIO_DeInit+0x98>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a5d      	ldr	r2, [pc, #372]	; (80066f4 <HAL_GPIO_DeInit+0x1d0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d019      	beq.n	80065b8 <HAL_GPIO_DeInit+0x94>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a5c      	ldr	r2, [pc, #368]	; (80066f8 <HAL_GPIO_DeInit+0x1d4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_GPIO_DeInit+0x90>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a5b      	ldr	r2, [pc, #364]	; (80066fc <HAL_GPIO_DeInit+0x1d8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00d      	beq.n	80065b0 <HAL_GPIO_DeInit+0x8c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a5a      	ldr	r2, [pc, #360]	; (8006700 <HAL_GPIO_DeInit+0x1dc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d007      	beq.n	80065ac <HAL_GPIO_DeInit+0x88>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a59      	ldr	r2, [pc, #356]	; (8006704 <HAL_GPIO_DeInit+0x1e0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d101      	bne.n	80065a8 <HAL_GPIO_DeInit+0x84>
 80065a4:	2306      	movs	r3, #6
 80065a6:	e00c      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065a8:	2307      	movs	r3, #7
 80065aa:	e00a      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065ac:	2305      	movs	r3, #5
 80065ae:	e008      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065b0:	2304      	movs	r3, #4
 80065b2:	e006      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065b4:	2303      	movs	r3, #3
 80065b6:	e004      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e002      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <HAL_GPIO_DeInit+0x9e>
 80065c0:	2300      	movs	r3, #0
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	f002 0203 	and.w	r2, r2, #3
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	4093      	lsls	r3, r2
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d132      	bne.n	8006638 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80065d2:	4b4d      	ldr	r3, [pc, #308]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	43db      	mvns	r3, r3
 80065da:	494b      	ldr	r1, [pc, #300]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80065e0:	4b49      	ldr	r3, [pc, #292]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	4947      	ldr	r1, [pc, #284]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80065ee:	4b46      	ldr	r3, [pc, #280]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	4944      	ldr	r1, [pc, #272]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80065fc:	4b42      	ldr	r3, [pc, #264]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	43db      	mvns	r3, r3
 8006604:	4940      	ldr	r1, [pc, #256]	; (8006708 <HAL_GPIO_DeInit+0x1e4>)
 8006606:	4013      	ands	r3, r2
 8006608:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	220f      	movs	r2, #15
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800661a:	4a34      	ldr	r2, [pc, #208]	; (80066ec <HAL_GPIO_DeInit+0x1c8>)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	3302      	adds	r3, #2
 8006622:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	43da      	mvns	r2, r3
 800662a:	4830      	ldr	r0, [pc, #192]	; (80066ec <HAL_GPIO_DeInit+0x1c8>)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	400a      	ands	r2, r1
 8006632:	3302      	adds	r3, #2
 8006634:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	2103      	movs	r1, #3
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3208      	adds	r2, #8
 8006654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	220f      	movs	r2, #15
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	08d2      	lsrs	r2, r2, #3
 800666c:	4019      	ands	r1, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3208      	adds	r2, #8
 8006672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	2103      	movs	r1, #3
 8006680:	fa01 f303 	lsl.w	r3, r1, r3
 8006684:	43db      	mvns	r3, r3
 8006686:	401a      	ands	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	2101      	movs	r1, #1
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	401a      	ands	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	2103      	movs	r1, #3
 80066aa:	fa01 f303 	lsl.w	r3, r1, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	401a      	ands	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	2101      	movs	r1, #1
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	fa01 f303 	lsl.w	r3, r1, r3
 80066c2:	43db      	mvns	r3, r3
 80066c4:	401a      	ands	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	3301      	adds	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f af2b 	bne.w	8006534 <HAL_GPIO_DeInit+0x10>
  }
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40010000 	.word	0x40010000
 80066f0:	48000400 	.word	0x48000400
 80066f4:	48000800 	.word	0x48000800
 80066f8:	48000c00 	.word	0x48000c00
 80066fc:	48001000 	.word	0x48001000
 8006700:	48001400 	.word	0x48001400
 8006704:	48001800 	.word	0x48001800
 8006708:	40010400 	.word	0x40010400

0800670c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	807b      	strh	r3, [r7, #2]
 8006718:	4613      	mov	r3, r2
 800671a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800671c:	787b      	ldrb	r3, [r7, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006722:	887a      	ldrh	r2, [r7, #2]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006728:	e002      	b.n	8006730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e081      	b.n	8006852 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8a8 	bl	80068b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2224      	movs	r2, #36	; 0x24
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800678c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800679c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	e006      	b.n	80067c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d104      	bne.n	80067d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69d9      	ldr	r1, [r3, #28]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e021      	b.n	80068b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2224      	movs	r2, #36	; 0x24
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f821 	bl	80068cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	4608      	mov	r0, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	461a      	mov	r2, r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	817b      	strh	r3, [r7, #10]
 80068f2:	460b      	mov	r3, r1
 80068f4:	813b      	strh	r3, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b20      	cmp	r3, #32
 8006904:	f040 80f9 	bne.w	8006afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_I2C_Mem_Write+0x34>
 800690e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0ed      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_I2C_Mem_Write+0x4e>
 800692a:	2302      	movs	r3, #2
 800692c:	e0e6      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006936:	f7ff fb35 	bl	8005fa4 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2319      	movs	r3, #25
 8006942:	2201      	movs	r2, #1
 8006944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fadd 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0d1      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2221      	movs	r2, #33	; 0x21
 800695c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006980:	88f8      	ldrh	r0, [r7, #6]
 8006982:	893a      	ldrh	r2, [r7, #8]
 8006984:	8979      	ldrh	r1, [r7, #10]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4603      	mov	r3, r0
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f9ed 	bl	8006d70 <I2C_RequestMemoryWrite>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0a9      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2bff      	cmp	r3, #255	; 0xff
 80069b0:	d90e      	bls.n	80069d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	8979      	ldrh	r1, [r7, #10]
 80069c0:	2300      	movs	r3, #0
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fc45 	bl	8007258 <I2C_TransferConfig>
 80069ce:	e00f      	b.n	80069f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	8979      	ldrh	r1, [r7, #10]
 80069e2:	2300      	movs	r3, #0
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fc34 	bl	8007258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fac7 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e07b      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	781a      	ldrb	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d034      	beq.n	8006aa8 <HAL_I2C_Mem_Write+0x1c8>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d130      	bne.n	8006aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fa59 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e04d      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2bff      	cmp	r3, #255	; 0xff
 8006a68:	d90e      	bls.n	8006a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	22ff      	movs	r2, #255	; 0xff
 8006a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	8979      	ldrh	r1, [r7, #10]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fbe9 	bl	8007258 <I2C_TransferConfig>
 8006a86:	e00f      	b.n	8006aa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	8979      	ldrh	r1, [r7, #10]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fbd8 	bl	8007258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d19e      	bne.n	80069f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 faa6 	bl	8007008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e01a      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2220      	movs	r2, #32
 8006acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <HAL_I2C_Mem_Write+0x224>)
 8006ada:	400b      	ands	r3, r1
 8006adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	fe00e800 	.word	0xfe00e800

08006b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	4608      	mov	r0, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	813b      	strh	r3, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	f040 80fd 	bne.w	8006d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_I2C_Mem_Read+0x34>
 8006b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0f1      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_I2C_Mem_Read+0x4e>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e0ea      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b5e:	f7ff fa21 	bl	8005fa4 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2319      	movs	r3, #25
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f9c9 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0d5      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2222      	movs	r2, #34	; 0x22
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2240      	movs	r2, #64	; 0x40
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ba8:	88f8      	ldrh	r0, [r7, #6]
 8006baa:	893a      	ldrh	r2, [r7, #8]
 8006bac:	8979      	ldrh	r1, [r7, #10]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f92d 	bl	8006e18 <I2C_RequestMemoryRead>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0ad      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2bff      	cmp	r3, #255	; 0xff
 8006bd8:	d90e      	bls.n	8006bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	8979      	ldrh	r1, [r7, #10]
 8006be8:	4b52      	ldr	r3, [pc, #328]	; (8006d34 <HAL_I2C_Mem_Read+0x22c>)
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fb31 	bl	8007258 <I2C_TransferConfig>
 8006bf6:	e00f      	b.n	8006c18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	8979      	ldrh	r1, [r7, #10]
 8006c0a:	4b4a      	ldr	r3, [pc, #296]	; (8006d34 <HAL_I2C_Mem_Read+0x22c>)
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fb20 	bl	8007258 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2104      	movs	r1, #4
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f970 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e07c      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d034      	beq.n	8006cd8 <HAL_I2C_Mem_Read+0x1d0>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d130      	bne.n	8006cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f941 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e04d      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2bff      	cmp	r3, #255	; 0xff
 8006c98:	d90e      	bls.n	8006cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	8979      	ldrh	r1, [r7, #10]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fad1 	bl	8007258 <I2C_TransferConfig>
 8006cb6:	e00f      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	8979      	ldrh	r1, [r7, #10]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fac0 	bl	8007258 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d19a      	bne.n	8006c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f98e 	bl	8007008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e01a      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <HAL_I2C_Mem_Read+0x230>)
 8006d0a:	400b      	ands	r3, r1
 8006d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e000      	b.n	8006d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d2a:	2302      	movs	r3, #2
  }
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	80002400 	.word	0x80002400
 8006d38:	fe00e800 	.word	0xfe00e800

08006d3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d4a:	b2db      	uxtb	r3, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	460b      	mov	r3, r1
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	8979      	ldrh	r1, [r7, #10]
 8006d90:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <I2C_RequestMemoryWrite+0xa4>)
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fa5d 	bl	8007258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f8f0 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e02c      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d105      	bne.n	8006dc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db8:	893b      	ldrh	r3, [r7, #8]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8006dc2:	e015      	b.n	8006df0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dc4:	893b      	ldrh	r3, [r7, #8]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	69b9      	ldr	r1, [r7, #24]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8d6 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e012      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006de6:	893b      	ldrh	r3, [r7, #8]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f884 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	80002000 	.word	0x80002000

08006e18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	4608      	mov	r0, r1
 8006e22:	4611      	mov	r1, r2
 8006e24:	461a      	mov	r2, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	817b      	strh	r3, [r7, #10]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	813b      	strh	r3, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	8979      	ldrh	r1, [r7, #10]
 8006e38:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <I2C_RequestMemoryRead+0xa4>)
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fa0a 	bl	8007258 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f89d 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e02c      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5e:	893b      	ldrh	r3, [r7, #8]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
 8006e68:	e015      	b.n	8006e96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	69b9      	ldr	r1, [r7, #24]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f883 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e012      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8c:	893b      	ldrh	r3, [r7, #8]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2140      	movs	r1, #64	; 0x40
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f831 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	80002000 	.word	0x80002000

08006ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d103      	bne.n	8006ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d007      	beq.n	8006efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	619a      	str	r2, [r3, #24]
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f18:	e022      	b.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d01e      	beq.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7ff f83f 	bl	8005fa4 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d113      	bne.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e00f      	b.n	8006f80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d0cd      	beq.n	8006f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f94:	e02c      	b.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f870 	bl	8007080 <I2C_IsErrorOccurred>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02a      	b.n	8007000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d01e      	beq.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb2:	f7fe fff7 	bl	8005fa4 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d113      	bne.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	f043 0220 	orr.w	r2, r3, #32
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e007      	b.n	8007000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d1cb      	bne.n	8006f96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007014:	e028      	b.n	8007068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f830 	bl	8007080 <I2C_IsErrorOccurred>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e026      	b.n	8007078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702a:	f7fe ffbb 	bl	8005fa4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d113      	bne.n	8007068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e007      	b.n	8007078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d1cf      	bne.n	8007016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d075      	beq.n	8007198 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2210      	movs	r2, #16
 80070b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070b4:	e056      	b.n	8007164 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070bc:	d052      	beq.n	8007164 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070be:	f7fe ff71 	bl	8005fa4 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d302      	bcc.n	80070d4 <I2C_IsErrorOccurred+0x54>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d147      	bne.n	8007164 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f6:	d12e      	bne.n	8007156 <I2C_IsErrorOccurred+0xd6>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fe:	d02a      	beq.n	8007156 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007100:	7cfb      	ldrb	r3, [r7, #19]
 8007102:	2b20      	cmp	r3, #32
 8007104:	d027      	beq.n	8007156 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007114:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007116:	f7fe ff45 	bl	8005fa4 <HAL_GetTick>
 800711a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800711c:	e01b      	b.n	8007156 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800711e:	f7fe ff41 	bl	8005fa4 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b19      	cmp	r3, #25
 800712a:	d914      	bls.n	8007156 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b20      	cmp	r3, #32
 8007162:	d1dc      	bne.n	800711e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b20      	cmp	r3, #32
 8007170:	d003      	beq.n	800717a <I2C_IsErrorOccurred+0xfa>
 8007172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007176:	2b00      	cmp	r3, #0
 8007178:	d09d      	beq.n	80070b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800717a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2220      	movs	r2, #32
 8007188:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	f043 0304 	orr.w	r3, r3, #4
 8007190:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f043 0308 	orr.w	r3, r3, #8
 80071d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01c      	beq.n	8007248 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff fe56 	bl	8006ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <I2C_IsErrorOccurred+0x1d4>)
 8007220:	400b      	ands	r3, r1
 8007222:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	431a      	orrs	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800724c:	4618      	mov	r0, r3
 800724e:	3728      	adds	r7, #40	; 0x28
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	fe00e800 	.word	0xfe00e800

08007258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	817b      	strh	r3, [r7, #10]
 8007266:	4613      	mov	r3, r2
 8007268:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800726a:	897b      	ldrh	r3, [r7, #10]
 800726c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007270:	7a7b      	ldrb	r3, [r7, #9]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007278:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	4313      	orrs	r3, r2
 8007282:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007286:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	0d5b      	lsrs	r3, r3, #21
 8007292:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <I2C_TransferConfig+0x60>)
 8007298:	430b      	orrs	r3, r1
 800729a:	43db      	mvns	r3, r3
 800729c:	ea02 0103 	and.w	r1, r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	03ff63ff 	.word	0x03ff63ff

080072bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d138      	bne.n	8007344 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072dc:	2302      	movs	r3, #2
 80072de:	e032      	b.n	8007346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2224      	movs	r2, #36	; 0x24
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800730e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	e000      	b.n	8007346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007344:	2302      	movs	r3, #2
  }
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b20      	cmp	r3, #32
 8007366:	d139      	bne.n	80073dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007372:	2302      	movs	r3, #2
 8007374:	e033      	b.n	80073de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	; 0x24
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0201 	orr.w	r2, r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e000      	b.n	80073de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <HAL_PWREx_GetVoltageRange+0x18>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40007000 	.word	0x40007000

08007408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007416:	d130      	bne.n	800747a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007418:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d038      	beq.n	8007498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007426:	4b20      	ldr	r3, [pc, #128]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007434:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007436:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2232      	movs	r2, #50	; 0x32
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	0c9b      	lsrs	r3, r3, #18
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800744c:	e002      	b.n	8007454 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b01      	subs	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007454:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d102      	bne.n	8007468 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f2      	bne.n	800744e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007468:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007474:	d110      	bne.n	8007498 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e00f      	b.n	800749a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007486:	d007      	beq.n	8007498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007488:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007490:	4a05      	ldr	r2, [pc, #20]	; (80074a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007496:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40007000 	.word	0x40007000
 80074ac:	20000000 	.word	0x20000000
 80074b0:	431bde83 	.word	0x431bde83

080074b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e3d4      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074c6:	4ba1      	ldr	r3, [pc, #644]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d0:	4b9e      	ldr	r3, [pc, #632]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80e4 	beq.w	80076b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <HAL_RCC_OscConfig+0x4a>
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2b0c      	cmp	r3, #12
 80074f2:	f040 808b 	bne.w	800760c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 8087 	bne.w	800760c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074fe:	4b93      	ldr	r3, [pc, #588]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <HAL_RCC_OscConfig+0x62>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e3ac      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	4b8c      	ldr	r3, [pc, #560]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <HAL_RCC_OscConfig+0x7c>
 8007526:	4b89      	ldr	r3, [pc, #548]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800752e:	e005      	b.n	800753c <HAL_RCC_OscConfig+0x88>
 8007530:	4b86      	ldr	r3, [pc, #536]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800753c:	4293      	cmp	r3, r2
 800753e:	d223      	bcs.n	8007588 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fd41 	bl	8007fcc <RCC_SetFlashLatencyFromMSIRange>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e38d      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007554:	4b7d      	ldr	r3, [pc, #500]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a7c      	ldr	r2, [pc, #496]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800755a:	f043 0308 	orr.w	r3, r3, #8
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	4b7a      	ldr	r3, [pc, #488]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	4977      	ldr	r1, [pc, #476]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800756e:	4313      	orrs	r3, r2
 8007570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007572:	4b76      	ldr	r3, [pc, #472]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	4972      	ldr	r1, [pc, #456]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007582:	4313      	orrs	r3, r2
 8007584:	604b      	str	r3, [r1, #4]
 8007586:	e025      	b.n	80075d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007588:	4b70      	ldr	r3, [pc, #448]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6f      	ldr	r2, [pc, #444]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800758e:	f043 0308 	orr.w	r3, r3, #8
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	4b6d      	ldr	r3, [pc, #436]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	496a      	ldr	r1, [pc, #424]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075a6:	4b69      	ldr	r3, [pc, #420]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	4965      	ldr	r1, [pc, #404]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fd01 	bl	8007fcc <RCC_SetFlashLatencyFromMSIRange>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e34d      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075d4:	f000 fc36 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b5c      	ldr	r3, [pc, #368]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	091b      	lsrs	r3, r3, #4
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	495a      	ldr	r1, [pc, #360]	; (8007750 <HAL_RCC_OscConfig+0x29c>)
 80075e6:	5ccb      	ldrb	r3, [r1, r3]
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	4a58      	ldr	r2, [pc, #352]	; (8007754 <HAL_RCC_OscConfig+0x2a0>)
 80075f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <HAL_RCC_OscConfig+0x2a4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fc83 	bl	8005f04 <HAL_InitTick>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d052      	beq.n	80076ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	e331      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d032      	beq.n	800767a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007614:	4b4d      	ldr	r3, [pc, #308]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a4c      	ldr	r2, [pc, #304]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007620:	f7fe fcc0 	bl	8005fa4 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007628:	f7fe fcbc 	bl	8005fa4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e31a      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800763a:	4b44      	ldr	r3, [pc, #272]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f0      	beq.n	8007628 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007646:	4b41      	ldr	r3, [pc, #260]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a40      	ldr	r2, [pc, #256]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800764c:	f043 0308 	orr.w	r3, r3, #8
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	4b3e      	ldr	r3, [pc, #248]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	493b      	ldr	r1, [pc, #236]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007660:	4313      	orrs	r3, r2
 8007662:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007664:	4b39      	ldr	r3, [pc, #228]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	4936      	ldr	r1, [pc, #216]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007674:	4313      	orrs	r3, r2
 8007676:	604b      	str	r3, [r1, #4]
 8007678:	e01a      	b.n	80076b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800767a:	4b34      	ldr	r3, [pc, #208]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a33      	ldr	r2, [pc, #204]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007686:	f7fe fc8d 	bl	8005fa4 <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800768e:	f7fe fc89 	bl	8005fa4 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e2e7      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076a0:	4b2a      	ldr	r3, [pc, #168]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f0      	bne.n	800768e <HAL_RCC_OscConfig+0x1da>
 80076ac:	e000      	b.n	80076b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d074      	beq.n	80077a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d005      	beq.n	80076ce <HAL_RCC_OscConfig+0x21a>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	2b0c      	cmp	r3, #12
 80076c6:	d10e      	bne.n	80076e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d10b      	bne.n	80076e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ce:	4b1f      	ldr	r3, [pc, #124]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d064      	beq.n	80077a4 <HAL_RCC_OscConfig+0x2f0>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d160      	bne.n	80077a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e2c4      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ee:	d106      	bne.n	80076fe <HAL_RCC_OscConfig+0x24a>
 80076f0:	4b16      	ldr	r3, [pc, #88]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a15      	ldr	r2, [pc, #84]	; (800774c <HAL_RCC_OscConfig+0x298>)
 80076f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e01d      	b.n	800773a <HAL_RCC_OscConfig+0x286>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007706:	d10c      	bne.n	8007722 <HAL_RCC_OscConfig+0x26e>
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a0f      	ldr	r2, [pc, #60]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800770e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a0c      	ldr	r2, [pc, #48]	; (800774c <HAL_RCC_OscConfig+0x298>)
 800771a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	e00b      	b.n	800773a <HAL_RCC_OscConfig+0x286>
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a09      	ldr	r2, [pc, #36]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a06      	ldr	r2, [pc, #24]	; (800774c <HAL_RCC_OscConfig+0x298>)
 8007734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007738:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01c      	beq.n	800777c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fe fc2f 	bl	8005fa4 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007748:	e011      	b.n	800776e <HAL_RCC_OscConfig+0x2ba>
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000
 8007750:	08009384 	.word	0x08009384
 8007754:	20000000 	.word	0x20000000
 8007758:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800775c:	f7fe fc22 	bl	8005fa4 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	; 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e280      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800776e:	4baf      	ldr	r3, [pc, #700]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <HAL_RCC_OscConfig+0x2a8>
 800777a:	e014      	b.n	80077a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fe fc12 	bl	8005fa4 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007784:	f7fe fc0e 	bl	8005fa4 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b64      	cmp	r3, #100	; 0x64
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e26c      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007796:	4ba5      	ldr	r3, [pc, #660]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x2d0>
 80077a2:	e000      	b.n	80077a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d060      	beq.n	8007874 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d005      	beq.n	80077c4 <HAL_RCC_OscConfig+0x310>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b0c      	cmp	r3, #12
 80077bc:	d119      	bne.n	80077f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d116      	bne.n	80077f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077c4:	4b99      	ldr	r3, [pc, #612]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <HAL_RCC_OscConfig+0x328>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e249      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077dc:	4b93      	ldr	r3, [pc, #588]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	061b      	lsls	r3, r3, #24
 80077ea:	4990      	ldr	r1, [pc, #576]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077f0:	e040      	b.n	8007874 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d023      	beq.n	8007842 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077fa:	4b8c      	ldr	r3, [pc, #560]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a8b      	ldr	r2, [pc, #556]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fe fbcd 	bl	8005fa4 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800780e:	f7fe fbc9 	bl	8005fa4 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e227      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007820:	4b82      	ldr	r3, [pc, #520]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800782c:	4b7f      	ldr	r3, [pc, #508]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	497c      	ldr	r1, [pc, #496]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800783c:	4313      	orrs	r3, r2
 800783e:	604b      	str	r3, [r1, #4]
 8007840:	e018      	b.n	8007874 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007842:	4b7a      	ldr	r3, [pc, #488]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a79      	ldr	r2, [pc, #484]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800784c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784e:	f7fe fba9 	bl	8005fa4 <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007854:	e008      	b.n	8007868 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007856:	f7fe fba5 	bl	8005fa4 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e203      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007868:	4b70      	ldr	r3, [pc, #448]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f0      	bne.n	8007856 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d03c      	beq.n	80078fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01c      	beq.n	80078c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007888:	4b68      	ldr	r3, [pc, #416]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800788a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800788e:	4a67      	ldr	r2, [pc, #412]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007898:	f7fe fb84 	bl	8005fa4 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078a0:	f7fe fb80 	bl	8005fa4 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e1de      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078b2:	4b5e      	ldr	r3, [pc, #376]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80078b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ef      	beq.n	80078a0 <HAL_RCC_OscConfig+0x3ec>
 80078c0:	e01b      	b.n	80078fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078c2:	4b5a      	ldr	r3, [pc, #360]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80078c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c8:	4a58      	ldr	r2, [pc, #352]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d2:	f7fe fb67 	bl	8005fa4 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078da:	f7fe fb63 	bl	8005fa4 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e1c1      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078ec:	4b4f      	ldr	r3, [pc, #316]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80078ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ef      	bne.n	80078da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a6 	beq.w	8007a54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800790c:	4b47      	ldr	r3, [pc, #284]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800790e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10d      	bne.n	8007934 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007918:	4b44      	ldr	r3, [pc, #272]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791c:	4a43      	ldr	r2, [pc, #268]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007922:	6593      	str	r3, [r2, #88]	; 0x58
 8007924:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007930:	2301      	movs	r3, #1
 8007932:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007934:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <HAL_RCC_OscConfig+0x57c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d118      	bne.n	8007972 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007940:	4b3b      	ldr	r3, [pc, #236]	; (8007a30 <HAL_RCC_OscConfig+0x57c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3a      	ldr	r2, [pc, #232]	; (8007a30 <HAL_RCC_OscConfig+0x57c>)
 8007946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800794c:	f7fe fb2a 	bl	8005fa4 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007954:	f7fe fb26 	bl	8005fa4 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e184      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007966:	4b32      	ldr	r3, [pc, #200]	; (8007a30 <HAL_RCC_OscConfig+0x57c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f0      	beq.n	8007954 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d108      	bne.n	800798c <HAL_RCC_OscConfig+0x4d8>
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007980:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800798a:	e024      	b.n	80079d6 <HAL_RCC_OscConfig+0x522>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b05      	cmp	r3, #5
 8007992:	d110      	bne.n	80079b6 <HAL_RCC_OscConfig+0x502>
 8007994:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 800799c:	f043 0304 	orr.w	r3, r3, #4
 80079a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079a4:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079b4:	e00f      	b.n	80079d6 <HAL_RCC_OscConfig+0x522>
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	4a1b      	ldr	r2, [pc, #108]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079c6:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079ce:	f023 0304 	bic.w	r3, r3, #4
 80079d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079de:	f7fe fae1 	bl	8005fa4 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079e4:	e00a      	b.n	80079fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e6:	f7fe fadd 	bl	8005fa4 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e139      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <HAL_RCC_OscConfig+0x578>)
 80079fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0ed      	beq.n	80079e6 <HAL_RCC_OscConfig+0x532>
 8007a0a:	e01a      	b.n	8007a42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0c:	f7fe faca 	bl	8005fa4 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a12:	e00f      	b.n	8007a34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a14:	f7fe fac6 	bl	8005fa4 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d906      	bls.n	8007a34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e122      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
 8007a2a:	bf00      	nop
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a34:	4b90      	ldr	r3, [pc, #576]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e8      	bne.n	8007a14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a42:	7ffb      	ldrb	r3, [r7, #31]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a48:	4b8b      	ldr	r3, [pc, #556]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4c:	4a8a      	ldr	r2, [pc, #552]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 8108 	beq.w	8007c6e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	f040 80d0 	bne.w	8007c08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a68:	4b83      	ldr	r3, [pc, #524]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f003 0203 	and.w	r2, r3, #3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d130      	bne.n	8007ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	3b01      	subs	r3, #1
 8007a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d127      	bne.n	8007ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d11f      	bne.n	8007ade <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007aa8:	2a07      	cmp	r2, #7
 8007aaa:	bf14      	ite	ne
 8007aac:	2201      	movne	r2, #1
 8007aae:	2200      	moveq	r2, #0
 8007ab0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d113      	bne.n	8007ade <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d109      	bne.n	8007ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d06e      	beq.n	8007bbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d069      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ae4:	4b64      	ldr	r3, [pc, #400]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007af0:	4b61      	ldr	r3, [pc, #388]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e0b7      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b00:	4b5d      	ldr	r3, [pc, #372]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a5c      	ldr	r2, [pc, #368]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b0c:	f7fe fa4a 	bl	8005fa4 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b14:	f7fe fa46 	bl	8005fa4 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e0a4      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b26:	4b54      	ldr	r3, [pc, #336]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f0      	bne.n	8007b14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b32:	4b51      	ldr	r3, [pc, #324]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	4b51      	ldr	r3, [pc, #324]	; (8007c7c <HAL_RCC_OscConfig+0x7c8>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b42:	3a01      	subs	r2, #1
 8007b44:	0112      	lsls	r2, r2, #4
 8007b46:	4311      	orrs	r1, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b4c:	0212      	lsls	r2, r2, #8
 8007b4e:	4311      	orrs	r1, r2
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b54:	0852      	lsrs	r2, r2, #1
 8007b56:	3a01      	subs	r2, #1
 8007b58:	0552      	lsls	r2, r2, #21
 8007b5a:	4311      	orrs	r1, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b60:	0852      	lsrs	r2, r2, #1
 8007b62:	3a01      	subs	r2, #1
 8007b64:	0652      	lsls	r2, r2, #25
 8007b66:	4311      	orrs	r1, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b6c:	0912      	lsrs	r2, r2, #4
 8007b6e:	0452      	lsls	r2, r2, #17
 8007b70:	430a      	orrs	r2, r1
 8007b72:	4941      	ldr	r1, [pc, #260]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b78:	4b3f      	ldr	r3, [pc, #252]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a3e      	ldr	r2, [pc, #248]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007b84:	4b3c      	ldr	r3, [pc, #240]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	4a3b      	ldr	r2, [pc, #236]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b90:	f7fe fa08 	bl	8005fa4 <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b98:	f7fe fa04 	bl	8005fa4 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e062      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007baa:	4b33      	ldr	r3, [pc, #204]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f0      	beq.n	8007b98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007bb6:	e05a      	b.n	8007c6e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e059      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bbc:	4b2e      	ldr	r3, [pc, #184]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d152      	bne.n	8007c6e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4a27      	ldr	r2, [pc, #156]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007be0:	f7fe f9e0 	bl	8005fa4 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be8:	f7fe f9dc 	bl	8005fa4 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e03a      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfa:	4b1f      	ldr	r3, [pc, #124]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x734>
 8007c06:	e032      	b.n	8007c6e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b0c      	cmp	r3, #12
 8007c0c:	d02d      	beq.n	8007c6a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0e:	4b1a      	ldr	r3, [pc, #104]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a19      	ldr	r2, [pc, #100]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c2c:	f023 0303 	bic.w	r3, r3, #3
 8007c30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007c32:	4b11      	ldr	r3, [pc, #68]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	4a10      	ldr	r2, [pc, #64]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c42:	f7fe f9af 	bl	8005fa4 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4a:	f7fe f9ab 	bl	8005fa4 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e009      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <HAL_RCC_OscConfig+0x7c4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <HAL_RCC_OscConfig+0x796>
 8007c68:	e001      	b.n	8007c6e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	f99d808c 	.word	0xf99d808c

08007c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0c8      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c94:	4b66      	ldr	r3, [pc, #408]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d910      	bls.n	8007cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ca2:	4b63      	ldr	r3, [pc, #396]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f023 0207 	bic.w	r2, r3, #7
 8007caa:	4961      	ldr	r1, [pc, #388]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb2:	4b5f      	ldr	r3, [pc, #380]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0b0      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d04c      	beq.n	8007d6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d107      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cd8:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d121      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e09e      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d107      	bne.n	8007d00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cf0:	4b50      	ldr	r3, [pc, #320]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d115      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e092      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d08:	4b4a      	ldr	r3, [pc, #296]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e086      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d18:	4b46      	ldr	r3, [pc, #280]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e07e      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d28:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 0203 	bic.w	r2, r3, #3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	493f      	ldr	r1, [pc, #252]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7fe f933 	bl	8005fa4 <HAL_GetTick>
 8007d3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d40:	e00a      	b.n	8007d58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d42:	f7fe f92f 	bl	8005fa4 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e066      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d58:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 020c 	and.w	r2, r3, #12
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d1eb      	bne.n	8007d42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	492c      	ldr	r1, [pc, #176]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d88:	4b29      	ldr	r3, [pc, #164]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d210      	bcs.n	8007db8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f023 0207 	bic.w	r2, r3, #7
 8007d9e:	4924      	ldr	r1, [pc, #144]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da6:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <HAL_RCC_ClockConfig+0x1b0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d001      	beq.n	8007db8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e036      	b.n	8007e26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	4918      	ldr	r1, [pc, #96]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d009      	beq.n	8007df6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	4910      	ldr	r1, [pc, #64]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007df6:	f000 f825 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <HAL_RCC_ClockConfig+0x1b4>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	091b      	lsrs	r3, r3, #4
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	490c      	ldr	r1, [pc, #48]	; (8007e38 <HAL_RCC_ClockConfig+0x1b8>)
 8007e08:	5ccb      	ldrb	r3, [r1, r3]
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e12:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <HAL_RCC_ClockConfig+0x1c0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe f872 	bl	8005f04 <HAL_InitTick>
 8007e20:	4603      	mov	r3, r0
 8007e22:	72fb      	strb	r3, [r7, #11]

  return status;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40022000 	.word	0x40022000
 8007e34:	40021000 	.word	0x40021000
 8007e38:	08009384 	.word	0x08009384
 8007e3c:	20000000 	.word	0x20000000
 8007e40:	2000015c 	.word	0x2000015c

08007e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b089      	sub	sp, #36	; 0x24
 8007e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e52:	4b3e      	ldr	r3, [pc, #248]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e5c:	4b3b      	ldr	r3, [pc, #236]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <HAL_RCC_GetSysClockFreq+0x34>
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b0c      	cmp	r3, #12
 8007e70:	d121      	bne.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d11e      	bne.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007e78:	4b34      	ldr	r3, [pc, #208]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e84:	4b31      	ldr	r3, [pc, #196]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e005      	b.n	8007ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e94:	4b2d      	ldr	r3, [pc, #180]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	091b      	lsrs	r3, r3, #4
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007ea0:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10d      	bne.n	8007ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007eb4:	e00a      	b.n	8007ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d102      	bne.n	8007ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ebc:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ebe:	61bb      	str	r3, [r7, #24]
 8007ec0:	e004      	b.n	8007ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ec8:	4b23      	ldr	r3, [pc, #140]	; (8007f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8007eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b0c      	cmp	r3, #12
 8007ed0:	d134      	bne.n	8007f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d003      	beq.n	8007eea <HAL_RCC_GetSysClockFreq+0xa6>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d003      	beq.n	8007ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8007ee8:	e005      	b.n	8007ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007eea:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007eec:	617b      	str	r3, [r7, #20]
      break;
 8007eee:	e005      	b.n	8007efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ef0:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8007ef2:	617b      	str	r3, [r7, #20]
      break;
 8007ef4:	e002      	b.n	8007efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	617b      	str	r3, [r7, #20]
      break;
 8007efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007efc:	4b13      	ldr	r3, [pc, #76]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	091b      	lsrs	r3, r3, #4
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	3301      	adds	r3, #1
 8007f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	fb02 f203 	mul.w	r2, r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	0e5b      	lsrs	r3, r3, #25
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3724      	adds	r7, #36	; 0x24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40021000 	.word	0x40021000
 8007f50:	0800939c 	.word	0x0800939c
 8007f54:	00f42400 	.word	0x00f42400
 8007f58:	007a1200 	.word	0x007a1200

08007f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f60:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f62:	681b      	ldr	r3, [r3, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000000 	.word	0x20000000

08007f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f78:	f7ff fff0 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	40021000 	.word	0x40021000
 8007f9c:	08009394 	.word	0x08009394

08007fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007fa4:	f7ff ffda 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	0adb      	lsrs	r3, r3, #11
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fb6:	5ccb      	ldrb	r3, [r1, r3]
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	08009394 	.word	0x08009394

08007fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fd8:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fe4:	f7ff fa02 	bl	80073ec <HAL_PWREx_GetVoltageRange>
 8007fe8:	6178      	str	r0, [r7, #20]
 8007fea:	e014      	b.n	8008016 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fec:	4b25      	ldr	r3, [pc, #148]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff0:	4a24      	ldr	r2, [pc, #144]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff8:	4b22      	ldr	r3, [pc, #136]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008004:	f7ff f9f2 	bl	80073ec <HAL_PWREx_GetVoltageRange>
 8008008:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800800a:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800800c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800e:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008014:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801c:	d10b      	bne.n	8008036 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b80      	cmp	r3, #128	; 0x80
 8008022:	d919      	bls.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2ba0      	cmp	r3, #160	; 0xa0
 8008028:	d902      	bls.n	8008030 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800802a:	2302      	movs	r3, #2
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	e013      	b.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008030:	2301      	movs	r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	e010      	b.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b80      	cmp	r3, #128	; 0x80
 800803a:	d902      	bls.n	8008042 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800803c:	2303      	movs	r3, #3
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	e00a      	b.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d102      	bne.n	800804e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008048:	2302      	movs	r3, #2
 800804a:	613b      	str	r3, [r7, #16]
 800804c:	e004      	b.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b70      	cmp	r3, #112	; 0x70
 8008052:	d101      	bne.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008054:	2301      	movs	r3, #1
 8008056:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f023 0207 	bic.w	r2, r3, #7
 8008060:	4909      	ldr	r1, [pc, #36]	; (8008088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	429a      	cmp	r2, r3
 8008074:	d001      	beq.n	800807a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40021000 	.word	0x40021000
 8008088:	40022000 	.word	0x40022000

0800808c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008094:	2300      	movs	r3, #0
 8008096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008098:	2300      	movs	r3, #0
 800809a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d041      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080b0:	d02a      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80080b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080b6:	d824      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080bc:	d008      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80080be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080c2:	d81e      	bhi.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80080c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080cc:	d010      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080ce:	e018      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080d0:	4b86      	ldr	r3, [pc, #536]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4a85      	ldr	r2, [pc, #532]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080dc:	e015      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fabb 	bl	8008660 <RCCEx_PLLSAI1_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080ee:	e00c      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3320      	adds	r3, #32
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fba6 	bl	8008848 <RCCEx_PLLSAI2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	74fb      	strb	r3, [r7, #19]
      break;
 8008106:	e000      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008110:	4b76      	ldr	r3, [pc, #472]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811e:	4973      	ldr	r1, [pc, #460]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7cfb      	ldrb	r3, [r7, #19]
 800812a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d041      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008140:	d02a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008146:	d824      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814c:	d008      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800814e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008152:	d81e      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800815c:	d010      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800815e:	e018      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008160:	4b62      	ldr	r3, [pc, #392]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4a61      	ldr	r2, [pc, #388]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800816a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800816c:	e015      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	2100      	movs	r1, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fa73 	bl	8008660 <RCCEx_PLLSAI1_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800817e:	e00c      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3320      	adds	r3, #32
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fb5e 	bl	8008848 <RCCEx_PLLSAI2_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008190:	e003      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	74fb      	strb	r3, [r7, #19]
      break;
 8008196:	e000      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819a:	7cfb      	ldrb	r3, [r7, #19]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081a0:	4b52      	ldr	r3, [pc, #328]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ae:	494f      	ldr	r1, [pc, #316]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80081b6:	e001      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b8:	7cfb      	ldrb	r3, [r7, #19]
 80081ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80a0 	beq.w	800830a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ca:	2300      	movs	r3, #0
 80081cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081ce:	4b47      	ldr	r3, [pc, #284]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80081de:	2300      	movs	r3, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00d      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e4:	4b41      	ldr	r3, [pc, #260]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e8:	4a40      	ldr	r2, [pc, #256]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ee:	6593      	str	r3, [r2, #88]	; 0x58
 80081f0:	4b3e      	ldr	r3, [pc, #248]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f8:	60bb      	str	r3, [r7, #8]
 80081fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081fc:	2301      	movs	r3, #1
 80081fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008200:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3a      	ldr	r2, [pc, #232]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800820c:	f7fd feca 	bl	8005fa4 <HAL_GetTick>
 8008210:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008212:	e009      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008214:	f7fd fec6 	bl	8005fa4 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d902      	bls.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	74fb      	strb	r3, [r7, #19]
        break;
 8008226:	e005      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008228:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0ef      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008234:	7cfb      	ldrb	r3, [r7, #19]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d15c      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800823a:	4b2c      	ldr	r3, [pc, #176]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008244:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01f      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	429a      	cmp	r2, r3
 8008256:	d019      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008258:	4b24      	ldr	r3, [pc, #144]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008264:	4b21      	ldr	r3, [pc, #132]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826a:	4a20      	ldr	r2, [pc, #128]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827a:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800827c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008284:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d016      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fd fe85 	bl	8005fa4 <HAL_GetTick>
 800829a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800829c:	e00b      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829e:	f7fd fe81 	bl	8005fa4 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d902      	bls.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	74fb      	strb	r3, [r7, #19]
            break;
 80082b4:	e006      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ec      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80082c4:	7cfb      	ldrb	r3, [r7, #19]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10c      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ca:	4b08      	ldr	r3, [pc, #32]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082da:	4904      	ldr	r1, [pc, #16]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082e2:	e009      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082e4:	7cfb      	ldrb	r3, [r7, #19]
 80082e6:	74bb      	strb	r3, [r7, #18]
 80082e8:	e006      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80082ea:	bf00      	nop
 80082ec:	40021000 	.word	0x40021000
 80082f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	7cfb      	ldrb	r3, [r7, #19]
 80082f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082f8:	7c7b      	ldrb	r3, [r7, #17]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082fe:	4b9e      	ldr	r3, [pc, #632]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	4a9d      	ldr	r2, [pc, #628]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008308:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008316:	4b98      	ldr	r3, [pc, #608]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	f023 0203 	bic.w	r2, r3, #3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	4994      	ldr	r1, [pc, #592]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008338:	4b8f      	ldr	r3, [pc, #572]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833e:	f023 020c 	bic.w	r2, r3, #12
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008346:	498c      	ldr	r1, [pc, #560]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800835a:	4b87      	ldr	r3, [pc, #540]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	4983      	ldr	r1, [pc, #524]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800837c:	4b7e      	ldr	r3, [pc, #504]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	497b      	ldr	r1, [pc, #492]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800839e:	4b76      	ldr	r3, [pc, #472]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ac:	4972      	ldr	r1, [pc, #456]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c0:	4b6d      	ldr	r3, [pc, #436]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	496a      	ldr	r1, [pc, #424]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083e2:	4b65      	ldr	r3, [pc, #404]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f0:	4961      	ldr	r1, [pc, #388]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008404:	4b5c      	ldr	r3, [pc, #368]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008412:	4959      	ldr	r1, [pc, #356]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008426:	4b54      	ldr	r3, [pc, #336]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008434:	4950      	ldr	r1, [pc, #320]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008448:	4b4b      	ldr	r3, [pc, #300]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	4948      	ldr	r1, [pc, #288]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800846a:	4b43      	ldr	r3, [pc, #268]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008478:	493f      	ldr	r1, [pc, #252]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d028      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800848c:	4b3a      	ldr	r3, [pc, #232]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849a:	4937      	ldr	r1, [pc, #220]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084aa:	d106      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ac:	4b32      	ldr	r3, [pc, #200]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	4a31      	ldr	r2, [pc, #196]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b6:	60d3      	str	r3, [r2, #12]
 80084b8:	e011      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084c2:	d10c      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3304      	adds	r3, #4
 80084c8:	2101      	movs	r1, #1
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f8c8 	bl	8008660 <RCCEx_PLLSAI1_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80084da:	7cfb      	ldrb	r3, [r7, #19]
 80084dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d028      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	491f      	ldr	r1, [pc, #124]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008508:	d106      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008514:	60d3      	str	r3, [r2, #12]
 8008516:	e011      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008520:	d10c      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	2101      	movs	r1, #1
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f899 	bl	8008660 <RCCEx_PLLSAI1_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008532:	7cfb      	ldrb	r3, [r7, #19]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008538:	7cfb      	ldrb	r3, [r7, #19]
 800853a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02b      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008548:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008556:	4908      	ldr	r1, [pc, #32]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008566:	d109      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008568:	4b03      	ldr	r3, [pc, #12]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	4a02      	ldr	r2, [pc, #8]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800856e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008572:	60d3      	str	r3, [r2, #12]
 8008574:	e014      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008576:	bf00      	nop
 8008578:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008584:	d10c      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2101      	movs	r1, #1
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f867 	bl	8008660 <RCCEx_PLLSAI1_Config>
 8008592:	4603      	mov	r3, r0
 8008594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008596:	7cfb      	ldrb	r3, [r7, #19]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800859c:	7cfb      	ldrb	r3, [r7, #19]
 800859e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d02f      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085ac:	4b2b      	ldr	r3, [pc, #172]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ba:	4928      	ldr	r1, [pc, #160]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ca:	d10d      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	2102      	movs	r1, #2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f844 	bl	8008660 <RCCEx_PLLSAI1_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80085e2:	7cfb      	ldrb	r3, [r7, #19]
 80085e4:	74bb      	strb	r3, [r7, #18]
 80085e6:	e011      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d10c      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3320      	adds	r3, #32
 80085f6:	2102      	movs	r1, #2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f925 	bl	8008848 <RCCEx_PLLSAI2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008602:	7cfb      	ldrb	r3, [r7, #19]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008608:	7cfb      	ldrb	r3, [r7, #19]
 800860a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800861a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008626:	490d      	ldr	r1, [pc, #52]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864a:	4904      	ldr	r1, [pc, #16]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008652:	7cbb      	ldrb	r3, [r7, #18]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40021000 	.word	0x40021000

08008660 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800866e:	4b75      	ldr	r3, [pc, #468]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800867a:	4b72      	ldr	r3, [pc, #456]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f003 0203 	and.w	r2, r3, #3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d10d      	bne.n	80086a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
       ||
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008692:	4b6c      	ldr	r3, [pc, #432]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	091b      	lsrs	r3, r3, #4
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
       ||
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d047      	beq.n	8008736 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
 80086aa:	e044      	b.n	8008736 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d018      	beq.n	80086e6 <RCCEx_PLLSAI1_Config+0x86>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d825      	bhi.n	8008704 <RCCEx_PLLSAI1_Config+0xa4>
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d002      	beq.n	80086c2 <RCCEx_PLLSAI1_Config+0x62>
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d009      	beq.n	80086d4 <RCCEx_PLLSAI1_Config+0x74>
 80086c0:	e020      	b.n	8008704 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80086c2:	4b60      	ldr	r3, [pc, #384]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d11d      	bne.n	800870a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086d2:	e01a      	b.n	800870a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80086d4:	4b5b      	ldr	r3, [pc, #364]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d116      	bne.n	800870e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086e4:	e013      	b.n	800870e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80086e6:	4b57      	ldr	r3, [pc, #348]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10f      	bne.n	8008712 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086f2:	4b54      	ldr	r3, [pc, #336]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008702:	e006      	b.n	8008712 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]
      break;
 8008708:	e004      	b.n	8008714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800870a:	bf00      	nop
 800870c:	e002      	b.n	8008714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800870e:	bf00      	nop
 8008710:	e000      	b.n	8008714 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008712:	bf00      	nop
    }

    if(status == HAL_OK)
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10d      	bne.n	8008736 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800871a:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	3b01      	subs	r3, #1
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	430b      	orrs	r3, r1
 8008730:	4944      	ldr	r1, [pc, #272]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008732:	4313      	orrs	r3, r2
 8008734:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d17d      	bne.n	8008838 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800873c:	4b41      	ldr	r3, [pc, #260]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a40      	ldr	r2, [pc, #256]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008748:	f7fd fc2c 	bl	8005fa4 <HAL_GetTick>
 800874c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800874e:	e009      	b.n	8008764 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008750:	f7fd fc28 	bl	8005fa4 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d902      	bls.n	8008764 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	73fb      	strb	r3, [r7, #15]
        break;
 8008762:	e005      	b.n	8008770 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008764:	4b37      	ldr	r3, [pc, #220]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1ef      	bne.n	8008750 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d160      	bne.n	8008838 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d111      	bne.n	80087a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800877c:	4b31      	ldr	r3, [pc, #196]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6892      	ldr	r2, [r2, #8]
 800878c:	0211      	lsls	r1, r2, #8
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68d2      	ldr	r2, [r2, #12]
 8008792:	0912      	lsrs	r2, r2, #4
 8008794:	0452      	lsls	r2, r2, #17
 8008796:	430a      	orrs	r2, r1
 8008798:	492a      	ldr	r1, [pc, #168]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800879a:	4313      	orrs	r3, r2
 800879c:	610b      	str	r3, [r1, #16]
 800879e:	e027      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d112      	bne.n	80087cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087a6:	4b27      	ldr	r3, [pc, #156]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80087ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6892      	ldr	r2, [r2, #8]
 80087b6:	0211      	lsls	r1, r2, #8
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6912      	ldr	r2, [r2, #16]
 80087bc:	0852      	lsrs	r2, r2, #1
 80087be:	3a01      	subs	r2, #1
 80087c0:	0552      	lsls	r2, r2, #21
 80087c2:	430a      	orrs	r2, r1
 80087c4:	491f      	ldr	r1, [pc, #124]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	610b      	str	r3, [r1, #16]
 80087ca:	e011      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80087d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6892      	ldr	r2, [r2, #8]
 80087dc:	0211      	lsls	r1, r2, #8
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6952      	ldr	r2, [r2, #20]
 80087e2:	0852      	lsrs	r2, r2, #1
 80087e4:	3a01      	subs	r2, #1
 80087e6:	0652      	lsls	r2, r2, #25
 80087e8:	430a      	orrs	r2, r1
 80087ea:	4916      	ldr	r1, [pc, #88]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a13      	ldr	r2, [pc, #76]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087fc:	f7fd fbd2 	bl	8005fa4 <HAL_GetTick>
 8008800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008802:	e009      	b.n	8008818 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008804:	f7fd fbce 	bl	8005fa4 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d902      	bls.n	8008818 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	73fb      	strb	r3, [r7, #15]
          break;
 8008816:	e005      	b.n	8008824 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0ef      	beq.n	8008804 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	4904      	ldr	r1, [pc, #16]	; (8008844 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008834:	4313      	orrs	r3, r2
 8008836:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40021000 	.word	0x40021000

08008848 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008856:	4b6a      	ldr	r3, [pc, #424]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d018      	beq.n	8008894 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008862:	4b67      	ldr	r3, [pc, #412]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f003 0203 	and.w	r2, r3, #3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d10d      	bne.n	800888e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
       ||
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800887a:	4b61      	ldr	r3, [pc, #388]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	091b      	lsrs	r3, r3, #4
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
       ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d047      	beq.n	800891e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e044      	b.n	800891e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d018      	beq.n	80088ce <RCCEx_PLLSAI2_Config+0x86>
 800889c:	2b03      	cmp	r3, #3
 800889e:	d825      	bhi.n	80088ec <RCCEx_PLLSAI2_Config+0xa4>
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d002      	beq.n	80088aa <RCCEx_PLLSAI2_Config+0x62>
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d009      	beq.n	80088bc <RCCEx_PLLSAI2_Config+0x74>
 80088a8:	e020      	b.n	80088ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80088aa:	4b55      	ldr	r3, [pc, #340]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d11d      	bne.n	80088f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088ba:	e01a      	b.n	80088f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80088bc:	4b50      	ldr	r3, [pc, #320]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d116      	bne.n	80088f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088cc:	e013      	b.n	80088f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80088ce:	4b4c      	ldr	r3, [pc, #304]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10f      	bne.n	80088fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80088da:	4b49      	ldr	r3, [pc, #292]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80088ea:	e006      	b.n	80088fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	e004      	b.n	80088fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088f2:	bf00      	nop
 80088f4:	e002      	b.n	80088fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80088fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008902:	4b3f      	ldr	r3, [pc, #252]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6819      	ldr	r1, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	3b01      	subs	r3, #1
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	430b      	orrs	r3, r1
 8008918:	4939      	ldr	r1, [pc, #228]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800891a:	4313      	orrs	r3, r2
 800891c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d167      	bne.n	80089f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008924:	4b36      	ldr	r3, [pc, #216]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a35      	ldr	r2, [pc, #212]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800892a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800892e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008930:	f7fd fb38 	bl	8005fa4 <HAL_GetTick>
 8008934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008936:	e009      	b.n	800894c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008938:	f7fd fb34 	bl	8005fa4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d902      	bls.n	800894c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
        break;
 800894a:	e005      	b.n	8008958 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800894c:	4b2c      	ldr	r3, [pc, #176]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1ef      	bne.n	8008938 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d14a      	bne.n	80089f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d111      	bne.n	8008988 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008964:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800896c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	6892      	ldr	r2, [r2, #8]
 8008974:	0211      	lsls	r1, r2, #8
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	68d2      	ldr	r2, [r2, #12]
 800897a:	0912      	lsrs	r2, r2, #4
 800897c:	0452      	lsls	r2, r2, #17
 800897e:	430a      	orrs	r2, r1
 8008980:	491f      	ldr	r1, [pc, #124]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008982:	4313      	orrs	r3, r2
 8008984:	614b      	str	r3, [r1, #20]
 8008986:	e011      	b.n	80089ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008988:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	6892      	ldr	r2, [r2, #8]
 8008998:	0211      	lsls	r1, r2, #8
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6912      	ldr	r2, [r2, #16]
 800899e:	0852      	lsrs	r2, r2, #1
 80089a0:	3a01      	subs	r2, #1
 80089a2:	0652      	lsls	r2, r2, #25
 80089a4:	430a      	orrs	r2, r1
 80089a6:	4916      	ldr	r1, [pc, #88]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80089ac:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a13      	ldr	r2, [pc, #76]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b8:	f7fd faf4 	bl	8005fa4 <HAL_GetTick>
 80089bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089be:	e009      	b.n	80089d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089c0:	f7fd faf0 	bl	8005fa4 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d902      	bls.n	80089d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	73fb      	strb	r3, [r7, #15]
          break;
 80089d2:	e005      	b.n	80089e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0ef      	beq.n	80089c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	4904      	ldr	r1, [pc, #16]	; (8008a00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	40021000 	.word	0x40021000

08008a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e040      	b.n	8008a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d106      	bne.n	8008a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7f7 fecc 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2224      	movs	r2, #36	; 0x24
 8008a30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f022 0201 	bic.w	r2, r2, #1
 8008a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f82c 	bl	8008aa0 <UART_SetConfig>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e022      	b.n	8008a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 faaa 	bl	8008fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb31 	bl	80090f8 <UART_CheckIdleState>
 8008a96:	4603      	mov	r3, r0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4bad      	ldr	r3, [pc, #692]	; (8008d80 <UART_SetConfig+0x2e0>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	69f9      	ldr	r1, [r7, #28]
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4aa2      	ldr	r2, [pc, #648]	; (8008d84 <UART_SetConfig+0x2e4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d004      	beq.n	8008b08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a99      	ldr	r2, [pc, #612]	; (8008d88 <UART_SetConfig+0x2e8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d121      	bne.n	8008b6a <UART_SetConfig+0xca>
 8008b26:	4b99      	ldr	r3, [pc, #612]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d817      	bhi.n	8008b64 <UART_SetConfig+0xc4>
 8008b34:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <UART_SetConfig+0x9c>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b53 	.word	0x08008b53
 8008b48:	08008b5f 	.word	0x08008b5f
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	76fb      	strb	r3, [r7, #27]
 8008b50:	e0e7      	b.n	8008d22 <UART_SetConfig+0x282>
 8008b52:	2302      	movs	r3, #2
 8008b54:	76fb      	strb	r3, [r7, #27]
 8008b56:	e0e4      	b.n	8008d22 <UART_SetConfig+0x282>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	76fb      	strb	r3, [r7, #27]
 8008b5c:	e0e1      	b.n	8008d22 <UART_SetConfig+0x282>
 8008b5e:	2308      	movs	r3, #8
 8008b60:	76fb      	strb	r3, [r7, #27]
 8008b62:	e0de      	b.n	8008d22 <UART_SetConfig+0x282>
 8008b64:	2310      	movs	r3, #16
 8008b66:	76fb      	strb	r3, [r7, #27]
 8008b68:	e0db      	b.n	8008d22 <UART_SetConfig+0x282>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a88      	ldr	r2, [pc, #544]	; (8008d90 <UART_SetConfig+0x2f0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d132      	bne.n	8008bda <UART_SetConfig+0x13a>
 8008b74:	4b85      	ldr	r3, [pc, #532]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7a:	f003 030c 	and.w	r3, r3, #12
 8008b7e:	2b0c      	cmp	r3, #12
 8008b80:	d828      	bhi.n	8008bd4 <UART_SetConfig+0x134>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <UART_SetConfig+0xe8>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008bd5 	.word	0x08008bd5
 8008b90:	08008bd5 	.word	0x08008bd5
 8008b94:	08008bd5 	.word	0x08008bd5
 8008b98:	08008bc9 	.word	0x08008bc9
 8008b9c:	08008bd5 	.word	0x08008bd5
 8008ba0:	08008bd5 	.word	0x08008bd5
 8008ba4:	08008bd5 	.word	0x08008bd5
 8008ba8:	08008bc3 	.word	0x08008bc3
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bd5 	.word	0x08008bd5
 8008bb8:	08008bcf 	.word	0x08008bcf
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	76fb      	strb	r3, [r7, #27]
 8008bc0:	e0af      	b.n	8008d22 <UART_SetConfig+0x282>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	76fb      	strb	r3, [r7, #27]
 8008bc6:	e0ac      	b.n	8008d22 <UART_SetConfig+0x282>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	76fb      	strb	r3, [r7, #27]
 8008bcc:	e0a9      	b.n	8008d22 <UART_SetConfig+0x282>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	76fb      	strb	r3, [r7, #27]
 8008bd2:	e0a6      	b.n	8008d22 <UART_SetConfig+0x282>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	76fb      	strb	r3, [r7, #27]
 8008bd8:	e0a3      	b.n	8008d22 <UART_SetConfig+0x282>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a6d      	ldr	r2, [pc, #436]	; (8008d94 <UART_SetConfig+0x2f4>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d120      	bne.n	8008c26 <UART_SetConfig+0x186>
 8008be4:	4b69      	ldr	r3, [pc, #420]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bee:	2b30      	cmp	r3, #48	; 0x30
 8008bf0:	d013      	beq.n	8008c1a <UART_SetConfig+0x17a>
 8008bf2:	2b30      	cmp	r3, #48	; 0x30
 8008bf4:	d814      	bhi.n	8008c20 <UART_SetConfig+0x180>
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d009      	beq.n	8008c0e <UART_SetConfig+0x16e>
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d810      	bhi.n	8008c20 <UART_SetConfig+0x180>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <UART_SetConfig+0x168>
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d006      	beq.n	8008c14 <UART_SetConfig+0x174>
 8008c06:	e00b      	b.n	8008c20 <UART_SetConfig+0x180>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	76fb      	strb	r3, [r7, #27]
 8008c0c:	e089      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	76fb      	strb	r3, [r7, #27]
 8008c12:	e086      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c14:	2304      	movs	r3, #4
 8008c16:	76fb      	strb	r3, [r7, #27]
 8008c18:	e083      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	76fb      	strb	r3, [r7, #27]
 8008c1e:	e080      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c20:	2310      	movs	r3, #16
 8008c22:	76fb      	strb	r3, [r7, #27]
 8008c24:	e07d      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a5b      	ldr	r2, [pc, #364]	; (8008d98 <UART_SetConfig+0x2f8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d120      	bne.n	8008c72 <UART_SetConfig+0x1d2>
 8008c30:	4b56      	ldr	r3, [pc, #344]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c3c:	d013      	beq.n	8008c66 <UART_SetConfig+0x1c6>
 8008c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008c40:	d814      	bhi.n	8008c6c <UART_SetConfig+0x1cc>
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d009      	beq.n	8008c5a <UART_SetConfig+0x1ba>
 8008c46:	2b80      	cmp	r3, #128	; 0x80
 8008c48:	d810      	bhi.n	8008c6c <UART_SetConfig+0x1cc>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <UART_SetConfig+0x1b4>
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d006      	beq.n	8008c60 <UART_SetConfig+0x1c0>
 8008c52:	e00b      	b.n	8008c6c <UART_SetConfig+0x1cc>
 8008c54:	2300      	movs	r3, #0
 8008c56:	76fb      	strb	r3, [r7, #27]
 8008c58:	e063      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	76fb      	strb	r3, [r7, #27]
 8008c5e:	e060      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c60:	2304      	movs	r3, #4
 8008c62:	76fb      	strb	r3, [r7, #27]
 8008c64:	e05d      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c66:	2308      	movs	r3, #8
 8008c68:	76fb      	strb	r3, [r7, #27]
 8008c6a:	e05a      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	76fb      	strb	r3, [r7, #27]
 8008c70:	e057      	b.n	8008d22 <UART_SetConfig+0x282>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a49      	ldr	r2, [pc, #292]	; (8008d9c <UART_SetConfig+0x2fc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d125      	bne.n	8008cc8 <UART_SetConfig+0x228>
 8008c7c:	4b43      	ldr	r3, [pc, #268]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c8a:	d017      	beq.n	8008cbc <UART_SetConfig+0x21c>
 8008c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c90:	d817      	bhi.n	8008cc2 <UART_SetConfig+0x222>
 8008c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c96:	d00b      	beq.n	8008cb0 <UART_SetConfig+0x210>
 8008c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c9c:	d811      	bhi.n	8008cc2 <UART_SetConfig+0x222>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <UART_SetConfig+0x20a>
 8008ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca6:	d006      	beq.n	8008cb6 <UART_SetConfig+0x216>
 8008ca8:	e00b      	b.n	8008cc2 <UART_SetConfig+0x222>
 8008caa:	2300      	movs	r3, #0
 8008cac:	76fb      	strb	r3, [r7, #27]
 8008cae:	e038      	b.n	8008d22 <UART_SetConfig+0x282>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	76fb      	strb	r3, [r7, #27]
 8008cb4:	e035      	b.n	8008d22 <UART_SetConfig+0x282>
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	76fb      	strb	r3, [r7, #27]
 8008cba:	e032      	b.n	8008d22 <UART_SetConfig+0x282>
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	76fb      	strb	r3, [r7, #27]
 8008cc0:	e02f      	b.n	8008d22 <UART_SetConfig+0x282>
 8008cc2:	2310      	movs	r3, #16
 8008cc4:	76fb      	strb	r3, [r7, #27]
 8008cc6:	e02c      	b.n	8008d22 <UART_SetConfig+0x282>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a2d      	ldr	r2, [pc, #180]	; (8008d84 <UART_SetConfig+0x2e4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d125      	bne.n	8008d1e <UART_SetConfig+0x27e>
 8008cd2:	4b2e      	ldr	r3, [pc, #184]	; (8008d8c <UART_SetConfig+0x2ec>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ce0:	d017      	beq.n	8008d12 <UART_SetConfig+0x272>
 8008ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ce6:	d817      	bhi.n	8008d18 <UART_SetConfig+0x278>
 8008ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cec:	d00b      	beq.n	8008d06 <UART_SetConfig+0x266>
 8008cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cf2:	d811      	bhi.n	8008d18 <UART_SetConfig+0x278>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <UART_SetConfig+0x260>
 8008cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cfc:	d006      	beq.n	8008d0c <UART_SetConfig+0x26c>
 8008cfe:	e00b      	b.n	8008d18 <UART_SetConfig+0x278>
 8008d00:	2300      	movs	r3, #0
 8008d02:	76fb      	strb	r3, [r7, #27]
 8008d04:	e00d      	b.n	8008d22 <UART_SetConfig+0x282>
 8008d06:	2302      	movs	r3, #2
 8008d08:	76fb      	strb	r3, [r7, #27]
 8008d0a:	e00a      	b.n	8008d22 <UART_SetConfig+0x282>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	76fb      	strb	r3, [r7, #27]
 8008d10:	e007      	b.n	8008d22 <UART_SetConfig+0x282>
 8008d12:	2308      	movs	r3, #8
 8008d14:	76fb      	strb	r3, [r7, #27]
 8008d16:	e004      	b.n	8008d22 <UART_SetConfig+0x282>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	76fb      	strb	r3, [r7, #27]
 8008d1c:	e001      	b.n	8008d22 <UART_SetConfig+0x282>
 8008d1e:	2310      	movs	r3, #16
 8008d20:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a17      	ldr	r2, [pc, #92]	; (8008d84 <UART_SetConfig+0x2e4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	f040 8087 	bne.w	8008e3c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d2e:	7efb      	ldrb	r3, [r7, #27]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d837      	bhi.n	8008da4 <UART_SetConfig+0x304>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <UART_SetConfig+0x29c>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008d69 	.word	0x08008d69
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008d6f 	.word	0x08008d6f
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008d77 	.word	0x08008d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d60:	f7ff f908 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 8008d64:	6178      	str	r0, [r7, #20]
        break;
 8008d66:	e022      	b.n	8008dae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <UART_SetConfig+0x300>)
 8008d6a:	617b      	str	r3, [r7, #20]
        break;
 8008d6c:	e01f      	b.n	8008dae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d6e:	f7ff f869 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8008d72:	6178      	str	r0, [r7, #20]
        break;
 8008d74:	e01b      	b.n	8008dae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7a:	617b      	str	r3, [r7, #20]
        break;
 8008d7c:	e017      	b.n	8008dae <UART_SetConfig+0x30e>
 8008d7e:	bf00      	nop
 8008d80:	efff69f3 	.word	0xefff69f3
 8008d84:	40008000 	.word	0x40008000
 8008d88:	40013800 	.word	0x40013800
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	40004400 	.word	0x40004400
 8008d94:	40004800 	.word	0x40004800
 8008d98:	40004c00 	.word	0x40004c00
 8008d9c:	40005000 	.word	0x40005000
 8008da0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	76bb      	strb	r3, [r7, #26]
        break;
 8008dac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80f1 	beq.w	8008f98 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d305      	bcc.n	8008dd2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d902      	bls.n	8008dd8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	76bb      	strb	r3, [r7, #26]
 8008dd6:	e0df      	b.n	8008f98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	020b      	lsls	r3, r1, #8
 8008dea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dee:	0202      	lsls	r2, r0, #8
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	6849      	ldr	r1, [r1, #4]
 8008df4:	0849      	lsrs	r1, r1, #1
 8008df6:	4608      	mov	r0, r1
 8008df8:	f04f 0100 	mov.w	r1, #0
 8008dfc:	1814      	adds	r4, r2, r0
 8008dfe:	eb43 0501 	adc.w	r5, r3, r1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7f7 f9da 	bl	80001c8 <__aeabi_uldivmod>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4613      	mov	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e22:	d308      	bcc.n	8008e36 <UART_SetConfig+0x396>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2a:	d204      	bcs.n	8008e36 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	e0b0      	b.n	8008f98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	76bb      	strb	r3, [r7, #26]
 8008e3a:	e0ad      	b.n	8008f98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e44:	d15b      	bne.n	8008efe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008e46:	7efb      	ldrb	r3, [r7, #27]
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d828      	bhi.n	8008e9e <UART_SetConfig+0x3fe>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x3b4>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	08008e9f 	.word	0x08008e9f
 8008e64:	08008e8f 	.word	0x08008e8f
 8008e68:	08008e9f 	.word	0x08008e9f
 8008e6c:	08008e9f 	.word	0x08008e9f
 8008e70:	08008e9f 	.word	0x08008e9f
 8008e74:	08008e97 	.word	0x08008e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e78:	f7ff f87c 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 8008e7c:	6178      	str	r0, [r7, #20]
        break;
 8008e7e:	e013      	b.n	8008ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e80:	f7ff f88e 	bl	8007fa0 <HAL_RCC_GetPCLK2Freq>
 8008e84:	6178      	str	r0, [r7, #20]
        break;
 8008e86:	e00f      	b.n	8008ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e88:	4b49      	ldr	r3, [pc, #292]	; (8008fb0 <UART_SetConfig+0x510>)
 8008e8a:	617b      	str	r3, [r7, #20]
        break;
 8008e8c:	e00c      	b.n	8008ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e8e:	f7fe ffd9 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8008e92:	6178      	str	r0, [r7, #20]
        break;
 8008e94:	e008      	b.n	8008ea8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e9a:	617b      	str	r3, [r7, #20]
        break;
 8008e9c:	e004      	b.n	8008ea8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	76bb      	strb	r3, [r7, #26]
        break;
 8008ea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d074      	beq.n	8008f98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	005a      	lsls	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	441a      	add	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d916      	bls.n	8008ef8 <UART_SetConfig+0x458>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d212      	bcs.n	8008ef8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f023 030f 	bic.w	r3, r3, #15
 8008eda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	89fb      	ldrh	r3, [r7, #14]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	89fa      	ldrh	r2, [r7, #14]
 8008ef4:	60da      	str	r2, [r3, #12]
 8008ef6:	e04f      	b.n	8008f98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	76bb      	strb	r3, [r7, #26]
 8008efc:	e04c      	b.n	8008f98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008efe:	7efb      	ldrb	r3, [r7, #27]
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d828      	bhi.n	8008f56 <UART_SetConfig+0x4b6>
 8008f04:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <UART_SetConfig+0x46c>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f31 	.word	0x08008f31
 8008f10:	08008f39 	.word	0x08008f39
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	08008f57 	.word	0x08008f57
 8008f1c:	08008f47 	.word	0x08008f47
 8008f20:	08008f57 	.word	0x08008f57
 8008f24:	08008f57 	.word	0x08008f57
 8008f28:	08008f57 	.word	0x08008f57
 8008f2c:	08008f4f 	.word	0x08008f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f30:	f7ff f820 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 8008f34:	6178      	str	r0, [r7, #20]
        break;
 8008f36:	e013      	b.n	8008f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f38:	f7ff f832 	bl	8007fa0 <HAL_RCC_GetPCLK2Freq>
 8008f3c:	6178      	str	r0, [r7, #20]
        break;
 8008f3e:	e00f      	b.n	8008f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <UART_SetConfig+0x510>)
 8008f42:	617b      	str	r3, [r7, #20]
        break;
 8008f44:	e00c      	b.n	8008f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f46:	f7fe ff7d 	bl	8007e44 <HAL_RCC_GetSysClockFreq>
 8008f4a:	6178      	str	r0, [r7, #20]
        break;
 8008f4c:	e008      	b.n	8008f60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f52:	617b      	str	r3, [r7, #20]
        break;
 8008f54:	e004      	b.n	8008f60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	76bb      	strb	r3, [r7, #26]
        break;
 8008f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d018      	beq.n	8008f98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	085a      	lsrs	r2, r3, #1
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	441a      	add	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b0f      	cmp	r3, #15
 8008f7e:	d909      	bls.n	8008f94 <UART_SetConfig+0x4f4>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f86:	d205      	bcs.n	8008f94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	e001      	b.n	8008f98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008fa4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3720      	adds	r7, #32
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bdb0      	pop	{r4, r5, r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	00f42400 	.word	0x00f42400

08008fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00a      	beq.n	8009000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	430a      	orrs	r2, r1
 8009086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01a      	beq.n	80090ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b2:	d10a      	bne.n	80090ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009108:	f7fc ff4c 	bl	8005fa4 <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b08      	cmp	r3, #8
 800911a:	d10e      	bne.n	800913a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f82d 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e023      	b.n	8009182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d10e      	bne.n	8009166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f817 	bl	800918a <UART_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00d      	b.n	8009182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b09c      	sub	sp, #112	; 0x70
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800919a:	e0a5      	b.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800919c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	f000 80a1 	beq.w	80092e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fc fefd 	bl	8005fa4 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d302      	bcc.n	80091bc <UART_WaitOnFlagUntilTimeout+0x32>
 80091b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d13e      	bne.n	800923a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091d0:	667b      	str	r3, [r7, #100]	; 0x64
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3308      	adds	r3, #8
 80091f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	663b      	str	r3, [r7, #96]	; 0x60
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800920e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800921c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2220      	movs	r2, #32
 8009226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2220      	movs	r2, #32
 800922c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e067      	b.n	800930a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d04f      	beq.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009256:	d147      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009260:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
 8009282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3308      	adds	r3, #8
 800929a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	613b      	str	r3, [r7, #16]
   return(result);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f023 0301 	bic.w	r3, r3, #1
 80092aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3308      	adds	r3, #8
 80092b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092b4:	623a      	str	r2, [r7, #32]
 80092b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69f9      	ldr	r1, [r7, #28]
 80092ba:	6a3a      	ldr	r2, [r7, #32]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e5      	bne.n	8009294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2220      	movs	r2, #32
 80092d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e010      	b.n	800930a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	429a      	cmp	r2, r3
 8009304:	f43f af4a 	beq.w	800919c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3770      	adds	r7, #112	; 0x70
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <__libc_init_array>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4d0d      	ldr	r5, [pc, #52]	; (800934c <__libc_init_array+0x38>)
 8009318:	4c0d      	ldr	r4, [pc, #52]	; (8009350 <__libc_init_array+0x3c>)
 800931a:	1b64      	subs	r4, r4, r5
 800931c:	10a4      	asrs	r4, r4, #2
 800931e:	2600      	movs	r6, #0
 8009320:	42a6      	cmp	r6, r4
 8009322:	d109      	bne.n	8009338 <__libc_init_array+0x24>
 8009324:	4d0b      	ldr	r5, [pc, #44]	; (8009354 <__libc_init_array+0x40>)
 8009326:	4c0c      	ldr	r4, [pc, #48]	; (8009358 <__libc_init_array+0x44>)
 8009328:	f000 f820 	bl	800936c <_init>
 800932c:	1b64      	subs	r4, r4, r5
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	2600      	movs	r6, #0
 8009332:	42a6      	cmp	r6, r4
 8009334:	d105      	bne.n	8009342 <__libc_init_array+0x2e>
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	f855 3b04 	ldr.w	r3, [r5], #4
 800933c:	4798      	blx	r3
 800933e:	3601      	adds	r6, #1
 8009340:	e7ee      	b.n	8009320 <__libc_init_array+0xc>
 8009342:	f855 3b04 	ldr.w	r3, [r5], #4
 8009346:	4798      	blx	r3
 8009348:	3601      	adds	r6, #1
 800934a:	e7f2      	b.n	8009332 <__libc_init_array+0x1e>
 800934c:	080093d4 	.word	0x080093d4
 8009350:	080093d4 	.word	0x080093d4
 8009354:	080093d4 	.word	0x080093d4
 8009358:	080093d8 	.word	0x080093d8

0800935c <memset>:
 800935c:	4402      	add	r2, r0
 800935e:	4603      	mov	r3, r0
 8009360:	4293      	cmp	r3, r2
 8009362:	d100      	bne.n	8009366 <memset+0xa>
 8009364:	4770      	bx	lr
 8009366:	f803 1b01 	strb.w	r1, [r3], #1
 800936a:	e7f9      	b.n	8009360 <memset+0x4>

0800936c <_init>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr

08009378 <_fini>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

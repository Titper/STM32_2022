
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e58  08009e58  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e60  08009e60  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08009e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001c8  0800a030  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a030  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033afe  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  00053cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00057ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00059f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a7b  00000000  00000000  0005c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c180  00000000  00000000  00084cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b13  00000000  00000000  000a0e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199966  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a098  00000000  00000000  001999bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc0 	.word	0x08009dc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08009dc0 	.word	0x08009dc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fd0b 	bl	8005f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f859 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f909 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f8d7 	bl	800073c <MX_USART2_UART_Init>
  MX_UART4_Init();
 800058e:	f000 f8a5 	bl	80006dc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f005 f9bd 	bl	8005914 <IKS01A2_MOTION_SENSOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x30>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f005 fab2 	bl	8005b0c <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80005a8:	2102      	movs	r1, #2
 80005aa:	2001      	movs	r0, #1
 80005ac:	f005 f9b2 	bl	8005914 <IKS01A2_MOTION_SENSOR_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <main+0x46>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f005 faa7 	bl	8005b0c <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 80005be:	2101      	movs	r1, #1
 80005c0:	2000      	movs	r0, #0
 80005c2:	f004 feeb 	bl	800539c <IKS01A2_ENV_SENSOR_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0x5c>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f004 ffa4 	bl	800551c <IKS01A2_ENV_SENSOR_Enable>
  }
  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_HUMIDITY)==HAL_OK){
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f004 fee0 	bl	800539c <IKS01A2_ENV_SENSOR_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x72>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_HUMIDITY);
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 ff99 	bl	800551c <IKS01A2_ENV_SENSOR_Enable>


  while (1)
  {

	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xb4>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f004 ffd6 	bl	80055a0 <IKS01A2_ENV_SENSOR_GetValue>
	  sprintf((char*)buf,"%u",(unsigned int)data);
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <main+0xb4>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fe:	463b      	mov	r3, r7
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	490a      	ldr	r1, [pc, #40]	; (8000630 <main+0xb8>)
 8000606:	4618      	mov	r0, r3
 8000608:	f008 ffac 	bl	8009564 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4639      	mov	r1, r7
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0xbc>)
 8000620:	f008 faa0 	bl	8008b64 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f005 fd2b 	bl	8006080 <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 800062a:	e7de      	b.n	80005ea <main+0x72>
 800062c:	2000034c 	.word	0x2000034c
 8000630:	08009dd8 	.word	0x08009dd8
 8000634:	200003e4 	.word	0x200003e4

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f008 ff84 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f006 ff35 	bl	80074cc <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f8f2 	bl	8000850 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000686:	230a      	movs	r3, #10
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4618      	mov	r0, r3
 800069c:	f006 ff6c 	bl	8007578 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a6:	f000 f8d3 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 fb3e 	bl	8007d44 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f8bf 	bl	8000850 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3758      	adds	r7, #88	; 0x58
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_UART4_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_UART4_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_UART4_Init+0x58>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_UART4_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_UART4_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_UART4_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_UART4_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_UART4_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_UART4_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_UART4_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_UART4_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_UART4_Init+0x58>)
 8000720:	f008 f9d2 	bl	8008ac8 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f891 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000350 	.word	0x20000350
 8000738:	40004c00 	.word	0x40004c00

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f008 f9a2 	bl	8008ac8 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f861 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200003e4 	.word	0x200003e4
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_GPIO_Init+0xac>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <MX_GPIO_Init+0xac>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_GPIO_Init+0xac>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xac>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xac>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xac>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xac>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_GPIO_Init+0xac>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_GPIO_Init+0xac>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f005 ffe5 	bl	80067d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xb0>)
 800081e:	f005 fd39 	bl	8006294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000822:	2320      	movs	r3, #32
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f005 fd2a 	bl	8006294 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000800 	.word	0x48000800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0ae      	sub	sp, #184	; 0xb8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	2288      	movs	r2, #136	; 0x88
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f008 fe45 	bl	8009554 <memset>
  if(huart->Instance==UART4)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a42      	ldr	r2, [pc, #264]	; (80009d8 <HAL_UART_MspInit+0x134>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d13c      	bne.n	800094e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80008d4:	2308      	movs	r3, #8
 80008d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4618      	mov	r0, r3
 80008e2:	f007 fc35 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ec:	f7ff ffb0 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <HAL_UART_MspInit+0x138>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	4a39      	ldr	r2, [pc, #228]	; (80009dc <HAL_UART_MspInit+0x138>)
 80008f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008fa:	6593      	str	r3, [r2, #88]	; 0x58
 80008fc:	4b37      	ldr	r3, [pc, #220]	; (80009dc <HAL_UART_MspInit+0x138>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b34      	ldr	r3, [pc, #208]	; (80009dc <HAL_UART_MspInit+0x138>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	4a33      	ldr	r2, [pc, #204]	; (80009dc <HAL_UART_MspInit+0x138>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <HAL_UART_MspInit+0x138>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000920:	2303      	movs	r3, #3
 8000922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000938:	2308      	movs	r3, #8
 800093a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f005 fca4 	bl	8006294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094c:	e040      	b.n	80009d0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <HAL_UART_MspInit+0x13c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d13b      	bne.n	80009d0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095c:	2300      	movs	r3, #0
 800095e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4618      	mov	r0, r3
 8000966:	f007 fbf3 	bl	8008150 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000970:	f7ff ff6e 	bl	8000850 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_UART_MspInit+0x138>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	4a18      	ldr	r2, [pc, #96]	; (80009dc <HAL_UART_MspInit+0x138>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <HAL_UART_MspInit+0x138>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <HAL_UART_MspInit+0x138>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a12      	ldr	r2, [pc, #72]	; (80009dc <HAL_UART_MspInit+0x138>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_UART_MspInit+0x138>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a4:	230c      	movs	r3, #12
 80009a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009bc:	2307      	movs	r3, #7
 80009be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f005 fc62 	bl	8006294 <HAL_GPIO_Init>
}
 80009d0:	bf00      	nop
 80009d2:	37b8      	adds	r7, #184	; 0xb8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40004c00 	.word	0x40004c00
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40004400 	.word	0x40004400

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f005 fb06 	bl	8006040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <BSP_I2C1_Init+0x70>)
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <BSP_I2C1_Init+0x74>)
 8000a46:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <BSP_I2C1_Init+0x78>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	4918      	ldr	r1, [pc, #96]	; (8000ab0 <BSP_I2C1_Init+0x78>)
 8000a50:	600a      	str	r2, [r1, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d122      	bne.n	8000a9c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <BSP_I2C1_Init+0x70>)
 8000a58:	f006 f9d2 	bl	8006e00 <HAL_I2C_GetState>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11c      	bne.n	8000a9c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <BSP_I2C1_Init+0x70>)
 8000a64:	f000 f8fe 	bl	8000c64 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d116      	bne.n	8000a9c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <BSP_I2C1_Init+0x70>)
 8000a70:	f000 f8b4 	bl	8000bdc <MX_I2C1_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000a7a:	f06f 0307 	mvn.w	r3, #7
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	e00c      	b.n	8000a9c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <BSP_I2C1_Init+0x70>)
 8000a86:	f006 fc7b 	bl	8007380 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000a90:	f06f 0307 	mvn.w	r3, #7
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	e001      	b.n	8000a9c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000468 	.word	0x20000468
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	200001e4 	.word	0x200001e4

08000ab4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <BSP_I2C1_DeInit+0x48>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d014      	beq.n	8000af0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <BSP_I2C1_DeInit+0x48>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <BSP_I2C1_DeInit+0x48>)
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <BSP_I2C1_DeInit+0x48>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10b      	bne.n	8000af0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <BSP_I2C1_DeInit+0x4c>)
 8000ada:	f000 f909 	bl	8000cf0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <BSP_I2C1_DeInit+0x4c>)
 8000ae0:	f005 ff1d 	bl	800691e <HAL_I2C_DeInit>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000aea:	f06f 0307 	mvn.w	r3, #7
 8000aee:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001e4 	.word	0x200001e4
 8000b00:	20000468 	.word	0x20000468

08000b04 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af04      	add	r7, sp, #16
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4603      	mov	r3, r0
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	460b      	mov	r3, r1
 8000b14:	81bb      	strh	r3, [r7, #12]
 8000b16:	4613      	mov	r3, r2
 8000b18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000b1e:	89ba      	ldrh	r2, [r7, #12]
 8000b20:	89f9      	ldrh	r1, [r7, #14]
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2301      	movs	r3, #1
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <BSP_I2C1_WriteReg+0x60>)
 8000b34:	f005 ff36 	bl	80069a4 <HAL_I2C_Mem_Write>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00c      	beq.n	8000b58 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <BSP_I2C1_WriteReg+0x60>)
 8000b40:	f006 f96c 	bl	8006e1c <HAL_I2C_GetError>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d103      	bne.n	8000b52 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000b4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e002      	b.n	8000b58 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b52:	f06f 0303 	mvn.w	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000b58:	697b      	ldr	r3, [r7, #20]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000468 	.word	0x20000468

08000b68 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	60ba      	str	r2, [r7, #8]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	460b      	mov	r3, r1
 8000b78:	81bb      	strh	r3, [r7, #12]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000b82:	89ba      	ldrh	r2, [r7, #12]
 8000b84:	89f9      	ldrh	r1, [r7, #14]
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <BSP_I2C1_ReadReg+0x60>)
 8000b98:	f006 f818 	bl	8006bcc <HAL_I2C_Mem_Read>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00c      	beq.n	8000bbc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <BSP_I2C1_ReadReg+0x60>)
 8000ba4:	f006 f93a 	bl	8006e1c <HAL_I2C_GetError>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d103      	bne.n	8000bb6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000bae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e002      	b.n	8000bbc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000bb6:	f06f 0303 	mvn.w	r3, #3
 8000bba:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000bbc:	697b      	ldr	r3, [r7, #20]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000468 	.word	0x20000468

08000bcc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000bd0:	f005 fa4a 	bl	8006068 <HAL_GetTick>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_I2C1_Init+0x80>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <MX_I2C1_Init+0x84>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f005 fdee 	bl	8006800 <HAL_I2C_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f006 fba5 	bl	8007380 <HAL_I2CEx_ConfigAnalogFilter>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f006 fbe7 	bl	8007416 <HAL_I2CEx_ConfigDigitalFilter>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	10909cec 	.word	0x10909cec

08000c64 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000c96:	2304      	movs	r3, #4
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <I2C1_MspInit+0x88>)
 8000ca2:	f005 faf7 	bl	8006294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <I2C1_MspInit+0x88>)
 8000cc4:	f005 fae6 	bl	8006294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <I2C1_MspInit+0x84>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000400 	.word	0x48000400

08000cf0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <I2C1_MspDeInit+0x30>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <I2C1_MspDeInit+0x30>)
 8000cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <I2C1_MspDeInit+0x34>)
 8000d0a:	f005 fc6d 	bl	80065e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <I2C1_MspDeInit+0x34>)
 8000d14:	f005 fc68 	bl	80065e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f008 fbd2 	bl	8009500 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20018000 	.word	0x20018000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200001e8 	.word	0x200001e8
 8000d90:	200004e0 	.word	0x200004e0

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f008 fb91 	bl	800950c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dea:	f7ff fbc5 	bl	8000578 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000df0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000dfc:	08009e68 	.word	0x08009e68
  ldr r2, =_sbss
 8000e00:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000e04:	200004dc 	.word	0x200004dc

08000e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_2_IRQHandler>
	...

08000e0c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d103      	bne.n	8000e24 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	e030      	b.n	8000e86 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	7b1a      	ldrb	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <HTS221_RegisterBusIO+0x84>)
 8000e60:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HTS221_RegisterBusIO+0x88>)
 8000e66:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4798      	blx	r3
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	e002      	b.n	8000e86 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	080014c3 	.word	0x080014c3
 8000e94:	08001525 	.word	0x08001525

08000e98 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d108      	bne.n	8000ebc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 faa4 	bl	80013f8 <HTS221_Initialize>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e004      	b.n	8000ec6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d111      	bne.n	8000f04 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f878 	bl	8000fd6 <HTS221_HUM_Disable>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	e00d      	b.n	8000f0e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f95f 	bl	80011b6 <HTS221_TEMP_Disable>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e004      	b.n	8000f0e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	331c      	adds	r3, #28
 8000f24:	6839      	ldr	r1, [r7, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fc28 	bl	800177c <hts221_device_id_get>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e000      	b.n	8000f3a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2201      	movs	r2, #1
 8000f52:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HTS221_GetCapabilities+0x44>)
 8000f6a:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HTS221_GetCapabilities+0x44>)
 8000f70:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	41480000 	.word	0x41480000

08000f8c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e015      	b.n	8000fce <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	331c      	adds	r3, #28
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fbf3 	bl	800179e <hts221_power_on_set>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e004      	b.n	8000fce <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e015      	b.n	8001018 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	331c      	adds	r3, #28
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fbce 	bl	800179e <hts221_power_on_set>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	e004      	b.n	8001018 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f96f 	bl	8001310 <HTS221_GetOutputDataRate>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001048:	ed97 0a00 	vldr	s0, [r7]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f9a3 	bl	8001398 <HTS221_SetOutputDataRate>
 8001052:	4603      	mov	r3, r0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	331c      	adds	r3, #28
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc58 	bl	8001926 <hts221_hum_adc_point_0_get>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e06b      	b.n	800115a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f103 021c 	add.w	r2, r3, #28
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	3304      	adds	r3, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f000 fbaa 	bl	80017ea <hts221_hum_rh_point_0_get>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	e05b      	b.n	800115a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 021c 	add.w	r2, r3, #28
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	3308      	adds	r3, #8
 80010ae:	4619      	mov	r1, r3
 80010b0:	4610      	mov	r0, r2
 80010b2:	f000 fc5c 	bl	800196e <hts221_hum_adc_point_1_get>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e04b      	b.n	800115a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f103 021c 	add.w	r2, r3, #28
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	330c      	adds	r3, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f000 fba8 	bl	8001826 <hts221_hum_rh_point_1_get>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	e03b      	b.n	800115a <HTS221_HUM_GetHumidity+0xfe>
 80010e2:	2300      	movs	r3, #0
 80010e4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	331c      	adds	r3, #28
 80010ea:	f107 021c 	add.w	r2, r7, #28
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fafd 	bl	80016f0 <hts221_humidity_raw_get>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e02b      	b.n	800115a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001102:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f99a 	bl	8001450 <Linear_Interpolation>
 800111c:	eef0 7a40 	vmov.f32	s15, s0
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	d503      	bpl.n	800113e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001164 <HTS221_HUM_GetHumidity+0x108>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	dd02      	ble.n	8001158 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HTS221_HUM_GetHumidity+0x10c>)
 8001156:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	42c80000 	.word	0x42c80000
 8001168:	42c80000 	.word	0x42c80000

0800116c <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e015      	b.n	80011ae <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10b      	bne.n	80011a4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	331c      	adds	r3, #28
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fb03 	bl	800179e <hts221_power_on_set>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e004      	b.n	80011ae <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e015      	b.n	80011f8 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	331c      	adds	r3, #28
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fade 	bl	800179e <hts221_power_on_set>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e004      	b.n	80011f8 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f87f 	bl	8001310 <HTS221_GetOutputDataRate>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001228:	ed97 0a00 	vldr	s0, [r7]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f8b3 	bl	8001398 <HTS221_SetOutputDataRate>
 8001232:	4603      	mov	r3, r0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	331c      	adds	r3, #28
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fbb0 	bl	80019b6 <hts221_temp_adc_point_0_get>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	e052      	b.n	8001308 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f103 021c 	add.w	r2, r3, #28
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	3304      	adds	r3, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4610      	mov	r0, r2
 8001272:	f000 faf6 	bl	8001862 <hts221_temp_deg_point_0_get>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e042      	b.n	8001308 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f103 021c 	add.w	r2, r3, #28
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	3308      	adds	r3, #8
 800128e:	4619      	mov	r1, r3
 8001290:	4610      	mov	r0, r2
 8001292:	f000 fbb4 	bl	80019fe <hts221_temp_adc_point_1_get>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e032      	b.n	8001308 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f103 021c 	add.w	r2, r3, #28
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	330c      	adds	r3, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4610      	mov	r0, r2
 80012b2:	f000 fb07 	bl	80018c4 <hts221_temp_deg_point_1_get>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e022      	b.n	8001308 <HTS221_TEMP_GetTemperature+0xcc>
 80012c2:	2300      	movs	r3, #0
 80012c4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	331c      	adds	r3, #28
 80012ca:	f107 021c 	add.w	r2, r7, #28
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fa30 	bl	8001736 <hts221_temperature_raw_get>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	e012      	b.n	8001308 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80012e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f8aa 	bl	8001450 <Linear_Interpolation>
 80012fc:	eef0 7a40 	vmov.f32	s15, s0
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	331c      	adds	r3, #28
 8001322:	f107 020b 	add.w	r2, r7, #11
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f983 	bl	8001634 <hts221_data_rate_get>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	e025      	b.n	8001386 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d81d      	bhi.n	800137c <HTS221_GetOutputDataRate+0x6c>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HTS221_GetOutputDataRate+0x38>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001359 	.word	0x08001359
 800134c:	08001363 	.word	0x08001363
 8001350:	0800136d 	.word	0x0800136d
 8001354:	08001375 	.word	0x08001375
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
      break;
 8001360:	e010      	b.n	8001384 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001368:	601a      	str	r2, [r3, #0]
      break;
 800136a:	e00b      	b.n	8001384 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HTS221_GetOutputDataRate+0x80>)
 8001370:	601a      	str	r2, [r3, #0]
      break;
 8001372:	e007      	b.n	8001384 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HTS221_GetOutputDataRate+0x84>)
 8001378:	601a      	str	r2, [r3, #0]
      break;
 800137a:	e003      	b.n	8001384 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	60fb      	str	r3, [r7, #12]
      break;
 8001382:	bf00      	nop
  }

  return ret;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40e00000 	.word	0x40e00000
 8001394:	41480000 	.word	0x41480000

08001398 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80013a4:	edd7 7a00 	vldr	s15, [r7]
 80013a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	d801      	bhi.n	80013ba <HTS221_SetOutputDataRate+0x22>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00b      	b.n	80013d2 <HTS221_SetOutputDataRate+0x3a>
 80013ba:	edd7 7a00 	vldr	s15, [r7]
 80013be:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d801      	bhi.n	80013d0 <HTS221_SetOutputDataRate+0x38>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e000      	b.n	80013d2 <HTS221_SetOutputDataRate+0x3a>
 80013d0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80013d2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	331c      	adds	r3, #28
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f902 	bl	80015e6 <hts221_data_rate_set>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e000      	b.n	80013f0 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	331c      	adds	r3, #28
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f9c9 	bl	800179e <hts221_power_on_set>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e017      	b.n	8001448 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	331c      	adds	r3, #28
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f940 	bl	80016a4 <hts221_block_data_update_set>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e00b      	b.n	8001448 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001430:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffaf 	bl	8001398 <HTS221_SetOutputDataRate>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e000      	b.n	8001448 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edd3 7a01 	vldr	s15, [r3, #4]
 8001468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146c:	edd7 7a00 	vldr	s15, [r7]
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 6a02 	vldr	s13, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001480:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	ed93 6a00 	vldr	s12, [r3]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001494:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edd3 6a02 	vldr	s13, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014b0:	eef0 7a66 	vmov.f32	s15, s13
}
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80014c2:	b590      	push	{r4, r7, lr}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	72fb      	strb	r3, [r7, #11]
 80014d2:	4613      	mov	r3, r2
 80014d4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10e      	bne.n	8001500 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	695c      	ldr	r4, [r3, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	b299      	uxth	r1, r3
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	47a0      	blx	r4
 80014fc:	4603      	mov	r3, r0
 80014fe:	e00d      	b.n	800151c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	695c      	ldr	r4, [r3, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
 8001508:	b298      	uxth	r0, r3
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b299      	uxth	r1, r3
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	47a0      	blx	r4
 800151a:	4603      	mov	r3, r0
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}

08001524 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	461a      	mov	r2, r3
 8001530:	460b      	mov	r3, r1
 8001532:	72fb      	strb	r3, [r7, #11]
 8001534:	4613      	mov	r3, r2
 8001536:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10e      	bne.n	8001562 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	691c      	ldr	r4, [r3, #16]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
 800154c:	b298      	uxth	r0, r3
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001554:	b2db      	uxtb	r3, r3
 8001556:	b299      	uxth	r1, r3
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	47a0      	blx	r4
 800155e:	4603      	mov	r3, r0
 8001560:	e00d      	b.n	800157e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	691c      	ldr	r4, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	7b1b      	ldrb	r3, [r3, #12]
 800156a:	b298      	uxth	r0, r3
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001572:	b2db      	uxtb	r3, r3
 8001574:	b299      	uxth	r1, r3
 8001576:	893b      	ldrh	r3, [r7, #8]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	47a0      	blx	r4
 800157c:	4603      	mov	r3, r0
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}

08001586 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001586:	b590      	push	{r4, r7, lr}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	461a      	mov	r2, r3
 8001592:	460b      	mov	r3, r1
 8001594:	72fb      	strb	r3, [r7, #11]
 8001596:	4613      	mov	r3, r2
 8001598:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685c      	ldr	r4, [r3, #4]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6898      	ldr	r0, [r3, #8]
 80015a2:	893b      	ldrh	r3, [r7, #8]
 80015a4:	7af9      	ldrb	r1, [r7, #11]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	47a0      	blx	r4
 80015aa:	6178      	str	r0, [r7, #20]
  return ret;
 80015ac:	697b      	ldr	r3, [r7, #20]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}

080015b6 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80015b6:	b590      	push	{r4, r7, lr}
 80015b8:	b087      	sub	sp, #28
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	461a      	mov	r2, r3
 80015c2:	460b      	mov	r3, r1
 80015c4:	72fb      	strb	r3, [r7, #11]
 80015c6:	4613      	mov	r3, r2
 80015c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6898      	ldr	r0, [r3, #8]
 80015d2:	893b      	ldrh	r3, [r7, #8]
 80015d4:	7af9      	ldrb	r1, [r7, #11]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	47a0      	blx	r4
 80015da:	6178      	str	r0, [r7, #20]
  return ret;
 80015dc:	697b      	ldr	r3, [r7, #20]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}

080015e6 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80015f2:	f107 0208 	add.w	r2, r7, #8
 80015f6:	2301      	movs	r3, #1
 80015f8:	2120      	movs	r1, #32
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffc3 	bl	8001586 <hts221_read_reg>
 8001600:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10f      	bne.n	8001628 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	7a3b      	ldrb	r3, [r7, #8]
 8001612:	f362 0301 	bfi	r3, r2, #0, #2
 8001616:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	2301      	movs	r3, #1
 800161e:	2120      	movs	r1, #32
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffc8 	bl	80015b6 <hts221_write_reg>
 8001626:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001628:	68fb      	ldr	r3, [r7, #12]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800163e:	f107 0208 	add.w	r2, r7, #8
 8001642:	2301      	movs	r3, #1
 8001644:	2120      	movs	r1, #32
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff9d 	bl	8001586 <hts221_read_reg>
 800164c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800164e:	7a3b      	ldrb	r3, [r7, #8]
 8001650:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b03      	cmp	r3, #3
 8001658:	d81a      	bhi.n	8001690 <hts221_data_rate_get+0x5c>
 800165a:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <hts221_data_rate_get+0x2c>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	08001671 	.word	0x08001671
 8001664:	08001679 	.word	0x08001679
 8001668:	08001681 	.word	0x08001681
 800166c:	08001689 	.word	0x08001689
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
      break;
 8001676:	e00f      	b.n	8001698 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
      break;
 800167e:	e00b      	b.n	8001698 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	701a      	strb	r2, [r3, #0]
      break;
 8001686:	e007      	b.n	8001698 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2203      	movs	r2, #3
 800168c:	701a      	strb	r2, [r3, #0]
      break;
 800168e:	e003      	b.n	8001698 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2204      	movs	r2, #4
 8001694:	701a      	strb	r2, [r3, #0]
      break;
 8001696:	bf00      	nop
  }

  return ret;
 8001698:	68fb      	ldr	r3, [r7, #12]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	2301      	movs	r3, #1
 80016b6:	2120      	movs	r1, #32
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff64 	bl	8001586 <hts221_read_reg>
 80016be:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	7a3b      	ldrb	r3, [r7, #8]
 80016d0:	f362 0382 	bfi	r3, r2, #2, #1
 80016d4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	2301      	movs	r3, #1
 80016dc:	2120      	movs	r1, #32
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff69 	bl	80015b6 <hts221_write_reg>
 80016e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80016fa:	f107 0208 	add.w	r2, r7, #8
 80016fe:	2302      	movs	r3, #2
 8001700:	2128      	movs	r1, #40	; 0x28
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff3f 	bl	8001586 <hts221_read_reg>
 8001708:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800170a:	7a7b      	ldrb	r3, [r7, #9]
 800170c:	b21a      	sxth	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001718:	b29b      	uxth	r3, r3
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b29a      	uxth	r2, r3
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	801a      	strh	r2, [r3, #0]
  return ret;
 800172c:	68fb      	ldr	r3, [r7, #12]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	2302      	movs	r3, #2
 8001746:	212a      	movs	r1, #42	; 0x2a
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff1c 	bl	8001586 <hts221_read_reg>
 800174e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001750:	7a7b      	ldrb	r3, [r7, #9]
 8001752:	b21a      	sxth	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	b29b      	uxth	r3, r3
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b29a      	uxth	r2, r3
 8001764:	7a3b      	ldrb	r3, [r7, #8]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21a      	sxth	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	801a      	strh	r2, [r3, #0]
  return ret;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001786:	2301      	movs	r3, #1
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	210f      	movs	r1, #15
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fefa 	bl	8001586 <hts221_read_reg>
 8001792:	60f8      	str	r0, [r7, #12]
  return ret;
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017aa:	f107 0208 	add.w	r2, r7, #8
 80017ae:	2301      	movs	r3, #1
 80017b0:	2120      	movs	r1, #32
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fee7 	bl	8001586 <hts221_read_reg>
 80017b8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10f      	bne.n	80017e0 <hts221_power_on_set+0x42>
    reg.pd = val;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	7a3b      	ldrb	r3, [r7, #8]
 80017ca:	f362 13c7 	bfi	r3, r2, #7, #1
 80017ce:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017d0:	f107 0208 	add.w	r2, r7, #8
 80017d4:	2301      	movs	r3, #1
 80017d6:	2120      	movs	r1, #32
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff feec 	bl	80015b6 <hts221_write_reg>
 80017de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80017f4:	f107 020b 	add.w	r2, r7, #11
 80017f8:	2301      	movs	r3, #1
 80017fa:	2130      	movs	r1, #48	; 0x30
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fec2 	bl	8001586 <hts221_read_reg>
 8001802:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800181c:	68fb      	ldr	r3, [r7, #12]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001830:	f107 020b 	add.w	r2, r7, #11
 8001834:	2301      	movs	r3, #1
 8001836:	2131      	movs	r1, #49	; 0x31
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fea4 	bl	8001586 <hts221_read_reg>
 800183e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800184e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800186c:	f107 020f 	add.w	r2, r7, #15
 8001870:	2301      	movs	r3, #1
 8001872:	2132      	movs	r1, #50	; 0x32
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fe86 	bl	8001586 <hts221_read_reg>
 800187a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11b      	bne.n	80018ba <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	2301      	movs	r3, #1
 8001888:	2135      	movs	r1, #53	; 0x35
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fe7b 	bl	8001586 <hts221_read_reg>
 8001890:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001892:	7c3b      	ldrb	r3, [r7, #16]
 8001894:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	4413      	add	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ac:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80018ba:	697b      	ldr	r3, [r7, #20]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80018ce:	f107 020f 	add.w	r2, r7, #15
 80018d2:	2301      	movs	r3, #1
 80018d4:	2133      	movs	r1, #51	; 0x33
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe55 	bl	8001586 <hts221_read_reg>
 80018dc:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d11b      	bne.n	800191c <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80018e4:	f107 0210 	add.w	r2, r7, #16
 80018e8:	2301      	movs	r3, #1
 80018ea:	2135      	movs	r1, #53	; 0x35
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fe4a 	bl	8001586 <hts221_read_reg>
 80018f2:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	4413      	add	r3, r2
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800191c:	697b      	ldr	r3, [r7, #20]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001930:	f107 0208 	add.w	r2, r7, #8
 8001934:	2302      	movs	r3, #2
 8001936:	2136      	movs	r1, #54	; 0x36
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fe24 	bl	8001586 <hts221_read_reg>
 800193e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	7a3b      	ldrb	r3, [r7, #8]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001952:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2302      	movs	r3, #2
 800197e:	213a      	movs	r1, #58	; 0x3a
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff fe00 	bl	8001586 <hts221_read_reg>
 8001986:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001988:	7a7b      	ldrb	r3, [r7, #9]
 800198a:	b29b      	uxth	r3, r3
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	7a3b      	ldrb	r3, [r7, #8]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800199a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	2302      	movs	r3, #2
 80019c6:	213c      	movs	r1, #60	; 0x3c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fddc 	bl	8001586 <hts221_read_reg>
 80019ce:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	7a3b      	ldrb	r3, [r7, #8]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80019e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001a08:	f107 0208 	add.w	r2, r7, #8
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	213e      	movs	r1, #62	; 0x3e
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fdb8 	bl	8001586 <hts221_read_reg>
 8001a16:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001a18:	7a7b      	ldrb	r3, [r7, #9]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001a2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e04d      	b.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7b1a      	ldrb	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <LPS22HB_RegisterBusIO+0xc4>)
 8001aa0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <LPS22HB_RegisterBusIO+0xc8>)
 8001aa6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e020      	b.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4798      	blx	r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e016      	b.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d112      	bne.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	461a      	mov	r2, r3
 8001aec:	2110      	movs	r1, #16
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f9df 	bl	8001eb2 <LPS22HB_Write_Reg>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08002173 	.word	0x08002173
 8001b10:	080021f9 	.word	0x080021f9

08001b14 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d108      	bne.n	8001b38 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 faca 	bl	80020c0 <LPS22HB_Initialize>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	e004      	b.n	8001b42 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d111      	bne.n	8001b80 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f877 	bl	8001c50 <LPS22HB_PRESS_Disable>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	e00d      	b.n	8001b8a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f918 	bl	8001da4 <LPS22HB_TEMP_Disable>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e004      	b.n	8001b8a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	331c      	adds	r3, #28
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fcd0 	bl	8002548 <lps22hb_device_id_get>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e000      	b.n	8001bb6 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <LPS22HB_GetCapabilities+0x44>)
 8001bee:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <LPS22HB_GetCapabilities+0x44>)
 8001bf4:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	42960000 	.word	0x42960000

08001c08 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e014      	b.n	8001c48 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 021c 	add.w	r2, r3, #28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f000 fbd5 	bl	80023dc <lps22hb_data_rate_set>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3c:	e004      	b.n	8001c48 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e024      	b.n	8001cb0 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11a      	bne.n	8001ca6 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f103 021c 	add.w	r2, r3, #28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	332b      	adds	r3, #43	; 0x2b
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 fbd3 	bl	8002428 <lps22hb_data_rate_get>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	e010      	b.n	8001cb0 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	331c      	adds	r3, #28
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fba1 	bl	80023dc <lps22hb_data_rate_set>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	e004      	b.n	8001cb0 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f90f 	bl	8001ee8 <LPS22HB_GetOutputDataRate>
 8001cca:	4603      	mov	r3, r0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001cea:	ed97 0a00 	vldr	s0, [r7]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f94e 	bl	8001f90 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	e005      	b.n	8001d04 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001cf8:	ed97 0a00 	vldr	s0, [r7]
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f99f 	bl	8002040 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001d02:	4603      	mov	r3, r0
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f007 fc18 	bl	8009554 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	331c      	adds	r3, #28
 8001d28:	f107 020c 	add.w	r2, r7, #12
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fbbe 	bl	80024b0 <lps22hb_pressure_raw_get>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 facc 	bl	80022e0 <lps22hb_from_lsb_to_hpa>
 8001d48:	eef0 7a40 	vmov.f32	s15, s0
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e014      	b.n	8001d9c <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 021c 	add.w	r2, r3, #28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f000 fb2b 	bl	80023dc <lps22hb_data_rate_set>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e004      	b.n	8001d9c <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e024      	b.n	8001e04 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11a      	bne.n	8001dfa <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 021c 	add.w	r2, r3, #28
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	332b      	adds	r3, #43	; 0x2b
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 fb29 	bl	8002428 <lps22hb_data_rate_get>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	e010      	b.n	8001e04 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	331c      	adds	r3, #28
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 faf7 	bl	80023dc <lps22hb_data_rate_set>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	e004      	b.n	8001e04 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f865 	bl	8001ee8 <LPS22HB_GetOutputDataRate>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d106      	bne.n	8001e4c <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e3e:	ed97 0a00 	vldr	s0, [r7]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8a4 	bl	8001f90 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	e005      	b.n	8001e58 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e4c:	ed97 0a00 	vldr	s0, [r7]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8f5 	bl	8002040 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001e56:	4603      	mov	r3, r0
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2202      	movs	r2, #2
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f007 fb6e 	bl	8009554 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	331c      	adds	r3, #28
 8001e7c:	f107 020c 	add.w	r2, r7, #12
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fb3d 	bl	8002502 <lps22hb_temperature_raw_get>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e00a      	b.n	8001eaa <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8001e94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa39 	bl	8002310 <lps22hb_from_lsb_to_degc>
 8001e9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f103 001c 	add.w	r0, r3, #28
 8001ec8:	1cba      	adds	r2, r7, #2
 8001eca:	78f9      	ldrb	r1, [r7, #3]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f000 f9ee 	bl	80022ae <lps22hb_write_reg>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	e000      	b.n	8001ee0 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	331c      	adds	r3, #28
 8001efa:	f107 020b 	add.w	r2, r7, #11
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fa91 	bl	8002428 <lps22hb_data_rate_get>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	e031      	b.n	8001f76 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d829      	bhi.n	8001f6c <LPS22HB_GetOutputDataRate+0x84>
 8001f18:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <LPS22HB_GetOutputDataRate+0x38>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001f43 	.word	0x08001f43
 8001f28:	08001f4d 	.word	0x08001f4d
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	08001f5d 	.word	0x08001f5d
 8001f34:	08001f65 	.word	0x08001f65
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
      break;
 8001f40:	e018      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f48:	601a      	str	r2, [r3, #0]
      break;
 8001f4a:	e013      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <LPS22HB_GetOutputDataRate+0x98>)
 8001f50:	601a      	str	r2, [r3, #0]
      break;
 8001f52:	e00f      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LPS22HB_GetOutputDataRate+0x9c>)
 8001f58:	601a      	str	r2, [r3, #0]
      break;
 8001f5a:	e00b      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <LPS22HB_GetOutputDataRate+0xa0>)
 8001f60:	601a      	str	r2, [r3, #0]
      break;
 8001f62:	e007      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <LPS22HB_GetOutputDataRate+0xa4>)
 8001f68:	601a      	str	r2, [r3, #0]
      break;
 8001f6a:	e003      	b.n	8001f74 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	60fb      	str	r3, [r7, #12]
      break;
 8001f72:	bf00      	nop
  }

  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	41200000 	.word	0x41200000
 8001f84:	41c80000 	.word	0x41c80000
 8001f88:	42480000 	.word	0x42480000
 8001f8c:	42960000 	.word	0x42960000

08001f90 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001f9c:	edd7 7a00 	vldr	s15, [r7]
 8001fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d801      	bhi.n	8001fb2 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e021      	b.n	8001ff6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001fb2:	edd7 7a00 	vldr	s15, [r7]
 8001fb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d801      	bhi.n	8001fc8 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e016      	b.n	8001ff6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001fc8:	edd7 7a00 	vldr	s15, [r7]
 8001fcc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d801      	bhi.n	8001fde <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00b      	b.n	8001ff6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001fde:	edd7 7a00 	vldr	s15, [r7]
 8001fe2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800203c <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d801      	bhi.n	8001ff4 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e000      	b.n	8001ff6 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001ff4:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001ff6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f9eb 	bl	80023dc <lps22hb_data_rate_set>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	e00f      	b.n	8002032 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 021c 	add.w	r2, r3, #28
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	332b      	adds	r3, #43	; 0x2b
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fa02 	bl	8002428 <lps22hb_data_rate_get>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e000      	b.n	8002032 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	42480000 	.word	0x42480000

08002040 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800204c:	edd7 7a00 	vldr	s15, [r7]
 8002050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	d801      	bhi.n	8002062 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 800205e:	2301      	movs	r3, #1
 8002060:	e021      	b.n	80020a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002062:	edd7 7a00 	vldr	s15, [r7]
 8002066:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800206a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	d801      	bhi.n	8002078 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8002074:	2302      	movs	r3, #2
 8002076:	e016      	b.n	80020a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002078:	edd7 7a00 	vldr	s15, [r7]
 800207c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002088:	d801      	bhi.n	800208e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800208a:	2303      	movs	r3, #3
 800208c:	e00b      	b.n	80020a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800208e:	edd7 7a00 	vldr	s15, [r7]
 8002092:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80020bc <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8002096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209e:	d801      	bhi.n	80020a4 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80020a0:	2304      	movs	r3, #4
 80020a2:	e000      	b.n	80020a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80020a4:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	42480000 	.word	0x42480000

080020c0 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	331c      	adds	r3, #28
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fa4b 	bl	800256a <lps22hb_low_power_set>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e044      	b.n	800216a <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	331c      	adds	r3, #28
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f978 	bl	80023dc <lps22hb_data_rate_set>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e038      	b.n	800216a <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	331c      	adds	r3, #28
 80020fc:	2102      	movs	r1, #2
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f946 	bl	8002390 <lps22hb_low_pass_filter_mode_set>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e02c      	b.n	800216a <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	331c      	adds	r3, #28
 8002114:	2101      	movs	r1, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f914 	bl	8002344 <lps22hb_block_data_update_set>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	e020      	b.n	800216a <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	331c      	adds	r3, #28
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fa3d 	bl	80025b6 <lps22hb_auto_add_inc_set>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e010      	b.n	800216a <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	331c      	adds	r3, #28
 800214c:	2101      	movs	r1, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fa31 	bl	80025b6 <lps22hb_auto_add_inc_set>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e004      	b.n	800216a <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002172:	b590      	push	{r4, r7, lr}
 8002174:	b089      	sub	sp, #36	; 0x24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	461a      	mov	r2, r3
 800217e:	460b      	mov	r3, r1
 8002180:	72fb      	strb	r3, [r7, #11]
 8002182:	4613      	mov	r3, r2
 8002184:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d121      	bne.n	80021da <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	83fb      	strh	r3, [r7, #30]
 800219a:	e018      	b.n	80021ce <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	695c      	ldr	r4, [r3, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	7b1b      	ldrb	r3, [r3, #12]
 80021a4:	b298      	uxth	r0, r3
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	4413      	add	r3, r2
 80021ae:	b299      	uxth	r1, r3
 80021b0:	8bfb      	ldrh	r3, [r7, #30]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	441a      	add	r2, r3
 80021b6:	2301      	movs	r3, #1
 80021b8:	47a0      	blx	r4
 80021ba:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e013      	b.n	80021f0 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80021c8:	8bfb      	ldrh	r3, [r7, #30]
 80021ca:	3301      	adds	r3, #1
 80021cc:	83fb      	strh	r3, [r7, #30]
 80021ce:	8bfa      	ldrh	r2, [r7, #30]
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3e2      	bcc.n	800219c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	e00a      	b.n	80021f0 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	695c      	ldr	r4, [r3, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	b298      	uxth	r0, r3
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	b299      	uxth	r1, r3
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	47a0      	blx	r4
 80021ee:	4603      	mov	r3, r0
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}

080021f8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	461a      	mov	r2, r3
 8002204:	460b      	mov	r3, r1
 8002206:	72fb      	strb	r3, [r7, #11]
 8002208:	4613      	mov	r3, r2
 800220a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d121      	bne.n	8002260 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800221c:	2300      	movs	r3, #0
 800221e:	83fb      	strh	r3, [r7, #30]
 8002220:	e018      	b.n	8002254 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	691c      	ldr	r4, [r3, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	7b1b      	ldrb	r3, [r3, #12]
 800222a:	b298      	uxth	r0, r3
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	b29a      	uxth	r2, r3
 8002230:	8bfb      	ldrh	r3, [r7, #30]
 8002232:	4413      	add	r3, r2
 8002234:	b299      	uxth	r1, r3
 8002236:	8bfb      	ldrh	r3, [r7, #30]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	441a      	add	r2, r3
 800223c:	2301      	movs	r3, #1
 800223e:	47a0      	blx	r4
 8002240:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e013      	b.n	8002276 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800224e:	8bfb      	ldrh	r3, [r7, #30]
 8002250:	3301      	adds	r3, #1
 8002252:	83fb      	strh	r3, [r7, #30]
 8002254:	8bfa      	ldrh	r2, [r7, #30]
 8002256:	893b      	ldrh	r3, [r7, #8]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3e2      	bcc.n	8002222 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	e00a      	b.n	8002276 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	691c      	ldr	r4, [r3, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	7b1b      	ldrb	r3, [r3, #12]
 8002268:	b298      	uxth	r0, r3
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	b299      	uxth	r1, r3
 800226e:	893b      	ldrh	r3, [r7, #8]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	47a0      	blx	r4
 8002274:	4603      	mov	r3, r0
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}

0800227e <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800227e:	b590      	push	{r4, r7, lr}
 8002280:	b087      	sub	sp, #28
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	461a      	mov	r2, r3
 800228a:	460b      	mov	r3, r1
 800228c:	72fb      	strb	r3, [r7, #11]
 800228e:	4613      	mov	r3, r2
 8002290:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685c      	ldr	r4, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6898      	ldr	r0, [r3, #8]
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	7af9      	ldrb	r1, [r7, #11]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	47a0      	blx	r4
 80022a2:	6178      	str	r0, [r7, #20]
  return ret;
 80022a4:	697b      	ldr	r3, [r7, #20]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}

080022ae <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80022ae:	b590      	push	{r4, r7, lr}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	461a      	mov	r2, r3
 80022ba:	460b      	mov	r3, r1
 80022bc:	72fb      	strb	r3, [r7, #11]
 80022be:	4613      	mov	r3, r2
 80022c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681c      	ldr	r4, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6898      	ldr	r0, [r3, #8]
 80022ca:	893b      	ldrh	r3, [r7, #8]
 80022cc:	7af9      	ldrb	r1, [r7, #11]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	47a0      	blx	r4
 80022d2:	6178      	str	r0, [r7, #20]
  return ret;
 80022d4:	697b      	ldr	r3, [r7, #20]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}
	...

080022e0 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800230c <lps22hb_from_lsb_to_hpa+0x2c>
 80022f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	49800000 	.word	0x49800000

08002310 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002326:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002340 <lps22hb_from_lsb_to_degc+0x30>
 800232a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800232e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	42c80000 	.word	0x42c80000

08002344 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	2301      	movs	r3, #1
 8002356:	2110      	movs	r1, #16
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff90 	bl	800227e <lps22hb_read_reg>
 800235e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	7a3b      	ldrb	r3, [r7, #8]
 8002370:	f362 0341 	bfi	r3, r2, #1, #1
 8002374:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	2301      	movs	r3, #1
 800237c:	2110      	movs	r1, #16
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff95 	bl	80022ae <lps22hb_write_reg>
 8002384:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800239c:	f107 0208 	add.w	r2, r7, #8
 80023a0:	2301      	movs	r3, #1
 80023a2:	2110      	movs	r1, #16
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff6a 	bl	800227e <lps22hb_read_reg>
 80023aa:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	7a3b      	ldrb	r3, [r7, #8]
 80023bc:	f362 0383 	bfi	r3, r2, #2, #2
 80023c0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80023c2:	f107 0208 	add.w	r2, r7, #8
 80023c6:	2301      	movs	r3, #1
 80023c8:	2110      	movs	r1, #16
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff6f 	bl	80022ae <lps22hb_write_reg>
 80023d0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80023e8:	f107 0208 	add.w	r2, r7, #8
 80023ec:	2301      	movs	r3, #1
 80023ee:	2110      	movs	r1, #16
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff44 	bl	800227e <lps22hb_read_reg>
 80023f6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	b2da      	uxtb	r2, r3
 8002406:	7a3b      	ldrb	r3, [r7, #8]
 8002408:	f362 1306 	bfi	r3, r2, #4, #3
 800240c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800240e:	f107 0208 	add.w	r2, r7, #8
 8002412:	2301      	movs	r3, #1
 8002414:	2110      	movs	r1, #16
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff49 	bl	80022ae <lps22hb_write_reg>
 800241c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002432:	f107 0208 	add.w	r2, r7, #8
 8002436:	2301      	movs	r3, #1
 8002438:	2110      	movs	r1, #16
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff1f 	bl	800227e <lps22hb_read_reg>
 8002440:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8002442:	7a3b      	ldrb	r3, [r7, #8]
 8002444:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b05      	cmp	r3, #5
 800244c:	d826      	bhi.n	800249c <lps22hb_data_rate_get+0x74>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <lps22hb_data_rate_get+0x2c>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002475 	.word	0x08002475
 800245c:	0800247d 	.word	0x0800247d
 8002460:	08002485 	.word	0x08002485
 8002464:	0800248d 	.word	0x0800248d
 8002468:	08002495 	.word	0x08002495
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
      break;
 8002472:	e017      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e013      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	e00f      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2203      	movs	r2, #3
 8002488:	701a      	strb	r2, [r3, #0]
      break;
 800248a:	e00b      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2204      	movs	r2, #4
 8002490:	701a      	strb	r2, [r3, #0]
      break;
 8002492:	e007      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2205      	movs	r2, #5
 8002498:	701a      	strb	r2, [r3, #0]
      break;
 800249a:	e003      	b.n	80024a4 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
      break;
 80024a2:	bf00      	nop
  }

  return ret;
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80024ba:	f107 0208 	add.w	r2, r7, #8
 80024be:	2303      	movs	r3, #3
 80024c0:	2128      	movs	r1, #40	; 0x28
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fedb 	bl	800227e <lps22hb_read_reg>
 80024c8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80024ca:	7abb      	ldrb	r3, [r7, #10]
 80024cc:	461a      	mov	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	7a7a      	ldrb	r2, [r7, #9]
 80024da:	441a      	add	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	7a3a      	ldrb	r2, [r7, #8]
 80024e8:	441a      	add	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	021a      	lsls	r2, r3, #8
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	601a      	str	r2, [r3, #0]
  return ret;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	2302      	movs	r3, #2
 8002512:	212b      	movs	r1, #43	; 0x2b
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff feb2 	bl	800227e <lps22hb_read_reg>
 800251a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800251c:	7a7b      	ldrb	r3, [r7, #9]
 800251e:	b21a      	sxth	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252a:	b29b      	uxth	r3, r3
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b29a      	uxth	r2, r3
 8002530:	7a3b      	ldrb	r3, [r7, #8]
 8002532:	b29b      	uxth	r3, r3
 8002534:	4413      	add	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	b21a      	sxth	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	801a      	strh	r2, [r3, #0]
  return ret;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002552:	2301      	movs	r3, #1
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	210f      	movs	r1, #15
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fe90 	bl	800227e <lps22hb_read_reg>
 800255e:	60f8      	str	r0, [r7, #12]
  return ret;
 8002560:	68fb      	ldr	r3, [r7, #12]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002576:	f107 0208 	add.w	r2, r7, #8
 800257a:	2301      	movs	r3, #1
 800257c:	211a      	movs	r1, #26
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fe7d 	bl	800227e <lps22hb_read_reg>
 8002584:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	7a3b      	ldrb	r3, [r7, #8]
 8002596:	f362 0300 	bfi	r3, r2, #0, #1
 800259a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 800259c:	f107 0208 	add.w	r2, r7, #8
 80025a0:	2301      	movs	r3, #1
 80025a2:	211a      	movs	r1, #26
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fe82 	bl	80022ae <lps22hb_write_reg>
 80025aa:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025ac:	68fb      	ldr	r3, [r7, #12]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80025c2:	f107 0208 	add.w	r2, r7, #8
 80025c6:	2301      	movs	r3, #1
 80025c8:	2111      	movs	r1, #17
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fe57 	bl	800227e <lps22hb_read_reg>
 80025d0:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10f      	bne.n	80025f8 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	7a3b      	ldrb	r3, [r7, #8]
 80025e2:	f362 1304 	bfi	r3, r2, #4, #1
 80025e6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80025e8:	f107 0208 	add.w	r2, r7, #8
 80025ec:	2301      	movs	r3, #1
 80025ee:	2111      	movs	r1, #17
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fe5c 	bl	80022ae <lps22hb_write_reg>
 80025f6:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025f8:	68fb      	ldr	r3, [r7, #12]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e04d      	b.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7b1a      	ldrb	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 800265c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002662:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e020      	b.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4798      	blx	r3
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e016      	b.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d112      	bne.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80026a0:	2301      	movs	r3, #1
 80026a2:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	461a      	mov	r2, r3
 80026a8:	2123      	movs	r1, #35	; 0x23
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fb55 	bl	8002d5a <LSM303AGR_ACC_Write_Reg>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e000      	b.n	80026be <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	08003569 	.word	0x08003569
 80026cc:	080035cb 	.word	0x080035cb

080026d0 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	331c      	adds	r3, #28
 80026dc:	2101      	movs	r1, #1
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 f94a 	bl	8003978 <lsm303agr_xl_block_data_update_set>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e02c      	b.n	800274a <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	331c      	adds	r3, #28
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 faed 	bl	8003cd6 <lsm303agr_xl_fifo_mode_set>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e020      	b.n	800274a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2205      	movs	r2, #5
 800270c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	331c      	adds	r3, #28
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f84e 	bl	80037b8 <lsm303agr_xl_data_rate_set>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e010      	b.n	800274a <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	331c      	adds	r3, #28
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f8c4 	bl	80038bc <lsm303agr_xl_full_scale_set>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e004      	b.n	800274a <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f87c 	bl	8002858 <LSM303AGR_ACC_Disable>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e008      	b.n	800277e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	331c      	adds	r3, #28
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fa55 	bl	8003c46 <lsm303agr_xl_device_id_get>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e000      	b.n	80027aa <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2210      	movs	r2, #16
 80027e0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <LSM303AGR_ACC_GetCapabilities+0x58>)
 80027f4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	43c80000 	.word	0x43c80000

08002810 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e014      	b.n	8002850 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f103 021c 	add.w	r2, r3, #28
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f000 ffbf 	bl	80037b8 <lsm303agr_xl_data_rate_set>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e004      	b.n	8002850 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e01f      	b.n	80028ae <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 021c 	add.w	r2, r3, #28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	332a      	adds	r3, #42	; 0x2a
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 ffc2 	bl	8003804 <lsm303agr_xl_data_rate_get>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e010      	b.n	80028ae <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	331c      	adds	r3, #28
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f000 ff90 	bl	80037b8 <lsm303agr_xl_data_rate_set>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e004      	b.n	80028ae <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	331c      	adds	r3, #28
 80028c8:	f107 020b 	add.w	r2, r7, #11
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 ff3e 	bl	8003750 <lsm303agr_xl_operating_mode_get>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e031      	b.n	8002944 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d01a      	beq.n	800291c <LSM303AGR_ACC_GetSensitivity+0x66>
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	dc22      	bgt.n	8002930 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d00a      	beq.n	8002908 <LSM303AGR_ACC_GetSensitivity+0x52>
 80028f2:	e01d      	b.n	8002930 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fca8 	bl	800324c <LSM303AGR_ACC_GetSensitivityHR>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e01d      	b.n	8002944 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fce4 	bl	80032d8 <LSM303AGR_ACC_GetSensitivityNM>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e013      	b.n	8002944 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fd20 	bl	8003364 <LSM303AGR_ACC_GetSensitivityLP>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	60fb      	str	r3, [r7, #12]
      break;
 8002936:	e004      	b.n	8002942 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002938:	bf00      	nop
 800293a:	e002      	b.n	8002942 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002940:	bf00      	nop
  }

  return ret;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	331c      	adds	r3, #28
 800295e:	f107 020b 	add.w	r2, r7, #11
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fef3 	bl	8003750 <lsm303agr_xl_operating_mode_get>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	e09d      	b.n	8002ab2 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	331c      	adds	r3, #28
 800297a:	f107 020a 	add.w	r2, r7, #10
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f000 ff3f 	bl	8003804 <lsm303agr_xl_data_rate_get>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
 8002990:	e08f      	b.n	8002ab2 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d147      	bne.n	8002a28 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	2b09      	cmp	r3, #9
 800299c:	d840      	bhi.n	8002a20 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029cd 	.word	0x080029cd
 80029a8:	080029d7 	.word	0x080029d7
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	080029e9 	.word	0x080029e9
 80029b4:	080029f1 	.word	0x080029f1
 80029b8:	080029f9 	.word	0x080029f9
 80029bc:	08002a01 	.word	0x08002a01
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	08002a11 	.word	0x08002a11
 80029c8:	08002a19 	.word	0x08002a19
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
        break;
 80029d4:	e06c      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029dc:	601a      	str	r2, [r3, #0]
        break;
 80029de:	e067      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a36      	ldr	r2, [pc, #216]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80029e4:	601a      	str	r2, [r3, #0]
        break;
 80029e6:	e063      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80029ec:	601a      	str	r2, [r3, #0]
        break;
 80029ee:	e05f      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80029f4:	601a      	str	r2, [r3, #0]
        break;
 80029f6:	e05b      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80029fc:	601a      	str	r2, [r3, #0]
        break;
 80029fe:	e057      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4a32      	ldr	r2, [pc, #200]	; (8002acc <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002a04:	601a      	str	r2, [r3, #0]
        break;
 8002a06:	e053      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002a0c:	601a      	str	r2, [r3, #0]
        break;
 8002a0e:	e04f      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002a14:	601a      	str	r2, [r3, #0]
        break;
 8002a16:	e04b      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ad8 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002a1c:	601a      	str	r2, [r3, #0]
        break;
 8002a1e:	e047      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
 8002a24:	60fb      	str	r3, [r7, #12]
        break;
 8002a26:	e043      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002a28:	7abb      	ldrb	r3, [r7, #10]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d83c      	bhi.n	8002aa8 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a5d 	.word	0x08002a5d
 8002a38:	08002a67 	.word	0x08002a67
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a81 	.word	0x08002a81
 8002a48:	08002a89 	.word	0x08002a89
 8002a4c:	08002a91 	.word	0x08002a91
 8002a50:	08002a99 	.word	0x08002a99
 8002a54:	08002aa9 	.word	0x08002aa9
 8002a58:	08002aa1 	.word	0x08002aa1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
        break;
 8002a64:	e024      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a6c:	601a      	str	r2, [r3, #0]
        break;
 8002a6e:	e01f      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002a74:	601a      	str	r2, [r3, #0]
        break;
 8002a76:	e01b      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002a7c:	601a      	str	r2, [r3, #0]
        break;
 8002a7e:	e017      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002a84:	601a      	str	r2, [r3, #0]
        break;
 8002a86:	e013      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002a8c:	601a      	str	r2, [r3, #0]
        break;
 8002a8e:	e00f      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002a94:	601a      	str	r2, [r3, #0]
        break;
 8002a96:	e00b      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002a9c:	601a      	str	r2, [r3, #0]
        break;
 8002a9e:	e007      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002aa4:	601a      	str	r2, [r3, #0]
        break;
 8002aa6:	e003      	b.n	8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	60fb      	str	r3, [r7, #12]
        break;
 8002aae:	bf00      	nop
    }
  }

  return ret;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	41200000 	.word	0x41200000
 8002ac0:	41c80000 	.word	0x41c80000
 8002ac4:	42480000 	.word	0x42480000
 8002ac8:	42c80000 	.word	0x42c80000
 8002acc:	43480000 	.word	0x43480000
 8002ad0:	43c80000 	.word	0x43c80000
 8002ad4:	44ca8000 	.word	0x44ca8000
 8002ad8:	45a80000 	.word	0x45a80000
 8002adc:	44a80000 	.word	0x44a80000

08002ae0 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d106      	bne.n	8002b04 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002af6:	ed97 0a00 	vldr	s0, [r7]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fc78 	bl	80033f0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	e005      	b.n	8002b10 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002b04:	ed97 0a00 	vldr	s0, [r7]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fcd3 	bl	80034b4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002b0e:	4603      	mov	r3, r0
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	331c      	adds	r3, #28
 8002b2a:	f107 020b 	add.w	r2, r7, #11
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fee9 	bl	8003908 <lsm303agr_xl_full_scale_get>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b40:	e023      	b.n	8002b8a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d81b      	bhi.n	8002b80 <LSM303AGR_ACC_GetFullScale+0x68>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b69 	.word	0x08002b69
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b79 	.word	0x08002b79
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2202      	movs	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
      break;
 8002b66:	e00f      	b.n	8002b88 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	601a      	str	r2, [r3, #0]
      break;
 8002b6e:	e00b      	b.n	8002b88 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2208      	movs	r2, #8
 8002b74:	601a      	str	r2, [r3, #0]
      break;
 8002b76:	e007      	b.n	8002b88 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	601a      	str	r2, [r3, #0]
      break;
 8002b7e:	e003      	b.n	8002b88 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	60fb      	str	r3, [r7, #12]
      break;
 8002b86:	bf00      	nop
  }

  return ret;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop

08002b94 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	dd0b      	ble.n	8002bbc <LSM303AGR_ACC_SetFullScale+0x28>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	dd06      	ble.n	8002bb8 <LSM303AGR_ACC_SetFullScale+0x24>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	dc01      	bgt.n	8002bb4 <LSM303AGR_ACC_SetFullScale+0x20>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e004      	b.n	8002bbe <LSM303AGR_ACC_SetFullScale+0x2a>
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e002      	b.n	8002bbe <LSM303AGR_ACC_SetFullScale+0x2a>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LSM303AGR_ACC_SetFullScale+0x2a>
 8002bbc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002bbe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	331c      	adds	r3, #28
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fe77 	bl	80038bc <lsm303agr_xl_full_scale_set>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e000      	b.n	8002bdc <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	331c      	adds	r3, #28
 8002bfa:	f107 020f 	add.w	r2, r7, #15
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fda5 	bl	8003750 <lsm303agr_xl_operating_mode_get>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	e04a      	b.n	8002ca8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d00c      	beq.n	8002c32 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	dc0e      	bgt.n	8002c3a <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d003      	beq.n	8002c2c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002c24:	e009      	b.n	8002c3a <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002c26:	2310      	movs	r3, #16
 8002c28:	83fb      	strh	r3, [r7, #30]
      break;
 8002c2a:	e00a      	b.n	8002c42 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002c2c:	2340      	movs	r3, #64	; 0x40
 8002c2e:	83fb      	strh	r3, [r7, #30]
      break;
 8002c30:	e007      	b.n	8002c42 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c36:	83fb      	strh	r3, [r7, #30]
      break;
 8002c38:	e003      	b.n	8002c42 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	61bb      	str	r3, [r7, #24]
      break;
 8002c40:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d101      	bne.n	8002c4e <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	e02c      	b.n	8002ca8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	331c      	adds	r3, #28
 8002c52:	f107 0210 	add.w	r2, r7, #16
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 feb3 	bl	80039c4 <lsm303agr_acceleration_raw_get>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	e01e      	b.n	8002ca8 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002c6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002c7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c88:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c8c:	b21a      	sxth	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002c92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ca0:	b21a      	sxth	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	809a      	strh	r2, [r3, #4]

  return ret;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff8c 	bl	8002be4 <LSM303AGR_ACC_GetAxesRaw>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e03c      	b.n	8002d52 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fde9 	bl	80028b6 <LSM303AGR_ACC_GetSensitivity>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e030      	b.n	8002d52 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002cf0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d08:	ee17 2a90 	vmov	r2, s15
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002d10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d28:	ee17 2a90 	vmov	r2, s15
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d48:	ee17 2a90 	vmov	r2, s15
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
 8002d66:	4613      	mov	r3, r2
 8002d68:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 001c 	add.w	r0, r3, #28
 8002d70:	1cba      	adds	r2, r7, #2
 8002d72:	78f9      	ldrb	r1, [r7, #3]
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 fcd3 	bl	8003720 <lsm303agr_write_reg>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e000      	b.n	8002d88 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e04b      	b.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	7b1a      	ldrb	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002de8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002dee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e01e      	b.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4798      	blx	r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e014      	b.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	331c      	adds	r3, #28
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 ff75 	bl	8003d22 <lsm303agr_mag_i2c_interface_set>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e000      	b.n	8002e46 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002e44:	68fb      	ldr	r3, [r7, #12]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	0800362d 	.word	0x0800362d
 8002e54:	0800368f 	.word	0x0800368f

08002e58 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	331c      	adds	r3, #28
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fe7c 	bl	8003b64 <lsm303agr_mag_block_data_update_set>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e028      	b.n	8002eca <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	331c      	adds	r3, #28
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fdeb 	bl	8003a5a <lsm303agr_mag_operating_mode_set>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e01c      	b.n	8002eca <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	331c      	adds	r3, #28
 8002e94:	2103      	movs	r1, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fe05 	bl	8003aa6 <lsm303agr_mag_data_rate_set>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e010      	b.n	8002eca <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	331c      	adds	r3, #28
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 feeb 	bl	8003c8a <lsm303agr_mag_self_test_set>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e004      	b.n	8002eca <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f874 	bl	8002fc8 <LSM303AGR_MAG_Disable>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e004      	b.n	8002ef6 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	331c      	adds	r3, #28
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 feaa 	bl	8003c68 <lsm303agr_mag_device_id_get>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	e000      	b.n	8002f22 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2232      	movs	r2, #50	; 0x32
 8002f5e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002f74:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	42c80000 	.word	0x42c80000

08002f88 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e010      	b.n	8002fc0 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	331c      	adds	r3, #28
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd58 	bl	8003a5a <lsm303agr_mag_operating_mode_set>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e004      	b.n	8002fc0 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e010      	b.n	8003000 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	331c      	adds	r3, #28
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd38 	bl	8003a5a <lsm303agr_mag_operating_mode_set>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e004      	b.n	8003000 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003018:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	331c      	adds	r3, #28
 800303a:	f107 020b 	add.w	r2, r7, #11
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd57 	bl	8003af4 <lsm303agr_mag_data_rate_get>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	e023      	b.n	800309a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d81b      	bhi.n	8003090 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	08003079 	.word	0x08003079
 8003068:	08003081 	.word	0x08003081
 800306c:	08003089 	.word	0x08003089
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003074:	601a      	str	r2, [r3, #0]
      break;
 8003076:	e00f      	b.n	8003098 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 800307c:	601a      	str	r2, [r3, #0]
      break;
 800307e:	e00b      	b.n	8003098 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003084:	601a      	str	r2, [r3, #0]
      break;
 8003086:	e007      	b.n	8003098 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 800308c:	601a      	str	r2, [r3, #0]
      break;
 800308e:	e003      	b.n	8003098 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	60fb      	str	r3, [r7, #12]
      break;
 8003096:	bf00      	nop
  }

  return ret;
 8003098:	68fb      	ldr	r3, [r7, #12]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	41200000 	.word	0x41200000
 80030a8:	41a00000 	.word	0x41a00000
 80030ac:	42480000 	.word	0x42480000
 80030b0:	42c80000 	.word	0x42c80000

080030b4 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80030c0:	edd7 7a00 	vldr	s15, [r7]
 80030c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	d801      	bhi.n	80030d6 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80030d2:	2300      	movs	r3, #0
 80030d4:	e016      	b.n	8003104 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80030d6:	edd7 7a00 	vldr	s15, [r7]
 80030da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	d801      	bhi.n	80030ec <LSM303AGR_MAG_SetOutputDataRate+0x38>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e00b      	b.n	8003104 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80030ec:	edd7 7a00 	vldr	s15, [r7]
 80030f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800312c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 80030f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	d801      	bhi.n	8003102 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e000      	b.n	8003104 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003102:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003104:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	331c      	adds	r3, #28
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fcc9 	bl	8003aa6 <lsm303agr_mag_data_rate_set>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e000      	b.n	8003122 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	42480000 	.word	0x42480000

08003130 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2232      	movs	r2, #50	; 0x32
 800313e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	331c      	adds	r3, #28
 8003174:	f107 0208 	add.w	r2, r7, #8
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd18 	bl	8003bb0 <lsm303agr_magnetic_raw_get>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	e00c      	b.n	80031a6 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800318c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003194:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800319c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	331c      	adds	r3, #28
 80031bc:	f107 0210 	add.w	r2, r7, #16
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fcf4 	bl	8003bb0 <lsm303agr_magnetic_raw_get>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e036      	b.n	8003242 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ff14 	bl	8003008 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80031e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f8:	ee17 2a90 	vmov	r2, s15
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003200:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003218:	ee17 2a90 	vmov	r2, s15
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003220:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003238:	ee17 2a90 	vmov	r2, s15
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	331c      	adds	r3, #28
 800325e:	f107 020b 	add.w	r2, r7, #11
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fb4f 	bl	8003908 <lsm303agr_xl_full_scale_get>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	e023      	b.n	80032be <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d81b      	bhi.n	80032b4 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	08003295 	.word	0x08003295
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032ad 	.word	0x080032ad
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003298:	601a      	str	r2, [r3, #0]
      break;
 800329a:	e00f      	b.n	80032bc <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80032a0:	601a      	str	r2, [r3, #0]
      break;
 80032a2:	e00b      	b.n	80032bc <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80032a8:	601a      	str	r2, [r3, #0]
      break;
 80032aa:	e007      	b.n	80032bc <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80032b0:	601a      	str	r2, [r3, #0]
      break;
 80032b2:	e003      	b.n	80032bc <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80032b4:	f04f 33ff 	mov.w	r3, #4294967295
 80032b8:	60fb      	str	r3, [r7, #12]
      break;
 80032ba:	bf00      	nop
  }

  return ret;
 80032bc:	68fb      	ldr	r3, [r7, #12]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	3f7ae148 	.word	0x3f7ae148
 80032cc:	3ff9999a 	.word	0x3ff9999a
 80032d0:	4079999a 	.word	0x4079999a
 80032d4:	413b851f 	.word	0x413b851f

080032d8 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	331c      	adds	r3, #28
 80032ea:	f107 020b 	add.w	r2, r7, #11
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fb09 	bl	8003908 <lsm303agr_xl_full_scale_get>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003300:	e023      	b.n	800334a <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d81b      	bhi.n	8003340 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	08003329 	.word	0x08003329
 8003318:	08003331 	.word	0x08003331
 800331c:	08003339 	.word	0x08003339
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	e00f      	b.n	8003348 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 800332c:	601a      	str	r2, [r3, #0]
      break;
 800332e:	e00b      	b.n	8003348 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003334:	601a      	str	r2, [r3, #0]
      break;
 8003336:	e007      	b.n	8003348 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 800333c:	601a      	str	r2, [r3, #0]
      break;
 800333e:	e003      	b.n	8003348 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	60fb      	str	r3, [r7, #12]
      break;
 8003346:	bf00      	nop
  }

  return ret;
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	4079999a 	.word	0x4079999a
 8003358:	40fa3d71 	.word	0x40fa3d71
 800335c:	417a147b 	.word	0x417a147b
 8003360:	423b999a 	.word	0x423b999a

08003364 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	331c      	adds	r3, #28
 8003376:	f107 020b 	add.w	r2, r7, #11
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fac3 	bl	8003908 <lsm303agr_xl_full_scale_get>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	e023      	b.n	80033d6 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d81b      	bhi.n	80033cc <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033b5 	.word	0x080033b5
 80033a4:	080033bd 	.word	0x080033bd
 80033a8:	080033c5 	.word	0x080033c5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80033b0:	601a      	str	r2, [r3, #0]
      break;
 80033b2:	e00f      	b.n	80033d4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80033b8:	601a      	str	r2, [r3, #0]
      break;
 80033ba:	e00b      	b.n	80033d4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80033c0:	601a      	str	r2, [r3, #0]
      break;
 80033c2:	e007      	b.n	80033d4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80033c8:	601a      	str	r2, [r3, #0]
      break;
 80033ca:	e003      	b.n	80033d4 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	60fb      	str	r3, [r7, #12]
      break;
 80033d2:	bf00      	nop
  }

  return ret;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	417a147b 	.word	0x417a147b
 80033e4:	41fa147b 	.word	0x41fa147b
 80033e8:	427a147b 	.word	0x427a147b
 80033ec:	433b947b 	.word	0x433b947b

080033f0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80033fc:	edd7 7a00 	vldr	s15, [r7]
 8003400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d801      	bhi.n	8003412 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800340e:	2301      	movs	r3, #1
 8003410:	e037      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003412:	edd7 7a00 	vldr	s15, [r7]
 8003416:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800341a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d801      	bhi.n	8003428 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003424:	2302      	movs	r3, #2
 8003426:	e02c      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003428:	edd7 7a00 	vldr	s15, [r7]
 800342c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	d801      	bhi.n	800343e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800343a:	2303      	movs	r3, #3
 800343c:	e021      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800343e:	edd7 7a00 	vldr	s15, [r7]
 8003442:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80034a8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d801      	bhi.n	8003454 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003450:	2304      	movs	r3, #4
 8003452:	e016      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003454:	edd7 7a00 	vldr	s15, [r7]
 8003458:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80034ac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800345c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003464:	d801      	bhi.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003466:	2305      	movs	r3, #5
 8003468:	e00b      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800346a:	edd7 7a00 	vldr	s15, [r7]
 800346e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80034b0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	d801      	bhi.n	8003480 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800347c:	2306      	movs	r3, #6
 800347e:	e000      	b.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003480:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003482:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	331c      	adds	r3, #28
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f993 	bl	80037b8 <lsm303agr_xl_data_rate_set>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
 800349c:	e000      	b.n	80034a0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	42480000 	.word	0x42480000
 80034ac:	42c80000 	.word	0x42c80000
 80034b0:	43480000 	.word	0x43480000

080034b4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80034c0:	edd7 7a00 	vldr	s15, [r7]
 80034c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	d801      	bhi.n	80034d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e037      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80034d6:	edd7 7a00 	vldr	s15, [r7]
 80034da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	d801      	bhi.n	80034ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e02c      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80034ec:	edd7 7a00 	vldr	s15, [r7]
 80034f0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80034f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fc:	d801      	bhi.n	8003502 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80034fe:	2303      	movs	r3, #3
 8003500:	e021      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003502:	edd7 7a00 	vldr	s15, [r7]
 8003506:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800355c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800350a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	d801      	bhi.n	8003518 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003514:	2304      	movs	r3, #4
 8003516:	e016      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003518:	edd7 7a00 	vldr	s15, [r7]
 800351c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003560 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	d801      	bhi.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800352a:	2305      	movs	r3, #5
 800352c:	e00b      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800352e:	edd7 7a00 	vldr	s15, [r7]
 8003532:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003564 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	d801      	bhi.n	8003544 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003540:	2306      	movs	r3, #6
 8003542:	e000      	b.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003544:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	42480000 	.word	0x42480000
 8003560:	42c80000 	.word	0x42c80000
 8003564:	43480000 	.word	0x43480000

08003568 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	461a      	mov	r2, r3
 8003574:	460b      	mov	r3, r1
 8003576:	72fb      	strb	r3, [r7, #11]
 8003578:	4613      	mov	r3, r2
 800357a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10e      	bne.n	80035a6 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	695c      	ldr	r4, [r3, #20]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	7b1b      	ldrb	r3, [r3, #12]
 8003590:	b298      	uxth	r0, r3
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003598:	b2db      	uxtb	r3, r3
 800359a:	b299      	uxth	r1, r3
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	47a0      	blx	r4
 80035a2:	4603      	mov	r3, r0
 80035a4:	e00d      	b.n	80035c2 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	695c      	ldr	r4, [r3, #20]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	b298      	uxth	r0, r3
 80035b0:	7afb      	ldrb	r3, [r7, #11]
 80035b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	b299      	uxth	r1, r3
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	47a0      	blx	r4
 80035c0:	4603      	mov	r3, r0
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}

080035ca <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035ca:	b590      	push	{r4, r7, lr}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	461a      	mov	r2, r3
 80035d6:	460b      	mov	r3, r1
 80035d8:	72fb      	strb	r3, [r7, #11]
 80035da:	4613      	mov	r3, r2
 80035dc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	691c      	ldr	r4, [r3, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	7b1b      	ldrb	r3, [r3, #12]
 80035f2:	b298      	uxth	r0, r3
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	b299      	uxth	r1, r3
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	47a0      	blx	r4
 8003604:	4603      	mov	r3, r0
 8003606:	e00d      	b.n	8003624 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	691c      	ldr	r4, [r3, #16]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	7b1b      	ldrb	r3, [r3, #12]
 8003610:	b298      	uxth	r0, r3
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003618:	b2db      	uxtb	r3, r3
 800361a:	b299      	uxth	r1, r3
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	47a0      	blx	r4
 8003622:	4603      	mov	r3, r0
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd90      	pop	{r4, r7, pc}

0800362c <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800362c:	b590      	push	{r4, r7, lr}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	461a      	mov	r2, r3
 8003638:	460b      	mov	r3, r1
 800363a:	72fb      	strb	r3, [r7, #11]
 800363c:	4613      	mov	r3, r2
 800363e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10e      	bne.n	800366a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	695c      	ldr	r4, [r3, #20]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	7b1b      	ldrb	r3, [r3, #12]
 8003654:	b298      	uxth	r0, r3
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800365c:	b2db      	uxtb	r3, r3
 800365e:	b299      	uxth	r1, r3
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	47a0      	blx	r4
 8003666:	4603      	mov	r3, r0
 8003668:	e00d      	b.n	8003686 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	695c      	ldr	r4, [r3, #20]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	7b1b      	ldrb	r3, [r3, #12]
 8003672:	b298      	uxth	r0, r3
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367a:	b2db      	uxtb	r3, r3
 800367c:	b299      	uxth	r1, r3
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	47a0      	blx	r4
 8003684:	4603      	mov	r3, r0
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	bd90      	pop	{r4, r7, pc}

0800368e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800368e:	b590      	push	{r4, r7, lr}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	461a      	mov	r2, r3
 800369a:	460b      	mov	r3, r1
 800369c:	72fb      	strb	r3, [r7, #11]
 800369e:	4613      	mov	r3, r2
 80036a0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	691c      	ldr	r4, [r3, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	7b1b      	ldrb	r3, [r3, #12]
 80036b6:	b298      	uxth	r0, r3
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	b299      	uxth	r1, r3
 80036c2:	893b      	ldrh	r3, [r7, #8]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	47a0      	blx	r4
 80036c8:	4603      	mov	r3, r0
 80036ca:	e00d      	b.n	80036e8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	691c      	ldr	r4, [r3, #16]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	7b1b      	ldrb	r3, [r3, #12]
 80036d4:	b298      	uxth	r0, r3
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b299      	uxth	r1, r3
 80036e0:	893b      	ldrh	r3, [r7, #8]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	47a0      	blx	r4
 80036e6:	4603      	mov	r3, r0
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd90      	pop	{r4, r7, pc}

080036f0 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	461a      	mov	r2, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	72fb      	strb	r3, [r7, #11]
 8003700:	4613      	mov	r3, r2
 8003702:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685c      	ldr	r4, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6898      	ldr	r0, [r3, #8]
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	7af9      	ldrb	r1, [r7, #11]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	47a0      	blx	r4
 8003714:	6178      	str	r0, [r7, #20]
  return ret;
 8003716:	697b      	ldr	r3, [r7, #20]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	460b      	mov	r3, r1
 800372e:	72fb      	strb	r3, [r7, #11]
 8003730:	4613      	mov	r3, r2
 8003732:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6898      	ldr	r0, [r3, #8]
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	7af9      	ldrb	r1, [r7, #11]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	47a0      	blx	r4
 8003744:	6178      	str	r0, [r7, #20]
  return ret;
 8003746:	697b      	ldr	r3, [r7, #20]
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}

08003750 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800375a:	f107 020c 	add.w	r2, r7, #12
 800375e:	2301      	movs	r3, #1
 8003760:	2120      	movs	r1, #32
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffc4 	bl	80036f0 <lsm303agr_read_reg>
 8003768:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003770:	f107 0210 	add.w	r2, r7, #16
 8003774:	2301      	movs	r3, #1
 8003776:	2123      	movs	r1, #35	; 0x23
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffb9 	bl	80036f0 <lsm303agr_read_reg>
 800377e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003780:	7b3b      	ldrb	r3, [r7, #12]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2202      	movs	r2, #2
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e00c      	b.n	80037ae <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003794:	7c3b      	ldrb	r3, [r7, #16]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e002      	b.n	80037ae <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80037c4:	f107 0208 	add.w	r2, r7, #8
 80037c8:	2301      	movs	r3, #1
 80037ca:	2120      	movs	r1, #32
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff8f 	bl	80036f0 <lsm303agr_read_reg>
 80037d2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	7a3b      	ldrb	r3, [r7, #8]
 80037e4:	f362 1307 	bfi	r3, r2, #4, #4
 80037e8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80037ea:	f107 0208 	add.w	r2, r7, #8
 80037ee:	2301      	movs	r3, #1
 80037f0:	2120      	movs	r1, #32
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff94 	bl	8003720 <lsm303agr_write_reg>
 80037f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800380e:	f107 0208 	add.w	r2, r7, #8
 8003812:	2301      	movs	r3, #1
 8003814:	2120      	movs	r1, #32
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff6a 	bl	80036f0 <lsm303agr_read_reg>
 800381c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 800381e:	7a3b      	ldrb	r3, [r7, #8]
 8003820:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b09      	cmp	r3, #9
 8003828:	d83e      	bhi.n	80038a8 <lsm303agr_xl_data_rate_get+0xa4>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <lsm303agr_xl_data_rate_get+0x2c>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003859 	.word	0x08003859
 8003834:	08003861 	.word	0x08003861
 8003838:	08003869 	.word	0x08003869
 800383c:	08003871 	.word	0x08003871
 8003840:	08003879 	.word	0x08003879
 8003844:	08003881 	.word	0x08003881
 8003848:	08003889 	.word	0x08003889
 800384c:	08003891 	.word	0x08003891
 8003850:	08003899 	.word	0x08003899
 8003854:	080038a1 	.word	0x080038a1
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
      break;
 800385e:	e027      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e023      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]
      break;
 800386e:	e01f      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2203      	movs	r2, #3
 8003874:	701a      	strb	r2, [r3, #0]
      break;
 8003876:	e01b      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2204      	movs	r2, #4
 800387c:	701a      	strb	r2, [r3, #0]
      break;
 800387e:	e017      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2205      	movs	r2, #5
 8003884:	701a      	strb	r2, [r3, #0]
      break;
 8003886:	e013      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2206      	movs	r2, #6
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e00f      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2207      	movs	r2, #7
 8003894:	701a      	strb	r2, [r3, #0]
      break;
 8003896:	e00b      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2208      	movs	r2, #8
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e007      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2209      	movs	r2, #9
 80038a4:	701a      	strb	r2, [r3, #0]
      break;
 80038a6:	e003      	b.n	80038b0 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	bf00      	nop
  }

  return ret;
 80038b0:	68fb      	ldr	r3, [r7, #12]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038c8:	f107 0208 	add.w	r2, r7, #8
 80038cc:	2301      	movs	r3, #1
 80038ce:	2123      	movs	r1, #35	; 0x23
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff0d 	bl	80036f0 <lsm303agr_read_reg>
 80038d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	7a3b      	ldrb	r3, [r7, #8]
 80038e8:	f362 1305 	bfi	r3, r2, #4, #2
 80038ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038ee:	f107 0208 	add.w	r2, r7, #8
 80038f2:	2301      	movs	r3, #1
 80038f4:	2123      	movs	r1, #35	; 0x23
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff12 	bl	8003720 <lsm303agr_write_reg>
 80038fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003912:	f107 0208 	add.w	r2, r7, #8
 8003916:	2301      	movs	r3, #1
 8003918:	2123      	movs	r1, #35	; 0x23
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fee8 	bl	80036f0 <lsm303agr_read_reg>
 8003920:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003922:	7a3b      	ldrb	r3, [r7, #8]
 8003924:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b03      	cmp	r3, #3
 800392c:	d81a      	bhi.n	8003964 <lsm303agr_xl_full_scale_get+0x5c>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <lsm303agr_xl_full_scale_get+0x2c>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003945 	.word	0x08003945
 8003938:	0800394d 	.word	0x0800394d
 800393c:	08003955 	.word	0x08003955
 8003940:	0800395d 	.word	0x0800395d
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
      break;
 800394a:	e00f      	b.n	800396c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	e00b      	b.n	800396c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2202      	movs	r2, #2
 8003958:	701a      	strb	r2, [r3, #0]
      break;
 800395a:	e007      	b.n	800396c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2203      	movs	r2, #3
 8003960:	701a      	strb	r2, [r3, #0]
      break;
 8003962:	e003      	b.n	800396c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
      break;
 800396a:	bf00      	nop
  }

  return ret;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003984:	f107 0208 	add.w	r2, r7, #8
 8003988:	2301      	movs	r3, #1
 800398a:	2123      	movs	r1, #35	; 0x23
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff feaf 	bl	80036f0 <lsm303agr_read_reg>
 8003992:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	7a3b      	ldrb	r3, [r7, #8]
 80039a4:	f362 13c7 	bfi	r3, r2, #7, #1
 80039a8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80039aa:	f107 0208 	add.w	r2, r7, #8
 80039ae:	2301      	movs	r3, #1
 80039b0:	2123      	movs	r1, #35	; 0x23
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff feb4 	bl	8003720 <lsm303agr_write_reg>
 80039b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80039ce:	f107 020c 	add.w	r2, r7, #12
 80039d2:	2306      	movs	r3, #6
 80039d4:	2128      	movs	r1, #40	; 0x28
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fe8a 	bl	80036f0 <lsm303agr_read_reg>
 80039dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80039de:	7b7b      	ldrb	r3, [r7, #13]
 80039e0:	b21a      	sxth	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	7b3b      	ldrb	r3, [r7, #12]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b21a      	sxth	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	3302      	adds	r3, #2
 8003a06:	b212      	sxth	r2, r2
 8003a08:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	7bbb      	ldrb	r3, [r7, #14]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	3302      	adds	r3, #2
 8003a24:	b212      	sxth	r2, r2
 8003a26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a28:	7c7a      	ldrb	r2, [r7, #17]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	b212      	sxth	r2, r2
 8003a30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	3304      	adds	r3, #4
 8003a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	7c3b      	ldrb	r3, [r7, #16]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	b212      	sxth	r2, r2
 8003a4e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003a66:	f107 0208 	add.w	r2, r7, #8
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe3e 	bl	80036f0 <lsm303agr_read_reg>
 8003a74:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	7a3b      	ldrb	r3, [r7, #8]
 8003a86:	f362 0301 	bfi	r3, r2, #0, #2
 8003a8a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003a8c:	f107 0208 	add.w	r2, r7, #8
 8003a90:	2301      	movs	r3, #1
 8003a92:	2160      	movs	r1, #96	; 0x60
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fe43 	bl	8003720 <lsm303agr_write_reg>
 8003a9a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ab2:	f107 0208 	add.w	r2, r7, #8
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	2160      	movs	r1, #96	; 0x60
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe18 	bl	80036f0 <lsm303agr_read_reg>
 8003ac0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10f      	bne.n	8003ae8 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	7a3b      	ldrb	r3, [r7, #8]
 8003ad2:	f362 0383 	bfi	r3, r2, #2, #2
 8003ad6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ad8:	f107 0208 	add.w	r2, r7, #8
 8003adc:	2301      	movs	r3, #1
 8003ade:	2160      	movs	r1, #96	; 0x60
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fe1d 	bl	8003720 <lsm303agr_write_reg>
 8003ae6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003afe:	f107 0208 	add.w	r2, r7, #8
 8003b02:	2301      	movs	r3, #1
 8003b04:	2160      	movs	r1, #96	; 0x60
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fdf2 	bl	80036f0 <lsm303agr_read_reg>
 8003b0c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003b0e:	7a3b      	ldrb	r3, [r7, #8]
 8003b10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d81a      	bhi.n	8003b50 <lsm303agr_mag_data_rate_get+0x5c>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <lsm303agr_mag_data_rate_get+0x2c>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b41 	.word	0x08003b41
 8003b2c:	08003b49 	.word	0x08003b49
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e00f      	b.n	8003b58 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e00b      	b.n	8003b58 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	701a      	strb	r2, [r3, #0]
      break;
 8003b46:	e007      	b.n	8003b58 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	701a      	strb	r2, [r3, #0]
      break;
 8003b4e:	e003      	b.n	8003b58 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
      break;
 8003b56:	bf00      	nop
  }

  return ret;
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop

08003b64 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2301      	movs	r3, #1
 8003b76:	2162      	movs	r1, #98	; 0x62
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fdb9 	bl	80036f0 <lsm303agr_read_reg>
 8003b7e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	7a3b      	ldrb	r3, [r7, #8]
 8003b90:	f362 1304 	bfi	r3, r2, #4, #1
 8003b94:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b96:	f107 0208 	add.w	r2, r7, #8
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2162      	movs	r1, #98	; 0x62
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fdbe 	bl	8003720 <lsm303agr_write_reg>
 8003ba4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003bba:	f107 020c 	add.w	r2, r7, #12
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	2168      	movs	r1, #104	; 0x68
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fd94 	bl	80036f0 <lsm303agr_read_reg>
 8003bc8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003bca:	7b7b      	ldrb	r3, [r7, #13]
 8003bcc:	b21a      	sxth	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	7b3b      	ldrb	r3, [r7, #12]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b21a      	sxth	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	b212      	sxth	r2, r2
 8003bf4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	7bbb      	ldrb	r3, [r7, #14]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	3302      	adds	r3, #2
 8003c10:	b212      	sxth	r2, r2
 8003c12:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c14:	7c7a      	ldrb	r2, [r7, #17]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	b212      	sxth	r2, r2
 8003c1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	3304      	adds	r3, #4
 8003c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	7c3b      	ldrb	r3, [r7, #16]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3304      	adds	r3, #4
 8003c38:	b212      	sxth	r2, r2
 8003c3a:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c3c:	697b      	ldr	r3, [r7, #20]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003c50:	2301      	movs	r3, #1
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	210f      	movs	r1, #15
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fd4a 	bl	80036f0 <lsm303agr_read_reg>
 8003c5c:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003c72:	2301      	movs	r3, #1
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	214f      	movs	r1, #79	; 0x4f
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fd39 	bl	80036f0 <lsm303agr_read_reg>
 8003c7e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c80:	68fb      	ldr	r3, [r7, #12]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003c96:	f107 0208 	add.w	r2, r7, #8
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	2162      	movs	r1, #98	; 0x62
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fd26 	bl	80036f0 <lsm303agr_read_reg>
 8003ca4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10f      	bne.n	8003ccc <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	7a3b      	ldrb	r3, [r7, #8]
 8003cb6:	f362 0341 	bfi	r3, r2, #1, #1
 8003cba:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003cbc:	f107 0208 	add.w	r2, r7, #8
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2162      	movs	r1, #98	; 0x62
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff fd2b 	bl	8003720 <lsm303agr_write_reg>
 8003cca:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003ce2:	f107 0208 	add.w	r2, r7, #8
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	212e      	movs	r1, #46	; 0x2e
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fd00 	bl	80036f0 <lsm303agr_read_reg>
 8003cf0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	7a3b      	ldrb	r3, [r7, #8]
 8003d02:	f362 1387 	bfi	r3, r2, #6, #2
 8003d06:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003d08:	f107 0208 	add.w	r2, r7, #8
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	212e      	movs	r1, #46	; 0x2e
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fd05 	bl	8003720 <lsm303agr_write_reg>
 8003d16:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d2e:	f107 0208 	add.w	r2, r7, #8
 8003d32:	2301      	movs	r3, #1
 8003d34:	2162      	movs	r1, #98	; 0x62
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fcda 	bl	80036f0 <lsm303agr_read_reg>
 8003d3c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	7a3b      	ldrb	r3, [r7, #8]
 8003d4e:	f362 1345 	bfi	r3, r2, #5, #1
 8003d52:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d54:	f107 0208 	add.w	r2, r7, #8
 8003d58:	2301      	movs	r3, #1
 8003d5a:	2162      	movs	r1, #98	; 0x62
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fcdf 	bl	8003720 <lsm303agr_write_reg>
 8003d62:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e04d      	b.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	7b1a      	ldrb	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <LSM6DSL_RegisterBusIO+0xc4>)
 8003dc8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <LSM6DSL_RegisterBusIO+0xc8>)
 8003dce:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e020      	b.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4798      	blx	r3
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e016      	b.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d112      	bne.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	461a      	mov	r2, r3
 8003e14:	2112      	movs	r1, #18
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fd2d 	bl	8004876 <LSM6DSL_Write_Reg>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08004ce5 	.word	0x08004ce5
 8003e38:	08004d1b 	.word	0x08004d1b

08003e3c <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	331c      	adds	r3, #28
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fa59 	bl	8005302 <lsm6dsl_auto_increment_set>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e054      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	331c      	adds	r3, #28
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f980 	bl	8005168 <lsm6dsl_block_data_update_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e048      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	331c      	adds	r3, #28
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa67 	bl	800534e <lsm6dsl_fifo_mode_set>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003e86:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8a:	e03c      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	331c      	adds	r3, #28
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ffe6 	bl	8004e6c <lsm6dsl_xl_data_rate_set>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e02c      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	331c      	adds	r3, #28
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 ff7c 	bl	8004db0 <lsm6dsl_xl_full_scale_set>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	e020      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	331c      	adds	r3, #28
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f8c0 	bl	8005058 <lsm6dsl_gy_data_rate_set>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e010      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	331c      	adds	r3, #28
 8003ee8:	2106      	movs	r1, #6
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 f84c 	bl	8004f88 <lsm6dsl_gy_full_scale_set>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	e004      	b.n	8003f06 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f888 	bl	800402c <LSM6DSL_ACC_Disable>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e015      	b.n	8003f54 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa9a 	bl	8004462 <LSM6DSL_GYRO_Disable>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e00c      	b.n	8003f54 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	331c      	adds	r3, #28
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f9b7 	bl	80052e0 <lsm6dsl_device_id_get>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e000      	b.n	8003f80 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fb0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <LSM6DSL_GetCapabilities+0x58>)
 8003fc2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <LSM6DSL_GetCapabilities+0x58>)
 8003fc8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	45d02000 	.word	0x45d02000

08003fe4 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e014      	b.n	8004024 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f103 021c 	add.w	r2, r3, #28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 ff2f 	bl	8004e6c <lsm6dsl_xl_data_rate_set>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	e004      	b.n	8004024 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e01f      	b.n	8004082 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 021c 	add.w	r2, r3, #28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	332b      	adds	r3, #43	; 0x2b
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 ff32 	bl	8004eb8 <lsm6dsl_xl_data_rate_get>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	e010      	b.n	8004082 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	331c      	adds	r3, #28
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff00 	bl	8004e6c <lsm6dsl_xl_data_rate_set>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	e004      	b.n	8004082 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	331c      	adds	r3, #28
 800409e:	f107 020b 	add.w	r2, r7, #11
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fea9 	bl	8004dfc <lsm6dsl_xl_full_scale_get>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	e023      	b.n	80040fe <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d81b      	bhi.n	80040f4 <LSM6DSL_ACC_GetSensitivity+0x68>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040e5 	.word	0x080040e5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80040d8:	601a      	str	r2, [r3, #0]
      break;
 80040da:	e00f      	b.n	80040fc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4a0b      	ldr	r2, [pc, #44]	; (800410c <LSM6DSL_ACC_GetSensitivity+0x80>)
 80040e0:	601a      	str	r2, [r3, #0]
      break;
 80040e2:	e00b      	b.n	80040fc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80040e8:	601a      	str	r2, [r3, #0]
      break;
 80040ea:	e007      	b.n	80040fc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80040f0:	601a      	str	r2, [r3, #0]
      break;
 80040f2:	e003      	b.n	80040fc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	60fb      	str	r3, [r7, #12]
      break;
 80040fa:	bf00      	nop
  }

  return ret;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	3d79db23 	.word	0x3d79db23
 800410c:	3df9db23 	.word	0x3df9db23
 8004110:	3e79db23 	.word	0x3e79db23
 8004114:	3ef9db23 	.word	0x3ef9db23

08004118 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	331c      	adds	r3, #28
 800412a:	f107 020b 	add.w	r2, r7, #11
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fec1 	bl	8004eb8 <lsm6dsl_xl_data_rate_get>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	e054      	b.n	80041ec <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	2b0b      	cmp	r3, #11
 8004146:	d84c      	bhi.n	80041e2 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004181 	.word	0x08004181
 8004154:	08004193 	.word	0x08004193
 8004158:	0800419b 	.word	0x0800419b
 800415c:	080041a3 	.word	0x080041a3
 8004160:	080041ab 	.word	0x080041ab
 8004164:	080041b3 	.word	0x080041b3
 8004168:	080041bb 	.word	0x080041bb
 800416c:	080041c3 	.word	0x080041c3
 8004170:	080041cb 	.word	0x080041cb
 8004174:	080041d3 	.word	0x080041d3
 8004178:	080041db 	.word	0x080041db
 800417c:	0800418b 	.word	0x0800418b
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
      break;
 8004188:	e02f      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800418e:	601a      	str	r2, [r3, #0]
      break;
 8004190:	e02b      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004196:	601a      	str	r2, [r3, #0]
      break;
 8004198:	e027      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800419e:	601a      	str	r2, [r3, #0]
      break;
 80041a0:	e023      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80041a6:	601a      	str	r2, [r3, #0]
      break;
 80041a8:	e01f      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80041ae:	601a      	str	r2, [r3, #0]
      break;
 80041b0:	e01b      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80041b6:	601a      	str	r2, [r3, #0]
      break;
 80041b8:	e017      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80041be:	601a      	str	r2, [r3, #0]
      break;
 80041c0:	e013      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80041c6:	601a      	str	r2, [r3, #0]
      break;
 80041c8:	e00f      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80041ce:	601a      	str	r2, [r3, #0]
      break;
 80041d0:	e00b      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4a10      	ldr	r2, [pc, #64]	; (8004218 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 80041d6:	601a      	str	r2, [r3, #0]
      break;
 80041d8:	e007      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	4a0f      	ldr	r2, [pc, #60]	; (800421c <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 80041de:	601a      	str	r2, [r3, #0]
      break;
 80041e0:	e003      	b.n	80041ea <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	60fb      	str	r3, [r7, #12]
      break;
 80041e8:	bf00      	nop
  }

  return ret;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	3fcccccd 	.word	0x3fcccccd
 80041f8:	41480000 	.word	0x41480000
 80041fc:	41d00000 	.word	0x41d00000
 8004200:	42500000 	.word	0x42500000
 8004204:	42d00000 	.word	0x42d00000
 8004208:	43500000 	.word	0x43500000
 800420c:	43d00000 	.word	0x43d00000
 8004210:	44504000 	.word	0x44504000
 8004214:	44cf8000 	.word	0x44cf8000
 8004218:	45502000 	.word	0x45502000
 800421c:	45d02000 	.word	0x45d02000

08004220 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004232:	2b01      	cmp	r3, #1
 8004234:	d106      	bne.n	8004244 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004236:	ed97 0a00 	vldr	s0, [r7]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fb36 	bl	80048ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004240:	4603      	mov	r3, r0
 8004242:	e005      	b.n	8004250 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004244:	ed97 0a00 	vldr	s0, [r7]
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fbbb 	bl	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800424e:	4603      	mov	r3, r0
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	331c      	adds	r3, #28
 800426a:	f107 020b 	add.w	r2, r7, #11
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fdc3 	bl	8004dfc <lsm6dsl_xl_full_scale_get>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	e023      	b.n	80042ca <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d81b      	bhi.n	80042c0 <LSM6DSL_ACC_GetFullScale+0x68>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <LSM6DSL_ACC_GetFullScale+0x38>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b1 	.word	0x080042b1
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2202      	movs	r2, #2
 80042a4:	601a      	str	r2, [r3, #0]
      break;
 80042a6:	e00f      	b.n	80042c8 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2204      	movs	r2, #4
 80042ac:	601a      	str	r2, [r3, #0]
      break;
 80042ae:	e00b      	b.n	80042c8 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2208      	movs	r2, #8
 80042b4:	601a      	str	r2, [r3, #0]
      break;
 80042b6:	e007      	b.n	80042c8 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2210      	movs	r2, #16
 80042bc:	601a      	str	r2, [r3, #0]
      break;
 80042be:	e003      	b.n	80042c8 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	60fb      	str	r3, [r7, #12]
      break;
 80042c6:	bf00      	nop
  }

  return ret;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop

080042d4 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	dd0b      	ble.n	80042fc <LSM6DSL_ACC_SetFullScale+0x28>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	dd06      	ble.n	80042f8 <LSM6DSL_ACC_SetFullScale+0x24>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	dc01      	bgt.n	80042f4 <LSM6DSL_ACC_SetFullScale+0x20>
 80042f0:	2303      	movs	r3, #3
 80042f2:	e004      	b.n	80042fe <LSM6DSL_ACC_SetFullScale+0x2a>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e002      	b.n	80042fe <LSM6DSL_ACC_SetFullScale+0x2a>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e000      	b.n	80042fe <LSM6DSL_ACC_SetFullScale+0x2a>
 80042fc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80042fe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	331c      	adds	r3, #28
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd51 	bl	8004db0 <lsm6dsl_xl_full_scale_set>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
 8004318:	e000      	b.n	800431c <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	331c      	adds	r3, #28
 8004332:	f107 0208 	add.w	r2, r7, #8
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ff86 	bl	800524a <lsm6dsl_acceleration_raw_get>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	e00c      	b.n	8004364 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800434a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004352:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800435a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	331c      	adds	r3, #28
 8004380:	f107 0210 	add.w	r2, r7, #16
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ff5f 	bl	800524a <lsm6dsl_acceleration_raw_get>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e03c      	b.n	8004412 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fe74 	bl	800408c <LSM6DSL_ACC_GetSensitivity>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	e030      	b.n	8004412 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80043b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043b4:	ee07 3a90 	vmov	s15, r3
 80043b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c8:	ee17 2a90 	vmov	r2, s15
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80043d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e8:	ee17 2a90 	vmov	r2, s15
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80043f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004408:	ee17 2a90 	vmov	r2, s15
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e014      	b.n	800445a <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f103 021c 	add.w	r2, r3, #28
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 fe0a 	bl	8005058 <lsm6dsl_gy_data_rate_set>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e004      	b.n	800445a <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e01f      	b.n	80044b8 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f103 021c 	add.w	r2, r3, #28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	332c      	adds	r3, #44	; 0x2c
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f000 fe0d 	bl	80050a4 <lsm6dsl_gy_data_rate_get>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	e010      	b.n	80044b8 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	331c      	adds	r3, #28
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fddb 	bl	8005058 <lsm6dsl_gy_data_rate_set>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e004      	b.n	80044b8 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	331c      	adds	r3, #28
 80044d2:	f107 020b 	add.w	r2, r7, #11
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd7b 	bl	8004fd4 <lsm6dsl_gy_full_scale_get>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80044e4:	f04f 33ff 	mov.w	r3, #4294967295
 80044e8:	e02d      	b.n	8004546 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d825      	bhi.n	800453c <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004515 	.word	0x08004515
 8004500:	08004525 	.word	0x08004525
 8004504:	0800453d 	.word	0x0800453d
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800453d 	.word	0x0800453d
 8004510:	08004535 	.word	0x08004535
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004518:	601a      	str	r2, [r3, #0]
      break;
 800451a:	e013      	b.n	8004544 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004520:	601a      	str	r2, [r3, #0]
      break;
 8004522:	e00f      	b.n	8004544 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004528:	601a      	str	r2, [r3, #0]
      break;
 800452a:	e00b      	b.n	8004544 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004530:	601a      	str	r2, [r3, #0]
      break;
 8004532:	e007      	b.n	8004544 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004538:	601a      	str	r2, [r3, #0]
      break;
 800453a:	e003      	b.n	8004544 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	60fb      	str	r3, [r7, #12]
      break;
 8004542:	bf00      	nop
  }

  return ret;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	408c0000 	.word	0x408c0000
 8004554:	410c0000 	.word	0x410c0000
 8004558:	418c0000 	.word	0x418c0000
 800455c:	420c0000 	.word	0x420c0000
 8004560:	428c0000 	.word	0x428c0000

08004564 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	331c      	adds	r3, #28
 8004576:	f107 020b 	add.w	r2, r7, #11
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fd91 	bl	80050a4 <lsm6dsl_gy_data_rate_get>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	e04e      	b.n	800462c <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	2b0a      	cmp	r3, #10
 8004592:	d846      	bhi.n	8004622 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	080045d3 	.word	0x080045d3
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045e3 	.word	0x080045e3
 80045ac:	080045eb 	.word	0x080045eb
 80045b0:	080045f3 	.word	0x080045f3
 80045b4:	080045fb 	.word	0x080045fb
 80045b8:	08004603 	.word	0x08004603
 80045bc:	0800460b 	.word	0x0800460b
 80045c0:	08004613 	.word	0x08004613
 80045c4:	0800461b 	.word	0x0800461b
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
      break;
 80045d0:	e02b      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4a17      	ldr	r2, [pc, #92]	; (8004634 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80045d6:	601a      	str	r2, [r3, #0]
      break;
 80045d8:	e027      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80045de:	601a      	str	r2, [r3, #0]
      break;
 80045e0:	e023      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80045e6:	601a      	str	r2, [r3, #0]
      break;
 80045e8:	e01f      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80045ee:	601a      	str	r2, [r3, #0]
      break;
 80045f0:	e01b      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4a13      	ldr	r2, [pc, #76]	; (8004644 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80045f6:	601a      	str	r2, [r3, #0]
      break;
 80045f8:	e017      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80045fe:	601a      	str	r2, [r3, #0]
      break;
 8004600:	e013      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004606:	601a      	str	r2, [r3, #0]
      break;
 8004608:	e00f      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800460e:	601a      	str	r2, [r3, #0]
      break;
 8004610:	e00b      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004616:	601a      	str	r2, [r3, #0]
      break;
 8004618:	e007      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800461e:	601a      	str	r2, [r3, #0]
      break;
 8004620:	e003      	b.n	800462a <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	60fb      	str	r3, [r7, #12]
      break;
 8004628:	bf00      	nop
  }

  return ret;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	41480000 	.word	0x41480000
 8004638:	41d00000 	.word	0x41d00000
 800463c:	42500000 	.word	0x42500000
 8004640:	42d00000 	.word	0x42d00000
 8004644:	43500000 	.word	0x43500000
 8004648:	43d00000 	.word	0x43d00000
 800464c:	44504000 	.word	0x44504000
 8004650:	44cf8000 	.word	0x44cf8000
 8004654:	45502000 	.word	0x45502000
 8004658:	45d02000 	.word	0x45d02000

0800465c <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800466e:	2b01      	cmp	r3, #1
 8004670:	d106      	bne.n	8004680 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004672:	ed97 0a00 	vldr	s0, [r7]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa26 	bl	8004ac8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800467c:	4603      	mov	r3, r0
 800467e:	e005      	b.n	800468c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004680:	ed97 0a00 	vldr	s0, [r7]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 faab 	bl	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800468a:	4603      	mov	r3, r0
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	331c      	adds	r3, #28
 80046a6:	f107 020b 	add.w	r2, r7, #11
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fc91 	bl	8004fd4 <lsm6dsl_gy_full_scale_get>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e030      	b.n	8004720 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d828      	bhi.n	8004716 <LSM6DSL_GYRO_GetFullScale+0x82>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <LSM6DSL_GYRO_GetFullScale+0x38>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004717 	.word	0x08004717
 80046dc:	08004703 	.word	0x08004703
 80046e0:	08004717 	.word	0x08004717
 80046e4:	0800470d 	.word	0x0800470d
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	227d      	movs	r2, #125	; 0x7d
 80046ec:	601a      	str	r2, [r3, #0]
      break;
 80046ee:	e016      	b.n	800471e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	22fa      	movs	r2, #250	; 0xfa
 80046f4:	601a      	str	r2, [r3, #0]
      break;
 80046f6:	e012      	b.n	800471e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046fe:	601a      	str	r2, [r3, #0]
      break;
 8004700:	e00d      	b.n	800471e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004708:	601a      	str	r2, [r3, #0]
      break;
 800470a:	e008      	b.n	800471e <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004712:	601a      	str	r2, [r3, #0]
      break;
 8004714:	e003      	b.n	800471e <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	60fb      	str	r3, [r7, #12]
      break;
 800471c:	bf00      	nop
  }

  return ret;
 800471e:	68fb      	ldr	r3, [r7, #12]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b7d      	cmp	r3, #125	; 0x7d
 8004736:	dd12      	ble.n	800475e <LSM6DSL_GYRO_SetFullScale+0x36>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2bfa      	cmp	r3, #250	; 0xfa
 800473c:	dd0d      	ble.n	800475a <LSM6DSL_GYRO_SetFullScale+0x32>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004744:	dd07      	ble.n	8004756 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474c:	dc01      	bgt.n	8004752 <LSM6DSL_GYRO_SetFullScale+0x2a>
 800474e:	2304      	movs	r3, #4
 8004750:	e006      	b.n	8004760 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004752:	2306      	movs	r3, #6
 8004754:	e004      	b.n	8004760 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004756:	2302      	movs	r3, #2
 8004758:	e002      	b.n	8004760 <LSM6DSL_GYRO_SetFullScale+0x38>
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <LSM6DSL_GYRO_SetFullScale+0x38>
 800475e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004760:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	331c      	adds	r3, #28
 8004766:	7bfa      	ldrb	r2, [r7, #15]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fc0c 	bl	8004f88 <lsm6dsl_gy_full_scale_set>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	e000      	b.n	800477e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	331c      	adds	r3, #28
 8004794:	f107 0208 	add.w	r2, r7, #8
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fd0a 	bl	80051b4 <lsm6dsl_angular_rate_raw_get>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	e00c      	b.n	80047c6 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80047ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80047b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80047bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	331c      	adds	r3, #28
 80047dc:	f107 0210 	add.w	r2, r7, #16
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fce6 	bl	80051b4 <lsm6dsl_angular_rate_raw_get>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	e03c      	b.n	800486e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80047f4:	f107 030c 	add.w	r3, r7, #12
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fe60 	bl	80044c0 <LSM6DSL_GYRO_GetSensitivity>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	e030      	b.n	800486e <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800480c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004818:	edd7 7a03 	vldr	s15, [r7, #12]
 800481c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004824:	ee17 2a90 	vmov	r2, s15
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800482c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004838:	edd7 7a03 	vldr	s15, [r7, #12]
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004844:	ee17 2a90 	vmov	r2, s15
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800484c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004858:	edd7 7a03 	vldr	s15, [r7, #12]
 800485c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004864:	ee17 2a90 	vmov	r2, s15
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	70fb      	strb	r3, [r7, #3]
 8004882:	4613      	mov	r3, r2
 8004884:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f103 001c 	add.w	r0, r3, #28
 800488c:	1cba      	adds	r2, r7, #2
 800488e:	78f9      	ldrb	r1, [r7, #3]
 8004890:	2301      	movs	r3, #1
 8004892:	f000 fa75 	bl	8004d80 <lsm6dsl_write_reg>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	e000      	b.n	80048a4 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80048b8:	edd7 7a00 	vldr	s15, [r7]
 80048bc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d801      	bhi.n	80048ce <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e058      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048ce:	edd7 7a00 	vldr	s15, [r7]
 80048d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	d801      	bhi.n	80048e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e04d      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048e4:	edd7 7a00 	vldr	s15, [r7]
 80048e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80049a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80048ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	d801      	bhi.n	80048fa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e042      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048fa:	edd7 7a00 	vldr	s15, [r7]
 80048fe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80049ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d801      	bhi.n	8004910 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 800490c:	2304      	movs	r3, #4
 800490e:	e037      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004910:	edd7 7a00 	vldr	s15, [r7]
 8004914:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80049b0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	d801      	bhi.n	8004926 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004922:	2305      	movs	r3, #5
 8004924:	e02c      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004926:	edd7 7a00 	vldr	s15, [r7]
 800492a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800492e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004936:	d801      	bhi.n	800493c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004938:	2306      	movs	r3, #6
 800493a:	e021      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800493c:	edd7 7a00 	vldr	s15, [r7]
 8004940:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049b8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d801      	bhi.n	8004952 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800494e:	2307      	movs	r3, #7
 8004950:	e016      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004952:	edd7 7a00 	vldr	s15, [r7]
 8004956:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800495a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d801      	bhi.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004964:	2308      	movs	r3, #8
 8004966:	e00b      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004968:	edd7 7a00 	vldr	s15, [r7]
 800496c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80049c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d801      	bhi.n	800497e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800497a:	2309      	movs	r3, #9
 800497c:	e000      	b.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800497e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004980:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	331c      	adds	r3, #28
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fa6e 	bl	8004e6c <lsm6dsl_xl_data_rate_set>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	e000      	b.n	800499e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	42500000 	.word	0x42500000
 80049ac:	42d00000 	.word	0x42d00000
 80049b0:	43500000 	.word	0x43500000
 80049b4:	43d00000 	.word	0x43d00000
 80049b8:	44504000 	.word	0x44504000
 80049bc:	44cf8000 	.word	0x44cf8000
 80049c0:	45502000 	.word	0x45502000

080049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80049d0:	edd7 7a00 	vldr	s15, [r7]
 80049d4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	d801      	bhi.n	80049e6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e058      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049e6:	edd7 7a00 	vldr	s15, [r7]
 80049ea:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d801      	bhi.n	80049fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e04d      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049fc:	edd7 7a00 	vldr	s15, [r7]
 8004a00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004aac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	d801      	bhi.n	8004a12 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e042      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a12:	edd7 7a00 	vldr	s15, [r7]
 8004a16:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ab0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	d801      	bhi.n	8004a28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004a24:	2304      	movs	r3, #4
 8004a26:	e037      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a28:	edd7 7a00 	vldr	s15, [r7]
 8004a2c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004ab4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	d801      	bhi.n	8004a3e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004a3a:	2305      	movs	r3, #5
 8004a3c:	e02c      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a3e:	edd7 7a00 	vldr	s15, [r7]
 8004a42:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ab8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d801      	bhi.n	8004a54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004a50:	2306      	movs	r3, #6
 8004a52:	e021      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a54:	edd7 7a00 	vldr	s15, [r7]
 8004a58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004abc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	d801      	bhi.n	8004a6a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e016      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a6a:	edd7 7a00 	vldr	s15, [r7]
 8004a6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ac0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	d801      	bhi.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	e00b      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a80:	edd7 7a00 	vldr	s15, [r7]
 8004a84:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ac4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	d801      	bhi.n	8004a96 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004a92:	2309      	movs	r3, #9
 8004a94:	e000      	b.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a96:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	42500000 	.word	0x42500000
 8004ab0:	42d00000 	.word	0x42d00000
 8004ab4:	43500000 	.word	0x43500000
 8004ab8:	43d00000 	.word	0x43d00000
 8004abc:	44504000 	.word	0x44504000
 8004ac0:	44cf8000 	.word	0x44cf8000
 8004ac4:	45502000 	.word	0x45502000

08004ac8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004ad4:	edd7 7a00 	vldr	s15, [r7]
 8004ad8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	d801      	bhi.n	8004aea <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e058      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004aea:	edd7 7a00 	vldr	s15, [r7]
 8004aee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	d801      	bhi.n	8004b00 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e04d      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b00:	edd7 7a00 	vldr	s15, [r7]
 8004b04:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004bc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d801      	bhi.n	8004b16 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004b12:	2303      	movs	r3, #3
 8004b14:	e042      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b16:	edd7 7a00 	vldr	s15, [r7]
 8004b1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004bc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d801      	bhi.n	8004b2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e037      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b2c:	edd7 7a00 	vldr	s15, [r7]
 8004b30:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004bcc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d801      	bhi.n	8004b42 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004b3e:	2305      	movs	r3, #5
 8004b40:	e02c      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b42:	edd7 7a00 	vldr	s15, [r7]
 8004b46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004bd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	d801      	bhi.n	8004b58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004b54:	2306      	movs	r3, #6
 8004b56:	e021      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b58:	edd7 7a00 	vldr	s15, [r7]
 8004b5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004bd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d801      	bhi.n	8004b6e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	e016      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b6e:	edd7 7a00 	vldr	s15, [r7]
 8004b72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004bd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	d801      	bhi.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004b80:	2308      	movs	r3, #8
 8004b82:	e00b      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b84:	edd7 7a00 	vldr	s15, [r7]
 8004b88:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004bdc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	d801      	bhi.n	8004b9a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004b96:	2309      	movs	r3, #9
 8004b98:	e000      	b.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b9a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004b9c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	331c      	adds	r3, #28
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa56 	bl	8005058 <lsm6dsl_gy_data_rate_set>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e000      	b.n	8004bba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	42500000 	.word	0x42500000
 8004bc8:	42d00000 	.word	0x42d00000
 8004bcc:	43500000 	.word	0x43500000
 8004bd0:	43d00000 	.word	0x43d00000
 8004bd4:	44504000 	.word	0x44504000
 8004bd8:	44cf8000 	.word	0x44cf8000
 8004bdc:	45502000 	.word	0x45502000

08004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004bec:	edd7 7a00 	vldr	s15, [r7]
 8004bf0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	d801      	bhi.n	8004c02 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e058      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c02:	edd7 7a00 	vldr	s15, [r7]
 8004c06:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	d801      	bhi.n	8004c18 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e04d      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c18:	edd7 7a00 	vldr	s15, [r7]
 8004c1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c28:	d801      	bhi.n	8004c2e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e042      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c2e:	edd7 7a00 	vldr	s15, [r7]
 8004c32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ccc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d801      	bhi.n	8004c44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e037      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c44:	edd7 7a00 	vldr	s15, [r7]
 8004c48:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d801      	bhi.n	8004c5a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004c56:	2305      	movs	r3, #5
 8004c58:	e02c      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c5a:	edd7 7a00 	vldr	s15, [r7]
 8004c5e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004cd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d801      	bhi.n	8004c70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	e021      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c70:	edd7 7a00 	vldr	s15, [r7]
 8004c74:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d801      	bhi.n	8004c86 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004c82:	2307      	movs	r3, #7
 8004c84:	e016      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c86:	edd7 7a00 	vldr	s15, [r7]
 8004c8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cdc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	d801      	bhi.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	e00b      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c9c:	edd7 7a00 	vldr	s15, [r7]
 8004ca0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ce0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cac:	d801      	bhi.n	8004cb2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004cae:	2309      	movs	r3, #9
 8004cb0:	e000      	b.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004cb2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	42500000 	.word	0x42500000
 8004ccc:	42d00000 	.word	0x42d00000
 8004cd0:	43500000 	.word	0x43500000
 8004cd4:	43d00000 	.word	0x43d00000
 8004cd8:	44504000 	.word	0x44504000
 8004cdc:	44cf8000 	.word	0x44cf8000
 8004ce0:	45502000 	.word	0x45502000

08004ce4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	72fb      	strb	r3, [r7, #11]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	695c      	ldr	r4, [r3, #20]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	7b1b      	ldrb	r3, [r3, #12]
 8004d04:	b298      	uxth	r0, r3
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	893b      	ldrh	r3, [r7, #8]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	47a0      	blx	r4
 8004d10:	4603      	mov	r3, r0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}

08004d1a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d1a:	b590      	push	{r4, r7, lr}
 8004d1c:	b087      	sub	sp, #28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	461a      	mov	r2, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	72fb      	strb	r3, [r7, #11]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	691c      	ldr	r4, [r3, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	7b1b      	ldrb	r3, [r3, #12]
 8004d3a:	b298      	uxth	r0, r3
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	b299      	uxth	r1, r3
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	47a0      	blx	r4
 8004d46:	4603      	mov	r3, r0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	72fb      	strb	r3, [r7, #11]
 8004d60:	4613      	mov	r3, r2
 8004d62:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685c      	ldr	r4, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6898      	ldr	r0, [r3, #8]
 8004d6c:	893b      	ldrh	r3, [r7, #8]
 8004d6e:	7af9      	ldrb	r1, [r7, #11]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	47a0      	blx	r4
 8004d74:	6178      	str	r0, [r7, #20]
  return ret;
 8004d76:	697b      	ldr	r3, [r7, #20]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd90      	pop	{r4, r7, pc}

08004d80 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	72fb      	strb	r3, [r7, #11]
 8004d90:	4613      	mov	r3, r2
 8004d92:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681c      	ldr	r4, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6898      	ldr	r0, [r3, #8]
 8004d9c:	893b      	ldrh	r3, [r7, #8]
 8004d9e:	7af9      	ldrb	r1, [r7, #11]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	47a0      	blx	r4
 8004da4:	6178      	str	r0, [r7, #20]
  return ret;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}

08004db0 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004dbc:	f107 0208 	add.w	r2, r7, #8
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ffc3 	bl	8004d50 <lsm6dsl_read_reg>
 8004dca:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	7a3b      	ldrb	r3, [r7, #8]
 8004ddc:	f362 0383 	bfi	r3, r2, #2, #2
 8004de0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004de2:	f107 0208 	add.w	r2, r7, #8
 8004de6:	2301      	movs	r3, #1
 8004de8:	2110      	movs	r1, #16
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff ffc8 	bl	8004d80 <lsm6dsl_write_reg>
 8004df0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e06:	f107 0208 	add.w	r2, r7, #8
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	2110      	movs	r1, #16
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff ff9e 	bl	8004d50 <lsm6dsl_read_reg>
 8004e14:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004e16:	7a3b      	ldrb	r3, [r7, #8]
 8004e18:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d81a      	bhi.n	8004e58 <lsm6dsl_xl_full_scale_get+0x5c>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e41 	.word	0x08004e41
 8004e30:	08004e49 	.word	0x08004e49
 8004e34:	08004e51 	.word	0x08004e51
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
      break;
 8004e3e:	e00f      	b.n	8004e60 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
      break;
 8004e46:	e00b      	b.n	8004e60 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	701a      	strb	r2, [r3, #0]
      break;
 8004e4e:	e007      	b.n	8004e60 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2203      	movs	r2, #3
 8004e54:	701a      	strb	r2, [r3, #0]
      break;
 8004e56:	e003      	b.n	8004e60 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	bf00      	nop
  }

  return ret;
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop

08004e6c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e78:	f107 0208 	add.w	r2, r7, #8
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	2110      	movs	r1, #16
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff65 	bl	8004d50 <lsm6dsl_read_reg>
 8004e86:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	7a3b      	ldrb	r3, [r7, #8]
 8004e98:	f362 1307 	bfi	r3, r2, #4, #4
 8004e9c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e9e:	f107 0208 	add.w	r2, r7, #8
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ff6a 	bl	8004d80 <lsm6dsl_write_reg>
 8004eac:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004ec2:	f107 0208 	add.w	r2, r7, #8
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	2110      	movs	r1, #16
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff ff40 	bl	8004d50 <lsm6dsl_read_reg>
 8004ed0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004ed2:	7a3b      	ldrb	r3, [r7, #8]
 8004ed4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b0b      	cmp	r3, #11
 8004edc:	d84a      	bhi.n	8004f74 <lsm6dsl_xl_data_rate_get+0xbc>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f15 	.word	0x08004f15
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f25 	.word	0x08004f25
 8004ef0:	08004f2d 	.word	0x08004f2d
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f3d 	.word	0x08004f3d
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f4d 	.word	0x08004f4d
 8004f04:	08004f55 	.word	0x08004f55
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f6d 	.word	0x08004f6d
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
      break;
 8004f1a:	e02f      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
      break;
 8004f22:	e02b      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
      break;
 8004f2a:	e027      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2203      	movs	r2, #3
 8004f30:	701a      	strb	r2, [r3, #0]
      break;
 8004f32:	e023      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2204      	movs	r2, #4
 8004f38:	701a      	strb	r2, [r3, #0]
      break;
 8004f3a:	e01f      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2205      	movs	r2, #5
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	e01b      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2206      	movs	r2, #6
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e017      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e013      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2208      	movs	r2, #8
 8004f58:	701a      	strb	r2, [r3, #0]
      break;
 8004f5a:	e00f      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2209      	movs	r2, #9
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	e00b      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	220a      	movs	r2, #10
 8004f68:	701a      	strb	r2, [r3, #0]
      break;
 8004f6a:	e007      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	220b      	movs	r2, #11
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e003      	b.n	8004f7c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	220c      	movs	r2, #12
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	bf00      	nop
  }

  return ret;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop

08004f88 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f94:	f107 0208 	add.w	r2, r7, #8
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2111      	movs	r1, #17
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fed7 	bl	8004d50 <lsm6dsl_read_reg>
 8004fa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	7a3b      	ldrb	r3, [r7, #8]
 8004fb4:	f362 0343 	bfi	r3, r2, #1, #3
 8004fb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fba:	f107 0208 	add.w	r2, r7, #8
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	2111      	movs	r1, #17
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fedc 	bl	8004d80 <lsm6dsl_write_reg>
 8004fc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fde:	f107 0208 	add.w	r2, r7, #8
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	2111      	movs	r1, #17
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff feb2 	bl	8004d50 <lsm6dsl_read_reg>
 8004fec:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004fee:	7a3b      	ldrb	r3, [r7, #8]
 8004ff0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d824      	bhi.n	8005044 <lsm6dsl_gy_full_scale_get+0x70>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	0800501d 	.word	0x0800501d
 8005004:	08005025 	.word	0x08005025
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005045 	.word	0x08005045
 8005010:	08005035 	.word	0x08005035
 8005014:	08005045 	.word	0x08005045
 8005018:	0800503d 	.word	0x0800503d
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
      break;
 8005022:	e013      	b.n	800504c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
      break;
 800502a:	e00f      	b.n	800504c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2202      	movs	r2, #2
 8005030:	701a      	strb	r2, [r3, #0]
      break;
 8005032:	e00b      	b.n	800504c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2204      	movs	r2, #4
 8005038:	701a      	strb	r2, [r3, #0]
      break;
 800503a:	e007      	b.n	800504c <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2206      	movs	r2, #6
 8005040:	701a      	strb	r2, [r3, #0]
      break;
 8005042:	e003      	b.n	800504c <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2207      	movs	r2, #7
 8005048:	701a      	strb	r2, [r3, #0]
      break;
 800504a:	bf00      	nop
  }

  return ret;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop

08005058 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005064:	f107 0208 	add.w	r2, r7, #8
 8005068:	2301      	movs	r3, #1
 800506a:	2111      	movs	r1, #17
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fe6f 	bl	8004d50 <lsm6dsl_read_reg>
 8005072:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	b2da      	uxtb	r2, r3
 8005082:	7a3b      	ldrb	r3, [r7, #8]
 8005084:	f362 1307 	bfi	r3, r2, #4, #4
 8005088:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800508a:	f107 0208 	add.w	r2, r7, #8
 800508e:	2301      	movs	r3, #1
 8005090:	2111      	movs	r1, #17
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fe74 	bl	8004d80 <lsm6dsl_write_reg>
 8005098:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80050ae:	f107 0208 	add.w	r2, r7, #8
 80050b2:	2301      	movs	r3, #1
 80050b4:	2111      	movs	r1, #17
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fe4a 	bl	8004d50 <lsm6dsl_read_reg>
 80050bc:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 80050be:	7a3b      	ldrb	r3, [r7, #8]
 80050c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b0a      	cmp	r3, #10
 80050c8:	d844      	bhi.n	8005154 <lsm6dsl_gy_data_rate_get+0xb0>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <lsm6dsl_gy_data_rate_get+0x2c>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005105 	.word	0x08005105
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	08005115 	.word	0x08005115
 80050e0:	0800511d 	.word	0x0800511d
 80050e4:	08005125 	.word	0x08005125
 80050e8:	0800512d 	.word	0x0800512d
 80050ec:	08005135 	.word	0x08005135
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	08005145 	.word	0x08005145
 80050f8:	0800514d 	.word	0x0800514d
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
      break;
 8005102:	e02b      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]
      break;
 800510a:	e027      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2202      	movs	r2, #2
 8005110:	701a      	strb	r2, [r3, #0]
      break;
 8005112:	e023      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2203      	movs	r2, #3
 8005118:	701a      	strb	r2, [r3, #0]
      break;
 800511a:	e01f      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2204      	movs	r2, #4
 8005120:	701a      	strb	r2, [r3, #0]
      break;
 8005122:	e01b      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2205      	movs	r2, #5
 8005128:	701a      	strb	r2, [r3, #0]
      break;
 800512a:	e017      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2206      	movs	r2, #6
 8005130:	701a      	strb	r2, [r3, #0]
      break;
 8005132:	e013      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2207      	movs	r2, #7
 8005138:	701a      	strb	r2, [r3, #0]
      break;
 800513a:	e00f      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	701a      	strb	r2, [r3, #0]
      break;
 8005142:	e00b      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2209      	movs	r2, #9
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	e007      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	220a      	movs	r2, #10
 8005150:	701a      	strb	r2, [r3, #0]
      break;
 8005152:	e003      	b.n	800515c <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	220b      	movs	r2, #11
 8005158:	701a      	strb	r2, [r3, #0]
      break;
 800515a:	bf00      	nop
  }

  return ret;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop

08005168 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005174:	f107 0208 	add.w	r2, r7, #8
 8005178:	2301      	movs	r3, #1
 800517a:	2112      	movs	r1, #18
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fde7 	bl	8004d50 <lsm6dsl_read_reg>
 8005182:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	b2da      	uxtb	r2, r3
 8005192:	7a3b      	ldrb	r3, [r7, #8]
 8005194:	f362 1386 	bfi	r3, r2, #6, #1
 8005198:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800519a:	f107 0208 	add.w	r2, r7, #8
 800519e:	2301      	movs	r3, #1
 80051a0:	2112      	movs	r1, #18
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fdec 	bl	8004d80 <lsm6dsl_write_reg>
 80051a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80051be:	f107 020c 	add.w	r2, r7, #12
 80051c2:	2306      	movs	r3, #6
 80051c4:	2122      	movs	r1, #34	; 0x22
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fdc2 	bl	8004d50 <lsm6dsl_read_reg>
 80051cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051ce:	7b7b      	ldrb	r3, [r7, #13]
 80051d0:	b21a      	sxth	r2, r3
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	7b3b      	ldrb	r3, [r7, #12]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	b21a      	sxth	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	3302      	adds	r3, #2
 80051f6:	b212      	sxth	r2, r2
 80051f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3302      	adds	r3, #2
 80051fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005202:	b29b      	uxth	r3, r3
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	b29a      	uxth	r2, r3
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	b29b      	uxth	r3, r3
 800520c:	4413      	add	r3, r2
 800520e:	b29a      	uxth	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3302      	adds	r3, #2
 8005214:	b212      	sxth	r2, r2
 8005216:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005218:	7c7a      	ldrb	r2, [r7, #17]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3304      	adds	r3, #4
 800521e:	b212      	sxth	r2, r2
 8005220:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	3304      	adds	r3, #4
 8005226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800522a:	b29b      	uxth	r3, r3
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	b29a      	uxth	r2, r3
 8005230:	7c3b      	ldrb	r3, [r7, #16]
 8005232:	b29b      	uxth	r3, r3
 8005234:	4413      	add	r3, r2
 8005236:	b29a      	uxth	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	3304      	adds	r3, #4
 800523c:	b212      	sxth	r2, r2
 800523e:	801a      	strh	r2, [r3, #0]
  return ret;
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005254:	f107 020c 	add.w	r2, r7, #12
 8005258:	2306      	movs	r3, #6
 800525a:	2128      	movs	r1, #40	; 0x28
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fd77 	bl	8004d50 <lsm6dsl_read_reg>
 8005262:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005264:	7b7b      	ldrb	r3, [r7, #13]
 8005266:	b21a      	sxth	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005272:	b29b      	uxth	r3, r3
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	b29a      	uxth	r2, r3
 8005278:	7b3b      	ldrb	r3, [r7, #12]
 800527a:	b29b      	uxth	r3, r3
 800527c:	4413      	add	r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	b21a      	sxth	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	3302      	adds	r3, #2
 800528c:	b212      	sxth	r2, r2
 800528e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	3302      	adds	r3, #2
 8005294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005298:	b29b      	uxth	r3, r3
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	b29a      	uxth	r2, r3
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	3302      	adds	r3, #2
 80052aa:	b212      	sxth	r2, r2
 80052ac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80052ae:	7c7a      	ldrb	r2, [r7, #17]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	3304      	adds	r3, #4
 80052b4:	b212      	sxth	r2, r2
 80052b6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	3304      	adds	r3, #4
 80052bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	7c3b      	ldrb	r3, [r7, #16]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3304      	adds	r3, #4
 80052d2:	b212      	sxth	r2, r2
 80052d4:	801a      	strh	r2, [r3, #0]
  return ret;
 80052d6:	697b      	ldr	r3, [r7, #20]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80052ea:	2301      	movs	r3, #1
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	210f      	movs	r1, #15
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff fd2d 	bl	8004d50 <lsm6dsl_read_reg>
 80052f6:	60f8      	str	r0, [r7, #12]
  return ret;
 80052f8:	68fb      	ldr	r3, [r7, #12]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800530e:	f107 0208 	add.w	r2, r7, #8
 8005312:	2301      	movs	r3, #1
 8005314:	2112      	movs	r1, #18
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fd1a 	bl	8004d50 <lsm6dsl_read_reg>
 800531c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10f      	bne.n	8005344 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	7a3b      	ldrb	r3, [r7, #8]
 800532e:	f362 0382 	bfi	r3, r2, #2, #1
 8005332:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005334:	f107 0208 	add.w	r2, r7, #8
 8005338:	2301      	movs	r3, #1
 800533a:	2112      	movs	r1, #18
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fd1f 	bl	8004d80 <lsm6dsl_write_reg>
 8005342:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800535a:	f107 0208 	add.w	r2, r7, #8
 800535e:	2301      	movs	r3, #1
 8005360:	210a      	movs	r1, #10
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fcf4 	bl	8004d50 <lsm6dsl_read_reg>
 8005368:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	b2da      	uxtb	r2, r3
 8005378:	7a3b      	ldrb	r3, [r7, #8]
 800537a:	f362 0302 	bfi	r3, r2, #0, #3
 800537e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005380:	f107 0208 	add.w	r2, r7, #8
 8005384:	2301      	movs	r3, #1
 8005386:	210a      	movs	r1, #10
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff fcf9 	bl	8004d80 <lsm6dsl_write_reg>
 800538e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005390:	68fb      	ldr	r3, [r7, #12]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <IKS01A2_ENV_SENSOR_Init+0x24>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d032      	beq.n	8005424 <IKS01A2_ENV_SENSOR_Init+0x88>
 80053be:	e063      	b.n	8005488 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80053c0:	6838      	ldr	r0, [r7, #0]
 80053c2:	f000 f931 	bl	8005628 <HTS221_0_Probe>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	e098      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053d2:	4a4e      	ldr	r2, [pc, #312]	; (800550c <IKS01A2_ENV_SENSOR_Init+0x170>)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	494c      	ldr	r1, [pc, #304]	; (8005510 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053e4:	f107 0108 	add.w	r1, r7, #8
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80053f2:	f06f 0306 	mvn.w	r3, #6
 80053f6:	e085      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80053f8:	7a3b      	ldrb	r3, [r7, #8]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d103      	bne.n	8005406 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005406:	7abb      	ldrb	r3, [r7, #10]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d103      	bne.n	8005414 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f043 0304 	orr.w	r3, r3, #4
 8005412:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005414:	7a7b      	ldrb	r3, [r7, #9]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d13a      	bne.n	8005490 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005422:	e035      	b.n	8005490 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005424:	6838      	ldr	r0, [r7, #0]
 8005426:	f000 f9b9 	bl	800579c <LPS22HB_0_Probe>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	e066      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005436:	4a35      	ldr	r2, [pc, #212]	; (800550c <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4933      	ldr	r1, [pc, #204]	; (8005510 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005448:	f107 0108 	add.w	r1, r7, #8
 800544c:	4610      	mov	r0, r2
 800544e:	4798      	blx	r3
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005456:	f06f 0306 	mvn.w	r3, #6
 800545a:	e053      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800545c:	7a3b      	ldrb	r3, [r7, #8]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d103      	bne.n	800546a <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800546a:	7abb      	ldrb	r3, [r7, #10]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d103      	bne.n	8005478 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005478:	7a7b      	ldrb	r3, [r7, #9]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10a      	bne.n	8005494 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005486:	e005      	b.n	8005494 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005488:	f06f 0301 	mvn.w	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800548e:	e002      	b.n	8005496 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005494:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	e031      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e02a      	b.n	80054fc <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	4013      	ands	r3, r2
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d11e      	bne.n	80054f0 <IKS01A2_ENV_SENSOR_Init+0x154>
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	4013      	ands	r3, r2
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d118      	bne.n	80054f0 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80054be:	4a15      	ldr	r2, [pc, #84]	; (8005514 <IKS01A2_ENV_SENSOR_Init+0x178>)
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054c6:	4814      	ldr	r0, [pc, #80]	; (8005518 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	490d      	ldr	r1, [pc, #52]	; (8005510 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80054ea:	f06f 0304 	mvn.w	r3, #4
 80054ee:	e009      	b.n	8005504 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3301      	adds	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d9d1      	bls.n	80054a6 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005504:	4618      	mov	r0, r3
 8005506:	3728      	adds	r7, #40	; 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000204 	.word	0x20000204
 8005510:	200004b4 	.word	0x200004b4
 8005514:	20000134 	.word	0x20000134
 8005518:	200001ec 	.word	0x200001ec

0800551c <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d903      	bls.n	8005534 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800552c:	f06f 0301 	mvn.w	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	e028      	b.n	8005586 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4013      	ands	r3, r2
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d11c      	bne.n	8005580 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005546:	4a13      	ldr	r2, [pc, #76]	; (8005594 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800554e:	4812      	ldr	r0, [pc, #72]	; (8005598 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	440b      	add	r3, r1
 800555a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	490e      	ldr	r1, [pc, #56]	; (800559c <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005568:	4610      	mov	r0, r2
 800556a:	4798      	blx	r3
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005572:	f06f 0304 	mvn.w	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e005      	b.n	8005586 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e002      	b.n	8005586 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005580:	f06f 0301 	mvn.w	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	2000020c 	.word	0x2000020c
 8005594:	20000134 	.word	0x20000134
 8005598:	200001ec 	.word	0x200001ec
 800559c:	200004b4 	.word	0x200004b4

080055a0 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d903      	bls.n	80055ba <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055b2:	f06f 0301 	mvn.w	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e029      	b.n	800560e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d11d      	bne.n	8005608 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055d4:	4812      	ldr	r0, [pc, #72]	; (8005620 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	440b      	add	r3, r1
 80055e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	490f      	ldr	r1, [pc, #60]	; (8005624 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055fa:	f06f 0304 	mvn.w	r3, #4
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e005      	b.n	800560e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	e002      	b.n	800560e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005608:	f06f 0301 	mvn.w	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800560e:	697b      	ldr	r3, [r7, #20]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	2000020c 	.word	0x2000020c
 800561c:	20000134 	.word	0x20000134
 8005620:	200001ec 	.word	0x200001ec
 8005624:	200004b4 	.word	0x200004b4

08005628 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b090      	sub	sp, #64	; 0x40
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8005630:	2300      	movs	r3, #0
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005634:	2300      	movs	r3, #0
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8005638:	23bf      	movs	r3, #191	; 0xbf
 800563a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800563e:	4b49      	ldr	r3, [pc, #292]	; (8005764 <HTS221_0_Probe+0x13c>)
 8005640:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005642:	4b49      	ldr	r3, [pc, #292]	; (8005768 <HTS221_0_Probe+0x140>)
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005646:	4b49      	ldr	r3, [pc, #292]	; (800576c <HTS221_0_Probe+0x144>)
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <HTS221_0_Probe+0x148>)
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800564e:	4b49      	ldr	r3, [pc, #292]	; (8005774 <HTS221_0_Probe+0x14c>)
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005652:	f107 0320 	add.w	r3, r7, #32
 8005656:	4619      	mov	r1, r3
 8005658:	4847      	ldr	r0, [pc, #284]	; (8005778 <HTS221_0_Probe+0x150>)
 800565a:	f7fb fbd7 	bl	8000e0c <HTS221_RegisterBusIO>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005664:	f06f 0306 	mvn.w	r3, #6
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566a:	e076      	b.n	800575a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800566c:	f107 031f 	add.w	r3, r7, #31
 8005670:	4619      	mov	r1, r3
 8005672:	4841      	ldr	r0, [pc, #260]	; (8005778 <HTS221_0_Probe+0x150>)
 8005674:	f7fb fc4f 	bl	8000f16 <HTS221_ReadID>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800567e:	f06f 0306 	mvn.w	r3, #6
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005684:	e069      	b.n	800575a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8005686:	7ffb      	ldrb	r3, [r7, #31]
 8005688:	2bbc      	cmp	r3, #188	; 0xbc
 800568a:	d003      	beq.n	8005694 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800568c:	f06f 0306 	mvn.w	r3, #6
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005692:	e062      	b.n	800575a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	4619      	mov	r1, r3
 800569a:	4837      	ldr	r0, [pc, #220]	; (8005778 <HTS221_0_Probe+0x150>)
 800569c:	f7fb fc52 	bl	8000f44 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056a0:	7b3b      	ldrb	r3, [r7, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	7b7b      	ldrb	r3, [r7, #13]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056ae:	4313      	orrs	r3, r2
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <HTS221_0_Probe+0x154>)
 80056b2:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 80056b4:	4b32      	ldr	r3, [pc, #200]	; (8005780 <HTS221_0_Probe+0x158>)
 80056b6:	4a30      	ldr	r2, [pc, #192]	; (8005778 <HTS221_0_Probe+0x150>)
 80056b8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80056ba:	4b32      	ldr	r3, [pc, #200]	; (8005784 <HTS221_0_Probe+0x15c>)
 80056bc:	4a32      	ldr	r2, [pc, #200]	; (8005788 <HTS221_0_Probe+0x160>)
 80056be:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11d      	bne.n	8005702 <HTS221_0_Probe+0xda>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <HTS221_0_Probe+0xda>
 80056d0:	7b3b      	ldrb	r3, [r7, #12]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d115      	bne.n	8005702 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80056d6:	4b2d      	ldr	r3, [pc, #180]	; (800578c <HTS221_0_Probe+0x164>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <HTS221_0_Probe+0x168>)
 80056dc:	492d      	ldr	r1, [pc, #180]	; (8005794 <HTS221_0_Probe+0x16c>)
 80056de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80056e2:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HTS221_0_Probe+0x15c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a25      	ldr	r2, [pc, #148]	; (8005780 <HTS221_0_Probe+0x158>)
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056f6:	f06f 0304 	mvn.w	r3, #4
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	e001      	b.n	8005702 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11d      	bne.n	8005744 <HTS221_0_Probe+0x11c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d018      	beq.n	8005744 <HTS221_0_Probe+0x11c>
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d115      	bne.n	8005744 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <HTS221_0_Probe+0x164>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HTS221_0_Probe+0x168>)
 800571e:	491e      	ldr	r1, [pc, #120]	; (8005798 <HTS221_0_Probe+0x170>)
 8005720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HTS221_0_Probe+0x15c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a15      	ldr	r2, [pc, #84]	; (8005780 <HTS221_0_Probe+0x158>)
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005738:	f06f 0304 	mvn.w	r3, #4
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573e:	e001      	b.n	8005744 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005740:	2300      	movs	r3, #0
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8005744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <HTS221_0_Probe+0x132>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005754:	f06f 0304 	mvn.w	r3, #4
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800575c:	4618      	mov	r0, r3
 800575e:	3740      	adds	r7, #64	; 0x40
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	08000a39 	.word	0x08000a39
 8005768:	08000ab5 	.word	0x08000ab5
 800576c:	08000b69 	.word	0x08000b69
 8005770:	08000b05 	.word	0x08000b05
 8005774:	08000bcd 	.word	0x08000bcd
 8005778:	20000214 	.word	0x20000214
 800577c:	2000020c 	.word	0x2000020c
 8005780:	200004b4 	.word	0x200004b4
 8005784:	20000204 	.word	0x20000204
 8005788:	20000004 	.word	0x20000004
 800578c:	20000134 	.word	0x20000134
 8005790:	200001ec 	.word	0x200001ec
 8005794:	20000028 	.word	0x20000028
 8005798:	20000014 	.word	0x20000014

0800579c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b090      	sub	sp, #64	; 0x40
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80057a8:	2300      	movs	r3, #0
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80057ac:	23bb      	movs	r3, #187	; 0xbb
 80057ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <LPS22HB_0_Probe+0x140>)
 80057b4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057b6:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <LPS22HB_0_Probe+0x144>)
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057ba:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <LPS22HB_0_Probe+0x148>)
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <LPS22HB_0_Probe+0x14c>)
 80057c0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057c2:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <LPS22HB_0_Probe+0x150>)
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80057c6:	f107 0320 	add.w	r3, r7, #32
 80057ca:	4619      	mov	r1, r3
 80057cc:	4848      	ldr	r0, [pc, #288]	; (80058f0 <LPS22HB_0_Probe+0x154>)
 80057ce:	f7fc f93b 	bl	8001a48 <LPS22HB_RegisterBusIO>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057d8:	f06f 0306 	mvn.w	r3, #6
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057de:	e078      	b.n	80058d2 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 80057e0:	f107 031f 	add.w	r3, r7, #31
 80057e4:	4619      	mov	r1, r3
 80057e6:	4842      	ldr	r0, [pc, #264]	; (80058f0 <LPS22HB_0_Probe+0x154>)
 80057e8:	f7fc f9d3 	bl	8001b92 <LPS22HB_ReadID>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f2:	f06f 0306 	mvn.w	r3, #6
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f8:	e06b      	b.n	80058d2 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 80057fa:	7ffb      	ldrb	r3, [r7, #31]
 80057fc:	2bb1      	cmp	r3, #177	; 0xb1
 80057fe:	d003      	beq.n	8005808 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005800:	f06f 0306 	mvn.w	r3, #6
 8005804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005806:	e064      	b.n	80058d2 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	4619      	mov	r1, r3
 800580e:	4838      	ldr	r0, [pc, #224]	; (80058f0 <LPS22HB_0_Probe+0x154>)
 8005810:	f7fc f9d6 	bl	8001bc0 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005814:	7b3b      	ldrb	r3, [r7, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	7b7b      	ldrb	r3, [r7, #13]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005822:	4313      	orrs	r3, r2
 8005824:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <LPS22HB_0_Probe+0x158>)
 8005826:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8005828:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <LPS22HB_0_Probe+0x15c>)
 800582a:	4a31      	ldr	r2, [pc, #196]	; (80058f0 <LPS22HB_0_Probe+0x154>)
 800582c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800582e:	4b33      	ldr	r3, [pc, #204]	; (80058fc <LPS22HB_0_Probe+0x160>)
 8005830:	4a33      	ldr	r2, [pc, #204]	; (8005900 <LPS22HB_0_Probe+0x164>)
 8005832:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11e      	bne.n	8005878 <LPS22HB_0_Probe+0xdc>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d019      	beq.n	8005878 <LPS22HB_0_Probe+0xdc>
 8005844:	7b3b      	ldrb	r3, [r7, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d116      	bne.n	8005878 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800584a:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <LPS22HB_0_Probe+0x168>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4a2e      	ldr	r2, [pc, #184]	; (8005908 <LPS22HB_0_Probe+0x16c>)
 8005850:	3303      	adds	r3, #3
 8005852:	492e      	ldr	r1, [pc, #184]	; (800590c <LPS22HB_0_Probe+0x170>)
 8005854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005858:	4b28      	ldr	r3, [pc, #160]	; (80058fc <LPS22HB_0_Probe+0x160>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <LPS22HB_0_Probe+0x15c>)
 8005860:	6852      	ldr	r2, [r2, #4]
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800586c:	f06f 0304 	mvn.w	r3, #4
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	e001      	b.n	8005878 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11e      	bne.n	80058bc <LPS22HB_0_Probe+0x120>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <LPS22HB_0_Probe+0x120>
 8005888:	7b7b      	ldrb	r3, [r7, #13]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d116      	bne.n	80058bc <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <LPS22HB_0_Probe+0x168>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <LPS22HB_0_Probe+0x16c>)
 8005894:	3303      	adds	r3, #3
 8005896:	491e      	ldr	r1, [pc, #120]	; (8005910 <LPS22HB_0_Probe+0x174>)
 8005898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800589c:	4b17      	ldr	r3, [pc, #92]	; (80058fc <LPS22HB_0_Probe+0x160>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <LPS22HB_0_Probe+0x15c>)
 80058a4:	6852      	ldr	r2, [r2, #4]
 80058a6:	4610      	mov	r0, r2
 80058a8:	4798      	blx	r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058b0:	f06f 0304 	mvn.w	r3, #4
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	e001      	b.n	80058bc <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80058bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d107      	bne.n	80058d2 <LPS22HB_0_Probe+0x136>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058cc:	f06f 0304 	mvn.w	r3, #4
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3740      	adds	r7, #64	; 0x40
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08000a39 	.word	0x08000a39
 80058e0:	08000ab5 	.word	0x08000ab5
 80058e4:	08000b69 	.word	0x08000b69
 80058e8:	08000b05 	.word	0x08000b05
 80058ec:	08000bcd 	.word	0x08000bcd
 80058f0:	20000240 	.word	0x20000240
 80058f4:	2000020c 	.word	0x2000020c
 80058f8:	200004b4 	.word	0x200004b4
 80058fc:	20000204 	.word	0x20000204
 8005900:	2000003c 	.word	0x2000003c
 8005904:	20000134 	.word	0x20000134
 8005908:	200001ec 	.word	0x200001ec
 800590c:	20000060 	.word	0x20000060
 8005910:	2000004c 	.word	0x2000004c

08005914 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	; 0x38
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005922:	2301      	movs	r3, #1
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d06e      	beq.n	8005a0e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	f200 809d 	bhi.w	8005a72 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d032      	beq.n	80059aa <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005944:	e095      	b.n	8005a72 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005946:	6838      	ldr	r0, [r7, #0]
 8005948:	f000 f922 	bl	8005b90 <LSM6DSL_0_Probe>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	e0cc      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005958:	4a68      	ldr	r2, [pc, #416]	; (8005afc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	4967      	ldr	r1, [pc, #412]	; (8005b00 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800596a:	f107 010c 	add.w	r1, r7, #12
 800596e:	4610      	mov	r0, r2
 8005970:	4798      	blx	r3
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005978:	f06f 0306 	mvn.w	r3, #6
 800597c:	e0b9      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800597e:	7b3b      	ldrb	r3, [r7, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d103      	bne.n	800598c <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f043 0302 	orr.w	r3, r3, #2
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800598c:	7b7b      	ldrb	r3, [r7, #13]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d103      	bne.n	800599a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d16c      	bne.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059a8:	e067      	b.n	8005a7a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80059aa:	6838      	ldr	r0, [r7, #0]
 80059ac:	f000 f9ac 	bl	8005d08 <LSM303AGR_ACC_0_Probe>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	e09a      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80059bc:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	494e      	ldr	r1, [pc, #312]	; (8005b00 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059ce:	f107 010c 	add.w	r1, r7, #12
 80059d2:	4610      	mov	r0, r2
 80059d4:	4798      	blx	r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059dc:	f06f 0306 	mvn.w	r3, #6
 80059e0:	e087      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059e2:	7b3b      	ldrb	r3, [r7, #12]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d103      	bne.n	80059f0 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f043 0302 	orr.w	r3, r3, #2
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059f0:	7b7b      	ldrb	r3, [r7, #13]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d103      	bne.n	80059fe <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d13c      	bne.n	8005a7e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a0c:	e037      	b.n	8005a7e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005a0e:	6838      	ldr	r0, [r7, #0]
 8005a10:	f000 fa1e 	bl	8005e50 <LSM303AGR_MAG_0_Probe>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1e:	e068      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a20:	4a36      	ldr	r2, [pc, #216]	; (8005afc <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4935      	ldr	r1, [pc, #212]	; (8005b00 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a32:	f107 010c 	add.w	r1, r7, #12
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a40:	f06f 0306 	mvn.w	r3, #6
 8005a44:	e055      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a46:	7b3b      	ldrb	r3, [r7, #12]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d103      	bne.n	8005a54 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	f043 0302 	orr.w	r3, r3, #2
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a54:	7b7b      	ldrb	r3, [r7, #13]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d103      	bne.n	8005a62 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10c      	bne.n	8005a82 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f043 0304 	orr.w	r3, r3, #4
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a70:	e007      	b.n	8005a82 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005a72:	f06f 0301 	mvn.w	r3, #1
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005a78:	e004      	b.n	8005a84 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e002      	b.n	8005a84 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e000      	b.n	8005a84 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005a82:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	e031      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a92:	e02a      	b.n	8005aea <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	4013      	ands	r3, r2
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d11e      	bne.n	8005ade <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d118      	bne.n	8005ade <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ab4:	4814      	ldr	r0, [pc, #80]	; (8005b08 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	440b      	add	r3, r1
 8005ac0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	490e      	ldr	r1, [pc, #56]	; (8005b00 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4798      	blx	r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005ad8:	f06f 0304 	mvn.w	r3, #4
 8005adc:	e009      	b.n	8005af2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d9d1      	bls.n	8005a94 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3738      	adds	r7, #56	; 0x38
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000290 	.word	0x20000290
 8005b00:	200004bc 	.word	0x200004bc
 8005b04:	20000148 	.word	0x20000148
 8005b08:	2000026c 	.word	0x2000026c

08005b0c <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d903      	bls.n	8005b24 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b1c:	f06f 0301 	mvn.w	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e028      	b.n	8005b76 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d11c      	bne.n	8005b70 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b3e:	4812      	ldr	r0, [pc, #72]	; (8005b88 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	440b      	add	r3, r1
 8005b4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	490e      	ldr	r1, [pc, #56]	; (8005b8c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b62:	f06f 0304 	mvn.w	r3, #4
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e005      	b.n	8005b76 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e002      	b.n	8005b76 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b70:	f06f 0301 	mvn.w	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	2000029c 	.word	0x2000029c
 8005b84:	20000148 	.word	0x20000148
 8005b88:	2000026c 	.word	0x2000026c
 8005b8c:	200004bc 	.word	0x200004bc

08005b90 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b092      	sub	sp, #72	; 0x48
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005ba0:	23d7      	movs	r3, #215	; 0xd7
 8005ba2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ba6:	4b4a      	ldr	r3, [pc, #296]	; (8005cd0 <LSM6DSL_0_Probe+0x140>)
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005baa:	4b4a      	ldr	r3, [pc, #296]	; (8005cd4 <LSM6DSL_0_Probe+0x144>)
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005bae:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <LSM6DSL_0_Probe+0x148>)
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005bb2:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <LSM6DSL_0_Probe+0x14c>)
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <LSM6DSL_0_Probe+0x150>)
 8005bb8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4848      	ldr	r0, [pc, #288]	; (8005ce4 <LSM6DSL_0_Probe+0x154>)
 8005bc2:	f7fe f8d5 	bl	8003d70 <LSM6DSL_RegisterBusIO>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005bcc:	f06f 0306 	mvn.w	r3, #6
 8005bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd2:	e077      	b.n	8005cc4 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005bd4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4842      	ldr	r0, [pc, #264]	; (8005ce4 <LSM6DSL_0_Probe+0x154>)
 8005bdc:	f7fe f9be 	bl	8003f5c <LSM6DSL_ReadID>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005be6:	f06f 0306 	mvn.w	r3, #6
 8005bea:	647b      	str	r3, [r7, #68]	; 0x44
 8005bec:	e06a      	b.n	8005cc4 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf2:	2b6a      	cmp	r3, #106	; 0x6a
 8005bf4:	d003      	beq.n	8005bfe <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005bf6:	f06f 0306 	mvn.w	r3, #6
 8005bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfc:	e062      	b.n	8005cc4 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005bfe:	f107 0308 	add.w	r3, r7, #8
 8005c02:	4619      	mov	r1, r3
 8005c04:	4837      	ldr	r0, [pc, #220]	; (8005ce4 <LSM6DSL_0_Probe+0x154>)
 8005c06:	f7fe f9bf 	bl	8003f88 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005c0a:	7a7b      	ldrb	r3, [r7, #9]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	7a3b      	ldrb	r3, [r7, #8]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	431a      	orrs	r2, r3
 8005c14:	7abb      	ldrb	r3, [r7, #10]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	4a33      	ldr	r2, [pc, #204]	; (8005ce8 <LSM6DSL_0_Probe+0x158>)
 8005c1c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005c1e:	4b33      	ldr	r3, [pc, #204]	; (8005cec <LSM6DSL_0_Probe+0x15c>)
 8005c20:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <LSM6DSL_0_Probe+0x154>)
 8005c22:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005c24:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <LSM6DSL_0_Probe+0x160>)
 8005c26:	4a33      	ldr	r2, [pc, #204]	; (8005cf4 <LSM6DSL_0_Probe+0x164>)
 8005c28:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d11d      	bne.n	8005c6c <LSM6DSL_0_Probe+0xdc>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d018      	beq.n	8005c6c <LSM6DSL_0_Probe+0xdc>
 8005c3a:	7a7b      	ldrb	r3, [r7, #9]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d115      	bne.n	8005c6c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <LSM6DSL_0_Probe+0x168>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <LSM6DSL_0_Probe+0x16c>)
 8005c46:	492e      	ldr	r1, [pc, #184]	; (8005d00 <LSM6DSL_0_Probe+0x170>)
 8005c48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005c4c:	4b28      	ldr	r3, [pc, #160]	; (8005cf0 <LSM6DSL_0_Probe+0x160>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a26      	ldr	r2, [pc, #152]	; (8005cec <LSM6DSL_0_Probe+0x15c>)
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4610      	mov	r0, r2
 8005c58:	4798      	blx	r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c60:	f06f 0304 	mvn.w	r3, #4
 8005c64:	647b      	str	r3, [r7, #68]	; 0x44
 8005c66:	e001      	b.n	8005c6c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11d      	bne.n	8005cae <LSM6DSL_0_Probe+0x11e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d018      	beq.n	8005cae <LSM6DSL_0_Probe+0x11e>
 8005c7c:	7a3b      	ldrb	r3, [r7, #8]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d115      	bne.n	8005cae <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005c82:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <LSM6DSL_0_Probe+0x168>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <LSM6DSL_0_Probe+0x16c>)
 8005c88:	491e      	ldr	r1, [pc, #120]	; (8005d04 <LSM6DSL_0_Probe+0x174>)
 8005c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <LSM6DSL_0_Probe+0x160>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a15      	ldr	r2, [pc, #84]	; (8005cec <LSM6DSL_0_Probe+0x15c>)
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ca2:	f06f 0304 	mvn.w	r3, #4
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca8:	e001      	b.n	8005cae <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d107      	bne.n	8005cc4 <LSM6DSL_0_Probe+0x134>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cbe:	f06f 0304 	mvn.w	r3, #4
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3748      	adds	r7, #72	; 0x48
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	08000a39 	.word	0x08000a39
 8005cd4:	08000ab5 	.word	0x08000ab5
 8005cd8:	08000b69 	.word	0x08000b69
 8005cdc:	08000b05 	.word	0x08000b05
 8005ce0:	08000bcd 	.word	0x08000bcd
 8005ce4:	200002a8 	.word	0x200002a8
 8005ce8:	2000029c 	.word	0x2000029c
 8005cec:	200004bc 	.word	0x200004bc
 8005cf0:	20000290 	.word	0x20000290
 8005cf4:	200000dc 	.word	0x200000dc
 8005cf8:	20000148 	.word	0x20000148
 8005cfc:	2000026c 	.word	0x2000026c
 8005d00:	20000110 	.word	0x20000110
 8005d04:	200000ec 	.word	0x200000ec

08005d08 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b092      	sub	sp, #72	; 0x48
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005d14:	2300      	movs	r3, #0
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005d18:	2333      	movs	r3, #51	; 0x33
 8005d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005d1e:	4b3f      	ldr	r3, [pc, #252]	; (8005e1c <LSM303AGR_ACC_0_Probe+0x114>)
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005d22:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <LSM303AGR_ACC_0_Probe+0x118>)
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005d26:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <LSM303AGR_ACC_0_Probe+0x120>)
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <LSM303AGR_ACC_0_Probe+0x124>)
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d36:	4619      	mov	r1, r3
 8005d38:	483d      	ldr	r0, [pc, #244]	; (8005e30 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d3a:	f7fc fc63 	bl	8002604 <LSM303AGR_ACC_RegisterBusIO>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d44:	f06f 0306 	mvn.w	r3, #6
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4a:	e062      	b.n	8005e12 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005d4c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d50:	4619      	mov	r1, r3
 8005d52:	4837      	ldr	r0, [pc, #220]	; (8005e30 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d54:	f7fc fd17 	bl	8002786 <LSM303AGR_ACC_ReadID>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d5e:	f06f 0306 	mvn.w	r3, #6
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
 8005d64:	e055      	b.n	8005e12 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d6a:	2b33      	cmp	r3, #51	; 0x33
 8005d6c:	d003      	beq.n	8005d76 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d6e:	f06f 0306 	mvn.w	r3, #6
 8005d72:	647b      	str	r3, [r7, #68]	; 0x44
 8005d74:	e04d      	b.n	8005e12 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	482c      	ldr	r0, [pc, #176]	; (8005e30 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d7e:	f7fc fd19 	bl	80027b4 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d82:	7a7b      	ldrb	r3, [r7, #9]
 8005d84:	461a      	mov	r2, r3
 8005d86:	7a3b      	ldrb	r3, [r7, #8]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005d8c:	7abb      	ldrb	r3, [r7, #10]
 8005d8e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d90:	4313      	orrs	r3, r2
 8005d92:	4a28      	ldr	r2, [pc, #160]	; (8005e34 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005d94:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005d96:	4b28      	ldr	r3, [pc, #160]	; (8005e38 <LSM303AGR_ACC_0_Probe+0x130>)
 8005d98:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d9a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005d9c:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <LSM303AGR_ACC_0_Probe+0x134>)
 8005d9e:	4a28      	ldr	r2, [pc, #160]	; (8005e40 <LSM303AGR_ACC_0_Probe+0x138>)
 8005da0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11e      	bne.n	8005de6 <LSM303AGR_ACC_0_Probe+0xde>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d019      	beq.n	8005de6 <LSM303AGR_ACC_0_Probe+0xde>
 8005db2:	7a3b      	ldrb	r3, [r7, #8]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d116      	bne.n	8005de6 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005db8:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <LSM303AGR_ACC_0_Probe+0x140>)
 8005dbe:	3303      	adds	r3, #3
 8005dc0:	4922      	ldr	r1, [pc, #136]	; (8005e4c <LSM303AGR_ACC_0_Probe+0x144>)
 8005dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <LSM303AGR_ACC_0_Probe+0x134>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <LSM303AGR_ACC_0_Probe+0x130>)
 8005dce:	6852      	ldr	r2, [r2, #4]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dda:	f06f 0304 	mvn.w	r3, #4
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
 8005de0:	e001      	b.n	8005de6 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <LSM303AGR_ACC_0_Probe+0xf4>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005df6:	f06f 0304 	mvn.w	r3, #4
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <LSM303AGR_ACC_0_Probe+0x10a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e0c:	f06f 0304 	mvn.w	r3, #4
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3748      	adds	r7, #72	; 0x48
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	08000a39 	.word	0x08000a39
 8005e20:	08000ab5 	.word	0x08000ab5
 8005e24:	08000b69 	.word	0x08000b69
 8005e28:	08000b05 	.word	0x08000b05
 8005e2c:	08000bcd 	.word	0x08000bcd
 8005e30:	200002d8 	.word	0x200002d8
 8005e34:	2000029c 	.word	0x2000029c
 8005e38:	200004bc 	.word	0x200004bc
 8005e3c:	20000290 	.word	0x20000290
 8005e40:	20000074 	.word	0x20000074
 8005e44:	20000148 	.word	0x20000148
 8005e48:	2000026c 	.word	0x2000026c
 8005e4c:	20000084 	.word	0x20000084

08005e50 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b092      	sub	sp, #72	; 0x48
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005e60:	233d      	movs	r3, #61	; 0x3d
 8005e62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005e66:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <LSM303AGR_MAG_0_Probe+0x114>)
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <LSM303AGR_MAG_0_Probe+0x118>)
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	; (8005f6c <LSM303AGR_MAG_0_Probe+0x11c>)
 8005e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005e72:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <LSM303AGR_MAG_0_Probe+0x120>)
 8005e74:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <LSM303AGR_MAG_0_Probe+0x124>)
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e7e:	4619      	mov	r1, r3
 8005e80:	483d      	ldr	r0, [pc, #244]	; (8005f78 <LSM303AGR_MAG_0_Probe+0x128>)
 8005e82:	f7fc ff85 	bl	8002d90 <LSM303AGR_MAG_RegisterBusIO>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e8c:	f06f 0306 	mvn.w	r3, #6
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44
 8005e92:	e062      	b.n	8005f5a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005e94:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4837      	ldr	r0, [pc, #220]	; (8005f78 <LSM303AGR_MAG_0_Probe+0x128>)
 8005e9c:	f7fd f82f 	bl	8002efe <LSM303AGR_MAG_ReadID>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ea6:	f06f 0306 	mvn.w	r3, #6
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005eac:	e055      	b.n	8005f5a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d003      	beq.n	8005ebe <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005eb6:	f06f 0306 	mvn.w	r3, #6
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e04d      	b.n	8005f5a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	482c      	ldr	r0, [pc, #176]	; (8005f78 <LSM303AGR_MAG_0_Probe+0x128>)
 8005ec6:	f7fd f831 	bl	8002f2c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005eca:	7a7b      	ldrb	r3, [r7, #9]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	7a3b      	ldrb	r3, [r7, #8]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005ed4:	7abb      	ldrb	r3, [r7, #10]
 8005ed6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	4a28      	ldr	r2, [pc, #160]	; (8005f7c <LSM303AGR_MAG_0_Probe+0x12c>)
 8005edc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005ede:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <LSM303AGR_MAG_0_Probe+0x130>)
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <LSM303AGR_MAG_0_Probe+0x128>)
 8005ee2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005ee4:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <LSM303AGR_MAG_0_Probe+0x134>)
 8005ee6:	4a28      	ldr	r2, [pc, #160]	; (8005f88 <LSM303AGR_MAG_0_Probe+0x138>)
 8005ee8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11e      	bne.n	8005f2e <LSM303AGR_MAG_0_Probe+0xde>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d019      	beq.n	8005f2e <LSM303AGR_MAG_0_Probe+0xde>
 8005efa:	7abb      	ldrb	r3, [r7, #10]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d116      	bne.n	8005f2e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005f00:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <LSM303AGR_MAG_0_Probe+0x13c>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <LSM303AGR_MAG_0_Probe+0x140>)
 8005f06:	3306      	adds	r3, #6
 8005f08:	4922      	ldr	r1, [pc, #136]	; (8005f94 <LSM303AGR_MAG_0_Probe+0x144>)
 8005f0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <LSM303AGR_MAG_0_Probe+0x134>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1a      	ldr	r2, [pc, #104]	; (8005f80 <LSM303AGR_MAG_0_Probe+0x130>)
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f22:	f06f 0304 	mvn.w	r3, #4
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
 8005f28:	e001      	b.n	8005f2e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d107      	bne.n	8005f44 <LSM303AGR_MAG_0_Probe+0xf4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f3e:	f06f 0304 	mvn.w	r3, #4
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d107      	bne.n	8005f5a <LSM303AGR_MAG_0_Probe+0x10a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f54:	f06f 0304 	mvn.w	r3, #4
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3748      	adds	r7, #72	; 0x48
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08000a39 	.word	0x08000a39
 8005f68:	08000ab5 	.word	0x08000ab5
 8005f6c:	08000b69 	.word	0x08000b69
 8005f70:	08000b05 	.word	0x08000b05
 8005f74:	08000bcd 	.word	0x08000bcd
 8005f78:	20000304 	.word	0x20000304
 8005f7c:	2000029c 	.word	0x2000029c
 8005f80:	200004bc 	.word	0x200004bc
 8005f84:	20000290 	.word	0x20000290
 8005f88:	200000a8 	.word	0x200000a8
 8005f8c:	20000148 	.word	0x20000148
 8005f90:	2000026c 	.word	0x2000026c
 8005f94:	200000b8 	.word	0x200000b8

08005f98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fa2:	2003      	movs	r0, #3
 8005fa4:	f000 f942 	bl	800622c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f000 f80d 	bl	8005fc8 <HAL_InitTick>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	71fb      	strb	r3, [r7, #7]
 8005fb8:	e001      	b.n	8005fbe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fba:	f7fa fc4f 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005fd4:	4b17      	ldr	r3, [pc, #92]	; (8006034 <HAL_InitTick+0x6c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d023      	beq.n	8006024 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005fdc:	4b16      	ldr	r3, [pc, #88]	; (8006038 <HAL_InitTick+0x70>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_InitTick+0x6c>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f941 	bl	800627a <HAL_SYSTICK_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b0f      	cmp	r3, #15
 8006002:	d809      	bhi.n	8006018 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006004:	2200      	movs	r2, #0
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	f000 f919 	bl	8006242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <HAL_InitTick+0x74>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e007      	b.n	8006028 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e004      	b.n	8006028 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	e001      	b.n	8006028 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000160 	.word	0x20000160
 8006038:	20000000 	.word	0x20000000
 800603c:	2000015c 	.word	0x2000015c

08006040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_IncTick+0x20>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_IncTick+0x24>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4413      	add	r3, r2
 8006050:	4a04      	ldr	r2, [pc, #16]	; (8006064 <HAL_IncTick+0x24>)
 8006052:	6013      	str	r3, [r2, #0]
}
 8006054:	bf00      	nop
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000160 	.word	0x20000160
 8006064:	200004c8 	.word	0x200004c8

08006068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return uwTick;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <HAL_GetTick+0x14>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	200004c8 	.word	0x200004c8

08006080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006088:	f7ff ffee 	bl	8006068 <HAL_GetTick>
 800608c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d005      	beq.n	80060a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <HAL_Delay+0x44>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060a6:	bf00      	nop
 80060a8:	f7ff ffde 	bl	8006068 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d8f7      	bhi.n	80060a8 <HAL_Delay+0x28>
  {
  }
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000160 	.word	0x20000160

080060c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <__NVIC_SetPriorityGrouping+0x44>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060e4:	4013      	ands	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060fa:	4a04      	ldr	r2, [pc, #16]	; (800610c <__NVIC_SetPriorityGrouping+0x44>)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	60d3      	str	r3, [r2, #12]
}
 8006100:	bf00      	nop
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	e000ed00 	.word	0xe000ed00

08006110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <__NVIC_GetPriorityGrouping+0x18>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f003 0307 	and.w	r3, r3, #7
}
 800611e:	4618      	mov	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db0a      	blt.n	8006156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	490c      	ldr	r1, [pc, #48]	; (8006178 <__NVIC_SetPriority+0x4c>)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	0112      	lsls	r2, r2, #4
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	440b      	add	r3, r1
 8006150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006154:	e00a      	b.n	800616c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4908      	ldr	r1, [pc, #32]	; (800617c <__NVIC_SetPriority+0x50>)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	3b04      	subs	r3, #4
 8006164:	0112      	lsls	r2, r2, #4
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	440b      	add	r3, r1
 800616a:	761a      	strb	r2, [r3, #24]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000e100 	.word	0xe000e100
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f1c3 0307 	rsb	r3, r3, #7
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf28      	it	cs
 800619e:	2304      	movcs	r3, #4
 80061a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3304      	adds	r3, #4
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d902      	bls.n	80061b0 <NVIC_EncodePriority+0x30>
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3b03      	subs	r3, #3
 80061ae:	e000      	b.n	80061b2 <NVIC_EncodePriority+0x32>
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43da      	mvns	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	401a      	ands	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c8:	f04f 31ff 	mov.w	r1, #4294967295
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	43d9      	mvns	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d8:	4313      	orrs	r3, r2
         );
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f8:	d301      	bcc.n	80061fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061fa:	2301      	movs	r3, #1
 80061fc:	e00f      	b.n	800621e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <SysTick_Config+0x40>)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006206:	210f      	movs	r1, #15
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	f7ff ff8e 	bl	800612c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <SysTick_Config+0x40>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006216:	4b04      	ldr	r3, [pc, #16]	; (8006228 <SysTick_Config+0x40>)
 8006218:	2207      	movs	r2, #7
 800621a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000e010 	.word	0xe000e010

0800622c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff47 	bl	80060c8 <__NVIC_SetPriorityGrouping>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	4603      	mov	r3, r0
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006254:	f7ff ff5c 	bl	8006110 <__NVIC_GetPriorityGrouping>
 8006258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f7ff ff8e 	bl	8006180 <NVIC_EncodePriority>
 8006264:	4602      	mov	r2, r0
 8006266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ff5d 	bl	800612c <__NVIC_SetPriority>
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffb0 	bl	80061e8 <SysTick_Config>
 8006288:	4603      	mov	r3, r0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062a2:	e17f      	b.n	80065a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	fa01 f303 	lsl.w	r3, r1, r3
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8171 	beq.w	800659e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d005      	beq.n	80062d4 <HAL_GPIO_Init+0x40>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d130      	bne.n	8006336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	2203      	movs	r2, #3
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4013      	ands	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800630a:	2201      	movs	r2, #1
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4013      	ands	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	091b      	lsrs	r3, r3, #4
 8006320:	f003 0201 	and.w	r2, r3, #1
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d118      	bne.n	8006374 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006348:	2201      	movs	r2, #1
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f003 0201 	and.w	r2, r3, #1
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d017      	beq.n	80063b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4013      	ands	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d123      	bne.n	8006404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	08da      	lsrs	r2, r3, #3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3208      	adds	r2, #8
 80063c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	220f      	movs	r2, #15
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4013      	ands	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	08da      	lsrs	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3208      	adds	r2, #8
 80063fe:	6939      	ldr	r1, [r7, #16]
 8006400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	2203      	movs	r2, #3
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	43db      	mvns	r3, r3
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4013      	ands	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 0203 	and.w	r2, r3, #3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80ac 	beq.w	800659e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006446:	4b5f      	ldr	r3, [pc, #380]	; (80065c4 <HAL_GPIO_Init+0x330>)
 8006448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644a:	4a5e      	ldr	r2, [pc, #376]	; (80065c4 <HAL_GPIO_Init+0x330>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6613      	str	r3, [r2, #96]	; 0x60
 8006452:	4b5c      	ldr	r3, [pc, #368]	; (80065c4 <HAL_GPIO_Init+0x330>)
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800645e:	4a5a      	ldr	r2, [pc, #360]	; (80065c8 <HAL_GPIO_Init+0x334>)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	3302      	adds	r3, #2
 8006466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800646a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	220f      	movs	r2, #15
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006488:	d025      	beq.n	80064d6 <HAL_GPIO_Init+0x242>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a4f      	ldr	r2, [pc, #316]	; (80065cc <HAL_GPIO_Init+0x338>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01f      	beq.n	80064d2 <HAL_GPIO_Init+0x23e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a4e      	ldr	r2, [pc, #312]	; (80065d0 <HAL_GPIO_Init+0x33c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d019      	beq.n	80064ce <HAL_GPIO_Init+0x23a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a4d      	ldr	r2, [pc, #308]	; (80065d4 <HAL_GPIO_Init+0x340>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_GPIO_Init+0x236>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a4c      	ldr	r2, [pc, #304]	; (80065d8 <HAL_GPIO_Init+0x344>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00d      	beq.n	80064c6 <HAL_GPIO_Init+0x232>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a4b      	ldr	r2, [pc, #300]	; (80065dc <HAL_GPIO_Init+0x348>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <HAL_GPIO_Init+0x22e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a4a      	ldr	r2, [pc, #296]	; (80065e0 <HAL_GPIO_Init+0x34c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d101      	bne.n	80064be <HAL_GPIO_Init+0x22a>
 80064ba:	2306      	movs	r3, #6
 80064bc:	e00c      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064be:	2307      	movs	r3, #7
 80064c0:	e00a      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064c2:	2305      	movs	r3, #5
 80064c4:	e008      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064c6:	2304      	movs	r3, #4
 80064c8:	e006      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064ca:	2303      	movs	r3, #3
 80064cc:	e004      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e002      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <HAL_GPIO_Init+0x244>
 80064d6:	2300      	movs	r3, #0
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	f002 0203 	and.w	r2, r2, #3
 80064de:	0092      	lsls	r2, r2, #2
 80064e0:	4093      	lsls	r3, r2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064e8:	4937      	ldr	r1, [pc, #220]	; (80065c8 <HAL_GPIO_Init+0x334>)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	3302      	adds	r3, #2
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064f6:	4b3b      	ldr	r3, [pc, #236]	; (80065e4 <HAL_GPIO_Init+0x350>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	43db      	mvns	r3, r3
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800651a:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <HAL_GPIO_Init+0x350>)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006520:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_GPIO_Init+0x350>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	43db      	mvns	r3, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4013      	ands	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <HAL_GPIO_Init+0x350>)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800654a:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_GPIO_Init+0x350>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	43db      	mvns	r3, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <HAL_GPIO_Init+0x350>)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006574:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <HAL_GPIO_Init+0x350>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	43db      	mvns	r3, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006598:	4a12      	ldr	r2, [pc, #72]	; (80065e4 <HAL_GPIO_Init+0x350>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	3301      	adds	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fa22 f303 	lsr.w	r3, r2, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f47f ae78 	bne.w	80062a4 <HAL_GPIO_Init+0x10>
  }
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40010000 	.word	0x40010000
 80065cc:	48000400 	.word	0x48000400
 80065d0:	48000800 	.word	0x48000800
 80065d4:	48000c00 	.word	0x48000c00
 80065d8:	48001000 	.word	0x48001000
 80065dc:	48001400 	.word	0x48001400
 80065e0:	48001800 	.word	0x48001800
 80065e4:	40010400 	.word	0x40010400

080065e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80065f6:	e0cd      	b.n	8006794 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80065f8:	2201      	movs	r2, #1
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80c0 	beq.w	800678e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800660e:	4a68      	ldr	r2, [pc, #416]	; (80067b0 <HAL_GPIO_DeInit+0x1c8>)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	089b      	lsrs	r3, r3, #2
 8006614:	3302      	adds	r3, #2
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	220f      	movs	r2, #15
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006636:	d025      	beq.n	8006684 <HAL_GPIO_DeInit+0x9c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a5e      	ldr	r2, [pc, #376]	; (80067b4 <HAL_GPIO_DeInit+0x1cc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d01f      	beq.n	8006680 <HAL_GPIO_DeInit+0x98>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a5d      	ldr	r2, [pc, #372]	; (80067b8 <HAL_GPIO_DeInit+0x1d0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d019      	beq.n	800667c <HAL_GPIO_DeInit+0x94>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a5c      	ldr	r2, [pc, #368]	; (80067bc <HAL_GPIO_DeInit+0x1d4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_GPIO_DeInit+0x90>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a5b      	ldr	r2, [pc, #364]	; (80067c0 <HAL_GPIO_DeInit+0x1d8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00d      	beq.n	8006674 <HAL_GPIO_DeInit+0x8c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a5a      	ldr	r2, [pc, #360]	; (80067c4 <HAL_GPIO_DeInit+0x1dc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_DeInit+0x88>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a59      	ldr	r2, [pc, #356]	; (80067c8 <HAL_GPIO_DeInit+0x1e0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_GPIO_DeInit+0x84>
 8006668:	2306      	movs	r3, #6
 800666a:	e00c      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 800666c:	2307      	movs	r3, #7
 800666e:	e00a      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 8006670:	2305      	movs	r3, #5
 8006672:	e008      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 8006674:	2304      	movs	r3, #4
 8006676:	e006      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 8006678:	2303      	movs	r3, #3
 800667a:	e004      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 800667c:	2302      	movs	r3, #2
 800667e:	e002      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <HAL_GPIO_DeInit+0x9e>
 8006684:	2300      	movs	r3, #0
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f002 0203 	and.w	r2, r2, #3
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4093      	lsls	r3, r2
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	429a      	cmp	r2, r3
 8006694:	d132      	bne.n	80066fc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006696:	4b4d      	ldr	r3, [pc, #308]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	43db      	mvns	r3, r3
 800669e:	494b      	ldr	r1, [pc, #300]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80066a4:	4b49      	ldr	r3, [pc, #292]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	4947      	ldr	r1, [pc, #284]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80066b2:	4b46      	ldr	r3, [pc, #280]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	43db      	mvns	r3, r3
 80066ba:	4944      	ldr	r1, [pc, #272]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066bc:	4013      	ands	r3, r2
 80066be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80066c0:	4b42      	ldr	r3, [pc, #264]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	43db      	mvns	r3, r3
 80066c8:	4940      	ldr	r1, [pc, #256]	; (80067cc <HAL_GPIO_DeInit+0x1e4>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	220f      	movs	r2, #15
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80066de:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <HAL_GPIO_DeInit+0x1c8>)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	3302      	adds	r3, #2
 80066e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	43da      	mvns	r2, r3
 80066ee:	4830      	ldr	r0, [pc, #192]	; (80067b0 <HAL_GPIO_DeInit+0x1c8>)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	400a      	ands	r2, r1
 80066f6:	3302      	adds	r3, #2
 80066f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	2103      	movs	r1, #3
 8006706:	fa01 f303 	lsl.w	r3, r1, r3
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	220f      	movs	r2, #15
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	08d2      	lsrs	r2, r2, #3
 8006730:	4019      	ands	r1, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3208      	adds	r2, #8
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2103      	movs	r1, #3
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	401a      	ands	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	2101      	movs	r1, #1
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	401a      	ands	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	2103      	movs	r1, #3
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	401a      	ands	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	2101      	movs	r1, #1
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	401a      	ands	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3301      	adds	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	f47f af2b 	bne.w	80065f8 <HAL_GPIO_DeInit+0x10>
  }
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40010000 	.word	0x40010000
 80067b4:	48000400 	.word	0x48000400
 80067b8:	48000800 	.word	0x48000800
 80067bc:	48000c00 	.word	0x48000c00
 80067c0:	48001000 	.word	0x48001000
 80067c4:	48001400 	.word	0x48001400
 80067c8:	48001800 	.word	0x48001800
 80067cc:	40010400 	.word	0x40010400

080067d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
 80067dc:	4613      	mov	r3, r2
 80067de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067e0:	787b      	ldrb	r3, [r7, #1]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067e6:	887a      	ldrh	r2, [r7, #2]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067ec:	e002      	b.n	80067f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067ee:	887a      	ldrh	r2, [r7, #2]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e081      	b.n	8006916 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8a8 	bl	800697c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2224      	movs	r2, #36	; 0x24
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d107      	bne.n	800687a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689a      	ldr	r2, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	e006      	b.n	8006888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d104      	bne.n	800689a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69d9      	ldr	r1, [r3, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1a      	ldr	r2, [r3, #32]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e021      	b.n	8006974 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	; 0x24
 8006934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f821 	bl	8006990 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	817b      	strh	r3, [r7, #10]
 80069b6:	460b      	mov	r3, r1
 80069b8:	813b      	strh	r3, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	f040 80f9 	bne.w	8006bbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_I2C_Mem_Write+0x34>
 80069d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e0ed      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_I2C_Mem_Write+0x4e>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e0e6      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069fa:	f7ff fb35 	bl	8006068 <HAL_GetTick>
 80069fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2319      	movs	r3, #25
 8006a06:	2201      	movs	r2, #1
 8006a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fadd 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e0d1      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2221      	movs	r2, #33	; 0x21
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a3a      	ldr	r2, [r7, #32]
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a44:	88f8      	ldrh	r0, [r7, #6]
 8006a46:	893a      	ldrh	r2, [r7, #8]
 8006a48:	8979      	ldrh	r1, [r7, #10]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4603      	mov	r3, r0
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f9ed 	bl	8006e34 <I2C_RequestMemoryWrite>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0a9      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d90e      	bls.n	8006a94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	8979      	ldrh	r1, [r7, #10]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fc45 	bl	800731c <I2C_TransferConfig>
 8006a92:	e00f      	b.n	8006ab4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	8979      	ldrh	r1, [r7, #10]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fc34 	bl	800731c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fac7 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e07b      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d034      	beq.n	8006b6c <HAL_I2C_Mem_Write+0x1c8>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d130      	bne.n	8006b6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fa59 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e04d      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2bff      	cmp	r3, #255	; 0xff
 8006b2c:	d90e      	bls.n	8006b4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	8979      	ldrh	r1, [r7, #10]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fbe9 	bl	800731c <I2C_TransferConfig>
 8006b4a:	e00f      	b.n	8006b6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fbd8 	bl	800731c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d19e      	bne.n	8006ab4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 faa6 	bl	80070cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e01a      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6859      	ldr	r1, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <HAL_I2C_Mem_Write+0x224>)
 8006b9e:	400b      	ands	r3, r1
 8006ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	fe00e800 	.word	0xfe00e800

08006bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	f040 80fd 	bne.w	8006dee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_I2C_Mem_Read+0x34>
 8006bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0f1      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_I2C_Mem_Read+0x4e>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0ea      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c22:	f7ff fa21 	bl	8006068 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2319      	movs	r3, #25
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f9c9 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0d5      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2222      	movs	r2, #34	; 0x22
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2240      	movs	r2, #64	; 0x40
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a3a      	ldr	r2, [r7, #32]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c6c:	88f8      	ldrh	r0, [r7, #6]
 8006c6e:	893a      	ldrh	r2, [r7, #8]
 8006c70:	8979      	ldrh	r1, [r7, #10]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f92d 	bl	8006edc <I2C_RequestMemoryRead>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0ad      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d90e      	bls.n	8006cbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	22ff      	movs	r2, #255	; 0xff
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	8979      	ldrh	r1, [r7, #10]
 8006cac:	4b52      	ldr	r3, [pc, #328]	; (8006df8 <HAL_I2C_Mem_Read+0x22c>)
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fb31 	bl	800731c <I2C_TransferConfig>
 8006cba:	e00f      	b.n	8006cdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	8979      	ldrh	r1, [r7, #10]
 8006cce:	4b4a      	ldr	r3, [pc, #296]	; (8006df8 <HAL_I2C_Mem_Read+0x22c>)
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb20 	bl	800731c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f970 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e07c      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d034      	beq.n	8006d9c <HAL_I2C_Mem_Read+0x1d0>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d130      	bne.n	8006d9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	2200      	movs	r2, #0
 8006d42:	2180      	movs	r1, #128	; 0x80
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f941 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e04d      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2bff      	cmp	r3, #255	; 0xff
 8006d5c:	d90e      	bls.n	8006d7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	8979      	ldrh	r1, [r7, #10]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fad1 	bl	800731c <I2C_TransferConfig>
 8006d7a:	e00f      	b.n	8006d9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	8979      	ldrh	r1, [r7, #10]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fac0 	bl	800731c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d19a      	bne.n	8006cdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f98e 	bl	80070cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e01a      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_I2C_Mem_Read+0x230>)
 8006dce:	400b      	ands	r3, r1
 8006dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	80002400 	.word	0x80002400
 8006dfc:	fe00e800 	.word	0xfe00e800

08006e00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0e:	b2db      	uxtb	r3, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	817b      	strh	r3, [r7, #10]
 8006e46:	460b      	mov	r3, r1
 8006e48:	813b      	strh	r3, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	8979      	ldrh	r1, [r7, #10]
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <I2C_RequestMemoryWrite+0xa4>)
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fa5d 	bl	800731c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f8f0 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e02c      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d105      	bne.n	8006e88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e7c:	893b      	ldrh	r3, [r7, #8]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28
 8006e86:	e015      	b.n	8006eb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f8d6 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e012      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eaa:	893b      	ldrh	r3, [r7, #8]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f884 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	80002000 	.word	0x80002000

08006edc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	813b      	strh	r3, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	8979      	ldrh	r1, [r7, #10]
 8006efc:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <I2C_RequestMemoryRead+0xa4>)
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fa0a 	bl	800731c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f89d 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e02c      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d105      	bne.n	8006f2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f22:	893b      	ldrh	r3, [r7, #8]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f2c:	e015      	b.n	8006f5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f2e:	893b      	ldrh	r3, [r7, #8]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	69b9      	ldr	r1, [r7, #24]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f883 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e012      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2140      	movs	r1, #64	; 0x40
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f831 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	80002000 	.word	0x80002000

08006f84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d103      	bne.n	8006fa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d007      	beq.n	8006fc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	619a      	str	r2, [r3, #24]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fdc:	e022      	b.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d01e      	beq.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7ff f83f 	bl	8006068 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d113      	bne.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e00f      	b.n	8007044 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	429a      	cmp	r2, r3
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	d0cd      	beq.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007058:	e02c      	b.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f870 	bl	8007144 <I2C_IsErrorOccurred>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e02a      	b.n	80070c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d01e      	beq.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007076:	f7fe fff7 	bl	8006068 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d113      	bne.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e007      	b.n	80070c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d1cb      	bne.n	800705a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d8:	e028      	b.n	800712c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f830 	bl	8007144 <I2C_IsErrorOccurred>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e026      	b.n	800713c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fe ffbb 	bl	8006068 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d113      	bne.n	800712c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e007      	b.n	800713c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b20      	cmp	r3, #32
 8007138:	d1cf      	bne.n	80070da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	d075      	beq.n	800725c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2210      	movs	r2, #16
 8007176:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007178:	e056      	b.n	8007228 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d052      	beq.n	8007228 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fe ff71 	bl	8006068 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <I2C_IsErrorOccurred+0x54>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d147      	bne.n	8007228 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ba:	d12e      	bne.n	800721a <I2C_IsErrorOccurred+0xd6>
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c2:	d02a      	beq.n	800721a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80071c4:	7cfb      	ldrb	r3, [r7, #19]
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d027      	beq.n	800721a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80071da:	f7fe ff45 	bl	8006068 <HAL_GetTick>
 80071de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071e0:	e01b      	b.n	800721a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80071e2:	f7fe ff41 	bl	8006068 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b19      	cmp	r3, #25
 80071ee:	d914      	bls.n	800721a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b20      	cmp	r3, #32
 8007226:	d1dc      	bne.n	80071e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b20      	cmp	r3, #32
 8007234:	d003      	beq.n	800723e <I2C_IsErrorOccurred+0xfa>
 8007236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800723a:	2b00      	cmp	r3, #0
 800723c:	d09d      	beq.n	800717a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800723e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2220      	movs	r2, #32
 800724c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f043 0301 	orr.w	r3, r3, #1
 8007274:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800727e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f043 0308 	orr.w	r3, r3, #8
 8007296:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	f043 0302 	orr.w	r3, r3, #2
 80072b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80072ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01c      	beq.n	800730c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff fe56 	bl	8006f84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <I2C_IsErrorOccurred+0x1d4>)
 80072e4:	400b      	ands	r3, r1
 80072e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800730c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007310:	4618      	mov	r0, r3
 8007312:	3728      	adds	r7, #40	; 0x28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	fe00e800 	.word	0xfe00e800

0800731c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	817b      	strh	r3, [r7, #10]
 800732a:	4613      	mov	r3, r2
 800732c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800732e:	897b      	ldrh	r3, [r7, #10]
 8007330:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007334:	7a7b      	ldrb	r3, [r7, #9]
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800733c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	4313      	orrs	r3, r2
 8007346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800734a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	0d5b      	lsrs	r3, r3, #21
 8007356:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800735a:	4b08      	ldr	r3, [pc, #32]	; (800737c <I2C_TransferConfig+0x60>)
 800735c:	430b      	orrs	r3, r1
 800735e:	43db      	mvns	r3, r3
 8007360:	ea02 0103 	and.w	r1, r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	03ff63ff 	.word	0x03ff63ff

08007380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b20      	cmp	r3, #32
 8007394:	d138      	bne.n	8007408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e032      	b.n	800740a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2224      	movs	r2, #36	; 0x24
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b20      	cmp	r3, #32
 800742a:	d139      	bne.n	80074a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007436:	2302      	movs	r3, #2
 8007438:	e033      	b.n	80074a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2224      	movs	r2, #36	; 0x24
 8007446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007468:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e000      	b.n	80074a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
  }
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80074bc:	4618      	mov	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40007000 	.word	0x40007000

080074cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074da:	d130      	bne.n	800753e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80074dc:	4b23      	ldr	r3, [pc, #140]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e8:	d038      	beq.n	800755c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074f2:	4a1e      	ldr	r2, [pc, #120]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2232      	movs	r2, #50	; 0x32
 8007500:	fb02 f303 	mul.w	r3, r2, r3
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	0c9b      	lsrs	r3, r3, #18
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007510:	e002      	b.n	8007518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3b01      	subs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007518:	4b14      	ldr	r3, [pc, #80]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007524:	d102      	bne.n	800752c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f2      	bne.n	8007512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007538:	d110      	bne.n	800755c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00f      	b.n	800755e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754a:	d007      	beq.n	800755c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007554:	4a05      	ldr	r2, [pc, #20]	; (800756c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800755a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40007000 	.word	0x40007000
 8007570:	20000000 	.word	0x20000000
 8007574:	431bde83 	.word	0x431bde83

08007578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e3d4      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800758a:	4ba1      	ldr	r3, [pc, #644]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007594:	4b9e      	ldr	r3, [pc, #632]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0310 	and.w	r3, r3, #16
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80e4 	beq.w	8007774 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_RCC_OscConfig+0x4a>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	f040 808b 	bne.w	80076d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	f040 8087 	bne.w	80076d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075c2:	4b93      	ldr	r3, [pc, #588]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <HAL_RCC_OscConfig+0x62>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e3ac      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	4b8c      	ldr	r3, [pc, #560]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <HAL_RCC_OscConfig+0x7c>
 80075ea:	4b89      	ldr	r3, [pc, #548]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075f2:	e005      	b.n	8007600 <HAL_RCC_OscConfig+0x88>
 80075f4:	4b86      	ldr	r3, [pc, #536]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80075f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fa:	091b      	lsrs	r3, r3, #4
 80075fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007600:	4293      	cmp	r3, r2
 8007602:	d223      	bcs.n	800764c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fd41 	bl	8008090 <RCC_SetFlashLatencyFromMSIRange>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e38d      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007618:	4b7d      	ldr	r3, [pc, #500]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a7c      	ldr	r2, [pc, #496]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800761e:	f043 0308 	orr.w	r3, r3, #8
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4b7a      	ldr	r3, [pc, #488]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	4977      	ldr	r1, [pc, #476]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007632:	4313      	orrs	r3, r2
 8007634:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007636:	4b76      	ldr	r3, [pc, #472]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	4972      	ldr	r1, [pc, #456]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007646:	4313      	orrs	r3, r2
 8007648:	604b      	str	r3, [r1, #4]
 800764a:	e025      	b.n	8007698 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800764c:	4b70      	ldr	r3, [pc, #448]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a6f      	ldr	r2, [pc, #444]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007652:	f043 0308 	orr.w	r3, r3, #8
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	4b6d      	ldr	r3, [pc, #436]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	496a      	ldr	r1, [pc, #424]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007666:	4313      	orrs	r3, r2
 8007668:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800766a:	4b69      	ldr	r3, [pc, #420]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	4965      	ldr	r1, [pc, #404]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800767a:	4313      	orrs	r3, r2
 800767c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fd01 	bl	8008090 <RCC_SetFlashLatencyFromMSIRange>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e34d      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007698:	f000 fc36 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b5c      	ldr	r3, [pc, #368]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	495a      	ldr	r1, [pc, #360]	; (8007814 <HAL_RCC_OscConfig+0x29c>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
 80076b4:	4a58      	ldr	r2, [pc, #352]	; (8007818 <HAL_RCC_OscConfig+0x2a0>)
 80076b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80076b8:	4b58      	ldr	r3, [pc, #352]	; (800781c <HAL_RCC_OscConfig+0x2a4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe fc83 	bl	8005fc8 <HAL_InitTick>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d052      	beq.n	8007772 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	e331      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d032      	beq.n	800773e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80076d8:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a4c      	ldr	r2, [pc, #304]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076e4:	f7fe fcc0 	bl	8006068 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076ec:	f7fe fcbc 	bl	8006068 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e31a      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076fe:	4b44      	ldr	r3, [pc, #272]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0f0      	beq.n	80076ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800770a:	4b41      	ldr	r3, [pc, #260]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a40      	ldr	r2, [pc, #256]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007710:	f043 0308 	orr.w	r3, r3, #8
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	493b      	ldr	r1, [pc, #236]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007728:	4b39      	ldr	r3, [pc, #228]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	4936      	ldr	r1, [pc, #216]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007738:	4313      	orrs	r3, r2
 800773a:	604b      	str	r3, [r1, #4]
 800773c:	e01a      	b.n	8007774 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800773e:	4b34      	ldr	r3, [pc, #208]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a33      	ldr	r2, [pc, #204]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800774a:	f7fe fc8d 	bl	8006068 <HAL_GetTick>
 800774e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007750:	e008      	b.n	8007764 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007752:	f7fe fc89 	bl	8006068 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e2e7      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007764:	4b2a      	ldr	r3, [pc, #168]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f0      	bne.n	8007752 <HAL_RCC_OscConfig+0x1da>
 8007770:	e000      	b.n	8007774 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007772:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d074      	beq.n	800786a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b08      	cmp	r3, #8
 8007784:	d005      	beq.n	8007792 <HAL_RCC_OscConfig+0x21a>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b0c      	cmp	r3, #12
 800778a:	d10e      	bne.n	80077aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d10b      	bne.n	80077aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007792:	4b1f      	ldr	r3, [pc, #124]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d064      	beq.n	8007868 <HAL_RCC_OscConfig+0x2f0>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d160      	bne.n	8007868 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e2c4      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x24a>
 80077b4:	4b16      	ldr	r3, [pc, #88]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a15      	ldr	r2, [pc, #84]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	e01d      	b.n	80077fe <HAL_RCC_OscConfig+0x286>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ca:	d10c      	bne.n	80077e6 <HAL_RCC_OscConfig+0x26e>
 80077cc:	4b10      	ldr	r3, [pc, #64]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e00b      	b.n	80077fe <HAL_RCC_OscConfig+0x286>
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a06      	ldr	r2, [pc, #24]	; (8007810 <HAL_RCC_OscConfig+0x298>)
 80077f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d01c      	beq.n	8007840 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007806:	f7fe fc2f 	bl	8006068 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800780c:	e011      	b.n	8007832 <HAL_RCC_OscConfig+0x2ba>
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	08009ddc 	.word	0x08009ddc
 8007818:	20000000 	.word	0x20000000
 800781c:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007820:	f7fe fc22 	bl	8006068 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b64      	cmp	r3, #100	; 0x64
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e280      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007832:	4baf      	ldr	r3, [pc, #700]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x2a8>
 800783e:	e014      	b.n	800786a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007840:	f7fe fc12 	bl	8006068 <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007848:	f7fe fc0e 	bl	8006068 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b64      	cmp	r3, #100	; 0x64
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e26c      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800785a:	4ba5      	ldr	r3, [pc, #660]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCC_OscConfig+0x2d0>
 8007866:	e000      	b.n	800786a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d060      	beq.n	8007938 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d005      	beq.n	8007888 <HAL_RCC_OscConfig+0x310>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b0c      	cmp	r3, #12
 8007880:	d119      	bne.n	80078b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d116      	bne.n	80078b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007888:	4b99      	ldr	r3, [pc, #612]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_OscConfig+0x328>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e249      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a0:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	061b      	lsls	r3, r3, #24
 80078ae:	4990      	ldr	r1, [pc, #576]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078b4:	e040      	b.n	8007938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d023      	beq.n	8007906 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078be:	4b8c      	ldr	r3, [pc, #560]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a8b      	ldr	r2, [pc, #556]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ca:	f7fe fbcd 	bl	8006068 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d2:	f7fe fbc9 	bl	8006068 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e227      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078e4:	4b82      	ldr	r3, [pc, #520]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f0:	4b7f      	ldr	r3, [pc, #508]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	061b      	lsls	r3, r3, #24
 80078fe:	497c      	ldr	r1, [pc, #496]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007900:	4313      	orrs	r3, r2
 8007902:	604b      	str	r3, [r1, #4]
 8007904:	e018      	b.n	8007938 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007906:	4b7a      	ldr	r3, [pc, #488]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a79      	ldr	r2, [pc, #484]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800790c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007912:	f7fe fba9 	bl	8006068 <HAL_GetTick>
 8007916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007918:	e008      	b.n	800792c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800791a:	f7fe fba5 	bl	8006068 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e203      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800792c:	4b70      	ldr	r3, [pc, #448]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1f0      	bne.n	800791a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d03c      	beq.n	80079be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01c      	beq.n	8007986 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800794c:	4b68      	ldr	r3, [pc, #416]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800794e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007952:	4a67      	ldr	r2, [pc, #412]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795c:	f7fe fb84 	bl	8006068 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007964:	f7fe fb80 	bl	8006068 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e1de      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007976:	4b5e      	ldr	r3, [pc, #376]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0ef      	beq.n	8007964 <HAL_RCC_OscConfig+0x3ec>
 8007984:	e01b      	b.n	80079be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007986:	4b5a      	ldr	r3, [pc, #360]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798c:	4a58      	ldr	r2, [pc, #352]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007996:	f7fe fb67 	bl	8006068 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800799e:	f7fe fb63 	bl	8006068 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e1c1      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079b0:	4b4f      	ldr	r3, [pc, #316]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80079b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1ef      	bne.n	800799e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80a6 	beq.w	8007b18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079cc:	2300      	movs	r3, #0
 80079ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80079d0:	4b47      	ldr	r3, [pc, #284]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10d      	bne.n	80079f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079dc:	4b44      	ldr	r3, [pc, #272]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80079de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e0:	4a43      	ldr	r2, [pc, #268]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6593      	str	r3, [r2, #88]	; 0x58
 80079e8:	4b41      	ldr	r3, [pc, #260]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 80079ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f4:	2301      	movs	r3, #1
 80079f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079f8:	4b3e      	ldr	r3, [pc, #248]	; (8007af4 <HAL_RCC_OscConfig+0x57c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d118      	bne.n	8007a36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a04:	4b3b      	ldr	r3, [pc, #236]	; (8007af4 <HAL_RCC_OscConfig+0x57c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a3a      	ldr	r2, [pc, #232]	; (8007af4 <HAL_RCC_OscConfig+0x57c>)
 8007a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a10:	f7fe fb2a 	bl	8006068 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a18:	f7fe fb26 	bl	8006068 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e184      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a2a:	4b32      	ldr	r3, [pc, #200]	; (8007af4 <HAL_RCC_OscConfig+0x57c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f0      	beq.n	8007a18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d108      	bne.n	8007a50 <HAL_RCC_OscConfig+0x4d8>
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	4a2a      	ldr	r2, [pc, #168]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a4e:	e024      	b.n	8007a9a <HAL_RCC_OscConfig+0x522>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	d110      	bne.n	8007a7a <HAL_RCC_OscConfig+0x502>
 8007a58:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5e:	4a24      	ldr	r2, [pc, #144]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a60:	f043 0304 	orr.w	r3, r3, #4
 8007a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a68:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6e:	4a20      	ldr	r2, [pc, #128]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a70:	f043 0301 	orr.w	r3, r3, #1
 8007a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a78:	e00f      	b.n	8007a9a <HAL_RCC_OscConfig+0x522>
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007a92:	f023 0304 	bic.w	r3, r3, #4
 8007a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d016      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7fe fae1 	bl	8006068 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fe fadd 	bl	8006068 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e139      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <HAL_RCC_OscConfig+0x578>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0ed      	beq.n	8007aaa <HAL_RCC_OscConfig+0x532>
 8007ace:	e01a      	b.n	8007b06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad0:	f7fe faca 	bl	8006068 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ad6:	e00f      	b.n	8007af8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad8:	f7fe fac6 	bl	8006068 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d906      	bls.n	8007af8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e122      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
 8007aee:	bf00      	nop
 8007af0:	40021000 	.word	0x40021000
 8007af4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007af8:	4b90      	ldr	r3, [pc, #576]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e8      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b06:	7ffb      	ldrb	r3, [r7, #31]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d105      	bne.n	8007b18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b0c:	4b8b      	ldr	r3, [pc, #556]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b10:	4a8a      	ldr	r2, [pc, #552]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8108 	beq.w	8007d32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f040 80d0 	bne.w	8007ccc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007b2c:	4b83      	ldr	r3, [pc, #524]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f003 0203 	and.w	r2, r3, #3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d130      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d127      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d11f      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b6c:	2a07      	cmp	r2, #7
 8007b6e:	bf14      	ite	ne
 8007b70:	2201      	movne	r2, #1
 8007b72:	2200      	moveq	r2, #0
 8007b74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d113      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	3b01      	subs	r3, #1
 8007b88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d109      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d06e      	beq.n	8007c80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	d069      	beq.n	8007c7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ba8:	4b64      	ldr	r3, [pc, #400]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007bb4:	4b61      	ldr	r3, [pc, #388]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0b7      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b5d      	ldr	r3, [pc, #372]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a5c      	ldr	r2, [pc, #368]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bd0:	f7fe fa4a 	bl	8006068 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bd8:	f7fe fa46 	bl	8006068 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e0a4      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bea:	4b54      	ldr	r3, [pc, #336]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bf6:	4b51      	ldr	r3, [pc, #324]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <HAL_RCC_OscConfig+0x7c8>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c06:	3a01      	subs	r2, #1
 8007c08:	0112      	lsls	r2, r2, #4
 8007c0a:	4311      	orrs	r1, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c10:	0212      	lsls	r2, r2, #8
 8007c12:	4311      	orrs	r1, r2
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c18:	0852      	lsrs	r2, r2, #1
 8007c1a:	3a01      	subs	r2, #1
 8007c1c:	0552      	lsls	r2, r2, #21
 8007c1e:	4311      	orrs	r1, r2
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c24:	0852      	lsrs	r2, r2, #1
 8007c26:	3a01      	subs	r2, #1
 8007c28:	0652      	lsls	r2, r2, #25
 8007c2a:	4311      	orrs	r1, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c30:	0912      	lsrs	r2, r2, #4
 8007c32:	0452      	lsls	r2, r2, #17
 8007c34:	430a      	orrs	r2, r1
 8007c36:	4941      	ldr	r1, [pc, #260]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007c3c:	4b3f      	ldr	r3, [pc, #252]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a3e      	ldr	r2, [pc, #248]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c48:	4b3c      	ldr	r3, [pc, #240]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4a3b      	ldr	r2, [pc, #236]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c54:	f7fe fa08 	bl	8006068 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fe fa04 	bl	8006068 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e062      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c6e:	4b33      	ldr	r3, [pc, #204]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c7a:	e05a      	b.n	8007d32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e059      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c80:	4b2e      	ldr	r3, [pc, #184]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d152      	bne.n	8007d32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c98:	4b28      	ldr	r3, [pc, #160]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4a27      	ldr	r2, [pc, #156]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ca4:	f7fe f9e0 	bl	8006068 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cac:	f7fe f9dc 	bl	8006068 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e03a      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x734>
 8007cca:	e032      	b.n	8007d32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b0c      	cmp	r3, #12
 8007cd0:	d02d      	beq.n	8007d2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007cde:	4b17      	ldr	r3, [pc, #92]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007cea:	4b14      	ldr	r3, [pc, #80]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007cf6:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007cfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d06:	f7fe f9af 	bl	8006068 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d0e:	f7fe f9ab 	bl	8006068 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e009      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_RCC_OscConfig+0x7c4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f0      	bne.n	8007d0e <HAL_RCC_OscConfig+0x796>
 8007d2c:	e001      	b.n	8007d32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40021000 	.word	0x40021000
 8007d40:	f99d808c 	.word	0xf99d808c

08007d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0c8      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d58:	4b66      	ldr	r3, [pc, #408]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d910      	bls.n	8007d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d66:	4b63      	ldr	r3, [pc, #396]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f023 0207 	bic.w	r2, r3, #7
 8007d6e:	4961      	ldr	r1, [pc, #388]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d76:	4b5f      	ldr	r3, [pc, #380]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e0b0      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d04c      	beq.n	8007e2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d107      	bne.n	8007dac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d9c:	4b56      	ldr	r3, [pc, #344]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d121      	bne.n	8007dec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e09e      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007db4:	4b50      	ldr	r3, [pc, #320]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e092      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007dcc:	4b4a      	ldr	r3, [pc, #296]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e086      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ddc:	4b46      	ldr	r3, [pc, #280]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e07e      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dec:	4b42      	ldr	r3, [pc, #264]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f023 0203 	bic.w	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	493f      	ldr	r1, [pc, #252]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dfe:	f7fe f933 	bl	8006068 <HAL_GetTick>
 8007e02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e04:	e00a      	b.n	8007e1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e06:	f7fe f92f 	bl	8006068 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e066      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1c:	4b36      	ldr	r3, [pc, #216]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 020c 	and.w	r2, r3, #12
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d1eb      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d008      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	492c      	ldr	r1, [pc, #176]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e4c:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d210      	bcs.n	8007e7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5a:	4b26      	ldr	r3, [pc, #152]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f023 0207 	bic.w	r2, r3, #7
 8007e62:	4924      	ldr	r1, [pc, #144]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6a:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <HAL_RCC_ClockConfig+0x1b0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d001      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e036      	b.n	8007eea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4918      	ldr	r1, [pc, #96]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ea6:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	4910      	ldr	r1, [pc, #64]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007eba:	f000 f825 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <HAL_RCC_ClockConfig+0x1b4>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	091b      	lsrs	r3, r3, #4
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	490c      	ldr	r1, [pc, #48]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007ecc:	5ccb      	ldrb	r3, [r1, r3]
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed6:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <HAL_RCC_ClockConfig+0x1c0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe f872 	bl	8005fc8 <HAL_InitTick>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40022000 	.word	0x40022000
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	08009ddc 	.word	0x08009ddc
 8007f00:	20000000 	.word	0x20000000
 8007f04:	2000015c 	.word	0x2000015c

08007f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	2300      	movs	r3, #0
 8007f14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f16:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
 8007f1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f20:	4b3b      	ldr	r3, [pc, #236]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_RCC_GetSysClockFreq+0x34>
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b0c      	cmp	r3, #12
 8007f34:	d121      	bne.n	8007f7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d11e      	bne.n	8007f7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f3c:	4b34      	ldr	r3, [pc, #208]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d107      	bne.n	8007f58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f48:	4b31      	ldr	r3, [pc, #196]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e005      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	091b      	lsrs	r3, r3, #4
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f64:	4a2b      	ldr	r2, [pc, #172]	; (8008014 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f78:	e00a      	b.n	8007f90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d102      	bne.n	8007f86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	e004      	b.n	8007f90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d101      	bne.n	8007f90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f8c:	4b23      	ldr	r3, [pc, #140]	; (800801c <HAL_RCC_GetSysClockFreq+0x114>)
 8007f8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2b0c      	cmp	r3, #12
 8007f94:	d134      	bne.n	8008000 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f96:	4b1e      	ldr	r3, [pc, #120]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d003      	beq.n	8007fae <HAL_RCC_GetSysClockFreq+0xa6>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCC_GetSysClockFreq+0xac>
 8007fac:	e005      	b.n	8007fba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007fae:	4b1a      	ldr	r3, [pc, #104]	; (8008018 <HAL_RCC_GetSysClockFreq+0x110>)
 8007fb0:	617b      	str	r3, [r7, #20]
      break;
 8007fb2:	e005      	b.n	8007fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007fb4:	4b19      	ldr	r3, [pc, #100]	; (800801c <HAL_RCC_GetSysClockFreq+0x114>)
 8007fb6:	617b      	str	r3, [r7, #20]
      break;
 8007fb8:	e002      	b.n	8007fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	617b      	str	r3, [r7, #20]
      break;
 8007fbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fc0:	4b13      	ldr	r3, [pc, #76]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	091b      	lsrs	r3, r3, #4
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	3301      	adds	r3, #1
 8007fcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	0a1b      	lsrs	r3, r3, #8
 8007fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	fb02 f203 	mul.w	r2, r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	0e5b      	lsrs	r3, r3, #25
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008000:	69bb      	ldr	r3, [r7, #24]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3724      	adds	r7, #36	; 0x24
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	40021000 	.word	0x40021000
 8008014:	08009df4 	.word	0x08009df4
 8008018:	00f42400 	.word	0x00f42400
 800801c:	007a1200 	.word	0x007a1200

08008020 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <HAL_RCC_GetHCLKFreq+0x14>)
 8008026:	681b      	ldr	r3, [r3, #0]
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000000 	.word	0x20000000

08008038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800803c:	f7ff fff0 	bl	8008020 <HAL_RCC_GetHCLKFreq>
 8008040:	4602      	mov	r2, r0
 8008042:	4b06      	ldr	r3, [pc, #24]	; (800805c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	4904      	ldr	r1, [pc, #16]	; (8008060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800804e:	5ccb      	ldrb	r3, [r1, r3]
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008058:	4618      	mov	r0, r3
 800805a:	bd80      	pop	{r7, pc}
 800805c:	40021000 	.word	0x40021000
 8008060:	08009dec 	.word	0x08009dec

08008064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008068:	f7ff ffda 	bl	8008020 <HAL_RCC_GetHCLKFreq>
 800806c:	4602      	mov	r2, r0
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	0adb      	lsrs	r3, r3, #11
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	4904      	ldr	r1, [pc, #16]	; (800808c <HAL_RCC_GetPCLK2Freq+0x28>)
 800807a:	5ccb      	ldrb	r3, [r1, r3]
 800807c:	f003 031f 	and.w	r3, r3, #31
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008084:	4618      	mov	r0, r3
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40021000 	.word	0x40021000
 800808c:	08009dec 	.word	0x08009dec

08008090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008098:	2300      	movs	r3, #0
 800809a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800809c:	4b2a      	ldr	r3, [pc, #168]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800809e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080a8:	f7ff fa02 	bl	80074b0 <HAL_PWREx_GetVoltageRange>
 80080ac:	6178      	str	r0, [r7, #20]
 80080ae:	e014      	b.n	80080da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b4:	4a24      	ldr	r2, [pc, #144]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ba:	6593      	str	r3, [r2, #88]	; 0x58
 80080bc:	4b22      	ldr	r3, [pc, #136]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80080c8:	f7ff f9f2 	bl	80074b0 <HAL_PWREx_GetVoltageRange>
 80080cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80080ce:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	4a1d      	ldr	r2, [pc, #116]	; (8008148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e0:	d10b      	bne.n	80080fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d919      	bls.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2ba0      	cmp	r3, #160	; 0xa0
 80080ec:	d902      	bls.n	80080f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080ee:	2302      	movs	r3, #2
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	e013      	b.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080f4:	2301      	movs	r3, #1
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	e010      	b.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d902      	bls.n	8008106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008100:	2303      	movs	r3, #3
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	e00a      	b.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b80      	cmp	r3, #128	; 0x80
 800810a:	d102      	bne.n	8008112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800810c:	2302      	movs	r3, #2
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	e004      	b.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b70      	cmp	r3, #112	; 0x70
 8008116:	d101      	bne.n	800811c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008118:	2301      	movs	r3, #1
 800811a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f023 0207 	bic.w	r2, r3, #7
 8008124:	4909      	ldr	r1, [pc, #36]	; (800814c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800812c:	4b07      	ldr	r3, [pc, #28]	; (800814c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	429a      	cmp	r2, r3
 8008138:	d001      	beq.n	800813e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40021000 	.word	0x40021000
 800814c:	40022000 	.word	0x40022000

08008150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008158:	2300      	movs	r3, #0
 800815a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800815c:	2300      	movs	r3, #0
 800815e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008168:	2b00      	cmp	r3, #0
 800816a:	d041      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008174:	d02a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008176:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800817a:	d824      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800817c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008180:	d008      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008186:	d81e      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800818c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008190:	d010      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008192:	e018      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008194:	4b86      	ldr	r3, [pc, #536]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4a85      	ldr	r2, [pc, #532]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800819a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800819e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081a0:	e015      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3304      	adds	r3, #4
 80081a6:	2100      	movs	r1, #0
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fabb 	bl	8008724 <RCCEx_PLLSAI1_Config>
 80081ae:	4603      	mov	r3, r0
 80081b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081b2:	e00c      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3320      	adds	r3, #32
 80081b8:	2100      	movs	r1, #0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fba6 	bl	800890c <RCCEx_PLLSAI2_Config>
 80081c0:	4603      	mov	r3, r0
 80081c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081c4:	e003      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	74fb      	strb	r3, [r7, #19]
      break;
 80081ca:	e000      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80081cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ce:	7cfb      	ldrb	r3, [r7, #19]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081d4:	4b76      	ldr	r3, [pc, #472]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e2:	4973      	ldr	r1, [pc, #460]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80081ea:	e001      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	7cfb      	ldrb	r3, [r7, #19]
 80081ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d041      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008204:	d02a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820a:	d824      	bhi.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800820c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008210:	d008      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008216:	d81e      	bhi.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800821c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008220:	d010      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008222:	e018      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008224:	4b62      	ldr	r3, [pc, #392]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	4a61      	ldr	r2, [pc, #388]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800822a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008230:	e015      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3304      	adds	r3, #4
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fa73 	bl	8008724 <RCCEx_PLLSAI1_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008242:	e00c      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3320      	adds	r3, #32
 8008248:	2100      	movs	r1, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fb5e 	bl	800890c <RCCEx_PLLSAI2_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008254:	e003      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	74fb      	strb	r3, [r7, #19]
      break;
 800825a:	e000      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800825c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800825e:	7cfb      	ldrb	r3, [r7, #19]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008264:	4b52      	ldr	r3, [pc, #328]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008272:	494f      	ldr	r1, [pc, #316]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008274:	4313      	orrs	r3, r2
 8008276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800827a:	e001      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	7cfb      	ldrb	r3, [r7, #19]
 800827e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80a0 	beq.w	80083ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800828e:	2300      	movs	r3, #0
 8008290:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008292:	4b47      	ldr	r3, [pc, #284]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00d      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a8:	4b41      	ldr	r3, [pc, #260]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ac:	4a40      	ldr	r2, [pc, #256]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b2:	6593      	str	r3, [r2, #88]	; 0x58
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082c0:	2301      	movs	r3, #1
 80082c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082c4:	4b3b      	ldr	r3, [pc, #236]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a3a      	ldr	r2, [pc, #232]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80082ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082d0:	f7fd feca 	bl	8006068 <HAL_GetTick>
 80082d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082d6:	e009      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d8:	f7fd fec6 	bl	8006068 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d902      	bls.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	74fb      	strb	r3, [r7, #19]
        break;
 80082ea:	e005      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082ec:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0ef      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80082f8:	7cfb      	ldrb	r3, [r7, #19]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d15c      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082fe:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008308:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01f      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	429a      	cmp	r2, r3
 800831a:	d019      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800831c:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800831e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008328:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	4a20      	ldr	r2, [pc, #128]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008338:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833e:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008348:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d016      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835a:	f7fd fe85 	bl	8006068 <HAL_GetTick>
 800835e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008360:	e00b      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008362:	f7fd fe81 	bl	8006068 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008370:	4293      	cmp	r3, r2
 8008372:	d902      	bls.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	74fb      	strb	r3, [r7, #19]
            break;
 8008378:	e006      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0ec      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008388:	7cfb      	ldrb	r3, [r7, #19]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10c      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839e:	4904      	ldr	r1, [pc, #16]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083a6:	e009      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	74bb      	strb	r3, [r7, #18]
 80083ac:	e006      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80083ae:	bf00      	nop
 80083b0:	40021000 	.word	0x40021000
 80083b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b8:	7cfb      	ldrb	r3, [r7, #19]
 80083ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083bc:	7c7b      	ldrb	r3, [r7, #17]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d105      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083c2:	4b9e      	ldr	r3, [pc, #632]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	4a9d      	ldr	r2, [pc, #628]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083da:	4b98      	ldr	r3, [pc, #608]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e0:	f023 0203 	bic.w	r2, r3, #3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	4994      	ldr	r1, [pc, #592]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083fc:	4b8f      	ldr	r3, [pc, #572]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008402:	f023 020c 	bic.w	r2, r3, #12
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	498c      	ldr	r1, [pc, #560]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800841e:	4b87      	ldr	r3, [pc, #540]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	4983      	ldr	r1, [pc, #524]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0308 	and.w	r3, r3, #8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008440:	4b7e      	ldr	r3, [pc, #504]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844e:	497b      	ldr	r1, [pc, #492]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0310 	and.w	r3, r3, #16
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008462:	4b76      	ldr	r3, [pc, #472]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008470:	4972      	ldr	r1, [pc, #456]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008484:	4b6d      	ldr	r3, [pc, #436]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008492:	496a      	ldr	r1, [pc, #424]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084a6:	4b65      	ldr	r3, [pc, #404]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	4961      	ldr	r1, [pc, #388]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084c8:	4b5c      	ldr	r3, [pc, #368]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d6:	4959      	ldr	r1, [pc, #356]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084ea:	4b54      	ldr	r3, [pc, #336]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	4950      	ldr	r1, [pc, #320]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800850c:	4b4b      	ldr	r3, [pc, #300]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	4948      	ldr	r1, [pc, #288]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800852e:	4b43      	ldr	r3, [pc, #268]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853c:	493f      	ldr	r1, [pc, #252]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d028      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008550:	4b3a      	ldr	r3, [pc, #232]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800855e:	4937      	ldr	r1, [pc, #220]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800856e:	d106      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008570:	4b32      	ldr	r3, [pc, #200]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a31      	ldr	r2, [pc, #196]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857a:	60d3      	str	r3, [r2, #12]
 800857c:	e011      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008586:	d10c      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f8c8 	bl	8008724 <RCCEx_PLLSAI1_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800859e:	7cfb      	ldrb	r3, [r7, #19]
 80085a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d028      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085ae:	4b23      	ldr	r3, [pc, #140]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	491f      	ldr	r1, [pc, #124]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085cc:	d106      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085ce:	4b1b      	ldr	r3, [pc, #108]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	4a1a      	ldr	r2, [pc, #104]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085d8:	60d3      	str	r3, [r2, #12]
 80085da:	e011      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085e4:	d10c      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	2101      	movs	r1, #1
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f899 	bl	8008724 <RCCEx_PLLSAI1_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085f6:	7cfb      	ldrb	r3, [r7, #19]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80085fc:	7cfb      	ldrb	r3, [r7, #19]
 80085fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d02b      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861a:	4908      	ldr	r1, [pc, #32]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800861c:	4313      	orrs	r3, r2
 800861e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800862a:	d109      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800862c:	4b03      	ldr	r3, [pc, #12]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	4a02      	ldr	r2, [pc, #8]	; (800863c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008636:	60d3      	str	r3, [r2, #12]
 8008638:	e014      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800863a:	bf00      	nop
 800863c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008648:	d10c      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	2101      	movs	r1, #1
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f867 	bl	8008724 <RCCEx_PLLSAI1_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800865a:	7cfb      	ldrb	r3, [r7, #19]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008660:	7cfb      	ldrb	r3, [r7, #19]
 8008662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d02f      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800867e:	4928      	ldr	r1, [pc, #160]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800868a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800868e:	d10d      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	2102      	movs	r1, #2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f844 	bl	8008724 <RCCEx_PLLSAI1_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086a0:	7cfb      	ldrb	r3, [r7, #19]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d014      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80086a6:	7cfb      	ldrb	r3, [r7, #19]
 80086a8:	74bb      	strb	r3, [r7, #18]
 80086aa:	e011      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b4:	d10c      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3320      	adds	r3, #32
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f925 	bl	800890c <RCCEx_PLLSAI2_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086c6:	7cfb      	ldrb	r3, [r7, #19]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80086cc:	7cfb      	ldrb	r3, [r7, #19]
 80086ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80086dc:	4b10      	ldr	r3, [pc, #64]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ea:	490d      	ldr	r1, [pc, #52]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086fe:	4b08      	ldr	r3, [pc, #32]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008704:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800870e:	4904      	ldr	r1, [pc, #16]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008710:	4313      	orrs	r3, r2
 8008712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008716:	7cbb      	ldrb	r3, [r7, #18]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40021000 	.word	0x40021000

08008724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008732:	4b75      	ldr	r3, [pc, #468]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800873e:	4b72      	ldr	r3, [pc, #456]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f003 0203 	and.w	r2, r3, #3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d10d      	bne.n	800876a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
       ||
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008756:	4b6c      	ldr	r3, [pc, #432]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
       ||
 8008766:	429a      	cmp	r2, r3
 8008768:	d047      	beq.n	80087fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	e044      	b.n	80087fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d018      	beq.n	80087aa <RCCEx_PLLSAI1_Config+0x86>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d825      	bhi.n	80087c8 <RCCEx_PLLSAI1_Config+0xa4>
 800877c:	2b01      	cmp	r3, #1
 800877e:	d002      	beq.n	8008786 <RCCEx_PLLSAI1_Config+0x62>
 8008780:	2b02      	cmp	r3, #2
 8008782:	d009      	beq.n	8008798 <RCCEx_PLLSAI1_Config+0x74>
 8008784:	e020      	b.n	80087c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008786:	4b60      	ldr	r3, [pc, #384]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d11d      	bne.n	80087ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008796:	e01a      	b.n	80087ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008798:	4b5b      	ldr	r3, [pc, #364]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d116      	bne.n	80087d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087a8:	e013      	b.n	80087d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087aa:	4b57      	ldr	r3, [pc, #348]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087b6:	4b54      	ldr	r3, [pc, #336]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087c6:	e006      	b.n	80087d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	e004      	b.n	80087d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087ce:	bf00      	nop
 80087d0:	e002      	b.n	80087d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087d2:	bf00      	nop
 80087d4:	e000      	b.n	80087d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10d      	bne.n	80087fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087de:	4b4a      	ldr	r3, [pc, #296]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6819      	ldr	r1, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	430b      	orrs	r3, r1
 80087f4:	4944      	ldr	r1, [pc, #272]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d17d      	bne.n	80088fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008800:	4b41      	ldr	r3, [pc, #260]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a40      	ldr	r2, [pc, #256]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800880a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880c:	f7fd fc2c 	bl	8006068 <HAL_GetTick>
 8008810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008812:	e009      	b.n	8008828 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008814:	f7fd fc28 	bl	8006068 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d902      	bls.n	8008828 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	73fb      	strb	r3, [r7, #15]
        break;
 8008826:	e005      	b.n	8008834 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008828:	4b37      	ldr	r3, [pc, #220]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1ef      	bne.n	8008814 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d160      	bne.n	80088fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d111      	bne.n	8008864 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008840:	4b31      	ldr	r3, [pc, #196]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6892      	ldr	r2, [r2, #8]
 8008850:	0211      	lsls	r1, r2, #8
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	68d2      	ldr	r2, [r2, #12]
 8008856:	0912      	lsrs	r2, r2, #4
 8008858:	0452      	lsls	r2, r2, #17
 800885a:	430a      	orrs	r2, r1
 800885c:	492a      	ldr	r1, [pc, #168]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800885e:	4313      	orrs	r3, r2
 8008860:	610b      	str	r3, [r1, #16]
 8008862:	e027      	b.n	80088b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d112      	bne.n	8008890 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800886a:	4b27      	ldr	r3, [pc, #156]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6892      	ldr	r2, [r2, #8]
 800887a:	0211      	lsls	r1, r2, #8
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6912      	ldr	r2, [r2, #16]
 8008880:	0852      	lsrs	r2, r2, #1
 8008882:	3a01      	subs	r2, #1
 8008884:	0552      	lsls	r2, r2, #21
 8008886:	430a      	orrs	r2, r1
 8008888:	491f      	ldr	r1, [pc, #124]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800888a:	4313      	orrs	r3, r2
 800888c:	610b      	str	r3, [r1, #16]
 800888e:	e011      	b.n	80088b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008890:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6892      	ldr	r2, [r2, #8]
 80088a0:	0211      	lsls	r1, r2, #8
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6952      	ldr	r2, [r2, #20]
 80088a6:	0852      	lsrs	r2, r2, #1
 80088a8:	3a01      	subs	r2, #1
 80088aa:	0652      	lsls	r2, r2, #25
 80088ac:	430a      	orrs	r2, r1
 80088ae:	4916      	ldr	r1, [pc, #88]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088b4:	4b14      	ldr	r3, [pc, #80]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a13      	ldr	r2, [pc, #76]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fd fbd2 	bl	8006068 <HAL_GetTick>
 80088c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088c6:	e009      	b.n	80088dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088c8:	f7fd fbce 	bl	8006068 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d902      	bls.n	80088dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
          break;
 80088da:	e005      	b.n	80088e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0ef      	beq.n	80088c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	4904      	ldr	r1, [pc, #16]	; (8008908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	40021000 	.word	0x40021000

0800890c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800891a:	4b6a      	ldr	r3, [pc, #424]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d018      	beq.n	8008958 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008926:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f003 0203 	and.w	r2, r3, #3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d10d      	bne.n	8008952 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
       ||
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800893e:	4b61      	ldr	r3, [pc, #388]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	091b      	lsrs	r3, r3, #4
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
       ||
 800894e:	429a      	cmp	r2, r3
 8008950:	d047      	beq.n	80089e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]
 8008956:	e044      	b.n	80089e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b03      	cmp	r3, #3
 800895e:	d018      	beq.n	8008992 <RCCEx_PLLSAI2_Config+0x86>
 8008960:	2b03      	cmp	r3, #3
 8008962:	d825      	bhi.n	80089b0 <RCCEx_PLLSAI2_Config+0xa4>
 8008964:	2b01      	cmp	r3, #1
 8008966:	d002      	beq.n	800896e <RCCEx_PLLSAI2_Config+0x62>
 8008968:	2b02      	cmp	r3, #2
 800896a:	d009      	beq.n	8008980 <RCCEx_PLLSAI2_Config+0x74>
 800896c:	e020      	b.n	80089b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800896e:	4b55      	ldr	r3, [pc, #340]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d11d      	bne.n	80089b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800897e:	e01a      	b.n	80089b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008980:	4b50      	ldr	r3, [pc, #320]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008988:	2b00      	cmp	r3, #0
 800898a:	d116      	bne.n	80089ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008990:	e013      	b.n	80089ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008992:	4b4c      	ldr	r3, [pc, #304]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10f      	bne.n	80089be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800899e:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d109      	bne.n	80089be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089ae:	e006      	b.n	80089be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
      break;
 80089b4:	e004      	b.n	80089c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089b6:	bf00      	nop
 80089b8:	e002      	b.n	80089c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089ba:	bf00      	nop
 80089bc:	e000      	b.n	80089c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80089be:	bf00      	nop
    }

    if(status == HAL_OK)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089c6:	4b3f      	ldr	r3, [pc, #252]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6819      	ldr	r1, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	430b      	orrs	r3, r1
 80089dc:	4939      	ldr	r1, [pc, #228]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d167      	bne.n	8008ab8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089e8:	4b36      	ldr	r3, [pc, #216]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f4:	f7fd fb38 	bl	8006068 <HAL_GetTick>
 80089f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089fa:	e009      	b.n	8008a10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089fc:	f7fd fb34 	bl	8006068 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d902      	bls.n	8008a10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a0e:	e005      	b.n	8008a1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a10:	4b2c      	ldr	r3, [pc, #176]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1ef      	bne.n	80089fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d14a      	bne.n	8008ab8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d111      	bne.n	8008a4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a28:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6892      	ldr	r2, [r2, #8]
 8008a38:	0211      	lsls	r1, r2, #8
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68d2      	ldr	r2, [r2, #12]
 8008a3e:	0912      	lsrs	r2, r2, #4
 8008a40:	0452      	lsls	r2, r2, #17
 8008a42:	430a      	orrs	r2, r1
 8008a44:	491f      	ldr	r1, [pc, #124]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	614b      	str	r3, [r1, #20]
 8008a4a:	e011      	b.n	8008a70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a4c:	4b1d      	ldr	r3, [pc, #116]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6892      	ldr	r2, [r2, #8]
 8008a5c:	0211      	lsls	r1, r2, #8
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6912      	ldr	r2, [r2, #16]
 8008a62:	0852      	lsrs	r2, r2, #1
 8008a64:	3a01      	subs	r2, #1
 8008a66:	0652      	lsls	r2, r2, #25
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	4916      	ldr	r1, [pc, #88]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a70:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a13      	ldr	r2, [pc, #76]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7c:	f7fd faf4 	bl	8006068 <HAL_GetTick>
 8008a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a82:	e009      	b.n	8008a98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a84:	f7fd faf0 	bl	8006068 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d902      	bls.n	8008a98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
          break;
 8008a96:	e005      	b.n	8008aa4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a98:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0ef      	beq.n	8008a84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aac:	695a      	ldr	r2, [r3, #20]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	4904      	ldr	r1, [pc, #16]	; (8008ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40021000 	.word	0x40021000

08008ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e040      	b.n	8008b5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7f7 feda 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2224      	movs	r2, #36	; 0x24
 8008af4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0201 	bic.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8c0 	bl	8008c8c <UART_SetConfig>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e022      	b.n	8008b5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fb3e 	bl	80091a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0201 	orr.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fbc5 	bl	80092e4 <UART_CheckIdleState>
 8008b5a:	4603      	mov	r3, r0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	; 0x28
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	f040 8082 	bne.w	8008c82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <HAL_UART_Transmit+0x26>
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e07a      	b.n	8008c84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_UART_Transmit+0x38>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e073      	b.n	8008c84 <HAL_UART_Transmit+0x120>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2221      	movs	r2, #33	; 0x21
 8008bb0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bb2:	f7fd fa59 	bl	8006068 <HAL_GetTick>
 8008bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	88fa      	ldrh	r2, [r7, #6]
 8008bbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd0:	d108      	bne.n	8008be4 <HAL_UART_Transmit+0x80>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	e003      	b.n	8008bec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008bf4:	e02d      	b.n	8008c52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2180      	movs	r1, #128	; 0x80
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 fbb8 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e039      	b.n	8008c84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	881a      	ldrh	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c22:	b292      	uxth	r2, r2
 8008c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	3302      	adds	r3, #2
 8008c2a:	61bb      	str	r3, [r7, #24]
 8008c2c:	e008      	b.n	8008c40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	781a      	ldrb	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	b292      	uxth	r2, r2
 8008c38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1cb      	bne.n	8008bf6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2200      	movs	r2, #0
 8008c66:	2140      	movs	r1, #64	; 0x40
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fb84 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e005      	b.n	8008c84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e000      	b.n	8008c84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008c82:	2302      	movs	r3, #2
  }
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3720      	adds	r7, #32
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4bad      	ldr	r3, [pc, #692]	; (8008f6c <UART_SetConfig+0x2e0>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	69f9      	ldr	r1, [r7, #28]
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4aa2      	ldr	r2, [pc, #648]	; (8008f70 <UART_SetConfig+0x2e4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d004      	beq.n	8008cf4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a99      	ldr	r2, [pc, #612]	; (8008f74 <UART_SetConfig+0x2e8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d121      	bne.n	8008d56 <UART_SetConfig+0xca>
 8008d12:	4b99      	ldr	r3, [pc, #612]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d817      	bhi.n	8008d50 <UART_SetConfig+0xc4>
 8008d20:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <UART_SetConfig+0x9c>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008d39 	.word	0x08008d39
 8008d2c:	08008d45 	.word	0x08008d45
 8008d30:	08008d3f 	.word	0x08008d3f
 8008d34:	08008d4b 	.word	0x08008d4b
 8008d38:	2301      	movs	r3, #1
 8008d3a:	76fb      	strb	r3, [r7, #27]
 8008d3c:	e0e7      	b.n	8008f0e <UART_SetConfig+0x282>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	76fb      	strb	r3, [r7, #27]
 8008d42:	e0e4      	b.n	8008f0e <UART_SetConfig+0x282>
 8008d44:	2304      	movs	r3, #4
 8008d46:	76fb      	strb	r3, [r7, #27]
 8008d48:	e0e1      	b.n	8008f0e <UART_SetConfig+0x282>
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	76fb      	strb	r3, [r7, #27]
 8008d4e:	e0de      	b.n	8008f0e <UART_SetConfig+0x282>
 8008d50:	2310      	movs	r3, #16
 8008d52:	76fb      	strb	r3, [r7, #27]
 8008d54:	e0db      	b.n	8008f0e <UART_SetConfig+0x282>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a88      	ldr	r2, [pc, #544]	; (8008f7c <UART_SetConfig+0x2f0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d132      	bne.n	8008dc6 <UART_SetConfig+0x13a>
 8008d60:	4b85      	ldr	r3, [pc, #532]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d66:	f003 030c 	and.w	r3, r3, #12
 8008d6a:	2b0c      	cmp	r3, #12
 8008d6c:	d828      	bhi.n	8008dc0 <UART_SetConfig+0x134>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <UART_SetConfig+0xe8>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008da9 	.word	0x08008da9
 8008d78:	08008dc1 	.word	0x08008dc1
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008db5 	.word	0x08008db5
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008dc1 	.word	0x08008dc1
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008daf 	.word	0x08008daf
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc1 	.word	0x08008dc1
 8008da4:	08008dbb 	.word	0x08008dbb
 8008da8:	2300      	movs	r3, #0
 8008daa:	76fb      	strb	r3, [r7, #27]
 8008dac:	e0af      	b.n	8008f0e <UART_SetConfig+0x282>
 8008dae:	2302      	movs	r3, #2
 8008db0:	76fb      	strb	r3, [r7, #27]
 8008db2:	e0ac      	b.n	8008f0e <UART_SetConfig+0x282>
 8008db4:	2304      	movs	r3, #4
 8008db6:	76fb      	strb	r3, [r7, #27]
 8008db8:	e0a9      	b.n	8008f0e <UART_SetConfig+0x282>
 8008dba:	2308      	movs	r3, #8
 8008dbc:	76fb      	strb	r3, [r7, #27]
 8008dbe:	e0a6      	b.n	8008f0e <UART_SetConfig+0x282>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	76fb      	strb	r3, [r7, #27]
 8008dc4:	e0a3      	b.n	8008f0e <UART_SetConfig+0x282>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a6d      	ldr	r2, [pc, #436]	; (8008f80 <UART_SetConfig+0x2f4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d120      	bne.n	8008e12 <UART_SetConfig+0x186>
 8008dd0:	4b69      	ldr	r3, [pc, #420]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dda:	2b30      	cmp	r3, #48	; 0x30
 8008ddc:	d013      	beq.n	8008e06 <UART_SetConfig+0x17a>
 8008dde:	2b30      	cmp	r3, #48	; 0x30
 8008de0:	d814      	bhi.n	8008e0c <UART_SetConfig+0x180>
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d009      	beq.n	8008dfa <UART_SetConfig+0x16e>
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d810      	bhi.n	8008e0c <UART_SetConfig+0x180>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <UART_SetConfig+0x168>
 8008dee:	2b10      	cmp	r3, #16
 8008df0:	d006      	beq.n	8008e00 <UART_SetConfig+0x174>
 8008df2:	e00b      	b.n	8008e0c <UART_SetConfig+0x180>
 8008df4:	2300      	movs	r3, #0
 8008df6:	76fb      	strb	r3, [r7, #27]
 8008df8:	e089      	b.n	8008f0e <UART_SetConfig+0x282>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	76fb      	strb	r3, [r7, #27]
 8008dfe:	e086      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e00:	2304      	movs	r3, #4
 8008e02:	76fb      	strb	r3, [r7, #27]
 8008e04:	e083      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e06:	2308      	movs	r3, #8
 8008e08:	76fb      	strb	r3, [r7, #27]
 8008e0a:	e080      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	76fb      	strb	r3, [r7, #27]
 8008e10:	e07d      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a5b      	ldr	r2, [pc, #364]	; (8008f84 <UART_SetConfig+0x2f8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d120      	bne.n	8008e5e <UART_SetConfig+0x1d2>
 8008e1c:	4b56      	ldr	r3, [pc, #344]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e26:	2bc0      	cmp	r3, #192	; 0xc0
 8008e28:	d013      	beq.n	8008e52 <UART_SetConfig+0x1c6>
 8008e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e2c:	d814      	bhi.n	8008e58 <UART_SetConfig+0x1cc>
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d009      	beq.n	8008e46 <UART_SetConfig+0x1ba>
 8008e32:	2b80      	cmp	r3, #128	; 0x80
 8008e34:	d810      	bhi.n	8008e58 <UART_SetConfig+0x1cc>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <UART_SetConfig+0x1b4>
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	d006      	beq.n	8008e4c <UART_SetConfig+0x1c0>
 8008e3e:	e00b      	b.n	8008e58 <UART_SetConfig+0x1cc>
 8008e40:	2300      	movs	r3, #0
 8008e42:	76fb      	strb	r3, [r7, #27]
 8008e44:	e063      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e46:	2302      	movs	r3, #2
 8008e48:	76fb      	strb	r3, [r7, #27]
 8008e4a:	e060      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	76fb      	strb	r3, [r7, #27]
 8008e50:	e05d      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e52:	2308      	movs	r3, #8
 8008e54:	76fb      	strb	r3, [r7, #27]
 8008e56:	e05a      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	76fb      	strb	r3, [r7, #27]
 8008e5c:	e057      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a49      	ldr	r2, [pc, #292]	; (8008f88 <UART_SetConfig+0x2fc>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d125      	bne.n	8008eb4 <UART_SetConfig+0x228>
 8008e68:	4b43      	ldr	r3, [pc, #268]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e76:	d017      	beq.n	8008ea8 <UART_SetConfig+0x21c>
 8008e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e7c:	d817      	bhi.n	8008eae <UART_SetConfig+0x222>
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e82:	d00b      	beq.n	8008e9c <UART_SetConfig+0x210>
 8008e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e88:	d811      	bhi.n	8008eae <UART_SetConfig+0x222>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <UART_SetConfig+0x20a>
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e92:	d006      	beq.n	8008ea2 <UART_SetConfig+0x216>
 8008e94:	e00b      	b.n	8008eae <UART_SetConfig+0x222>
 8008e96:	2300      	movs	r3, #0
 8008e98:	76fb      	strb	r3, [r7, #27]
 8008e9a:	e038      	b.n	8008f0e <UART_SetConfig+0x282>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	76fb      	strb	r3, [r7, #27]
 8008ea0:	e035      	b.n	8008f0e <UART_SetConfig+0x282>
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	76fb      	strb	r3, [r7, #27]
 8008ea6:	e032      	b.n	8008f0e <UART_SetConfig+0x282>
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	76fb      	strb	r3, [r7, #27]
 8008eac:	e02f      	b.n	8008f0e <UART_SetConfig+0x282>
 8008eae:	2310      	movs	r3, #16
 8008eb0:	76fb      	strb	r3, [r7, #27]
 8008eb2:	e02c      	b.n	8008f0e <UART_SetConfig+0x282>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a2d      	ldr	r2, [pc, #180]	; (8008f70 <UART_SetConfig+0x2e4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d125      	bne.n	8008f0a <UART_SetConfig+0x27e>
 8008ebe:	4b2e      	ldr	r3, [pc, #184]	; (8008f78 <UART_SetConfig+0x2ec>)
 8008ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ecc:	d017      	beq.n	8008efe <UART_SetConfig+0x272>
 8008ece:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ed2:	d817      	bhi.n	8008f04 <UART_SetConfig+0x278>
 8008ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ed8:	d00b      	beq.n	8008ef2 <UART_SetConfig+0x266>
 8008eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ede:	d811      	bhi.n	8008f04 <UART_SetConfig+0x278>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <UART_SetConfig+0x260>
 8008ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee8:	d006      	beq.n	8008ef8 <UART_SetConfig+0x26c>
 8008eea:	e00b      	b.n	8008f04 <UART_SetConfig+0x278>
 8008eec:	2300      	movs	r3, #0
 8008eee:	76fb      	strb	r3, [r7, #27]
 8008ef0:	e00d      	b.n	8008f0e <UART_SetConfig+0x282>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	76fb      	strb	r3, [r7, #27]
 8008ef6:	e00a      	b.n	8008f0e <UART_SetConfig+0x282>
 8008ef8:	2304      	movs	r3, #4
 8008efa:	76fb      	strb	r3, [r7, #27]
 8008efc:	e007      	b.n	8008f0e <UART_SetConfig+0x282>
 8008efe:	2308      	movs	r3, #8
 8008f00:	76fb      	strb	r3, [r7, #27]
 8008f02:	e004      	b.n	8008f0e <UART_SetConfig+0x282>
 8008f04:	2310      	movs	r3, #16
 8008f06:	76fb      	strb	r3, [r7, #27]
 8008f08:	e001      	b.n	8008f0e <UART_SetConfig+0x282>
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a17      	ldr	r2, [pc, #92]	; (8008f70 <UART_SetConfig+0x2e4>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	f040 8087 	bne.w	8009028 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f1a:	7efb      	ldrb	r3, [r7, #27]
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d837      	bhi.n	8008f90 <UART_SetConfig+0x304>
 8008f20:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <UART_SetConfig+0x29c>)
 8008f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f26:	bf00      	nop
 8008f28:	08008f4d 	.word	0x08008f4d
 8008f2c:	08008f91 	.word	0x08008f91
 8008f30:	08008f55 	.word	0x08008f55
 8008f34:	08008f91 	.word	0x08008f91
 8008f38:	08008f5b 	.word	0x08008f5b
 8008f3c:	08008f91 	.word	0x08008f91
 8008f40:	08008f91 	.word	0x08008f91
 8008f44:	08008f91 	.word	0x08008f91
 8008f48:	08008f63 	.word	0x08008f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f4c:	f7ff f874 	bl	8008038 <HAL_RCC_GetPCLK1Freq>
 8008f50:	6178      	str	r0, [r7, #20]
        break;
 8008f52:	e022      	b.n	8008f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <UART_SetConfig+0x300>)
 8008f56:	617b      	str	r3, [r7, #20]
        break;
 8008f58:	e01f      	b.n	8008f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5a:	f7fe ffd5 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8008f5e:	6178      	str	r0, [r7, #20]
        break;
 8008f60:	e01b      	b.n	8008f9a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f66:	617b      	str	r3, [r7, #20]
        break;
 8008f68:	e017      	b.n	8008f9a <UART_SetConfig+0x30e>
 8008f6a:	bf00      	nop
 8008f6c:	efff69f3 	.word	0xefff69f3
 8008f70:	40008000 	.word	0x40008000
 8008f74:	40013800 	.word	0x40013800
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	40004400 	.word	0x40004400
 8008f80:	40004800 	.word	0x40004800
 8008f84:	40004c00 	.word	0x40004c00
 8008f88:	40005000 	.word	0x40005000
 8008f8c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	76bb      	strb	r3, [r7, #26]
        break;
 8008f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80f1 	beq.w	8009184 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4413      	add	r3, r2
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d305      	bcc.n	8008fbe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d902      	bls.n	8008fc4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	76bb      	strb	r3, [r7, #26]
 8008fc2:	e0df      	b.n	8009184 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f04f 0100 	mov.w	r1, #0
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	f04f 0300 	mov.w	r3, #0
 8008fd4:	020b      	lsls	r3, r1, #8
 8008fd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fda:	0202      	lsls	r2, r0, #8
 8008fdc:	6879      	ldr	r1, [r7, #4]
 8008fde:	6849      	ldr	r1, [r1, #4]
 8008fe0:	0849      	lsrs	r1, r1, #1
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	f04f 0100 	mov.w	r1, #0
 8008fe8:	1814      	adds	r4, r2, r0
 8008fea:	eb43 0501 	adc.w	r5, r3, r1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f04f 0300 	mov.w	r3, #0
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 f940 	bl	8000280 <__aeabi_uldivmod>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4613      	mov	r3, r2
 8009006:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800900e:	d308      	bcc.n	8009022 <UART_SetConfig+0x396>
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009016:	d204      	bcs.n	8009022 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	60da      	str	r2, [r3, #12]
 8009020:	e0b0      	b.n	8009184 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	76bb      	strb	r3, [r7, #26]
 8009026:	e0ad      	b.n	8009184 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009030:	d15b      	bne.n	80090ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8009032:	7efb      	ldrb	r3, [r7, #27]
 8009034:	2b08      	cmp	r3, #8
 8009036:	d828      	bhi.n	800908a <UART_SetConfig+0x3fe>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <UART_SetConfig+0x3b4>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	08009065 	.word	0x08009065
 8009044:	0800906d 	.word	0x0800906d
 8009048:	08009075 	.word	0x08009075
 800904c:	0800908b 	.word	0x0800908b
 8009050:	0800907b 	.word	0x0800907b
 8009054:	0800908b 	.word	0x0800908b
 8009058:	0800908b 	.word	0x0800908b
 800905c:	0800908b 	.word	0x0800908b
 8009060:	08009083 	.word	0x08009083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009064:	f7fe ffe8 	bl	8008038 <HAL_RCC_GetPCLK1Freq>
 8009068:	6178      	str	r0, [r7, #20]
        break;
 800906a:	e013      	b.n	8009094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800906c:	f7fe fffa 	bl	8008064 <HAL_RCC_GetPCLK2Freq>
 8009070:	6178      	str	r0, [r7, #20]
        break;
 8009072:	e00f      	b.n	8009094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009074:	4b49      	ldr	r3, [pc, #292]	; (800919c <UART_SetConfig+0x510>)
 8009076:	617b      	str	r3, [r7, #20]
        break;
 8009078:	e00c      	b.n	8009094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800907a:	f7fe ff45 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 800907e:	6178      	str	r0, [r7, #20]
        break;
 8009080:	e008      	b.n	8009094 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009086:	617b      	str	r3, [r7, #20]
        break;
 8009088:	e004      	b.n	8009094 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	76bb      	strb	r3, [r7, #26]
        break;
 8009092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d074      	beq.n	8009184 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	005a      	lsls	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	441a      	add	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b0f      	cmp	r3, #15
 80090b4:	d916      	bls.n	80090e4 <UART_SetConfig+0x458>
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090bc:	d212      	bcs.n	80090e4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	f023 030f 	bic.w	r3, r3, #15
 80090c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	085b      	lsrs	r3, r3, #1
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	89fa      	ldrh	r2, [r7, #14]
 80090e0:	60da      	str	r2, [r3, #12]
 80090e2:	e04f      	b.n	8009184 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	76bb      	strb	r3, [r7, #26]
 80090e8:	e04c      	b.n	8009184 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090ea:	7efb      	ldrb	r3, [r7, #27]
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d828      	bhi.n	8009142 <UART_SetConfig+0x4b6>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <UART_SetConfig+0x46c>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	08009125 	.word	0x08009125
 8009100:	0800912d 	.word	0x0800912d
 8009104:	08009143 	.word	0x08009143
 8009108:	08009133 	.word	0x08009133
 800910c:	08009143 	.word	0x08009143
 8009110:	08009143 	.word	0x08009143
 8009114:	08009143 	.word	0x08009143
 8009118:	0800913b 	.word	0x0800913b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800911c:	f7fe ff8c 	bl	8008038 <HAL_RCC_GetPCLK1Freq>
 8009120:	6178      	str	r0, [r7, #20]
        break;
 8009122:	e013      	b.n	800914c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009124:	f7fe ff9e 	bl	8008064 <HAL_RCC_GetPCLK2Freq>
 8009128:	6178      	str	r0, [r7, #20]
        break;
 800912a:	e00f      	b.n	800914c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800912c:	4b1b      	ldr	r3, [pc, #108]	; (800919c <UART_SetConfig+0x510>)
 800912e:	617b      	str	r3, [r7, #20]
        break;
 8009130:	e00c      	b.n	800914c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009132:	f7fe fee9 	bl	8007f08 <HAL_RCC_GetSysClockFreq>
 8009136:	6178      	str	r0, [r7, #20]
        break;
 8009138:	e008      	b.n	800914c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800913e:	617b      	str	r3, [r7, #20]
        break;
 8009140:	e004      	b.n	800914c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	76bb      	strb	r3, [r7, #26]
        break;
 800914a:	bf00      	nop
    }

    if (pclk != 0U)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d018      	beq.n	8009184 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	085a      	lsrs	r2, r3, #1
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	441a      	add	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	fbb2 f3f3 	udiv	r3, r2, r3
 8009164:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b0f      	cmp	r3, #15
 800916a:	d909      	bls.n	8009180 <UART_SetConfig+0x4f4>
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009172:	d205      	bcs.n	8009180 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	e001      	b.n	8009184 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009190:	7ebb      	ldrb	r3, [r7, #26]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bdb0      	pop	{r4, r5, r7, pc}
 800919a:	bf00      	nop
 800919c:	00f42400 	.word	0x00f42400

080091a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	f003 0310 	and.w	r3, r3, #16
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01a      	beq.n	80092b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929e:	d10a      	bne.n	80092b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	605a      	str	r2, [r3, #4]
  }
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092f4:	f7fc feb8 	bl	8006068 <HAL_GetTick>
 80092f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b08      	cmp	r3, #8
 8009306:	d10e      	bne.n	8009326 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f82d 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e023      	b.n	800936e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b04      	cmp	r3, #4
 8009332:	d10e      	bne.n	8009352 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009334:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f817 	bl	8009376 <UART_WaitOnFlagUntilTimeout>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e00d      	b.n	800936e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b09c      	sub	sp, #112	; 0x70
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009386:	e0a5      	b.n	80094d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	f000 80a1 	beq.w	80094d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009392:	f7fc fe69 	bl	8006068 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800939e:	429a      	cmp	r2, r3
 80093a0:	d302      	bcc.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80093a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d13e      	bne.n	8009426 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093bc:	667b      	str	r3, [r7, #100]	; 0x64
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e6      	bne.n	80093a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3308      	adds	r3, #8
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	663b      	str	r3, [r7, #96]	; 0x60
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3308      	adds	r3, #8
 80093f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80093fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e5      	bne.n	80093da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2220      	movs	r2, #32
 8009412:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e067      	b.n	80094f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d04f      	beq.n	80094d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009442:	d147      	bne.n	80094d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
 800946e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e6      	bne.n	800944e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	613b      	str	r3, [r7, #16]
   return(result);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f023 0301 	bic.w	r3, r3, #1
 8009496:	66bb      	str	r3, [r7, #104]	; 0x68
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3308      	adds	r3, #8
 800949e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094a0:	623a      	str	r2, [r7, #32]
 80094a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	69f9      	ldr	r1, [r7, #28]
 80094a6:	6a3a      	ldr	r2, [r7, #32]
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e5      	bne.n	8009480 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2220      	movs	r2, #32
 80094b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2220      	movs	r2, #32
 80094be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e010      	b.n	80094f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69da      	ldr	r2, [r3, #28]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4013      	ands	r3, r2
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	f43f af4a 	beq.w	8009388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3770      	adds	r7, #112	; 0x70
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <__errno>:
 8009500:	4b01      	ldr	r3, [pc, #4]	; (8009508 <__errno+0x8>)
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	20000164 	.word	0x20000164

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4d0d      	ldr	r5, [pc, #52]	; (8009544 <__libc_init_array+0x38>)
 8009510:	4c0d      	ldr	r4, [pc, #52]	; (8009548 <__libc_init_array+0x3c>)
 8009512:	1b64      	subs	r4, r4, r5
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	2600      	movs	r6, #0
 8009518:	42a6      	cmp	r6, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	4d0b      	ldr	r5, [pc, #44]	; (800954c <__libc_init_array+0x40>)
 800951e:	4c0c      	ldr	r4, [pc, #48]	; (8009550 <__libc_init_array+0x44>)
 8009520:	f000 fc4e 	bl	8009dc0 <_init>
 8009524:	1b64      	subs	r4, r4, r5
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	2600      	movs	r6, #0
 800952a:	42a6      	cmp	r6, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f855 3b04 	ldr.w	r3, [r5], #4
 8009534:	4798      	blx	r3
 8009536:	3601      	adds	r6, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f855 3b04 	ldr.w	r3, [r5], #4
 800953e:	4798      	blx	r3
 8009540:	3601      	adds	r6, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	08009e60 	.word	0x08009e60
 8009548:	08009e60 	.word	0x08009e60
 800954c:	08009e60 	.word	0x08009e60
 8009550:	08009e64 	.word	0x08009e64

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <siprintf>:
 8009564:	b40e      	push	{r1, r2, r3}
 8009566:	b500      	push	{lr}
 8009568:	b09c      	sub	sp, #112	; 0x70
 800956a:	ab1d      	add	r3, sp, #116	; 0x74
 800956c:	9002      	str	r0, [sp, #8]
 800956e:	9006      	str	r0, [sp, #24]
 8009570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009574:	4809      	ldr	r0, [pc, #36]	; (800959c <siprintf+0x38>)
 8009576:	9107      	str	r1, [sp, #28]
 8009578:	9104      	str	r1, [sp, #16]
 800957a:	4909      	ldr	r1, [pc, #36]	; (80095a0 <siprintf+0x3c>)
 800957c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009580:	9105      	str	r1, [sp, #20]
 8009582:	6800      	ldr	r0, [r0, #0]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	a902      	add	r1, sp, #8
 8009588:	f000 f868 	bl	800965c <_svfiprintf_r>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	b01c      	add	sp, #112	; 0x70
 8009594:	f85d eb04 	ldr.w	lr, [sp], #4
 8009598:	b003      	add	sp, #12
 800959a:	4770      	bx	lr
 800959c:	20000164 	.word	0x20000164
 80095a0:	ffff0208 	.word	0xffff0208

080095a4 <__ssputs_r>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	688e      	ldr	r6, [r1, #8]
 80095aa:	429e      	cmp	r6, r3
 80095ac:	4682      	mov	sl, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	4690      	mov	r8, r2
 80095b2:	461f      	mov	r7, r3
 80095b4:	d838      	bhi.n	8009628 <__ssputs_r+0x84>
 80095b6:	898a      	ldrh	r2, [r1, #12]
 80095b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095bc:	d032      	beq.n	8009624 <__ssputs_r+0x80>
 80095be:	6825      	ldr	r5, [r4, #0]
 80095c0:	6909      	ldr	r1, [r1, #16]
 80095c2:	eba5 0901 	sub.w	r9, r5, r1
 80095c6:	6965      	ldr	r5, [r4, #20]
 80095c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095d0:	3301      	adds	r3, #1
 80095d2:	444b      	add	r3, r9
 80095d4:	106d      	asrs	r5, r5, #1
 80095d6:	429d      	cmp	r5, r3
 80095d8:	bf38      	it	cc
 80095da:	461d      	movcc	r5, r3
 80095dc:	0553      	lsls	r3, r2, #21
 80095de:	d531      	bpl.n	8009644 <__ssputs_r+0xa0>
 80095e0:	4629      	mov	r1, r5
 80095e2:	f000 fb47 	bl	8009c74 <_malloc_r>
 80095e6:	4606      	mov	r6, r0
 80095e8:	b950      	cbnz	r0, 8009600 <__ssputs_r+0x5c>
 80095ea:	230c      	movs	r3, #12
 80095ec:	f8ca 3000 	str.w	r3, [sl]
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	6921      	ldr	r1, [r4, #16]
 8009602:	464a      	mov	r2, r9
 8009604:	f000 fabe 	bl	8009b84 <memcpy>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	6126      	str	r6, [r4, #16]
 8009616:	6165      	str	r5, [r4, #20]
 8009618:	444e      	add	r6, r9
 800961a:	eba5 0509 	sub.w	r5, r5, r9
 800961e:	6026      	str	r6, [r4, #0]
 8009620:	60a5      	str	r5, [r4, #8]
 8009622:	463e      	mov	r6, r7
 8009624:	42be      	cmp	r6, r7
 8009626:	d900      	bls.n	800962a <__ssputs_r+0x86>
 8009628:	463e      	mov	r6, r7
 800962a:	4632      	mov	r2, r6
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	4641      	mov	r1, r8
 8009630:	f000 fab6 	bl	8009ba0 <memmove>
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	4432      	add	r2, r6
 800963c:	60a3      	str	r3, [r4, #8]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	2000      	movs	r0, #0
 8009642:	e7db      	b.n	80095fc <__ssputs_r+0x58>
 8009644:	462a      	mov	r2, r5
 8009646:	f000 fb6f 	bl	8009d28 <_realloc_r>
 800964a:	4606      	mov	r6, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	d1e1      	bne.n	8009614 <__ssputs_r+0x70>
 8009650:	6921      	ldr	r1, [r4, #16]
 8009652:	4650      	mov	r0, sl
 8009654:	f000 fabe 	bl	8009bd4 <_free_r>
 8009658:	e7c7      	b.n	80095ea <__ssputs_r+0x46>
	...

0800965c <_svfiprintf_r>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	4698      	mov	r8, r3
 8009662:	898b      	ldrh	r3, [r1, #12]
 8009664:	061b      	lsls	r3, r3, #24
 8009666:	b09d      	sub	sp, #116	; 0x74
 8009668:	4607      	mov	r7, r0
 800966a:	460d      	mov	r5, r1
 800966c:	4614      	mov	r4, r2
 800966e:	d50e      	bpl.n	800968e <_svfiprintf_r+0x32>
 8009670:	690b      	ldr	r3, [r1, #16]
 8009672:	b963      	cbnz	r3, 800968e <_svfiprintf_r+0x32>
 8009674:	2140      	movs	r1, #64	; 0x40
 8009676:	f000 fafd 	bl	8009c74 <_malloc_r>
 800967a:	6028      	str	r0, [r5, #0]
 800967c:	6128      	str	r0, [r5, #16]
 800967e:	b920      	cbnz	r0, 800968a <_svfiprintf_r+0x2e>
 8009680:	230c      	movs	r3, #12
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	e0d1      	b.n	800982e <_svfiprintf_r+0x1d2>
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	616b      	str	r3, [r5, #20]
 800968e:	2300      	movs	r3, #0
 8009690:	9309      	str	r3, [sp, #36]	; 0x24
 8009692:	2320      	movs	r3, #32
 8009694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009698:	f8cd 800c 	str.w	r8, [sp, #12]
 800969c:	2330      	movs	r3, #48	; 0x30
 800969e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009848 <_svfiprintf_r+0x1ec>
 80096a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a6:	f04f 0901 	mov.w	r9, #1
 80096aa:	4623      	mov	r3, r4
 80096ac:	469a      	mov	sl, r3
 80096ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b2:	b10a      	cbz	r2, 80096b8 <_svfiprintf_r+0x5c>
 80096b4:	2a25      	cmp	r2, #37	; 0x25
 80096b6:	d1f9      	bne.n	80096ac <_svfiprintf_r+0x50>
 80096b8:	ebba 0b04 	subs.w	fp, sl, r4
 80096bc:	d00b      	beq.n	80096d6 <_svfiprintf_r+0x7a>
 80096be:	465b      	mov	r3, fp
 80096c0:	4622      	mov	r2, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ff6d 	bl	80095a4 <__ssputs_r>
 80096ca:	3001      	adds	r0, #1
 80096cc:	f000 80aa 	beq.w	8009824 <_svfiprintf_r+0x1c8>
 80096d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096d2:	445a      	add	r2, fp
 80096d4:	9209      	str	r2, [sp, #36]	; 0x24
 80096d6:	f89a 3000 	ldrb.w	r3, [sl]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 80a2 	beq.w	8009824 <_svfiprintf_r+0x1c8>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ea:	f10a 0a01 	add.w	sl, sl, #1
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096f6:	931a      	str	r3, [sp, #104]	; 0x68
 80096f8:	4654      	mov	r4, sl
 80096fa:	2205      	movs	r2, #5
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	4851      	ldr	r0, [pc, #324]	; (8009848 <_svfiprintf_r+0x1ec>)
 8009702:	f7f6 fd6d 	bl	80001e0 <memchr>
 8009706:	9a04      	ldr	r2, [sp, #16]
 8009708:	b9d8      	cbnz	r0, 8009742 <_svfiprintf_r+0xe6>
 800970a:	06d0      	lsls	r0, r2, #27
 800970c:	bf44      	itt	mi
 800970e:	2320      	movmi	r3, #32
 8009710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009714:	0711      	lsls	r1, r2, #28
 8009716:	bf44      	itt	mi
 8009718:	232b      	movmi	r3, #43	; 0x2b
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971e:	f89a 3000 	ldrb.w	r3, [sl]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d015      	beq.n	8009752 <_svfiprintf_r+0xf6>
 8009726:	9a07      	ldr	r2, [sp, #28]
 8009728:	4654      	mov	r4, sl
 800972a:	2000      	movs	r0, #0
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4621      	mov	r1, r4
 8009732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009736:	3b30      	subs	r3, #48	; 0x30
 8009738:	2b09      	cmp	r3, #9
 800973a:	d94e      	bls.n	80097da <_svfiprintf_r+0x17e>
 800973c:	b1b0      	cbz	r0, 800976c <_svfiprintf_r+0x110>
 800973e:	9207      	str	r2, [sp, #28]
 8009740:	e014      	b.n	800976c <_svfiprintf_r+0x110>
 8009742:	eba0 0308 	sub.w	r3, r0, r8
 8009746:	fa09 f303 	lsl.w	r3, r9, r3
 800974a:	4313      	orrs	r3, r2
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	46a2      	mov	sl, r4
 8009750:	e7d2      	b.n	80096f8 <_svfiprintf_r+0x9c>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	1d19      	adds	r1, r3, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9103      	str	r1, [sp, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfbb      	ittet	lt
 800975e:	425b      	neglt	r3, r3
 8009760:	f042 0202 	orrlt.w	r2, r2, #2
 8009764:	9307      	strge	r3, [sp, #28]
 8009766:	9307      	strlt	r3, [sp, #28]
 8009768:	bfb8      	it	lt
 800976a:	9204      	strlt	r2, [sp, #16]
 800976c:	7823      	ldrb	r3, [r4, #0]
 800976e:	2b2e      	cmp	r3, #46	; 0x2e
 8009770:	d10c      	bne.n	800978c <_svfiprintf_r+0x130>
 8009772:	7863      	ldrb	r3, [r4, #1]
 8009774:	2b2a      	cmp	r3, #42	; 0x2a
 8009776:	d135      	bne.n	80097e4 <_svfiprintf_r+0x188>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9203      	str	r2, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfb8      	it	lt
 8009784:	f04f 33ff 	movlt.w	r3, #4294967295
 8009788:	3402      	adds	r4, #2
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009858 <_svfiprintf_r+0x1fc>
 8009790:	7821      	ldrb	r1, [r4, #0]
 8009792:	2203      	movs	r2, #3
 8009794:	4650      	mov	r0, sl
 8009796:	f7f6 fd23 	bl	80001e0 <memchr>
 800979a:	b140      	cbz	r0, 80097ae <_svfiprintf_r+0x152>
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	eba0 000a 	sub.w	r0, r0, sl
 80097a2:	fa03 f000 	lsl.w	r0, r3, r0
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	4303      	orrs	r3, r0
 80097aa:	3401      	adds	r4, #1
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b2:	4826      	ldr	r0, [pc, #152]	; (800984c <_svfiprintf_r+0x1f0>)
 80097b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097b8:	2206      	movs	r2, #6
 80097ba:	f7f6 fd11 	bl	80001e0 <memchr>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d038      	beq.n	8009834 <_svfiprintf_r+0x1d8>
 80097c2:	4b23      	ldr	r3, [pc, #140]	; (8009850 <_svfiprintf_r+0x1f4>)
 80097c4:	bb1b      	cbnz	r3, 800980e <_svfiprintf_r+0x1b2>
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	3307      	adds	r3, #7
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	3308      	adds	r3, #8
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d4:	4433      	add	r3, r6
 80097d6:	9309      	str	r3, [sp, #36]	; 0x24
 80097d8:	e767      	b.n	80096aa <_svfiprintf_r+0x4e>
 80097da:	fb0c 3202 	mla	r2, ip, r2, r3
 80097de:	460c      	mov	r4, r1
 80097e0:	2001      	movs	r0, #1
 80097e2:	e7a5      	b.n	8009730 <_svfiprintf_r+0xd4>
 80097e4:	2300      	movs	r3, #0
 80097e6:	3401      	adds	r4, #1
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	4619      	mov	r1, r3
 80097ec:	f04f 0c0a 	mov.w	ip, #10
 80097f0:	4620      	mov	r0, r4
 80097f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f6:	3a30      	subs	r2, #48	; 0x30
 80097f8:	2a09      	cmp	r2, #9
 80097fa:	d903      	bls.n	8009804 <_svfiprintf_r+0x1a8>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0c5      	beq.n	800978c <_svfiprintf_r+0x130>
 8009800:	9105      	str	r1, [sp, #20]
 8009802:	e7c3      	b.n	800978c <_svfiprintf_r+0x130>
 8009804:	fb0c 2101 	mla	r1, ip, r1, r2
 8009808:	4604      	mov	r4, r0
 800980a:	2301      	movs	r3, #1
 800980c:	e7f0      	b.n	80097f0 <_svfiprintf_r+0x194>
 800980e:	ab03      	add	r3, sp, #12
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	462a      	mov	r2, r5
 8009814:	4b0f      	ldr	r3, [pc, #60]	; (8009854 <_svfiprintf_r+0x1f8>)
 8009816:	a904      	add	r1, sp, #16
 8009818:	4638      	mov	r0, r7
 800981a:	f3af 8000 	nop.w
 800981e:	1c42      	adds	r2, r0, #1
 8009820:	4606      	mov	r6, r0
 8009822:	d1d6      	bne.n	80097d2 <_svfiprintf_r+0x176>
 8009824:	89ab      	ldrh	r3, [r5, #12]
 8009826:	065b      	lsls	r3, r3, #25
 8009828:	f53f af2c 	bmi.w	8009684 <_svfiprintf_r+0x28>
 800982c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800982e:	b01d      	add	sp, #116	; 0x74
 8009830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	ab03      	add	r3, sp, #12
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	462a      	mov	r2, r5
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <_svfiprintf_r+0x1f8>)
 800983c:	a904      	add	r1, sp, #16
 800983e:	4638      	mov	r0, r7
 8009840:	f000 f87a 	bl	8009938 <_printf_i>
 8009844:	e7eb      	b.n	800981e <_svfiprintf_r+0x1c2>
 8009846:	bf00      	nop
 8009848:	08009e24 	.word	0x08009e24
 800984c:	08009e2e 	.word	0x08009e2e
 8009850:	00000000 	.word	0x00000000
 8009854:	080095a5 	.word	0x080095a5
 8009858:	08009e2a 	.word	0x08009e2a

0800985c <_printf_common>:
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	4616      	mov	r6, r2
 8009862:	4699      	mov	r9, r3
 8009864:	688a      	ldr	r2, [r1, #8]
 8009866:	690b      	ldr	r3, [r1, #16]
 8009868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800986c:	4293      	cmp	r3, r2
 800986e:	bfb8      	it	lt
 8009870:	4613      	movlt	r3, r2
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009878:	4607      	mov	r7, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b10a      	cbz	r2, 8009882 <_printf_common+0x26>
 800987e:	3301      	adds	r3, #1
 8009880:	6033      	str	r3, [r6, #0]
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	0699      	lsls	r1, r3, #26
 8009886:	bf42      	ittt	mi
 8009888:	6833      	ldrmi	r3, [r6, #0]
 800988a:	3302      	addmi	r3, #2
 800988c:	6033      	strmi	r3, [r6, #0]
 800988e:	6825      	ldr	r5, [r4, #0]
 8009890:	f015 0506 	ands.w	r5, r5, #6
 8009894:	d106      	bne.n	80098a4 <_printf_common+0x48>
 8009896:	f104 0a19 	add.w	sl, r4, #25
 800989a:	68e3      	ldr	r3, [r4, #12]
 800989c:	6832      	ldr	r2, [r6, #0]
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	42ab      	cmp	r3, r5
 80098a2:	dc26      	bgt.n	80098f2 <_printf_common+0x96>
 80098a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098a8:	1e13      	subs	r3, r2, #0
 80098aa:	6822      	ldr	r2, [r4, #0]
 80098ac:	bf18      	it	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	0692      	lsls	r2, r2, #26
 80098b2:	d42b      	bmi.n	800990c <_printf_common+0xb0>
 80098b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098b8:	4649      	mov	r1, r9
 80098ba:	4638      	mov	r0, r7
 80098bc:	47c0      	blx	r8
 80098be:	3001      	adds	r0, #1
 80098c0:	d01e      	beq.n	8009900 <_printf_common+0xa4>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	68e5      	ldr	r5, [r4, #12]
 80098c6:	6832      	ldr	r2, [r6, #0]
 80098c8:	f003 0306 	and.w	r3, r3, #6
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	bf08      	it	eq
 80098d0:	1aad      	subeq	r5, r5, r2
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	bf0c      	ite	eq
 80098d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098dc:	2500      	movne	r5, #0
 80098de:	4293      	cmp	r3, r2
 80098e0:	bfc4      	itt	gt
 80098e2:	1a9b      	subgt	r3, r3, r2
 80098e4:	18ed      	addgt	r5, r5, r3
 80098e6:	2600      	movs	r6, #0
 80098e8:	341a      	adds	r4, #26
 80098ea:	42b5      	cmp	r5, r6
 80098ec:	d11a      	bne.n	8009924 <_printf_common+0xc8>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e008      	b.n	8009904 <_printf_common+0xa8>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4652      	mov	r2, sl
 80098f6:	4649      	mov	r1, r9
 80098f8:	4638      	mov	r0, r7
 80098fa:	47c0      	blx	r8
 80098fc:	3001      	adds	r0, #1
 80098fe:	d103      	bne.n	8009908 <_printf_common+0xac>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009908:	3501      	adds	r5, #1
 800990a:	e7c6      	b.n	800989a <_printf_common+0x3e>
 800990c:	18e1      	adds	r1, r4, r3
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	2030      	movs	r0, #48	; 0x30
 8009912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009916:	4422      	add	r2, r4
 8009918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800991c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009920:	3302      	adds	r3, #2
 8009922:	e7c7      	b.n	80098b4 <_printf_common+0x58>
 8009924:	2301      	movs	r3, #1
 8009926:	4622      	mov	r2, r4
 8009928:	4649      	mov	r1, r9
 800992a:	4638      	mov	r0, r7
 800992c:	47c0      	blx	r8
 800992e:	3001      	adds	r0, #1
 8009930:	d0e6      	beq.n	8009900 <_printf_common+0xa4>
 8009932:	3601      	adds	r6, #1
 8009934:	e7d9      	b.n	80098ea <_printf_common+0x8e>
	...

08009938 <_printf_i>:
 8009938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	4691      	mov	r9, r2
 8009940:	7e27      	ldrb	r7, [r4, #24]
 8009942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009944:	2f78      	cmp	r7, #120	; 0x78
 8009946:	4680      	mov	r8, r0
 8009948:	469a      	mov	sl, r3
 800994a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800994e:	d807      	bhi.n	8009960 <_printf_i+0x28>
 8009950:	2f62      	cmp	r7, #98	; 0x62
 8009952:	d80a      	bhi.n	800996a <_printf_i+0x32>
 8009954:	2f00      	cmp	r7, #0
 8009956:	f000 80d8 	beq.w	8009b0a <_printf_i+0x1d2>
 800995a:	2f58      	cmp	r7, #88	; 0x58
 800995c:	f000 80a3 	beq.w	8009aa6 <_printf_i+0x16e>
 8009960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009968:	e03a      	b.n	80099e0 <_printf_i+0xa8>
 800996a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800996e:	2b15      	cmp	r3, #21
 8009970:	d8f6      	bhi.n	8009960 <_printf_i+0x28>
 8009972:	a001      	add	r0, pc, #4	; (adr r0, 8009978 <_printf_i+0x40>)
 8009974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009978:	080099d1 	.word	0x080099d1
 800997c:	080099e5 	.word	0x080099e5
 8009980:	08009961 	.word	0x08009961
 8009984:	08009961 	.word	0x08009961
 8009988:	08009961 	.word	0x08009961
 800998c:	08009961 	.word	0x08009961
 8009990:	080099e5 	.word	0x080099e5
 8009994:	08009961 	.word	0x08009961
 8009998:	08009961 	.word	0x08009961
 800999c:	08009961 	.word	0x08009961
 80099a0:	08009961 	.word	0x08009961
 80099a4:	08009af1 	.word	0x08009af1
 80099a8:	08009a15 	.word	0x08009a15
 80099ac:	08009ad3 	.word	0x08009ad3
 80099b0:	08009961 	.word	0x08009961
 80099b4:	08009961 	.word	0x08009961
 80099b8:	08009b13 	.word	0x08009b13
 80099bc:	08009961 	.word	0x08009961
 80099c0:	08009a15 	.word	0x08009a15
 80099c4:	08009961 	.word	0x08009961
 80099c8:	08009961 	.word	0x08009961
 80099cc:	08009adb 	.word	0x08009adb
 80099d0:	680b      	ldr	r3, [r1, #0]
 80099d2:	1d1a      	adds	r2, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	600a      	str	r2, [r1, #0]
 80099d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099e0:	2301      	movs	r3, #1
 80099e2:	e0a3      	b.n	8009b2c <_printf_i+0x1f4>
 80099e4:	6825      	ldr	r5, [r4, #0]
 80099e6:	6808      	ldr	r0, [r1, #0]
 80099e8:	062e      	lsls	r6, r5, #24
 80099ea:	f100 0304 	add.w	r3, r0, #4
 80099ee:	d50a      	bpl.n	8009a06 <_printf_i+0xce>
 80099f0:	6805      	ldr	r5, [r0, #0]
 80099f2:	600b      	str	r3, [r1, #0]
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	da03      	bge.n	8009a00 <_printf_i+0xc8>
 80099f8:	232d      	movs	r3, #45	; 0x2d
 80099fa:	426d      	negs	r5, r5
 80099fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a00:	485e      	ldr	r0, [pc, #376]	; (8009b7c <_printf_i+0x244>)
 8009a02:	230a      	movs	r3, #10
 8009a04:	e019      	b.n	8009a3a <_printf_i+0x102>
 8009a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a0a:	6805      	ldr	r5, [r0, #0]
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	bf18      	it	ne
 8009a10:	b22d      	sxthne	r5, r5
 8009a12:	e7ef      	b.n	80099f4 <_printf_i+0xbc>
 8009a14:	680b      	ldr	r3, [r1, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	1d18      	adds	r0, r3, #4
 8009a1a:	6008      	str	r0, [r1, #0]
 8009a1c:	0628      	lsls	r0, r5, #24
 8009a1e:	d501      	bpl.n	8009a24 <_printf_i+0xec>
 8009a20:	681d      	ldr	r5, [r3, #0]
 8009a22:	e002      	b.n	8009a2a <_printf_i+0xf2>
 8009a24:	0669      	lsls	r1, r5, #25
 8009a26:	d5fb      	bpl.n	8009a20 <_printf_i+0xe8>
 8009a28:	881d      	ldrh	r5, [r3, #0]
 8009a2a:	4854      	ldr	r0, [pc, #336]	; (8009b7c <_printf_i+0x244>)
 8009a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a2e:	bf0c      	ite	eq
 8009a30:	2308      	moveq	r3, #8
 8009a32:	230a      	movne	r3, #10
 8009a34:	2100      	movs	r1, #0
 8009a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a3a:	6866      	ldr	r6, [r4, #4]
 8009a3c:	60a6      	str	r6, [r4, #8]
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	bfa2      	ittt	ge
 8009a42:	6821      	ldrge	r1, [r4, #0]
 8009a44:	f021 0104 	bicge.w	r1, r1, #4
 8009a48:	6021      	strge	r1, [r4, #0]
 8009a4a:	b90d      	cbnz	r5, 8009a50 <_printf_i+0x118>
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	d04d      	beq.n	8009aec <_printf_i+0x1b4>
 8009a50:	4616      	mov	r6, r2
 8009a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a56:	fb03 5711 	mls	r7, r3, r1, r5
 8009a5a:	5dc7      	ldrb	r7, [r0, r7]
 8009a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a60:	462f      	mov	r7, r5
 8009a62:	42bb      	cmp	r3, r7
 8009a64:	460d      	mov	r5, r1
 8009a66:	d9f4      	bls.n	8009a52 <_printf_i+0x11a>
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d10b      	bne.n	8009a84 <_printf_i+0x14c>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	07df      	lsls	r7, r3, #31
 8009a70:	d508      	bpl.n	8009a84 <_printf_i+0x14c>
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	6861      	ldr	r1, [r4, #4]
 8009a76:	4299      	cmp	r1, r3
 8009a78:	bfde      	ittt	le
 8009a7a:	2330      	movle	r3, #48	; 0x30
 8009a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a84:	1b92      	subs	r2, r2, r6
 8009a86:	6122      	str	r2, [r4, #16]
 8009a88:	f8cd a000 	str.w	sl, [sp]
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	aa03      	add	r2, sp, #12
 8009a90:	4621      	mov	r1, r4
 8009a92:	4640      	mov	r0, r8
 8009a94:	f7ff fee2 	bl	800985c <_printf_common>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d14c      	bne.n	8009b36 <_printf_i+0x1fe>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b004      	add	sp, #16
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	4835      	ldr	r0, [pc, #212]	; (8009b7c <_printf_i+0x244>)
 8009aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	680e      	ldr	r6, [r1, #0]
 8009ab0:	061f      	lsls	r7, r3, #24
 8009ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ab6:	600e      	str	r6, [r1, #0]
 8009ab8:	d514      	bpl.n	8009ae4 <_printf_i+0x1ac>
 8009aba:	07d9      	lsls	r1, r3, #31
 8009abc:	bf44      	itt	mi
 8009abe:	f043 0320 	orrmi.w	r3, r3, #32
 8009ac2:	6023      	strmi	r3, [r4, #0]
 8009ac4:	b91d      	cbnz	r5, 8009ace <_printf_i+0x196>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f023 0320 	bic.w	r3, r3, #32
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	2310      	movs	r3, #16
 8009ad0:	e7b0      	b.n	8009a34 <_printf_i+0xfc>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	2378      	movs	r3, #120	; 0x78
 8009adc:	4828      	ldr	r0, [pc, #160]	; (8009b80 <_printf_i+0x248>)
 8009ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ae2:	e7e3      	b.n	8009aac <_printf_i+0x174>
 8009ae4:	065e      	lsls	r6, r3, #25
 8009ae6:	bf48      	it	mi
 8009ae8:	b2ad      	uxthmi	r5, r5
 8009aea:	e7e6      	b.n	8009aba <_printf_i+0x182>
 8009aec:	4616      	mov	r6, r2
 8009aee:	e7bb      	b.n	8009a68 <_printf_i+0x130>
 8009af0:	680b      	ldr	r3, [r1, #0]
 8009af2:	6826      	ldr	r6, [r4, #0]
 8009af4:	6960      	ldr	r0, [r4, #20]
 8009af6:	1d1d      	adds	r5, r3, #4
 8009af8:	600d      	str	r5, [r1, #0]
 8009afa:	0635      	lsls	r5, r6, #24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	d501      	bpl.n	8009b04 <_printf_i+0x1cc>
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	e002      	b.n	8009b0a <_printf_i+0x1d2>
 8009b04:	0671      	lsls	r1, r6, #25
 8009b06:	d5fb      	bpl.n	8009b00 <_printf_i+0x1c8>
 8009b08:	8018      	strh	r0, [r3, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	4616      	mov	r6, r2
 8009b10:	e7ba      	b.n	8009a88 <_printf_i+0x150>
 8009b12:	680b      	ldr	r3, [r1, #0]
 8009b14:	1d1a      	adds	r2, r3, #4
 8009b16:	600a      	str	r2, [r1, #0]
 8009b18:	681e      	ldr	r6, [r3, #0]
 8009b1a:	6862      	ldr	r2, [r4, #4]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f7f6 fb5e 	bl	80001e0 <memchr>
 8009b24:	b108      	cbz	r0, 8009b2a <_printf_i+0x1f2>
 8009b26:	1b80      	subs	r0, r0, r6
 8009b28:	6060      	str	r0, [r4, #4]
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b34:	e7a8      	b.n	8009a88 <_printf_i+0x150>
 8009b36:	6923      	ldr	r3, [r4, #16]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	47d0      	blx	sl
 8009b40:	3001      	adds	r0, #1
 8009b42:	d0ab      	beq.n	8009a9c <_printf_i+0x164>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	079b      	lsls	r3, r3, #30
 8009b48:	d413      	bmi.n	8009b72 <_printf_i+0x23a>
 8009b4a:	68e0      	ldr	r0, [r4, #12]
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	4298      	cmp	r0, r3
 8009b50:	bfb8      	it	lt
 8009b52:	4618      	movlt	r0, r3
 8009b54:	e7a4      	b.n	8009aa0 <_printf_i+0x168>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4632      	mov	r2, r6
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	47d0      	blx	sl
 8009b60:	3001      	adds	r0, #1
 8009b62:	d09b      	beq.n	8009a9c <_printf_i+0x164>
 8009b64:	3501      	adds	r5, #1
 8009b66:	68e3      	ldr	r3, [r4, #12]
 8009b68:	9903      	ldr	r1, [sp, #12]
 8009b6a:	1a5b      	subs	r3, r3, r1
 8009b6c:	42ab      	cmp	r3, r5
 8009b6e:	dcf2      	bgt.n	8009b56 <_printf_i+0x21e>
 8009b70:	e7eb      	b.n	8009b4a <_printf_i+0x212>
 8009b72:	2500      	movs	r5, #0
 8009b74:	f104 0619 	add.w	r6, r4, #25
 8009b78:	e7f5      	b.n	8009b66 <_printf_i+0x22e>
 8009b7a:	bf00      	nop
 8009b7c:	08009e35 	.word	0x08009e35
 8009b80:	08009e46 	.word	0x08009e46

08009b84 <memcpy>:
 8009b84:	440a      	add	r2, r1
 8009b86:	4291      	cmp	r1, r2
 8009b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b8c:	d100      	bne.n	8009b90 <memcpy+0xc>
 8009b8e:	4770      	bx	lr
 8009b90:	b510      	push	{r4, lr}
 8009b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	d1f9      	bne.n	8009b92 <memcpy+0xe>
 8009b9e:	bd10      	pop	{r4, pc}

08009ba0 <memmove>:
 8009ba0:	4288      	cmp	r0, r1
 8009ba2:	b510      	push	{r4, lr}
 8009ba4:	eb01 0402 	add.w	r4, r1, r2
 8009ba8:	d902      	bls.n	8009bb0 <memmove+0x10>
 8009baa:	4284      	cmp	r4, r0
 8009bac:	4623      	mov	r3, r4
 8009bae:	d807      	bhi.n	8009bc0 <memmove+0x20>
 8009bb0:	1e43      	subs	r3, r0, #1
 8009bb2:	42a1      	cmp	r1, r4
 8009bb4:	d008      	beq.n	8009bc8 <memmove+0x28>
 8009bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bbe:	e7f8      	b.n	8009bb2 <memmove+0x12>
 8009bc0:	4402      	add	r2, r0
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	428a      	cmp	r2, r1
 8009bc6:	d100      	bne.n	8009bca <memmove+0x2a>
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bd2:	e7f7      	b.n	8009bc4 <memmove+0x24>

08009bd4 <_free_r>:
 8009bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d048      	beq.n	8009c6c <_free_r+0x98>
 8009bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bde:	9001      	str	r0, [sp, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f1a1 0404 	sub.w	r4, r1, #4
 8009be6:	bfb8      	it	lt
 8009be8:	18e4      	addlt	r4, r4, r3
 8009bea:	f000 f8d3 	bl	8009d94 <__malloc_lock>
 8009bee:	4a20      	ldr	r2, [pc, #128]	; (8009c70 <_free_r+0x9c>)
 8009bf0:	9801      	ldr	r0, [sp, #4]
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	4615      	mov	r5, r2
 8009bf6:	b933      	cbnz	r3, 8009c06 <_free_r+0x32>
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	6014      	str	r4, [r2, #0]
 8009bfc:	b003      	add	sp, #12
 8009bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c02:	f000 b8cd 	b.w	8009da0 <__malloc_unlock>
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	d90b      	bls.n	8009c22 <_free_r+0x4e>
 8009c0a:	6821      	ldr	r1, [r4, #0]
 8009c0c:	1862      	adds	r2, r4, r1
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	bf04      	itt	eq
 8009c12:	681a      	ldreq	r2, [r3, #0]
 8009c14:	685b      	ldreq	r3, [r3, #4]
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	bf04      	itt	eq
 8009c1a:	1852      	addeq	r2, r2, r1
 8009c1c:	6022      	streq	r2, [r4, #0]
 8009c1e:	602c      	str	r4, [r5, #0]
 8009c20:	e7ec      	b.n	8009bfc <_free_r+0x28>
 8009c22:	461a      	mov	r2, r3
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	b10b      	cbz	r3, 8009c2c <_free_r+0x58>
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	d9fa      	bls.n	8009c22 <_free_r+0x4e>
 8009c2c:	6811      	ldr	r1, [r2, #0]
 8009c2e:	1855      	adds	r5, r2, r1
 8009c30:	42a5      	cmp	r5, r4
 8009c32:	d10b      	bne.n	8009c4c <_free_r+0x78>
 8009c34:	6824      	ldr	r4, [r4, #0]
 8009c36:	4421      	add	r1, r4
 8009c38:	1854      	adds	r4, r2, r1
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	6011      	str	r1, [r2, #0]
 8009c3e:	d1dd      	bne.n	8009bfc <_free_r+0x28>
 8009c40:	681c      	ldr	r4, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	6053      	str	r3, [r2, #4]
 8009c46:	4421      	add	r1, r4
 8009c48:	6011      	str	r1, [r2, #0]
 8009c4a:	e7d7      	b.n	8009bfc <_free_r+0x28>
 8009c4c:	d902      	bls.n	8009c54 <_free_r+0x80>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	6003      	str	r3, [r0, #0]
 8009c52:	e7d3      	b.n	8009bfc <_free_r+0x28>
 8009c54:	6825      	ldr	r5, [r4, #0]
 8009c56:	1961      	adds	r1, r4, r5
 8009c58:	428b      	cmp	r3, r1
 8009c5a:	bf04      	itt	eq
 8009c5c:	6819      	ldreq	r1, [r3, #0]
 8009c5e:	685b      	ldreq	r3, [r3, #4]
 8009c60:	6063      	str	r3, [r4, #4]
 8009c62:	bf04      	itt	eq
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	6054      	str	r4, [r2, #4]
 8009c6a:	e7c7      	b.n	8009bfc <_free_r+0x28>
 8009c6c:	b003      	add	sp, #12
 8009c6e:	bd30      	pop	{r4, r5, pc}
 8009c70:	20000330 	.word	0x20000330

08009c74 <_malloc_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	1ccd      	adds	r5, r1, #3
 8009c78:	f025 0503 	bic.w	r5, r5, #3
 8009c7c:	3508      	adds	r5, #8
 8009c7e:	2d0c      	cmp	r5, #12
 8009c80:	bf38      	it	cc
 8009c82:	250c      	movcc	r5, #12
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	4606      	mov	r6, r0
 8009c88:	db01      	blt.n	8009c8e <_malloc_r+0x1a>
 8009c8a:	42a9      	cmp	r1, r5
 8009c8c:	d903      	bls.n	8009c96 <_malloc_r+0x22>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	6033      	str	r3, [r6, #0]
 8009c92:	2000      	movs	r0, #0
 8009c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c96:	f000 f87d 	bl	8009d94 <__malloc_lock>
 8009c9a:	4921      	ldr	r1, [pc, #132]	; (8009d20 <_malloc_r+0xac>)
 8009c9c:	680a      	ldr	r2, [r1, #0]
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	b99c      	cbnz	r4, 8009cca <_malloc_r+0x56>
 8009ca2:	4f20      	ldr	r7, [pc, #128]	; (8009d24 <_malloc_r+0xb0>)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	b923      	cbnz	r3, 8009cb2 <_malloc_r+0x3e>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4630      	mov	r0, r6
 8009cac:	f000 f862 	bl	8009d74 <_sbrk_r>
 8009cb0:	6038      	str	r0, [r7, #0]
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f000 f85d 	bl	8009d74 <_sbrk_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	d123      	bne.n	8009d06 <_malloc_r+0x92>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	6033      	str	r3, [r6, #0]
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f000 f86c 	bl	8009da0 <__malloc_unlock>
 8009cc8:	e7e3      	b.n	8009c92 <_malloc_r+0x1e>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	1b5b      	subs	r3, r3, r5
 8009cce:	d417      	bmi.n	8009d00 <_malloc_r+0x8c>
 8009cd0:	2b0b      	cmp	r3, #11
 8009cd2:	d903      	bls.n	8009cdc <_malloc_r+0x68>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	441c      	add	r4, r3
 8009cd8:	6025      	str	r5, [r4, #0]
 8009cda:	e004      	b.n	8009ce6 <_malloc_r+0x72>
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	42a2      	cmp	r2, r4
 8009ce0:	bf0c      	ite	eq
 8009ce2:	600b      	streq	r3, [r1, #0]
 8009ce4:	6053      	strne	r3, [r2, #4]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f85a 	bl	8009da0 <__malloc_unlock>
 8009cec:	f104 000b 	add.w	r0, r4, #11
 8009cf0:	1d23      	adds	r3, r4, #4
 8009cf2:	f020 0007 	bic.w	r0, r0, #7
 8009cf6:	1ac2      	subs	r2, r0, r3
 8009cf8:	d0cc      	beq.n	8009c94 <_malloc_r+0x20>
 8009cfa:	1a1b      	subs	r3, r3, r0
 8009cfc:	50a3      	str	r3, [r4, r2]
 8009cfe:	e7c9      	b.n	8009c94 <_malloc_r+0x20>
 8009d00:	4622      	mov	r2, r4
 8009d02:	6864      	ldr	r4, [r4, #4]
 8009d04:	e7cc      	b.n	8009ca0 <_malloc_r+0x2c>
 8009d06:	1cc4      	adds	r4, r0, #3
 8009d08:	f024 0403 	bic.w	r4, r4, #3
 8009d0c:	42a0      	cmp	r0, r4
 8009d0e:	d0e3      	beq.n	8009cd8 <_malloc_r+0x64>
 8009d10:	1a21      	subs	r1, r4, r0
 8009d12:	4630      	mov	r0, r6
 8009d14:	f000 f82e 	bl	8009d74 <_sbrk_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d1dd      	bne.n	8009cd8 <_malloc_r+0x64>
 8009d1c:	e7cf      	b.n	8009cbe <_malloc_r+0x4a>
 8009d1e:	bf00      	nop
 8009d20:	20000330 	.word	0x20000330
 8009d24:	20000334 	.word	0x20000334

08009d28 <_realloc_r>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	460e      	mov	r6, r1
 8009d30:	b921      	cbnz	r1, 8009d3c <_realloc_r+0x14>
 8009d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d36:	4611      	mov	r1, r2
 8009d38:	f7ff bf9c 	b.w	8009c74 <_malloc_r>
 8009d3c:	b922      	cbnz	r2, 8009d48 <_realloc_r+0x20>
 8009d3e:	f7ff ff49 	bl	8009bd4 <_free_r>
 8009d42:	4625      	mov	r5, r4
 8009d44:	4628      	mov	r0, r5
 8009d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d48:	f000 f830 	bl	8009dac <_malloc_usable_size_r>
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d20f      	bcs.n	8009d70 <_realloc_r+0x48>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4638      	mov	r0, r7
 8009d54:	f7ff ff8e 	bl	8009c74 <_malloc_r>
 8009d58:	4605      	mov	r5, r0
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0f2      	beq.n	8009d44 <_realloc_r+0x1c>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4622      	mov	r2, r4
 8009d62:	f7ff ff0f 	bl	8009b84 <memcpy>
 8009d66:	4631      	mov	r1, r6
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff ff33 	bl	8009bd4 <_free_r>
 8009d6e:	e7e9      	b.n	8009d44 <_realloc_r+0x1c>
 8009d70:	4635      	mov	r5, r6
 8009d72:	e7e7      	b.n	8009d44 <_realloc_r+0x1c>

08009d74 <_sbrk_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d06      	ldr	r5, [pc, #24]	; (8009d90 <_sbrk_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	f7f6 ffd2 	bl	8000d28 <_sbrk>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_sbrk_r+0x1a>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_sbrk_r+0x1a>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200004cc 	.word	0x200004cc

08009d94 <__malloc_lock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	; (8009d9c <__malloc_lock+0x8>)
 8009d96:	f000 b811 	b.w	8009dbc <__retarget_lock_acquire_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	200004d4 	.word	0x200004d4

08009da0 <__malloc_unlock>:
 8009da0:	4801      	ldr	r0, [pc, #4]	; (8009da8 <__malloc_unlock+0x8>)
 8009da2:	f000 b80c 	b.w	8009dbe <__retarget_lock_release_recursive>
 8009da6:	bf00      	nop
 8009da8:	200004d4 	.word	0x200004d4

08009dac <_malloc_usable_size_r>:
 8009dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db0:	1f18      	subs	r0, r3, #4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfbc      	itt	lt
 8009db6:	580b      	ldrlt	r3, [r1, r0]
 8009db8:	18c0      	addlt	r0, r0, r3
 8009dba:	4770      	bx	lr

08009dbc <__retarget_lock_acquire_recursive>:
 8009dbc:	4770      	bx	lr

08009dbe <__retarget_lock_release_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr


test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092cc  080092cc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d4  080092d4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080092dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000164  08009440  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08009440  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033016  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd4  00000000  00000000  000531aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  00056d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002300  00000000  00000000  000591d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282db  00000000  00000000  0005b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb3f  00000000  00000000  000837b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76c2  00000000  00000000  0009f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001969b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c4c  00000000  00000000  00196a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800926c 	.word	0x0800926c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800926c 	.word	0x0800926c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f005 fc86 	bl	8005dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f83a 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8ba 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f888 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 80004d4:	2101      	movs	r1, #1
 80004d6:	2000      	movs	r0, #0
 80004d8:	f005 f8f6 	bl	80056c8 <IKS01A2_MOTION_SENSOR_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d103      	bne.n	80004ea <main+0x2a>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80004e2:	2101      	movs	r1, #1
 80004e4:	2000      	movs	r0, #0
 80004e6:	f005 f9eb 	bl	80058c0 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_ACCELERO)==HAL_OK){
 80004ea:	2102      	movs	r1, #2
 80004ec:	2000      	movs	r0, #0
 80004ee:	f005 f8eb 	bl	80056c8 <IKS01A2_MOTION_SENSOR_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <main+0x40>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_ACCELERO);
 80004f8:	2102      	movs	r1, #2
 80004fa:	2000      	movs	r0, #0
 80004fc:	f005 f9e0 	bl	80058c0 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 8000500:	2101      	movs	r1, #1
 8000502:	2000      	movs	r0, #0
 8000504:	f004 fe24 	bl	8005150 <IKS01A2_ENV_SENSOR_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d103      	bne.n	8000516 <main+0x56>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 800050e:	2101      	movs	r1, #1
 8000510:	2000      	movs	r0, #0
 8000512:	f004 fedd 	bl	80052d0 <IKS01A2_ENV_SENSOR_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x78>)
 8000518:	2101      	movs	r1, #1
 800051a:	2000      	movs	r0, #0
 800051c:	f004 ff1a 	bl	8005354 <IKS01A2_ENV_SENSOR_GetValue>
	  HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f005 fccb 	bl	8005ebc <HAL_Delay>
	  IKS01A2_MOTION_SENSOR_GetAxes(1,MOTION_ACCELERO, &data_axe);
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x7c>)
 8000528:	2102      	movs	r1, #2
 800052a:	2001      	movs	r0, #1
 800052c:	f005 fa0a 	bl	8005944 <IKS01A2_MOTION_SENSOR_GetAxes>
	  HAL_Delay(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f005 fcc3 	bl	8005ebc <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 8000536:	e7ee      	b.n	8000516 <main+0x56>
 8000538:	200002c8 	.word	0x200002c8
 800053c:	200002d0 	.word	0x200002d0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fe84 	bl	800925c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f006 fecf 	bl	8007308 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f8c2 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 ff06 	bl	80073b4 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f8a3 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 fad8 	bl	8007b80 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f88f 	bl	80006f8 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f008 f96c 	bl	8008904 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f861 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002dc 	.word	0x200002dc
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xac>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xac>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xac>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f005 ffaf 	bl	800660c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0xb0>)
 80006c6:	f005 fd03 	bl	80060d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ca:	2320      	movs	r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f005 fcf4 	bl	80060d0 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6593      	str	r3, [r2, #88]	; 0x58
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0ac      	sub	sp, #176	; 0xb0
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2288      	movs	r2, #136	; 0x88
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f008 fd75 	bl	800925c <memset>
  if(huart->Instance==USART2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <HAL_UART_MspInit+0xb0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d13b      	bne.n	80007f4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000780:	2300      	movs	r3, #0
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4618      	mov	r0, r3
 800078a:	f007 fbff 	bl	8007f8c <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000794:	f7ff ffb0 	bl	80006f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_UART_MspInit+0xb4>)
 800079a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079c:	4a18      	ldr	r2, [pc, #96]	; (8000800 <HAL_UART_MspInit+0xb4>)
 800079e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a2:	6593      	str	r3, [r2, #88]	; 0x58
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_MspInit+0xb4>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c8:	230c      	movs	r3, #12
 80007ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f005 fc6e 	bl	80060d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	37b0      	adds	r7, #176	; 0xb0
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40004400 	.word	0x40004400
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f005 fb14 	bl	8005e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <BSP_I2C1_Init+0x70>)
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <BSP_I2C1_Init+0x74>)
 8000866:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <BSP_I2C1_Init+0x78>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	4918      	ldr	r1, [pc, #96]	; (80008d0 <BSP_I2C1_Init+0x78>)
 8000870:	600a      	str	r2, [r1, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d122      	bne.n	80008bc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <BSP_I2C1_Init+0x70>)
 8000878:	f006 f9e0 	bl	8006c3c <HAL_I2C_GetState>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d11c      	bne.n	80008bc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <BSP_I2C1_Init+0x70>)
 8000884:	f000 f8fe 	bl	8000a84 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d116      	bne.n	80008bc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <BSP_I2C1_Init+0x70>)
 8000890:	f000 f8b4 	bl	80009fc <MX_I2C1_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d003      	beq.n	80008a2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800089a:	f06f 0307 	mvn.w	r3, #7
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	e00c      	b.n	80008bc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <BSP_I2C1_Init+0x70>)
 80008a6:	f006 fc89 	bl	80071bc <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80008b0:	f06f 0307 	mvn.w	r3, #7
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e001      	b.n	80008bc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000360 	.word	0x20000360
 80008cc:	40005400 	.word	0x40005400
 80008d0:	20000180 	.word	0x20000180

080008d4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <BSP_I2C1_DeInit+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <BSP_I2C1_DeInit+0x48>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <BSP_I2C1_DeInit+0x48>)
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <BSP_I2C1_DeInit+0x48>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10b      	bne.n	8000910 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <BSP_I2C1_DeInit+0x4c>)
 80008fa:	f000 f909 	bl	8000b10 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <BSP_I2C1_DeInit+0x4c>)
 8000900:	f005 ff2b 	bl	800675a <HAL_I2C_DeInit>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800090a:	f06f 0307 	mvn.w	r3, #7
 800090e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000180 	.word	0x20000180
 8000920:	20000360 	.word	0x20000360

08000924 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af04      	add	r7, sp, #16
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	461a      	mov	r2, r3
 800092e:	4603      	mov	r3, r0
 8000930:	81fb      	strh	r3, [r7, #14]
 8000932:	460b      	mov	r3, r1
 8000934:	81bb      	strh	r3, [r7, #12]
 8000936:	4613      	mov	r3, r2
 8000938:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800093e:	89ba      	ldrh	r2, [r7, #12]
 8000940:	89f9      	ldrh	r1, [r7, #14]
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <BSP_I2C1_WriteReg+0x60>)
 8000954:	f005 ff44 	bl	80067e0 <HAL_I2C_Mem_Write>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00c      	beq.n	8000978 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <BSP_I2C1_WriteReg+0x60>)
 8000960:	f006 f97a 	bl	8006c58 <HAL_I2C_GetError>
 8000964:	4603      	mov	r3, r0
 8000966:	2b04      	cmp	r3, #4
 8000968:	d103      	bne.n	8000972 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800096a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e002      	b.n	8000978 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000972:	f06f 0303 	mvn.w	r3, #3
 8000976:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000978:	697b      	ldr	r3, [r7, #20]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000360 	.word	0x20000360

08000988 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af04      	add	r7, sp, #16
 800098e:	60ba      	str	r2, [r7, #8]
 8000990:	461a      	mov	r2, r3
 8000992:	4603      	mov	r3, r0
 8000994:	81fb      	strh	r3, [r7, #14]
 8000996:	460b      	mov	r3, r1
 8000998:	81bb      	strh	r3, [r7, #12]
 800099a:	4613      	mov	r3, r2
 800099c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80009a2:	89ba      	ldrh	r2, [r7, #12]
 80009a4:	89f9      	ldrh	r1, [r7, #14]
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <BSP_I2C1_ReadReg+0x60>)
 80009b8:	f006 f826 	bl	8006a08 <HAL_I2C_Mem_Read>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00c      	beq.n	80009dc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <BSP_I2C1_ReadReg+0x60>)
 80009c4:	f006 f948 	bl	8006c58 <HAL_I2C_GetError>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d103      	bne.n	80009d6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80009ce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e002      	b.n	80009dc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80009d6:	f06f 0303 	mvn.w	r3, #3
 80009da:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80009dc:	697b      	ldr	r3, [r7, #20]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000360 	.word	0x20000360

080009ec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80009f0:	f005 fa58 	bl	8005ea4 <HAL_GetTick>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_I2C1_Init+0x80>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x84>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f005 fdfc 	bl	800663c <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f006 fbb3 	bl	80071bc <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f006 fbf5 	bl	8007252 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	10909cec 	.word	0x10909cec

08000a84 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <I2C1_MspInit+0x84>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <I2C1_MspInit+0x84>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <I2C1_MspInit+0x84>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <I2C1_MspInit+0x88>)
 8000ac2:	f005 fb05 	bl	80060d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480a      	ldr	r0, [pc, #40]	; (8000b0c <I2C1_MspInit+0x88>)
 8000ae4:	f005 faf4 	bl	80060d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <I2C1_MspInit+0x84>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <I2C1_MspInit+0x84>)
 8000aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af2:	6593      	str	r3, [r2, #88]	; 0x58
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <I2C1_MspInit+0x84>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400

08000b10 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <I2C1_MspDeInit+0x30>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <I2C1_MspDeInit+0x30>)
 8000b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b22:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <I2C1_MspDeInit+0x34>)
 8000b2a:	f005 fc7b 	bl	8006424 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <I2C1_MspDeInit+0x34>)
 8000b34:	f005 fc76 	bl	8006424 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f008 fb3b 	bl	8009214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fc8f 	bl	80004c0 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000bb0:	080092dc 	.word	0x080092dc
  ldr r2, =_sbss
 8000bb4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000bb8:	200003c4 	.word	0x200003c4

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d103      	bne.n	8000bd8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e030      	b.n	8000c3a <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	7b1a      	ldrb	r2, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	691a      	ldr	r2, [r3, #16]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HTS221_RegisterBusIO+0x84>)
 8000c14:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HTS221_RegisterBusIO+0x88>)
 8000c1a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4798      	blx	r3
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	e002      	b.n	8000c3a <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
 8000c38:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08001277 	.word	0x08001277
 8000c48:	080012d9 	.word	0x080012d9

08000c4c <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d108      	bne.n	8000c70 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 faa4 	bl	80011ac <HTS221_Initialize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e004      	b.n	8000c7a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d111      	bne.n	8000cb8 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f878 	bl	8000d8a <HTS221_HUM_Disable>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	e00d      	b.n	8000cc2 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f95f 	bl	8000f6a <HTS221_TEMP_Disable>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e004      	b.n	8000cc2 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	331c      	adds	r3, #28
 8000cd8:	6839      	ldr	r1, [r7, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fc28 	bl	8001530 <hts221_device_id_get>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e000      	b.n	8000cee <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HTS221_GetCapabilities+0x44>)
 8000d1e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HTS221_GetCapabilities+0x44>)
 8000d24:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	41480000 	.word	0x41480000

08000d40 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e015      	b.n	8000d82 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10b      	bne.n	8000d78 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	331c      	adds	r3, #28
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fbf3 	bl	8001552 <hts221_power_on_set>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e004      	b.n	8000d82 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e015      	b.n	8000dcc <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10b      	bne.n	8000dc2 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	331c      	adds	r3, #28
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fbce 	bl	8001552 <hts221_power_on_set>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	e004      	b.n	8000dcc <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8000dde:	6839      	ldr	r1, [r7, #0]
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f96f 	bl	80010c4 <HTS221_GetOutputDataRate>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8000dfc:	ed97 0a00 	vldr	s0, [r7]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f9a3 	bl	800114c <HTS221_SetOutputDataRate>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	331c      	adds	r3, #28
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fc58 	bl	80016da <hts221_hum_adc_point_0_get>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	e06b      	b.n	8000f0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f103 021c 	add.w	r2, r3, #28
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	3304      	adds	r3, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4610      	mov	r0, r2
 8000e46:	f000 fbaa 	bl	800159e <hts221_hum_rh_point_0_get>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e05b      	b.n	8000f0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f103 021c 	add.w	r2, r3, #28
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	3308      	adds	r3, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4610      	mov	r0, r2
 8000e66:	f000 fc5c 	bl	8001722 <hts221_hum_adc_point_1_get>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	e04b      	b.n	8000f0e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 021c 	add.w	r2, r3, #28
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	330c      	adds	r3, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	4610      	mov	r0, r2
 8000e86:	f000 fba8 	bl	80015da <hts221_hum_rh_point_1_get>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	e03b      	b.n	8000f0e <HTS221_HUM_GetHumidity+0xfe>
 8000e96:	2300      	movs	r3, #0
 8000e98:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	331c      	adds	r3, #28
 8000e9e:	f107 021c 	add.w	r2, r7, #28
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fafd 	bl	80014a4 <hts221_humidity_raw_get>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	e02b      	b.n	8000f0e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8000eb6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f99a 	bl	8001204 <Linear_Interpolation>
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d503      	bpl.n	8000ef2 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	edd3 7a00 	vldr	s15, [r3]
 8000ef8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f18 <HTS221_HUM_GetHumidity+0x108>
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	dd02      	ble.n	8000f0c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HTS221_HUM_GetHumidity+0x10c>)
 8000f0a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	42c80000 	.word	0x42c80000
 8000f1c:	42c80000 	.word	0x42c80000

08000f20 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e015      	b.n	8000f62 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10b      	bne.n	8000f58 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	331c      	adds	r3, #28
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fb03 	bl	8001552 <hts221_power_on_set>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e004      	b.n	8000f62 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e015      	b.n	8000fac <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10b      	bne.n	8000fa2 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	331c      	adds	r3, #28
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fade 	bl	8001552 <hts221_power_on_set>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	e004      	b.n	8000fac <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f87f 	bl	80010c4 <HTS221_GetOutputDataRate>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8000fdc:	ed97 0a00 	vldr	s0, [r7]
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f8b3 	bl	800114c <HTS221_SetOutputDataRate>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	331c      	adds	r3, #28
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fbb0 	bl	800176a <hts221_temp_adc_point_0_get>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	e052      	b.n	80010bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f103 021c 	add.w	r2, r3, #28
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	3304      	adds	r3, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f000 faf6 	bl	8001616 <hts221_temp_deg_point_0_get>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	e042      	b.n	80010bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 021c 	add.w	r2, r3, #28
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	3308      	adds	r3, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f000 fbb4 	bl	80017b2 <hts221_temp_adc_point_1_get>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e032      	b.n	80010bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f103 021c 	add.w	r2, r3, #28
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	330c      	adds	r3, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f000 fb07 	bl	8001678 <hts221_temp_deg_point_1_get>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	e022      	b.n	80010bc <HTS221_TEMP_GetTemperature+0xcc>
 8001076:	2300      	movs	r3, #0
 8001078:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	331c      	adds	r3, #28
 800107e:	f107 021c 	add.w	r2, r7, #28
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fa30 	bl	80014ea <hts221_temperature_raw_get>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	e012      	b.n	80010bc <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001096:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f8aa 	bl	8001204 <Linear_Interpolation>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	331c      	adds	r3, #28
 80010d6:	f107 020b 	add.w	r2, r7, #11
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f983 	bl	80013e8 <hts221_data_rate_get>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	e025      	b.n	800113a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d81d      	bhi.n	8001130 <HTS221_GetOutputDataRate+0x6c>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HTS221_GetOutputDataRate+0x38>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001117 	.word	0x08001117
 8001104:	08001121 	.word	0x08001121
 8001108:	08001129 	.word	0x08001129
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
      break;
 8001114:	e010      	b.n	8001138 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800111c:	601a      	str	r2, [r3, #0]
      break;
 800111e:	e00b      	b.n	8001138 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HTS221_GetOutputDataRate+0x80>)
 8001124:	601a      	str	r2, [r3, #0]
      break;
 8001126:	e007      	b.n	8001138 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HTS221_GetOutputDataRate+0x84>)
 800112c:	601a      	str	r2, [r3, #0]
      break;
 800112e:	e003      	b.n	8001138 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	60fb      	str	r3, [r7, #12]
      break;
 8001136:	bf00      	nop
  }

  return ret;
 8001138:	68fb      	ldr	r3, [r7, #12]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40e00000 	.word	0x40e00000
 8001148:	41480000 	.word	0x41480000

0800114c <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001158:	edd7 7a00 	vldr	s15, [r7]
 800115c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	d801      	bhi.n	800116e <HTS221_SetOutputDataRate+0x22>
 800116a:	2301      	movs	r3, #1
 800116c:	e00b      	b.n	8001186 <HTS221_SetOutputDataRate+0x3a>
 800116e:	edd7 7a00 	vldr	s15, [r7]
 8001172:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d801      	bhi.n	8001184 <HTS221_SetOutputDataRate+0x38>
 8001180:	2302      	movs	r3, #2
 8001182:	e000      	b.n	8001186 <HTS221_SetOutputDataRate+0x3a>
 8001184:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001186:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	331c      	adds	r3, #28
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f902 	bl	800139a <hts221_data_rate_set>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	e000      	b.n	80011a4 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	331c      	adds	r3, #28
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f9c9 	bl	8001552 <hts221_power_on_set>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e017      	b.n	80011fc <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	331c      	adds	r3, #28
 80011d0:	2101      	movs	r1, #1
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f940 	bl	8001458 <hts221_block_data_update_set>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e00b      	b.n	80011fc <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80011e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffaf 	bl	800114c <HTS221_SetOutputDataRate>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	e000      	b.n	80011fc <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	ed93 7a03 	vldr	s14, [r3, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 7a01 	vldr	s15, [r3, #4]
 800121c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001220:	edd7 7a00 	vldr	s15, [r7]
 8001224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edd3 6a02 	vldr	s13, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	edd3 7a01 	vldr	s15, [r3, #4]
 8001234:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	ed93 6a00 	vldr	s12, [r3]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a03 	vldr	s15, [r3, #12]
 8001244:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001248:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800124c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edd3 6a02 	vldr	s13, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001260:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001264:	eef0 7a66 	vmov.f32	s15, s13
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	460b      	mov	r3, r1
 8001284:	72fb      	strb	r3, [r7, #11]
 8001286:	4613      	mov	r3, r2
 8001288:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10e      	bne.n	80012b4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	695c      	ldr	r4, [r3, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	7b1b      	ldrb	r3, [r3, #12]
 800129e:	b298      	uxth	r0, r3
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b299      	uxth	r1, r3
 80012aa:	893b      	ldrh	r3, [r7, #8]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	47a0      	blx	r4
 80012b0:	4603      	mov	r3, r0
 80012b2:	e00d      	b.n	80012d0 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	695c      	ldr	r4, [r3, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	7b1b      	ldrb	r3, [r3, #12]
 80012bc:	b298      	uxth	r0, r3
 80012be:	7afb      	ldrb	r3, [r7, #11]
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b299      	uxth	r1, r3
 80012c8:	893b      	ldrh	r3, [r7, #8]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	47a0      	blx	r4
 80012ce:	4603      	mov	r3, r0
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}

080012d8 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	72fb      	strb	r3, [r7, #11]
 80012e8:	4613      	mov	r3, r2
 80012ea:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10e      	bne.n	8001316 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	691c      	ldr	r4, [r3, #16]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	7b1b      	ldrb	r3, [r3, #12]
 8001300:	b298      	uxth	r0, r3
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001308:	b2db      	uxtb	r3, r3
 800130a:	b299      	uxth	r1, r3
 800130c:	893b      	ldrh	r3, [r7, #8]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	47a0      	blx	r4
 8001312:	4603      	mov	r3, r0
 8001314:	e00d      	b.n	8001332 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	691c      	ldr	r4, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	7b1b      	ldrb	r3, [r3, #12]
 800131e:	b298      	uxth	r0, r3
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b299      	uxth	r1, r3
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	47a0      	blx	r4
 8001330:	4603      	mov	r3, r0
  }
}
 8001332:	4618      	mov	r0, r3
 8001334:	371c      	adds	r7, #28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd90      	pop	{r4, r7, pc}

0800133a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800133a:	b590      	push	{r4, r7, lr}
 800133c:	b087      	sub	sp, #28
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	461a      	mov	r2, r3
 8001346:	460b      	mov	r3, r1
 8001348:	72fb      	strb	r3, [r7, #11]
 800134a:	4613      	mov	r3, r2
 800134c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685c      	ldr	r4, [r3, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6898      	ldr	r0, [r3, #8]
 8001356:	893b      	ldrh	r3, [r7, #8]
 8001358:	7af9      	ldrb	r1, [r7, #11]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	47a0      	blx	r4
 800135e:	6178      	str	r0, [r7, #20]
  return ret;
 8001360:	697b      	ldr	r3, [r7, #20]
}
 8001362:	4618      	mov	r0, r3
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}

0800136a <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	461a      	mov	r2, r3
 8001376:	460b      	mov	r3, r1
 8001378:	72fb      	strb	r3, [r7, #11]
 800137a:	4613      	mov	r3, r2
 800137c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681c      	ldr	r4, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6898      	ldr	r0, [r3, #8]
 8001386:	893b      	ldrh	r3, [r7, #8]
 8001388:	7af9      	ldrb	r1, [r7, #11]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	47a0      	blx	r4
 800138e:	6178      	str	r0, [r7, #20]
  return ret;
 8001390:	697b      	ldr	r3, [r7, #20]
}
 8001392:	4618      	mov	r0, r3
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}

0800139a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80013a6:	f107 0208 	add.w	r2, r7, #8
 80013aa:	2301      	movs	r3, #1
 80013ac:	2120      	movs	r1, #32
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffc3 	bl	800133a <hts221_read_reg>
 80013b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	f362 0301 	bfi	r3, r2, #0, #2
 80013ca:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80013cc:	f107 0208 	add.w	r2, r7, #8
 80013d0:	2301      	movs	r3, #1
 80013d2:	2120      	movs	r1, #32
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffc8 	bl	800136a <hts221_write_reg>
 80013da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013dc:	68fb      	ldr	r3, [r7, #12]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	2301      	movs	r3, #1
 80013f8:	2120      	movs	r1, #32
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ff9d 	bl	800133a <hts221_read_reg>
 8001400:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8001402:	7a3b      	ldrb	r3, [r7, #8]
 8001404:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b03      	cmp	r3, #3
 800140c:	d81a      	bhi.n	8001444 <hts221_data_rate_get+0x5c>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <hts221_data_rate_get+0x2c>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001425 	.word	0x08001425
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001435 	.word	0x08001435
 8001420:	0800143d 	.word	0x0800143d
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
      break;
 800142a:	e00f      	b.n	800144c <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
      break;
 8001432:	e00b      	b.n	800144c <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
      break;
 800143a:	e007      	b.n	800144c <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2203      	movs	r2, #3
 8001440:	701a      	strb	r2, [r3, #0]
      break;
 8001442:	e003      	b.n	800144c <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	701a      	strb	r2, [r3, #0]
      break;
 800144a:	bf00      	nop
  }

  return ret;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001464:	f107 0208 	add.w	r2, r7, #8
 8001468:	2301      	movs	r3, #1
 800146a:	2120      	movs	r1, #32
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff64 	bl	800133a <hts221_read_reg>
 8001472:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	7a3b      	ldrb	r3, [r7, #8]
 8001484:	f362 0382 	bfi	r3, r2, #2, #1
 8001488:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800148a:	f107 0208 	add.w	r2, r7, #8
 800148e:	2301      	movs	r3, #1
 8001490:	2120      	movs	r1, #32
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff69 	bl	800136a <hts221_write_reg>
 8001498:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	2302      	movs	r3, #2
 80014b4:	2128      	movs	r1, #40	; 0x28
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff3f 	bl	800133a <hts221_read_reg>
 80014bc:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80014be:	7a7b      	ldrb	r3, [r7, #9]
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	7a3b      	ldrb	r3, [r7, #8]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	801a      	strh	r2, [r3, #0]
  return ret;
 80014e0:	68fb      	ldr	r3, [r7, #12]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80014f4:	f107 0208 	add.w	r2, r7, #8
 80014f8:	2302      	movs	r3, #2
 80014fa:	212a      	movs	r1, #42	; 0x2a
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff1c 	bl	800133a <hts221_read_reg>
 8001502:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001504:	7a7b      	ldrb	r3, [r7, #9]
 8001506:	b21a      	sxth	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b29b      	uxth	r3, r3
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b29a      	uxth	r2, r3
 8001518:	7a3b      	ldrb	r3, [r7, #8]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	b21a      	sxth	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	801a      	strh	r2, [r3, #0]
  return ret;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800153a:	2301      	movs	r3, #1
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	210f      	movs	r1, #15
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fefa 	bl	800133a <hts221_read_reg>
 8001546:	60f8      	str	r0, [r7, #12]
  return ret;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	2301      	movs	r3, #1
 8001564:	2120      	movs	r1, #32
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fee7 	bl	800133a <hts221_read_reg>
 800156c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <hts221_power_on_set+0x42>
    reg.pd = val;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	7a3b      	ldrb	r3, [r7, #8]
 800157e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001582:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001584:	f107 0208 	add.w	r2, r7, #8
 8001588:	2301      	movs	r3, #1
 800158a:	2120      	movs	r1, #32
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff feec 	bl	800136a <hts221_write_reg>
 8001592:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80015a8:	f107 020b 	add.w	r2, r7, #11
 80015ac:	2301      	movs	r3, #1
 80015ae:	2130      	movs	r1, #48	; 0x30
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fec2 	bl	800133a <hts221_read_reg>
 80015b6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80015e4:	f107 020b 	add.w	r2, r7, #11
 80015e8:	2301      	movs	r3, #1
 80015ea:	2131      	movs	r1, #49	; 0x31
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fea4 	bl	800133a <hts221_read_reg>
 80015f2:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80015f4:	7afb      	ldrb	r3, [r7, #11]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001620:	f107 020f 	add.w	r2, r7, #15
 8001624:	2301      	movs	r3, #1
 8001626:	2132      	movs	r1, #50	; 0x32
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fe86 	bl	800133a <hts221_read_reg>
 800162e:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d11b      	bne.n	800166e <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001636:	f107 0210 	add.w	r2, r7, #16
 800163a:	2301      	movs	r3, #1
 800163c:	2135      	movs	r1, #53	; 0x35
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fe7b 	bl	800133a <hts221_read_reg>
 8001644:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001646:	7c3b      	ldrb	r3, [r7, #16]
 8001648:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	4413      	add	r3, r2
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800166e:	697b      	ldr	r3, [r7, #20]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001682:	f107 020f 	add.w	r2, r7, #15
 8001686:	2301      	movs	r3, #1
 8001688:	2133      	movs	r1, #51	; 0x33
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe55 	bl	800133a <hts221_read_reg>
 8001690:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d11b      	bne.n	80016d0 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001698:	f107 0210 	add.w	r2, r7, #16
 800169c:	2301      	movs	r3, #1
 800169e:	2135      	movs	r1, #53	; 0x35
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe4a 	bl	800133a <hts221_read_reg>
 80016a6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80016a8:	7c3b      	ldrb	r3, [r7, #16]
 80016aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	4413      	add	r3, r2
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80016c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80016d0:	697b      	ldr	r3, [r7, #20]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80016e4:	f107 0208 	add.w	r2, r7, #8
 80016e8:	2302      	movs	r3, #2
 80016ea:	2136      	movs	r1, #54	; 0x36
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe24 	bl	800133a <hts221_read_reg>
 80016f2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80016f4:	7a7b      	ldrb	r3, [r7, #9]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	7a3b      	ldrb	r3, [r7, #8]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001718:	68fb      	ldr	r3, [r7, #12]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	2302      	movs	r3, #2
 8001732:	213a      	movs	r1, #58	; 0x3a
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe00 	bl	800133a <hts221_read_reg>
 800173a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800173c:	7a7b      	ldrb	r3, [r7, #9]
 800173e:	b29b      	uxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b29a      	uxth	r2, r3
 8001744:	7a3b      	ldrb	r3, [r7, #8]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800174e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2302      	movs	r3, #2
 800177a:	213c      	movs	r1, #60	; 0x3c
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fddc 	bl	800133a <hts221_read_reg>
 8001782:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001784:	7a7b      	ldrb	r3, [r7, #9]
 8001786:	b29b      	uxth	r3, r3
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29a      	uxth	r2, r3
 800178c:	7a3b      	ldrb	r3, [r7, #8]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001796:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80017bc:	f107 0208 	add.w	r2, r7, #8
 80017c0:	2302      	movs	r3, #2
 80017c2:	213e      	movs	r1, #62	; 0x3e
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fdb8 	bl	800133a <hts221_read_reg>
 80017ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80017cc:	7a7b      	ldrb	r3, [r7, #9]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	7a3b      	ldrb	r3, [r7, #8]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80017de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d103      	bne.n	8001818 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e04d      	b.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7b1a      	ldrb	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <LPS22HB_RegisterBusIO+0xc4>)
 8001854:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1a      	ldr	r2, [pc, #104]	; (80018c4 <LPS22HB_RegisterBusIO+0xc8>)
 800185a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e020      	b.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4798      	blx	r3
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e016      	b.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d112      	bne.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001898:	2301      	movs	r3, #1
 800189a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	461a      	mov	r2, r3
 80018a0:	2110      	movs	r1, #16
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9df 	bl	8001c66 <LPS22HB_Write_Reg>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80018b4:	68fb      	ldr	r3, [r7, #12]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	08001f27 	.word	0x08001f27
 80018c4:	08001fad 	.word	0x08001fad

080018c8 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d108      	bne.n	80018ec <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 faca 	bl	8001e74 <LPS22HB_Initialize>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e004      	b.n	80018f6 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800190c:	2b01      	cmp	r3, #1
 800190e:	d111      	bne.n	8001934 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f877 	bl	8001a04 <LPS22HB_PRESS_Disable>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	e00d      	b.n	800193e <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f918 	bl	8001b58 <LPS22HB_TEMP_Disable>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e004      	b.n	800193e <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	331c      	adds	r3, #28
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fcd0 	bl	80022fc <lps22hb_device_id_get>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e000      	b.n	800196a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <LPS22HB_GetCapabilities+0x44>)
 80019a2:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <LPS22HB_GetCapabilities+0x44>)
 80019a8:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	42960000 	.word	0x42960000

080019bc <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e014      	b.n	80019fc <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f103 021c 	add.w	r2, r3, #28
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f000 fbd5 	bl	8002190 <lps22hb_data_rate_set>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	e004      	b.n	80019fc <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e024      	b.n	8001a64 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11a      	bne.n	8001a5a <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 021c 	add.w	r2, r3, #28
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	332b      	adds	r3, #43	; 0x2b
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f000 fbd3 	bl	80021dc <lps22hb_data_rate_get>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	e010      	b.n	8001a64 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	331c      	adds	r3, #28
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fba1 	bl	8002190 <lps22hb_data_rate_set>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	e004      	b.n	8001a64 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f90f 	bl	8001c9c <LPS22HB_GetOutputDataRate>
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001a9e:	ed97 0a00 	vldr	s0, [r7]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f94e 	bl	8001d44 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	e005      	b.n	8001ab8 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001aac:	ed97 0a00 	vldr	s0, [r7]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f99f 	bl	8001df4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001ab6:	4603      	mov	r3, r0
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2204      	movs	r2, #4
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f007 fbc2 	bl	800925c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	331c      	adds	r3, #28
 8001adc:	f107 020c 	add.w	r2, r7, #12
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fbbe 	bl	8002264 <lps22hb_pressure_raw_get>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 facc 	bl	8002094 <lps22hb_from_lsb_to_hpa>
 8001afc:	eef0 7a40 	vmov.f32	s15, s0
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e014      	b.n	8001b50 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f103 021c 	add.w	r2, r3, #28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f000 fb2b 	bl	8002190 <lps22hb_data_rate_set>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	e004      	b.n	8001b50 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e024      	b.n	8001bb8 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11a      	bne.n	8001bae <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 021c 	add.w	r2, r3, #28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	332b      	adds	r3, #43	; 0x2b
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f000 fb29 	bl	80021dc <lps22hb_data_rate_get>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	e010      	b.n	8001bb8 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	331c      	adds	r3, #28
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 faf7 	bl	8002190 <lps22hb_data_rate_set>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	e004      	b.n	8001bb8 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f865 	bl	8001c9c <LPS22HB_GetOutputDataRate>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d106      	bne.n	8001c00 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001bf2:	ed97 0a00 	vldr	s0, [r7]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8a4 	bl	8001d44 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	e005      	b.n	8001c0c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001c00:	ed97 0a00 	vldr	s0, [r7]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8f5 	bl	8001df4 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001c0a:	4603      	mov	r3, r0
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2202      	movs	r2, #2
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f007 fb18 	bl	800925c <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	331c      	adds	r3, #28
 8001c30:	f107 020c 	add.w	r2, r7, #12
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fb3d 	bl	80022b6 <lps22hb_temperature_raw_get>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e00a      	b.n	8001c5e <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8001c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fa39 	bl	80020c4 <lps22hb_from_lsb_to_degc>
 8001c52:	eef0 7a40 	vmov.f32	s15, s0
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
 8001c72:	4613      	mov	r3, r2
 8001c74:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f103 001c 	add.w	r0, r3, #28
 8001c7c:	1cba      	adds	r2, r7, #2
 8001c7e:	78f9      	ldrb	r1, [r7, #3]
 8001c80:	2301      	movs	r3, #1
 8001c82:	f000 f9ee 	bl	8002062 <lps22hb_write_reg>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	e000      	b.n	8001c94 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	331c      	adds	r3, #28
 8001cae:	f107 020b 	add.w	r2, r7, #11
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fa91 	bl	80021dc <lps22hb_data_rate_get>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e031      	b.n	8001d2a <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d829      	bhi.n	8001d20 <LPS22HB_GetOutputDataRate+0x84>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <LPS22HB_GetOutputDataRate+0x38>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001cf7 	.word	0x08001cf7
 8001cdc:	08001d01 	.word	0x08001d01
 8001ce0:	08001d09 	.word	0x08001d09
 8001ce4:	08001d11 	.word	0x08001d11
 8001ce8:	08001d19 	.word	0x08001d19
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
      break;
 8001cf4:	e018      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cfc:	601a      	str	r2, [r3, #0]
      break;
 8001cfe:	e013      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <LPS22HB_GetOutputDataRate+0x98>)
 8001d04:	601a      	str	r2, [r3, #0]
      break;
 8001d06:	e00f      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <LPS22HB_GetOutputDataRate+0x9c>)
 8001d0c:	601a      	str	r2, [r3, #0]
      break;
 8001d0e:	e00b      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LPS22HB_GetOutputDataRate+0xa0>)
 8001d14:	601a      	str	r2, [r3, #0]
      break;
 8001d16:	e007      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <LPS22HB_GetOutputDataRate+0xa4>)
 8001d1c:	601a      	str	r2, [r3, #0]
      break;
 8001d1e:	e003      	b.n	8001d28 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	60fb      	str	r3, [r7, #12]
      break;
 8001d26:	bf00      	nop
  }

  return ret;
 8001d28:	68fb      	ldr	r3, [r7, #12]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	41200000 	.word	0x41200000
 8001d38:	41c80000 	.word	0x41c80000
 8001d3c:	42480000 	.word	0x42480000
 8001d40:	42960000 	.word	0x42960000

08001d44 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001d50:	edd7 7a00 	vldr	s15, [r7]
 8001d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	d801      	bhi.n	8001d66 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e021      	b.n	8001daa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001d66:	edd7 7a00 	vldr	s15, [r7]
 8001d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	d801      	bhi.n	8001d7c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e016      	b.n	8001daa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001d7c:	edd7 7a00 	vldr	s15, [r7]
 8001d80:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d801      	bhi.n	8001d92 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e00b      	b.n	8001daa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001d92:	edd7 7a00 	vldr	s15, [r7]
 8001d96:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001df0 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d801      	bhi.n	8001da8 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8001da4:	2304      	movs	r3, #4
 8001da6:	e000      	b.n	8001daa <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001da8:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001daa:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	331c      	adds	r3, #28
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f9eb 	bl	8002190 <lps22hb_data_rate_set>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc4:	e00f      	b.n	8001de6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f103 021c 	add.w	r2, r3, #28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	332b      	adds	r3, #43	; 0x2b
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 fa02 	bl	80021dc <lps22hb_data_rate_get>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e000      	b.n	8001de6 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	42480000 	.word	0x42480000

08001df4 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001e00:	edd7 7a00 	vldr	s15, [r7]
 8001e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d801      	bhi.n	8001e16 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e021      	b.n	8001e5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001e16:	edd7 7a00 	vldr	s15, [r7]
 8001e1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d801      	bhi.n	8001e2c <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e016      	b.n	8001e5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001e2c:	edd7 7a00 	vldr	s15, [r7]
 8001e30:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d801      	bhi.n	8001e42 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e00b      	b.n	8001e5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001e42:	edd7 7a00 	vldr	s15, [r7]
 8001e46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001e70 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8001e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	d801      	bhi.n	8001e58 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e000      	b.n	8001e5a <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8001e58:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	42480000 	.word	0x42480000

08001e74 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	331c      	adds	r3, #28
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fa4b 	bl	800231e <lps22hb_low_power_set>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e044      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	331c      	adds	r3, #28
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f978 	bl	8002190 <lps22hb_data_rate_set>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e038      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	331c      	adds	r3, #28
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f946 	bl	8002144 <lps22hb_low_pass_filter_mode_set>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e02c      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	331c      	adds	r3, #28
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f914 	bl	80020f8 <lps22hb_block_data_update_set>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e020      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	331c      	adds	r3, #28
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa3d 	bl	800236a <lps22hb_auto_add_inc_set>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00e      	beq.n	8001f14 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e010      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	331c      	adds	r3, #28
 8001f00:	2101      	movs	r1, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fa31 	bl	800236a <lps22hb_auto_add_inc_set>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e004      	b.n	8001f1e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f26:	b590      	push	{r4, r7, lr}
 8001f28:	b089      	sub	sp, #36	; 0x24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	460b      	mov	r3, r1
 8001f34:	72fb      	strb	r3, [r7, #11]
 8001f36:	4613      	mov	r3, r2
 8001f38:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d121      	bne.n	8001f8e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	83fb      	strh	r3, [r7, #30]
 8001f4e:	e018      	b.n	8001f82 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	695c      	ldr	r4, [r3, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	7b1b      	ldrb	r3, [r3, #12]
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	8bfb      	ldrh	r3, [r7, #30]
 8001f60:	4413      	add	r3, r2
 8001f62:	b299      	uxth	r1, r3
 8001f64:	8bfb      	ldrh	r3, [r7, #30]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	47a0      	blx	r4
 8001f6e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e013      	b.n	8001fa4 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8001f7c:	8bfb      	ldrh	r3, [r7, #30]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	83fb      	strh	r3, [r7, #30]
 8001f82:	8bfa      	ldrh	r2, [r7, #30]
 8001f84:	893b      	ldrh	r3, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3e2      	bcc.n	8001f50 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	e00a      	b.n	8001fa4 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	695c      	ldr	r4, [r3, #20]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	7b1b      	ldrb	r3, [r3, #12]
 8001f96:	b298      	uxth	r0, r3
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	47a0      	blx	r4
 8001fa2:	4603      	mov	r3, r0
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	72fb      	strb	r3, [r7, #11]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d121      	bne.n	8002014 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	83fb      	strh	r3, [r7, #30]
 8001fd4:	e018      	b.n	8002008 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	691c      	ldr	r4, [r3, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	8bfb      	ldrh	r3, [r7, #30]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b299      	uxth	r1, r3
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	47a0      	blx	r4
 8001ff4:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e013      	b.n	800202a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002002:	8bfb      	ldrh	r3, [r7, #30]
 8002004:	3301      	adds	r3, #1
 8002006:	83fb      	strh	r3, [r7, #30]
 8002008:	8bfa      	ldrh	r2, [r7, #30]
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3e2      	bcc.n	8001fd6 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	e00a      	b.n	800202a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	691c      	ldr	r4, [r3, #16]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	7b1b      	ldrb	r3, [r3, #12]
 800201c:	b298      	uxth	r0, r3
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	b299      	uxth	r1, r3
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	47a0      	blx	r4
 8002028:	4603      	mov	r3, r0
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}

08002032 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	461a      	mov	r2, r3
 800203e:	460b      	mov	r3, r1
 8002040:	72fb      	strb	r3, [r7, #11]
 8002042:	4613      	mov	r3, r2
 8002044:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685c      	ldr	r4, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6898      	ldr	r0, [r3, #8]
 800204e:	893b      	ldrh	r3, [r7, #8]
 8002050:	7af9      	ldrb	r1, [r7, #11]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	47a0      	blx	r4
 8002056:	6178      	str	r0, [r7, #20]
  return ret;
 8002058:	697b      	ldr	r3, [r7, #20]
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}

08002062 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b087      	sub	sp, #28
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	461a      	mov	r2, r3
 800206e:	460b      	mov	r3, r1
 8002070:	72fb      	strb	r3, [r7, #11]
 8002072:	4613      	mov	r3, r2
 8002074:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681c      	ldr	r4, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6898      	ldr	r0, [r3, #8]
 800207e:	893b      	ldrh	r3, [r7, #8]
 8002080:	7af9      	ldrb	r1, [r7, #11]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	47a0      	blx	r4
 8002086:	6178      	str	r0, [r7, #20]
  return ret;
 8002088:	697b      	ldr	r3, [r7, #20]
}
 800208a:	4618      	mov	r0, r3
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
	...

08002094 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020c0 <lps22hb_from_lsb_to_hpa+0x2c>
 80020aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80020b2:	eeb0 0a67 	vmov.f32	s0, s15
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	49800000 	.word	0x49800000

080020c4 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80020ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020f4 <lps22hb_from_lsb_to_degc+0x30>
 80020de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	42c80000 	.word	0x42c80000

080020f8 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002104:	f107 0208 	add.w	r2, r7, #8
 8002108:	2301      	movs	r3, #1
 800210a:	2110      	movs	r1, #16
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff90 	bl	8002032 <lps22hb_read_reg>
 8002112:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10f      	bne.n	800213a <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	7a3b      	ldrb	r3, [r7, #8]
 8002124:	f362 0341 	bfi	r3, r2, #1, #1
 8002128:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800212a:	f107 0208 	add.w	r2, r7, #8
 800212e:	2301      	movs	r3, #1
 8002130:	2110      	movs	r1, #16
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff95 	bl	8002062 <lps22hb_write_reg>
 8002138:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002150:	f107 0208 	add.w	r2, r7, #8
 8002154:	2301      	movs	r3, #1
 8002156:	2110      	movs	r1, #16
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff6a 	bl	8002032 <lps22hb_read_reg>
 800215e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	b2da      	uxtb	r2, r3
 800216e:	7a3b      	ldrb	r3, [r7, #8]
 8002170:	f362 0383 	bfi	r3, r2, #2, #2
 8002174:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002176:	f107 0208 	add.w	r2, r7, #8
 800217a:	2301      	movs	r3, #1
 800217c:	2110      	movs	r1, #16
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff6f 	bl	8002062 <lps22hb_write_reg>
 8002184:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800219c:	f107 0208 	add.w	r2, r7, #8
 80021a0:	2301      	movs	r3, #1
 80021a2:	2110      	movs	r1, #16
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff44 	bl	8002032 <lps22hb_read_reg>
 80021aa:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	7a3b      	ldrb	r3, [r7, #8]
 80021bc:	f362 1306 	bfi	r3, r2, #4, #3
 80021c0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80021c2:	f107 0208 	add.w	r2, r7, #8
 80021c6:	2301      	movs	r3, #1
 80021c8:	2110      	movs	r1, #16
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff49 	bl	8002062 <lps22hb_write_reg>
 80021d0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80021e6:	f107 0208 	add.w	r2, r7, #8
 80021ea:	2301      	movs	r3, #1
 80021ec:	2110      	movs	r1, #16
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff1f 	bl	8002032 <lps22hb_read_reg>
 80021f4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80021f6:	7a3b      	ldrb	r3, [r7, #8]
 80021f8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d826      	bhi.n	8002250 <lps22hb_data_rate_get+0x74>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <lps22hb_data_rate_get+0x2c>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002221 	.word	0x08002221
 800220c:	08002229 	.word	0x08002229
 8002210:	08002231 	.word	0x08002231
 8002214:	08002239 	.word	0x08002239
 8002218:	08002241 	.word	0x08002241
 800221c:	08002249 	.word	0x08002249
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
      break;
 8002226:	e017      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
      break;
 800222e:	e013      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2202      	movs	r2, #2
 8002234:	701a      	strb	r2, [r3, #0]
      break;
 8002236:	e00f      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2203      	movs	r2, #3
 800223c:	701a      	strb	r2, [r3, #0]
      break;
 800223e:	e00b      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2204      	movs	r2, #4
 8002244:	701a      	strb	r2, [r3, #0]
      break;
 8002246:	e007      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2205      	movs	r2, #5
 800224c:	701a      	strb	r2, [r3, #0]
      break;
 800224e:	e003      	b.n	8002258 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	bf00      	nop
  }

  return ret;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop

08002264 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800226e:	f107 0208 	add.w	r2, r7, #8
 8002272:	2303      	movs	r3, #3
 8002274:	2128      	movs	r1, #40	; 0x28
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fedb 	bl	8002032 <lps22hb_read_reg>
 800227c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800227e:	7abb      	ldrb	r3, [r7, #10]
 8002280:	461a      	mov	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	7a7a      	ldrb	r2, [r7, #9]
 800228e:	441a      	add	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	7a3a      	ldrb	r2, [r7, #8]
 800229c:	441a      	add	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	021a      	lsls	r2, r3, #8
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	601a      	str	r2, [r3, #0]
  return ret;
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 80022c0:	f107 0208 	add.w	r2, r7, #8
 80022c4:	2302      	movs	r3, #2
 80022c6:	212b      	movs	r1, #43	; 0x2b
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff feb2 	bl	8002032 <lps22hb_read_reg>
 80022ce:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80022d0:	7a7b      	ldrb	r3, [r7, #9]
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	7a3b      	ldrb	r3, [r7, #8]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	801a      	strh	r2, [r3, #0]
  return ret;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002306:	2301      	movs	r3, #1
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	210f      	movs	r1, #15
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fe90 	bl	8002032 <lps22hb_read_reg>
 8002312:	60f8      	str	r0, [r7, #12]
  return ret;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 800232a:	f107 0208 	add.w	r2, r7, #8
 800232e:	2301      	movs	r3, #1
 8002330:	211a      	movs	r1, #26
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe7d 	bl	8002032 <lps22hb_read_reg>
 8002338:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10f      	bne.n	8002360 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	7a3b      	ldrb	r3, [r7, #8]
 800234a:	f362 0300 	bfi	r3, r2, #0, #1
 800234e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	2301      	movs	r3, #1
 8002356:	211a      	movs	r1, #26
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff fe82 	bl	8002062 <lps22hb_write_reg>
 800235e:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002360:	68fb      	ldr	r3, [r7, #12]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002376:	f107 0208 	add.w	r2, r7, #8
 800237a:	2301      	movs	r3, #1
 800237c:	2111      	movs	r1, #17
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe57 	bl	8002032 <lps22hb_read_reg>
 8002384:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	7a3b      	ldrb	r3, [r7, #8]
 8002396:	f362 1304 	bfi	r3, r2, #4, #1
 800239a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800239c:	f107 0208 	add.w	r2, r7, #8
 80023a0:	2301      	movs	r3, #1
 80023a2:	2111      	movs	r1, #17
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe5c 	bl	8002062 <lps22hb_write_reg>
 80023aa:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e04d      	b.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	7b1a      	ldrb	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002410:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002416:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e020      	b.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4798      	blx	r3
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e016      	b.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d112      	bne.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002454:	2301      	movs	r3, #1
 8002456:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	461a      	mov	r2, r3
 800245c:	2123      	movs	r1, #35	; 0x23
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fb55 	bl	8002b0e <LSM303AGR_ACC_Write_Reg>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e000      	b.n	8002472 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	0800331d 	.word	0x0800331d
 8002480:	0800337f 	.word	0x0800337f

08002484 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	331c      	adds	r3, #28
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f001 f94a 	bl	800372c <lsm303agr_xl_block_data_update_set>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	e02c      	b.n	80024fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	331c      	adds	r3, #28
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f001 faed 	bl	8003a8a <lsm303agr_xl_fifo_mode_set>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	e020      	b.n	80024fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	331c      	adds	r3, #28
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 f84e 	bl	800356c <lsm303agr_xl_data_rate_set>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	e010      	b.n	80024fe <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	331c      	adds	r3, #28
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 f8c4 	bl	8003670 <lsm303agr_xl_full_scale_set>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	e004      	b.n	80024fe <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f87c 	bl	800260c <LSM303AGR_ACC_Disable>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e008      	b.n	8002532 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	331c      	adds	r3, #28
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f001 fa55 	bl	80039fa <lsm303agr_xl_device_id_get>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e000      	b.n	800255e <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2200      	movs	r2, #0
 8002588:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2210      	movs	r2, #16
 8002594:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80025a8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	43c80000 	.word	0x43c80000

080025c4 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e014      	b.n	8002604 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 021c 	add.w	r2, r3, #28
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f000 ffbf 	bl	800356c <lsm303agr_xl_data_rate_set>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	e004      	b.n	8002604 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e01f      	b.n	8002662 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 021c 	add.w	r2, r3, #28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	332a      	adds	r3, #42	; 0x2a
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 ffc2 	bl	80035b8 <lsm303agr_xl_data_rate_get>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e010      	b.n	8002662 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	331c      	adds	r3, #28
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f000 ff90 	bl	800356c <lsm303agr_xl_data_rate_set>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e004      	b.n	8002662 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	331c      	adds	r3, #28
 800267c:	f107 020b 	add.w	r2, r7, #11
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 ff3e 	bl	8003504 <lsm303agr_xl_operating_mode_get>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e031      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002694:	7afb      	ldrb	r3, [r7, #11]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d01a      	beq.n	80026d0 <LSM303AGR_ACC_GetSensitivity+0x66>
 800269a:	2b02      	cmp	r3, #2
 800269c:	dc22      	bgt.n	80026e4 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00a      	beq.n	80026bc <LSM303AGR_ACC_GetSensitivity+0x52>
 80026a6:	e01d      	b.n	80026e4 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fca8 	bl	8003000 <LSM303AGR_ACC_GetSensitivityHR>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01a      	beq.n	80026ec <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e01d      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fce4 	bl	800308c <LSM303AGR_ACC_GetSensitivityNM>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e013      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fd20 	bl	8003118 <LSM303AGR_ACC_GetSensitivityLP>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	60fb      	str	r3, [r7, #12]
      break;
 80026ea:	e004      	b.n	80026f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80026ec:	bf00      	nop
 80026ee:	e002      	b.n	80026f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80026f0:	bf00      	nop
 80026f2:	e000      	b.n	80026f6 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80026f4:	bf00      	nop
  }

  return ret;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	331c      	adds	r3, #28
 8002712:	f107 020b 	add.w	r2, r7, #11
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fef3 	bl	8003504 <lsm303agr_xl_operating_mode_get>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	e09d      	b.n	8002866 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	331c      	adds	r3, #28
 800272e:	f107 020a 	add.w	r2, r7, #10
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 ff3f 	bl	80035b8 <lsm303agr_xl_data_rate_get>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e08f      	b.n	8002866 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d147      	bne.n	80027dc <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 800274c:	7abb      	ldrb	r3, [r7, #10]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d840      	bhi.n	80027d4 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002781 	.word	0x08002781
 800275c:	0800278b 	.word	0x0800278b
 8002760:	08002795 	.word	0x08002795
 8002764:	0800279d 	.word	0x0800279d
 8002768:	080027a5 	.word	0x080027a5
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027b5 	.word	0x080027b5
 8002774:	080027bd 	.word	0x080027bd
 8002778:	080027c5 	.word	0x080027c5
 800277c:	080027cd 	.word	0x080027cd
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
        break;
 8002788:	e06c      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002790:	601a      	str	r2, [r3, #0]
        break;
 8002792:	e067      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4a36      	ldr	r2, [pc, #216]	; (8002870 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002798:	601a      	str	r2, [r3, #0]
        break;
 800279a:	e063      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4a35      	ldr	r2, [pc, #212]	; (8002874 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80027a0:	601a      	str	r2, [r3, #0]
        break;
 80027a2:	e05f      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80027a8:	601a      	str	r2, [r3, #0]
        break;
 80027aa:	e05b      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4a33      	ldr	r2, [pc, #204]	; (800287c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80027b0:	601a      	str	r2, [r3, #0]
        break;
 80027b2:	e057      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4a32      	ldr	r2, [pc, #200]	; (8002880 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80027b8:	601a      	str	r2, [r3, #0]
        break;
 80027ba:	e053      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80027c0:	601a      	str	r2, [r3, #0]
        break;
 80027c2:	e04f      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80027c8:	601a      	str	r2, [r3, #0]
        break;
 80027ca:	e04b      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80027d0:	601a      	str	r2, [r3, #0]
        break;
 80027d2:	e047      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	60fb      	str	r3, [r7, #12]
        break;
 80027da:	e043      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	2b09      	cmp	r3, #9
 80027e0:	d83c      	bhi.n	800285c <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	08002811 	.word	0x08002811
 80027ec:	0800281b 	.word	0x0800281b
 80027f0:	08002825 	.word	0x08002825
 80027f4:	0800282d 	.word	0x0800282d
 80027f8:	08002835 	.word	0x08002835
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	08002845 	.word	0x08002845
 8002804:	0800284d 	.word	0x0800284d
 8002808:	0800285d 	.word	0x0800285d
 800280c:	08002855 	.word	0x08002855
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
        break;
 8002818:	e024      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002820:	601a      	str	r2, [r3, #0]
        break;
 8002822:	e01f      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002828:	601a      	str	r2, [r3, #0]
        break;
 800282a:	e01b      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4a11      	ldr	r2, [pc, #68]	; (8002874 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002830:	601a      	str	r2, [r3, #0]
        break;
 8002832:	e017      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002838:	601a      	str	r2, [r3, #0]
        break;
 800283a:	e013      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002840:	601a      	str	r2, [r3, #0]
        break;
 8002842:	e00f      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002848:	601a      	str	r2, [r3, #0]
        break;
 800284a:	e00b      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002850:	601a      	str	r2, [r3, #0]
        break;
 8002852:	e007      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002858:	601a      	str	r2, [r3, #0]
        break;
 800285a:	e003      	b.n	8002864 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	60fb      	str	r3, [r7, #12]
        break;
 8002862:	bf00      	nop
    }
  }

  return ret;
 8002864:	68fb      	ldr	r3, [r7, #12]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	41200000 	.word	0x41200000
 8002874:	41c80000 	.word	0x41c80000
 8002878:	42480000 	.word	0x42480000
 800287c:	42c80000 	.word	0x42c80000
 8002880:	43480000 	.word	0x43480000
 8002884:	43c80000 	.word	0x43c80000
 8002888:	44ca8000 	.word	0x44ca8000
 800288c:	45a80000 	.word	0x45a80000
 8002890:	44a80000 	.word	0x44a80000

08002894 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d106      	bne.n	80028b8 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80028aa:	ed97 0a00 	vldr	s0, [r7]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fc78 	bl	80031a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	e005      	b.n	80028c4 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80028b8:	ed97 0a00 	vldr	s0, [r7]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fcd3 	bl	8003268 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 80028c2:	4603      	mov	r3, r0
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	331c      	adds	r3, #28
 80028de:	f107 020b 	add.w	r2, r7, #11
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fee9 	bl	80036bc <lsm303agr_xl_full_scale_get>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e023      	b.n	800293e <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d81b      	bhi.n	8002934 <LSM303AGR_ACC_GetFullScale+0x68>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <LSM303AGR_ACC_GetFullScale+0x38>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291d 	.word	0x0800291d
 800290c:	08002925 	.word	0x08002925
 8002910:	0800292d 	.word	0x0800292d
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
      break;
 800291a:	e00f      	b.n	800293c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2204      	movs	r2, #4
 8002920:	601a      	str	r2, [r3, #0]
      break;
 8002922:	e00b      	b.n	800293c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2208      	movs	r2, #8
 8002928:	601a      	str	r2, [r3, #0]
      break;
 800292a:	e007      	b.n	800293c <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	601a      	str	r2, [r3, #0]
      break;
 8002932:	e003      	b.n	800293c <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	60fb      	str	r3, [r7, #12]
      break;
 800293a:	bf00      	nop
  }

  return ret;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop

08002948 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b02      	cmp	r3, #2
 8002956:	dd0b      	ble.n	8002970 <LSM303AGR_ACC_SetFullScale+0x28>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b04      	cmp	r3, #4
 800295c:	dd06      	ble.n	800296c <LSM303AGR_ACC_SetFullScale+0x24>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b08      	cmp	r3, #8
 8002962:	dc01      	bgt.n	8002968 <LSM303AGR_ACC_SetFullScale+0x20>
 8002964:	2302      	movs	r3, #2
 8002966:	e004      	b.n	8002972 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002968:	2303      	movs	r3, #3
 800296a:	e002      	b.n	8002972 <LSM303AGR_ACC_SetFullScale+0x2a>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002970:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002972:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	331c      	adds	r3, #28
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fe77 	bl	8003670 <lsm303agr_xl_full_scale_set>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	e000      	b.n	8002990 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	331c      	adds	r3, #28
 80029ae:	f107 020f 	add.w	r2, r7, #15
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fda5 	bl	8003504 <lsm303agr_xl_operating_mode_get>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	e04a      	b.n	8002a5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d00c      	beq.n	80029e6 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	dc0e      	bgt.n	80029ee <LSM303AGR_ACC_GetAxesRaw+0x56>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <LSM303AGR_ACC_GetAxesRaw+0x42>
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d003      	beq.n	80029e0 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80029d8:	e009      	b.n	80029ee <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80029da:	2310      	movs	r3, #16
 80029dc:	83fb      	strh	r3, [r7, #30]
      break;
 80029de:	e00a      	b.n	80029f6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	83fb      	strh	r3, [r7, #30]
      break;
 80029e4:	e007      	b.n	80029f6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	83fb      	strh	r3, [r7, #30]
      break;
 80029ec:	e003      	b.n	80029f6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	61bb      	str	r3, [r7, #24]
      break;
 80029f4:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d101      	bne.n	8002a02 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	e02c      	b.n	8002a5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	331c      	adds	r3, #28
 8002a06:	f107 0210 	add.w	r2, r7, #16
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 feb3 	bl	8003778 <lsm303agr_acceleration_raw_get>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	e01e      	b.n	8002a5c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002a1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a28:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002a32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002a46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	809a      	strh	r2, [r3, #4]

  return ret;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff8c 	bl	8002998 <LSM303AGR_ACC_GetAxesRaw>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e03c      	b.n	8002b06 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fde9 	bl	800266a <LSM303AGR_ACC_GetSensitivity>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e030      	b.n	8002b06 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002aa4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002abc:	ee17 2a90 	vmov	r2, s15
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002ac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002adc:	ee17 2a90 	vmov	r2, s15
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ae4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afc:	ee17 2a90 	vmov	r2, s15
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 001c 	add.w	r0, r3, #28
 8002b24:	1cba      	adds	r2, r7, #2
 8002b26:	78f9      	ldrb	r1, [r7, #3]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f000 fcd3 	bl	80034d4 <lsm303agr_write_reg>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	e000      	b.n	8002b3c <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e04b      	b.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	7b1a      	ldrb	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002b9c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002ba2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e01e      	b.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4798      	blx	r3
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e014      	b.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d010      	beq.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	331c      	adds	r3, #28
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 ff75 	bl	8003ad6 <lsm303agr_mag_i2c_interface_set>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e000      	b.n	8002bfa <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	080033e1 	.word	0x080033e1
 8002c08:	08003443 	.word	0x08003443

08002c0c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	331c      	adds	r3, #28
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fe7c 	bl	8003918 <lsm303agr_mag_block_data_update_set>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e028      	b.n	8002c7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	331c      	adds	r3, #28
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fdeb 	bl	800380e <lsm303agr_mag_operating_mode_set>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e01c      	b.n	8002c7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	331c      	adds	r3, #28
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fe05 	bl	800385a <lsm303agr_mag_data_rate_set>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e010      	b.n	8002c7e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	331c      	adds	r3, #28
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 feeb 	bl	8003a3e <lsm303agr_mag_self_test_set>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	e004      	b.n	8002c7e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f874 	bl	8002d7c <LSM303AGR_MAG_Disable>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	e004      	b.n	8002caa <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	331c      	adds	r3, #28
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 feaa 	bl	8003a1c <lsm303agr_mag_device_id_get>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e000      	b.n	8002cd6 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2232      	movs	r2, #50	; 0x32
 8002d12:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002d28:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	42c80000 	.word	0x42c80000

08002d3c <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e010      	b.n	8002d74 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	331c      	adds	r3, #28
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fd58 	bl	800380e <lsm303agr_mag_operating_mode_set>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e004      	b.n	8002d74 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e010      	b.n	8002db4 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	331c      	adds	r3, #28
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fd38 	bl	800380e <lsm303agr_mag_operating_mode_set>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	e004      	b.n	8002db4 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002dcc:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	331c      	adds	r3, #28
 8002dee:	f107 020b 	add.w	r2, r7, #11
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fd57 	bl	80038a8 <lsm303agr_mag_data_rate_get>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	e023      	b.n	8002e4e <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d81b      	bhi.n	8002e44 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e2d 	.word	0x08002e2d
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e3d 	.word	0x08002e3d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002e28:	601a      	str	r2, [r3, #0]
      break;
 8002e2a:	e00f      	b.n	8002e4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002e30:	601a      	str	r2, [r3, #0]
      break;
 8002e32:	e00b      	b.n	8002e4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002e38:	601a      	str	r2, [r3, #0]
      break;
 8002e3a:	e007      	b.n	8002e4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002e40:	601a      	str	r2, [r3, #0]
      break;
 8002e42:	e003      	b.n	8002e4c <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
 8002e48:	60fb      	str	r3, [r7, #12]
      break;
 8002e4a:	bf00      	nop
  }

  return ret;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	41200000 	.word	0x41200000
 8002e5c:	41a00000 	.word	0x41a00000
 8002e60:	42480000 	.word	0x42480000
 8002e64:	42c80000 	.word	0x42c80000

08002e68 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d801      	bhi.n	8002e8a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002e86:	2300      	movs	r3, #0
 8002e88:	e016      	b.n	8002eb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002e8a:	edd7 7a00 	vldr	s15, [r7]
 8002e8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d801      	bhi.n	8002ea0 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e00b      	b.n	8002eb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002ea0:	edd7 7a00 	vldr	s15, [r7]
 8002ea4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002ee0 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d801      	bhi.n	8002eb6 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e000      	b.n	8002eb8 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002eb6:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002eb8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	331c      	adds	r3, #28
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fcc9 	bl	800385a <lsm303agr_mag_data_rate_set>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e000      	b.n	8002ed6 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	42480000 	.word	0x42480000

08002ee4 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	331c      	adds	r3, #28
 8002f28:	f107 0208 	add.w	r2, r7, #8
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fd18 	bl	8003964 <lsm303agr_magnetic_raw_get>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	e00c      	b.n	8002f5a <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002f40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002f48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002f50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	331c      	adds	r3, #28
 8002f70:	f107 0210 	add.w	r2, r7, #16
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fcf4 	bl	8003964 <lsm303agr_magnetic_raw_get>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e036      	b.n	8002ff6 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff14 	bl	8002dbc <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002f94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fac:	ee17 2a90 	vmov	r2, s15
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fcc:	ee17 2a90 	vmov	r2, s15
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fec:	ee17 2a90 	vmov	r2, s15
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	331c      	adds	r3, #28
 8003012:	f107 020b 	add.w	r2, r7, #11
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fb4f 	bl	80036bc <lsm303agr_xl_full_scale_get>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	e023      	b.n	8003072 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d81b      	bhi.n	8003068 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	08003051 	.word	0x08003051
 8003040:	08003059 	.word	0x08003059
 8003044:	08003061 	.word	0x08003061
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 800304c:	601a      	str	r2, [r3, #0]
      break;
 800304e:	e00f      	b.n	8003070 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003054:	601a      	str	r2, [r3, #0]
      break;
 8003056:	e00b      	b.n	8003070 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 800305c:	601a      	str	r2, [r3, #0]
      break;
 800305e:	e007      	b.n	8003070 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003064:	601a      	str	r2, [r3, #0]
      break;
 8003066:	e003      	b.n	8003070 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	60fb      	str	r3, [r7, #12]
      break;
 800306e:	bf00      	nop
  }

  return ret;
 8003070:	68fb      	ldr	r3, [r7, #12]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	3f7ae148 	.word	0x3f7ae148
 8003080:	3ff9999a 	.word	0x3ff9999a
 8003084:	4079999a 	.word	0x4079999a
 8003088:	413b851f 	.word	0x413b851f

0800308c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	331c      	adds	r3, #28
 800309e:	f107 020b 	add.w	r2, r7, #11
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fb09 	bl	80036bc <lsm303agr_xl_full_scale_get>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	e023      	b.n	80030fe <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d81b      	bhi.n	80030f4 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030dd 	.word	0x080030dd
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030ed 	.word	0x080030ed
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80030d8:	601a      	str	r2, [r3, #0]
      break;
 80030da:	e00f      	b.n	80030fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80030e0:	601a      	str	r2, [r3, #0]
      break;
 80030e2:	e00b      	b.n	80030fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80030e8:	601a      	str	r2, [r3, #0]
      break;
 80030ea:	e007      	b.n	80030fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80030f0:	601a      	str	r2, [r3, #0]
      break;
 80030f2:	e003      	b.n	80030fc <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	60fb      	str	r3, [r7, #12]
      break;
 80030fa:	bf00      	nop
  }

  return ret;
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	4079999a 	.word	0x4079999a
 800310c:	40fa3d71 	.word	0x40fa3d71
 8003110:	417a147b 	.word	0x417a147b
 8003114:	423b999a 	.word	0x423b999a

08003118 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	331c      	adds	r3, #28
 800312a:	f107 020b 	add.w	r2, r7, #11
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fac3 	bl	80036bc <lsm303agr_xl_full_scale_get>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e023      	b.n	800318a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d81b      	bhi.n	8003180 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003148:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003161 	.word	0x08003161
 8003154:	08003169 	.word	0x08003169
 8003158:	08003171 	.word	0x08003171
 800315c:	08003179 	.word	0x08003179
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003164:	601a      	str	r2, [r3, #0]
      break;
 8003166:	e00f      	b.n	8003188 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 800316c:	601a      	str	r2, [r3, #0]
      break;
 800316e:	e00b      	b.n	8003188 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003174:	601a      	str	r2, [r3, #0]
      break;
 8003176:	e007      	b.n	8003188 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800317c:	601a      	str	r2, [r3, #0]
      break;
 800317e:	e003      	b.n	8003188 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	60fb      	str	r3, [r7, #12]
      break;
 8003186:	bf00      	nop
  }

  return ret;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	417a147b 	.word	0x417a147b
 8003198:	41fa147b 	.word	0x41fa147b
 800319c:	427a147b 	.word	0x427a147b
 80031a0:	433b947b 	.word	0x433b947b

080031a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80031b0:	edd7 7a00 	vldr	s15, [r7]
 80031b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d801      	bhi.n	80031c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e037      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80031c6:	edd7 7a00 	vldr	s15, [r7]
 80031ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d801      	bhi.n	80031dc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80031d8:	2302      	movs	r3, #2
 80031da:	e02c      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80031dc:	edd7 7a00 	vldr	s15, [r7]
 80031e0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d801      	bhi.n	80031f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e021      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80031f2:	edd7 7a00 	vldr	s15, [r7]
 80031f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800325c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80031fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	d801      	bhi.n	8003208 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003204:	2304      	movs	r3, #4
 8003206:	e016      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003208:	edd7 7a00 	vldr	s15, [r7]
 800320c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003260 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d801      	bhi.n	800321e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800321a:	2305      	movs	r3, #5
 800321c:	e00b      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800321e:	edd7 7a00 	vldr	s15, [r7]
 8003222:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003264 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d801      	bhi.n	8003234 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003230:	2306      	movs	r3, #6
 8003232:	e000      	b.n	8003236 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003234:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003236:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	331c      	adds	r3, #28
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f993 	bl	800356c <lsm303agr_xl_data_rate_set>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	e000      	b.n	8003254 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	42480000 	.word	0x42480000
 8003260:	42c80000 	.word	0x42c80000
 8003264:	43480000 	.word	0x43480000

08003268 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003274:	edd7 7a00 	vldr	s15, [r7]
 8003278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d801      	bhi.n	800328a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003286:	2301      	movs	r3, #1
 8003288:	e037      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800328a:	edd7 7a00 	vldr	s15, [r7]
 800328e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d801      	bhi.n	80032a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800329c:	2302      	movs	r3, #2
 800329e:	e02c      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80032a0:	edd7 7a00 	vldr	s15, [r7]
 80032a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	d801      	bhi.n	80032b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e021      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80032b6:	edd7 7a00 	vldr	s15, [r7]
 80032ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003310 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80032be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d801      	bhi.n	80032cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e016      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80032cc:	edd7 7a00 	vldr	s15, [r7]
 80032d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003314 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80032d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d801      	bhi.n	80032e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80032de:	2305      	movs	r3, #5
 80032e0:	e00b      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80032e2:	edd7 7a00 	vldr	s15, [r7]
 80032e6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003318 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80032ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d801      	bhi.n	80032f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80032f4:	2306      	movs	r3, #6
 80032f6:	e000      	b.n	80032fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80032f8:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	42480000 	.word	0x42480000
 8003314:	42c80000 	.word	0x42c80000
 8003318:	43480000 	.word	0x43480000

0800331c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
 800332c:	4613      	mov	r3, r2
 800332e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	695c      	ldr	r4, [r3, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	7b1b      	ldrb	r3, [r3, #12]
 8003344:	b298      	uxth	r0, r3
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800334c:	b2db      	uxtb	r3, r3
 800334e:	b299      	uxth	r1, r3
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	47a0      	blx	r4
 8003356:	4603      	mov	r3, r0
 8003358:	e00d      	b.n	8003376 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	695c      	ldr	r4, [r3, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	7b1b      	ldrb	r3, [r3, #12]
 8003362:	b298      	uxth	r0, r3
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	b2db      	uxtb	r3, r3
 800336c:	b299      	uxth	r1, r3
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	47a0      	blx	r4
 8003374:	4603      	mov	r3, r0
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}

0800337e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	461a      	mov	r2, r3
 800338a:	460b      	mov	r3, r1
 800338c:	72fb      	strb	r3, [r7, #11]
 800338e:	4613      	mov	r3, r2
 8003390:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	691c      	ldr	r4, [r3, #16]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	7b1b      	ldrb	r3, [r3, #12]
 80033a6:	b298      	uxth	r0, r3
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	b299      	uxth	r1, r3
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	47a0      	blx	r4
 80033b8:	4603      	mov	r3, r0
 80033ba:	e00d      	b.n	80033d8 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	691c      	ldr	r4, [r3, #16]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	7b1b      	ldrb	r3, [r3, #12]
 80033c4:	b298      	uxth	r0, r3
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	b299      	uxth	r1, r3
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	47a0      	blx	r4
 80033d6:	4603      	mov	r3, r0
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd90      	pop	{r4, r7, pc}

080033e0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	460b      	mov	r3, r1
 80033ee:	72fb      	strb	r3, [r7, #11]
 80033f0:	4613      	mov	r3, r2
 80033f2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10e      	bne.n	800341e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	695c      	ldr	r4, [r3, #20]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	7b1b      	ldrb	r3, [r3, #12]
 8003408:	b298      	uxth	r0, r3
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003410:	b2db      	uxtb	r3, r3
 8003412:	b299      	uxth	r1, r3
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	47a0      	blx	r4
 800341a:	4603      	mov	r3, r0
 800341c:	e00d      	b.n	800343a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	695c      	ldr	r4, [r3, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	7b1b      	ldrb	r3, [r3, #12]
 8003426:	b298      	uxth	r0, r3
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342e:	b2db      	uxtb	r3, r3
 8003430:	b299      	uxth	r1, r3
 8003432:	893b      	ldrh	r3, [r7, #8]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	47a0      	blx	r4
 8003438:	4603      	mov	r3, r0
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}

08003442 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003442:	b590      	push	{r4, r7, lr}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	461a      	mov	r2, r3
 800344e:	460b      	mov	r3, r1
 8003450:	72fb      	strb	r3, [r7, #11]
 8003452:	4613      	mov	r3, r2
 8003454:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10e      	bne.n	8003480 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	691c      	ldr	r4, [r3, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	7b1b      	ldrb	r3, [r3, #12]
 800346a:	b298      	uxth	r0, r3
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003472:	b2db      	uxtb	r3, r3
 8003474:	b299      	uxth	r1, r3
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	47a0      	blx	r4
 800347c:	4603      	mov	r3, r0
 800347e:	e00d      	b.n	800349c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	691c      	ldr	r4, [r3, #16]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	7b1b      	ldrb	r3, [r3, #12]
 8003488:	b298      	uxth	r0, r3
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003490:	b2db      	uxtb	r3, r3
 8003492:	b299      	uxth	r1, r3
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	47a0      	blx	r4
 800349a:	4603      	mov	r3, r0
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}

080034a4 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	460b      	mov	r3, r1
 80034b2:	72fb      	strb	r3, [r7, #11]
 80034b4:	4613      	mov	r3, r2
 80034b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685c      	ldr	r4, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6898      	ldr	r0, [r3, #8]
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	7af9      	ldrb	r1, [r7, #11]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	47a0      	blx	r4
 80034c8:	6178      	str	r0, [r7, #20]
  return ret;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	72fb      	strb	r3, [r7, #11]
 80034e4:	4613      	mov	r3, r2
 80034e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6898      	ldr	r0, [r3, #8]
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	7af9      	ldrb	r1, [r7, #11]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	47a0      	blx	r4
 80034f8:	6178      	str	r0, [r7, #20]
  return ret;
 80034fa:	697b      	ldr	r3, [r7, #20]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}

08003504 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800350e:	f107 020c 	add.w	r2, r7, #12
 8003512:	2301      	movs	r3, #1
 8003514:	2120      	movs	r1, #32
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffc4 	bl	80034a4 <lsm303agr_read_reg>
 800351c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003524:	f107 0210 	add.w	r2, r7, #16
 8003528:	2301      	movs	r3, #1
 800352a:	2123      	movs	r1, #35	; 0x23
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ffb9 	bl	80034a4 <lsm303agr_read_reg>
 8003532:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003534:	7b3b      	ldrb	r3, [r7, #12]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e00c      	b.n	8003562 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003548:	7c3b      	ldrb	r3, [r7, #16]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e002      	b.n	8003562 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003562:	697b      	ldr	r3, [r7, #20]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003578:	f107 0208 	add.w	r2, r7, #8
 800357c:	2301      	movs	r3, #1
 800357e:	2120      	movs	r1, #32
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff8f 	bl	80034a4 <lsm303agr_read_reg>
 8003586:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	7a3b      	ldrb	r3, [r7, #8]
 8003598:	f362 1307 	bfi	r3, r2, #4, #4
 800359c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800359e:	f107 0208 	add.w	r2, r7, #8
 80035a2:	2301      	movs	r3, #1
 80035a4:	2120      	movs	r1, #32
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff94 	bl	80034d4 <lsm303agr_write_reg>
 80035ac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80035c2:	f107 0208 	add.w	r2, r7, #8
 80035c6:	2301      	movs	r3, #1
 80035c8:	2120      	movs	r1, #32
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ff6a 	bl	80034a4 <lsm303agr_read_reg>
 80035d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80035d2:	7a3b      	ldrb	r3, [r7, #8]
 80035d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b09      	cmp	r3, #9
 80035dc:	d83e      	bhi.n	800365c <lsm303agr_xl_data_rate_get+0xa4>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <lsm303agr_xl_data_rate_get+0x2c>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800361d 	.word	0x0800361d
 80035f0:	08003625 	.word	0x08003625
 80035f4:	0800362d 	.word	0x0800362d
 80035f8:	08003635 	.word	0x08003635
 80035fc:	0800363d 	.word	0x0800363d
 8003600:	08003645 	.word	0x08003645
 8003604:	0800364d 	.word	0x0800364d
 8003608:	08003655 	.word	0x08003655
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
      break;
 8003612:	e027      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
      break;
 800361a:	e023      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
      break;
 8003622:	e01f      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2203      	movs	r2, #3
 8003628:	701a      	strb	r2, [r3, #0]
      break;
 800362a:	e01b      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e017      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2205      	movs	r2, #5
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e013      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2206      	movs	r2, #6
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e00f      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2207      	movs	r2, #7
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e00b      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2208      	movs	r2, #8
 8003650:	701a      	strb	r2, [r3, #0]
      break;
 8003652:	e007      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2209      	movs	r2, #9
 8003658:	701a      	strb	r2, [r3, #0]
      break;
 800365a:	e003      	b.n	8003664 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	bf00      	nop
  }

  return ret;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop

08003670 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800367c:	f107 0208 	add.w	r2, r7, #8
 8003680:	2301      	movs	r3, #1
 8003682:	2123      	movs	r1, #35	; 0x23
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff0d 	bl	80034a4 <lsm303agr_read_reg>
 800368a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	b2da      	uxtb	r2, r3
 800369a:	7a3b      	ldrb	r3, [r7, #8]
 800369c:	f362 1305 	bfi	r3, r2, #4, #2
 80036a0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80036a2:	f107 0208 	add.w	r2, r7, #8
 80036a6:	2301      	movs	r3, #1
 80036a8:	2123      	movs	r1, #35	; 0x23
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ff12 	bl	80034d4 <lsm303agr_write_reg>
 80036b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	2301      	movs	r3, #1
 80036cc:	2123      	movs	r1, #35	; 0x23
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fee8 	bl	80034a4 <lsm303agr_read_reg>
 80036d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 80036d6:	7a3b      	ldrb	r3, [r7, #8]
 80036d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d81a      	bhi.n	8003718 <lsm303agr_xl_full_scale_get+0x5c>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <lsm303agr_xl_full_scale_get+0x2c>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	08003701 	.word	0x08003701
 80036f0:	08003709 	.word	0x08003709
 80036f4:	08003711 	.word	0x08003711
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
      break;
 80036fe:	e00f      	b.n	8003720 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
      break;
 8003706:	e00b      	b.n	8003720 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	e007      	b.n	8003720 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2203      	movs	r2, #3
 8003714:	701a      	strb	r2, [r3, #0]
      break;
 8003716:	e003      	b.n	8003720 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	bf00      	nop
  }

  return ret;
 8003720:	68fb      	ldr	r3, [r7, #12]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003738:	f107 0208 	add.w	r2, r7, #8
 800373c:	2301      	movs	r3, #1
 800373e:	2123      	movs	r1, #35	; 0x23
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff feaf 	bl	80034a4 <lsm303agr_read_reg>
 8003746:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	7a3b      	ldrb	r3, [r7, #8]
 8003758:	f362 13c7 	bfi	r3, r2, #7, #1
 800375c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800375e:	f107 0208 	add.w	r2, r7, #8
 8003762:	2301      	movs	r3, #1
 8003764:	2123      	movs	r1, #35	; 0x23
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff feb4 	bl	80034d4 <lsm303agr_write_reg>
 800376c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800376e:	68fb      	ldr	r3, [r7, #12]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003782:	f107 020c 	add.w	r2, r7, #12
 8003786:	2306      	movs	r3, #6
 8003788:	2128      	movs	r1, #40	; 0x28
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fe8a 	bl	80034a4 <lsm303agr_read_reg>
 8003790:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003792:	7b7b      	ldrb	r3, [r7, #13]
 8003794:	b21a      	sxth	r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	7b3b      	ldrb	r3, [r7, #12]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3302      	adds	r3, #2
 80037ba:	b212      	sxth	r2, r2
 80037bc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	3302      	adds	r3, #2
 80037c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	3302      	adds	r3, #2
 80037d8:	b212      	sxth	r2, r2
 80037da:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80037dc:	7c7a      	ldrb	r2, [r7, #17]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	b212      	sxth	r2, r2
 80037e4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	3304      	adds	r3, #4
 80037ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	7c3b      	ldrb	r3, [r7, #16]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	3304      	adds	r3, #4
 8003800:	b212      	sxth	r2, r2
 8003802:	801a      	strh	r2, [r3, #0]
  return ret;
 8003804:	697b      	ldr	r3, [r7, #20]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800381a:	f107 0208 	add.w	r2, r7, #8
 800381e:	2301      	movs	r3, #1
 8003820:	2160      	movs	r1, #96	; 0x60
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fe3e 	bl	80034a4 <lsm303agr_read_reg>
 8003828:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	b2da      	uxtb	r2, r3
 8003838:	7a3b      	ldrb	r3, [r7, #8]
 800383a:	f362 0301 	bfi	r3, r2, #0, #2
 800383e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003840:	f107 0208 	add.w	r2, r7, #8
 8003844:	2301      	movs	r3, #1
 8003846:	2160      	movs	r1, #96	; 0x60
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fe43 	bl	80034d4 <lsm303agr_write_reg>
 800384e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003866:	f107 0208 	add.w	r2, r7, #8
 800386a:	2301      	movs	r3, #1
 800386c:	2160      	movs	r1, #96	; 0x60
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fe18 	bl	80034a4 <lsm303agr_read_reg>
 8003874:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	b2da      	uxtb	r2, r3
 8003884:	7a3b      	ldrb	r3, [r7, #8]
 8003886:	f362 0383 	bfi	r3, r2, #2, #2
 800388a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800388c:	f107 0208 	add.w	r2, r7, #8
 8003890:	2301      	movs	r3, #1
 8003892:	2160      	movs	r1, #96	; 0x60
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fe1d 	bl	80034d4 <lsm303agr_write_reg>
 800389a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80038b2:	f107 0208 	add.w	r2, r7, #8
 80038b6:	2301      	movs	r3, #1
 80038b8:	2160      	movs	r1, #96	; 0x60
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fdf2 	bl	80034a4 <lsm303agr_read_reg>
 80038c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 80038c2:	7a3b      	ldrb	r3, [r7, #8]
 80038c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d81a      	bhi.n	8003904 <lsm303agr_mag_data_rate_get+0x5c>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <lsm303agr_mag_data_rate_get+0x2c>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038ed 	.word	0x080038ed
 80038dc:	080038f5 	.word	0x080038f5
 80038e0:	080038fd 	.word	0x080038fd
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
      break;
 80038ea:	e00f      	b.n	800390c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
      break;
 80038f2:	e00b      	b.n	800390c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
      break;
 80038fa:	e007      	b.n	800390c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2203      	movs	r2, #3
 8003900:	701a      	strb	r2, [r3, #0]
      break;
 8003902:	e003      	b.n	800390c <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
      break;
 800390a:	bf00      	nop
  }

  return ret;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop

08003918 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	2301      	movs	r3, #1
 800392a:	2162      	movs	r1, #98	; 0x62
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fdb9 	bl	80034a4 <lsm303agr_read_reg>
 8003932:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	7a3b      	ldrb	r3, [r7, #8]
 8003944:	f362 1304 	bfi	r3, r2, #4, #1
 8003948:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800394a:	f107 0208 	add.w	r2, r7, #8
 800394e:	2301      	movs	r3, #1
 8003950:	2162      	movs	r1, #98	; 0x62
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fdbe 	bl	80034d4 <lsm303agr_write_reg>
 8003958:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800396e:	f107 020c 	add.w	r2, r7, #12
 8003972:	2306      	movs	r3, #6
 8003974:	2168      	movs	r1, #104	; 0x68
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fd94 	bl	80034a4 <lsm303agr_read_reg>
 800397c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800397e:	7b7b      	ldrb	r3, [r7, #13]
 8003980:	b21a      	sxth	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398c:	b29b      	uxth	r3, r3
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	b29a      	uxth	r2, r3
 8003992:	7b3b      	ldrb	r3, [r7, #12]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21a      	sxth	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	3302      	adds	r3, #2
 80039a6:	b212      	sxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3302      	adds	r3, #2
 80039ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	7bbb      	ldrb	r3, [r7, #14]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	3302      	adds	r3, #2
 80039c4:	b212      	sxth	r2, r2
 80039c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80039c8:	7c7a      	ldrb	r2, [r7, #17]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	b212      	sxth	r2, r2
 80039d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	b29a      	uxth	r2, r3
 80039e0:	7c3b      	ldrb	r3, [r7, #16]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	3304      	adds	r3, #4
 80039ec:	b212      	sxth	r2, r2
 80039ee:	801a      	strh	r2, [r3, #0]
  return ret;
 80039f0:	697b      	ldr	r3, [r7, #20]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003a04:	2301      	movs	r3, #1
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	210f      	movs	r1, #15
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fd4a 	bl	80034a4 <lsm303agr_read_reg>
 8003a10:	60f8      	str	r0, [r7, #12]
  return ret;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003a26:	2301      	movs	r3, #1
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	214f      	movs	r1, #79	; 0x4f
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fd39 	bl	80034a4 <lsm303agr_read_reg>
 8003a32:	60f8      	str	r0, [r7, #12]
  return ret;
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003a4a:	f107 0208 	add.w	r2, r7, #8
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2162      	movs	r1, #98	; 0x62
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fd26 	bl	80034a4 <lsm303agr_read_reg>
 8003a58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10f      	bne.n	8003a80 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	7a3b      	ldrb	r3, [r7, #8]
 8003a6a:	f362 0341 	bfi	r3, r2, #1, #1
 8003a6e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003a70:	f107 0208 	add.w	r2, r7, #8
 8003a74:	2301      	movs	r3, #1
 8003a76:	2162      	movs	r1, #98	; 0x62
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fd2b 	bl	80034d4 <lsm303agr_write_reg>
 8003a7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003a96:	f107 0208 	add.w	r2, r7, #8
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	212e      	movs	r1, #46	; 0x2e
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fd00 	bl	80034a4 <lsm303agr_read_reg>
 8003aa4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	7a3b      	ldrb	r3, [r7, #8]
 8003ab6:	f362 1387 	bfi	r3, r2, #6, #2
 8003aba:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003abc:	f107 0208 	add.w	r2, r7, #8
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	212e      	movs	r1, #46	; 0x2e
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fd05 	bl	80034d4 <lsm303agr_write_reg>
 8003aca:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003acc:	68fb      	ldr	r3, [r7, #12]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ae2:	f107 0208 	add.w	r2, r7, #8
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	2162      	movs	r1, #98	; 0x62
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fcda 	bl	80034a4 <lsm303agr_read_reg>
 8003af0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	7a3b      	ldrb	r3, [r7, #8]
 8003b02:	f362 1345 	bfi	r3, r2, #5, #1
 8003b06:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b08:	f107 0208 	add.w	r2, r7, #8
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	2162      	movs	r1, #98	; 0x62
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fcdf 	bl	80034d4 <lsm303agr_write_reg>
 8003b16:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003b18:	68fb      	ldr	r3, [r7, #12]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e04d      	b.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	7b1a      	ldrb	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <LSM6DSL_RegisterBusIO+0xc4>)
 8003b7c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <LSM6DSL_RegisterBusIO+0xc8>)
 8003b82:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e020      	b.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4798      	blx	r3
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e016      	b.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d112      	bne.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10d      	bne.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2112      	movs	r1, #18
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fd2d 	bl	800462a <LSM6DSL_Write_Reg>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	08004a99 	.word	0x08004a99
 8003bec:	08004acf 	.word	0x08004acf

08003bf0 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	331c      	adds	r3, #28
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 fa59 	bl	80050b6 <lsm6dsl_auto_increment_set>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	e054      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	331c      	adds	r3, #28
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f980 	bl	8004f1c <lsm6dsl_block_data_update_set>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e048      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	331c      	adds	r3, #28
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa67 	bl	8005102 <lsm6dsl_fifo_mode_set>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e03c      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	331c      	adds	r3, #28
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ffe6 	bl	8004c20 <lsm6dsl_xl_data_rate_set>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e02c      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	331c      	adds	r3, #28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff7c 	bl	8004b64 <lsm6dsl_xl_full_scale_set>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	e020      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	331c      	adds	r3, #28
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 f8c0 	bl	8004e0c <lsm6dsl_gy_data_rate_set>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e010      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	331c      	adds	r3, #28
 8003c9c:	2106      	movs	r1, #6
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f84c 	bl	8004d3c <lsm6dsl_gy_full_scale_set>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e004      	b.n	8003cba <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f888 	bl	8003de0 <LSM6DSL_ACC_Disable>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	e015      	b.n	8003d08 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fa9a 	bl	8004216 <LSM6DSL_GYRO_Disable>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cec:	e00c      	b.n	8003d08 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	331c      	adds	r3, #28
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f9b7 	bl	8005094 <lsm6dsl_device_id_get>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	e000      	b.n	8003d34 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d64:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2210      	movs	r2, #16
 8003d6a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <LSM6DSL_GetCapabilities+0x58>)
 8003d76:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4a06      	ldr	r2, [pc, #24]	; (8003d94 <LSM6DSL_GetCapabilities+0x58>)
 8003d7c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	45d02000 	.word	0x45d02000

08003d98 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e014      	b.n	8003dd8 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f103 021c 	add.w	r2, r3, #28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f000 ff2f 	bl	8004c20 <lsm6dsl_xl_data_rate_set>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	e004      	b.n	8003dd8 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e01f      	b.n	8003e36 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f103 021c 	add.w	r2, r3, #28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	332b      	adds	r3, #43	; 0x2b
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f000 ff32 	bl	8004c6c <lsm6dsl_xl_data_rate_get>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	e010      	b.n	8003e36 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	331c      	adds	r3, #28
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 ff00 	bl	8004c20 <lsm6dsl_xl_data_rate_set>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e004      	b.n	8003e36 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	331c      	adds	r3, #28
 8003e52:	f107 020b 	add.w	r2, r7, #11
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fea9 	bl	8004bb0 <lsm6dsl_xl_full_scale_get>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	e023      	b.n	8003eb2 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d81b      	bhi.n	8003ea8 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e99 	.word	0x08003e99
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003e8c:	601a      	str	r2, [r3, #0]
      break;
 8003e8e:	e00f      	b.n	8003eb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003e94:	601a      	str	r2, [r3, #0]
      break;
 8003e96:	e00b      	b.n	8003eb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003e9c:	601a      	str	r2, [r3, #0]
      break;
 8003e9e:	e007      	b.n	8003eb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003ea4:	601a      	str	r2, [r3, #0]
      break;
 8003ea6:	e003      	b.n	8003eb0 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eac:	60fb      	str	r3, [r7, #12]
      break;
 8003eae:	bf00      	nop
  }

  return ret;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	3d79db23 	.word	0x3d79db23
 8003ec0:	3df9db23 	.word	0x3df9db23
 8003ec4:	3e79db23 	.word	0x3e79db23
 8003ec8:	3ef9db23 	.word	0x3ef9db23

08003ecc <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	331c      	adds	r3, #28
 8003ede:	f107 020b 	add.w	r2, r7, #11
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fec1 	bl	8004c6c <lsm6dsl_xl_data_rate_get>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	e054      	b.n	8003fa0 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	2b0b      	cmp	r3, #11
 8003efa:	d84c      	bhi.n	8003f96 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f47 	.word	0x08003f47
 8003f0c:	08003f4f 	.word	0x08003f4f
 8003f10:	08003f57 	.word	0x08003f57
 8003f14:	08003f5f 	.word	0x08003f5f
 8003f18:	08003f67 	.word	0x08003f67
 8003f1c:	08003f6f 	.word	0x08003f6f
 8003f20:	08003f77 	.word	0x08003f77
 8003f24:	08003f7f 	.word	0x08003f7f
 8003f28:	08003f87 	.word	0x08003f87
 8003f2c:	08003f8f 	.word	0x08003f8f
 8003f30:	08003f3f 	.word	0x08003f3f
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
      break;
 8003f3c:	e02f      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003f42:	601a      	str	r2, [r3, #0]
      break;
 8003f44:	e02b      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003f4a:	601a      	str	r2, [r3, #0]
      break;
 8003f4c:	e027      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003f52:	601a      	str	r2, [r3, #0]
      break;
 8003f54:	e023      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003f5a:	601a      	str	r2, [r3, #0]
      break;
 8003f5c:	e01f      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8003f62:	601a      	str	r2, [r3, #0]
      break;
 8003f64:	e01b      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8003f6a:	601a      	str	r2, [r3, #0]
      break;
 8003f6c:	e017      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8003f72:	601a      	str	r2, [r3, #0]
      break;
 8003f74:	e013      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8003f7a:	601a      	str	r2, [r3, #0]
      break;
 8003f7c:	e00f      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8003f82:	601a      	str	r2, [r3, #0]
      break;
 8003f84:	e00b      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8003f8a:	601a      	str	r2, [r3, #0]
      break;
 8003f8c:	e007      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8003f92:	601a      	str	r2, [r3, #0]
      break;
 8003f94:	e003      	b.n	8003f9e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	60fb      	str	r3, [r7, #12]
      break;
 8003f9c:	bf00      	nop
  }

  return ret;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	3fcccccd 	.word	0x3fcccccd
 8003fac:	41480000 	.word	0x41480000
 8003fb0:	41d00000 	.word	0x41d00000
 8003fb4:	42500000 	.word	0x42500000
 8003fb8:	42d00000 	.word	0x42d00000
 8003fbc:	43500000 	.word	0x43500000
 8003fc0:	43d00000 	.word	0x43d00000
 8003fc4:	44504000 	.word	0x44504000
 8003fc8:	44cf8000 	.word	0x44cf8000
 8003fcc:	45502000 	.word	0x45502000
 8003fd0:	45d02000 	.word	0x45d02000

08003fd4 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d106      	bne.n	8003ff8 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003fea:	ed97 0a00 	vldr	s0, [r7]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fb36 	bl	8004660 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	e005      	b.n	8004004 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003ff8:	ed97 0a00 	vldr	s0, [r7]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fbbb 	bl	8004778 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004002:	4603      	mov	r3, r0
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	331c      	adds	r3, #28
 800401e:	f107 020b 	add.w	r2, r7, #11
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fdc3 	bl	8004bb0 <lsm6dsl_xl_full_scale_get>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295
 8004034:	e023      	b.n	800407e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d81b      	bhi.n	8004074 <LSM6DSL_ACC_GetFullScale+0x68>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <LSM6DSL_ACC_GetFullScale+0x38>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004055 	.word	0x08004055
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800405d 	.word	0x0800405d
 8004050:	08004065 	.word	0x08004065
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2202      	movs	r2, #2
 8004058:	601a      	str	r2, [r3, #0]
      break;
 800405a:	e00f      	b.n	800407c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	601a      	str	r2, [r3, #0]
      break;
 8004062:	e00b      	b.n	800407c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2208      	movs	r2, #8
 8004068:	601a      	str	r2, [r3, #0]
      break;
 800406a:	e007      	b.n	800407c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2210      	movs	r2, #16
 8004070:	601a      	str	r2, [r3, #0]
      break;
 8004072:	e003      	b.n	800407c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	60fb      	str	r3, [r7, #12]
      break;
 800407a:	bf00      	nop
  }

  return ret;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop

08004088 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	dd0b      	ble.n	80040b0 <LSM6DSL_ACC_SetFullScale+0x28>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b04      	cmp	r3, #4
 800409c:	dd06      	ble.n	80040ac <LSM6DSL_ACC_SetFullScale+0x24>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	dc01      	bgt.n	80040a8 <LSM6DSL_ACC_SetFullScale+0x20>
 80040a4:	2303      	movs	r3, #3
 80040a6:	e004      	b.n	80040b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e002      	b.n	80040b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e000      	b.n	80040b2 <LSM6DSL_ACC_SetFullScale+0x2a>
 80040b0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80040b2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	331c      	adds	r3, #28
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fd51 	bl	8004b64 <lsm6dsl_xl_full_scale_set>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
 80040cc:	e000      	b.n	80040d0 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	331c      	adds	r3, #28
 80040e6:	f107 0208 	add.w	r2, r7, #8
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ff86 	bl	8004ffe <lsm6dsl_acceleration_raw_get>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
 80040fc:	e00c      	b.n	8004118 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80040fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004106:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800410e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	331c      	adds	r3, #28
 8004134:	f107 0210 	add.w	r2, r7, #16
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff5f 	bl	8004ffe <lsm6dsl_acceleration_raw_get>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	e03c      	b.n	80041c6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe74 	bl	8003e40 <LSM6DSL_ACC_GetSensitivity>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	e030      	b.n	80041c6 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004164:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004170:	edd7 7a03 	vldr	s15, [r7, #12]
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800417c:	ee17 2a90 	vmov	r2, s15
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004190:	edd7 7a03 	vldr	s15, [r7, #12]
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419c:	ee17 2a90 	vmov	r2, s15
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80041a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041bc:	ee17 2a90 	vmov	r2, s15
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e014      	b.n	800420e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f103 021c 	add.w	r2, r3, #28
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fe0a 	bl	8004e0c <lsm6dsl_gy_data_rate_set>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e004      	b.n	800420e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	e01f      	b.n	800426c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 021c 	add.w	r2, r3, #28
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	332c      	adds	r3, #44	; 0x2c
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f000 fe0d 	bl	8004e58 <lsm6dsl_gy_data_rate_get>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	e010      	b.n	800426c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	331c      	adds	r3, #28
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fddb 	bl	8004e0c <lsm6dsl_gy_data_rate_set>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	e004      	b.n	800426c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	331c      	adds	r3, #28
 8004286:	f107 020b 	add.w	r2, r7, #11
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fd7b 	bl	8004d88 <lsm6dsl_gy_full_scale_get>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	e02d      	b.n	80042fa <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d825      	bhi.n	80042f0 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042c9 	.word	0x080042c9
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	080042e9 	.word	0x080042e9
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80042cc:	601a      	str	r2, [r3, #0]
      break;
 80042ce:	e013      	b.n	80042f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80042d4:	601a      	str	r2, [r3, #0]
      break;
 80042d6:	e00f      	b.n	80042f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80042dc:	601a      	str	r2, [r3, #0]
      break;
 80042de:	e00b      	b.n	80042f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80042e4:	601a      	str	r2, [r3, #0]
      break;
 80042e6:	e007      	b.n	80042f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80042ec:	601a      	str	r2, [r3, #0]
      break;
 80042ee:	e003      	b.n	80042f8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	60fb      	str	r3, [r7, #12]
      break;
 80042f6:	bf00      	nop
  }

  return ret;
 80042f8:	68fb      	ldr	r3, [r7, #12]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	408c0000 	.word	0x408c0000
 8004308:	410c0000 	.word	0x410c0000
 800430c:	418c0000 	.word	0x418c0000
 8004310:	420c0000 	.word	0x420c0000
 8004314:	428c0000 	.word	0x428c0000

08004318 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	331c      	adds	r3, #28
 800432a:	f107 020b 	add.w	r2, r7, #11
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fd91 	bl	8004e58 <lsm6dsl_gy_data_rate_get>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	e04e      	b.n	80043e0 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	2b0a      	cmp	r3, #10
 8004346:	d846      	bhi.n	80043d6 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004387 	.word	0x08004387
 8004358:	0800438f 	.word	0x0800438f
 800435c:	08004397 	.word	0x08004397
 8004360:	0800439f 	.word	0x0800439f
 8004364:	080043a7 	.word	0x080043a7
 8004368:	080043af 	.word	0x080043af
 800436c:	080043b7 	.word	0x080043b7
 8004370:	080043bf 	.word	0x080043bf
 8004374:	080043c7 	.word	0x080043c7
 8004378:	080043cf 	.word	0x080043cf
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
      break;
 8004384:	e02b      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800438a:	601a      	str	r2, [r3, #0]
      break;
 800438c:	e027      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4a16      	ldr	r2, [pc, #88]	; (80043ec <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004392:	601a      	str	r2, [r3, #0]
      break;
 8004394:	e023      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800439a:	601a      	str	r2, [r3, #0]
      break;
 800439c:	e01f      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80043a2:	601a      	str	r2, [r3, #0]
      break;
 80043a4:	e01b      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	4a13      	ldr	r2, [pc, #76]	; (80043f8 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80043aa:	601a      	str	r2, [r3, #0]
      break;
 80043ac:	e017      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4a12      	ldr	r2, [pc, #72]	; (80043fc <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80043b2:	601a      	str	r2, [r3, #0]
      break;
 80043b4:	e013      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4a11      	ldr	r2, [pc, #68]	; (8004400 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80043ba:	601a      	str	r2, [r3, #0]
      break;
 80043bc:	e00f      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4a10      	ldr	r2, [pc, #64]	; (8004404 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80043c2:	601a      	str	r2, [r3, #0]
      break;
 80043c4:	e00b      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80043ca:	601a      	str	r2, [r3, #0]
      break;
 80043cc:	e007      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4a0e      	ldr	r2, [pc, #56]	; (800440c <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80043d2:	601a      	str	r2, [r3, #0]
      break;
 80043d4:	e003      	b.n	80043de <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	60fb      	str	r3, [r7, #12]
      break;
 80043dc:	bf00      	nop
  }

  return ret;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	41480000 	.word	0x41480000
 80043ec:	41d00000 	.word	0x41d00000
 80043f0:	42500000 	.word	0x42500000
 80043f4:	42d00000 	.word	0x42d00000
 80043f8:	43500000 	.word	0x43500000
 80043fc:	43d00000 	.word	0x43d00000
 8004400:	44504000 	.word	0x44504000
 8004404:	44cf8000 	.word	0x44cf8000
 8004408:	45502000 	.word	0x45502000
 800440c:	45d02000 	.word	0x45d02000

08004410 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004422:	2b01      	cmp	r3, #1
 8004424:	d106      	bne.n	8004434 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004426:	ed97 0a00 	vldr	s0, [r7]
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fa26 	bl	800487c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004430:	4603      	mov	r3, r0
 8004432:	e005      	b.n	8004440 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004434:	ed97 0a00 	vldr	s0, [r7]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 faab 	bl	8004994 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800443e:	4603      	mov	r3, r0
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	331c      	adds	r3, #28
 800445a:	f107 020b 	add.w	r2, r7, #11
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fc91 	bl	8004d88 <lsm6dsl_gy_full_scale_get>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e030      	b.n	80044d4 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d828      	bhi.n	80044ca <LSM6DSL_GYRO_GetFullScale+0x82>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044a5 	.word	0x080044a5
 8004484:	0800449d 	.word	0x0800449d
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044b7 	.word	0x080044b7
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044c1 	.word	0x080044c1
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	227d      	movs	r2, #125	; 0x7d
 80044a0:	601a      	str	r2, [r3, #0]
      break;
 80044a2:	e016      	b.n	80044d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	22fa      	movs	r2, #250	; 0xfa
 80044a8:	601a      	str	r2, [r3, #0]
      break;
 80044aa:	e012      	b.n	80044d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044b2:	601a      	str	r2, [r3, #0]
      break;
 80044b4:	e00d      	b.n	80044d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044bc:	601a      	str	r2, [r3, #0]
      break;
 80044be:	e008      	b.n	80044d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044c6:	601a      	str	r2, [r3, #0]
      break;
 80044c8:	e003      	b.n	80044d2 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	60fb      	str	r3, [r7, #12]
      break;
 80044d0:	bf00      	nop
  }

  return ret;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b7d      	cmp	r3, #125	; 0x7d
 80044ea:	dd12      	ble.n	8004512 <LSM6DSL_GYRO_SetFullScale+0x36>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2bfa      	cmp	r3, #250	; 0xfa
 80044f0:	dd0d      	ble.n	800450e <LSM6DSL_GYRO_SetFullScale+0x32>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044f8:	dd07      	ble.n	800450a <LSM6DSL_GYRO_SetFullScale+0x2e>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004500:	dc01      	bgt.n	8004506 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004506:	2306      	movs	r3, #6
 8004508:	e004      	b.n	8004514 <LSM6DSL_GYRO_SetFullScale+0x38>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <LSM6DSL_GYRO_SetFullScale+0x38>
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004512:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004514:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	331c      	adds	r3, #28
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fc0c 	bl	8004d3c <lsm6dsl_gy_full_scale_set>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	e000      	b.n	8004532 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	331c      	adds	r3, #28
 8004548:	f107 0208 	add.w	r2, r7, #8
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fd0a 	bl	8004f68 <lsm6dsl_angular_rate_raw_get>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	e00c      	b.n	800457a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004560:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004568:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004570:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	331c      	adds	r3, #28
 8004590:	f107 0210 	add.w	r2, r7, #16
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fce6 	bl	8004f68 <lsm6dsl_angular_rate_raw_get>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e03c      	b.n	8004622 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80045a8:	f107 030c 	add.w	r3, r7, #12
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fe60 	bl	8004274 <LSM6DSL_GYRO_GetSensitivity>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	e030      	b.n	8004622 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80045c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d8:	ee17 2a90 	vmov	r2, s15
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80045e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f8:	ee17 2a90 	vmov	r2, s15
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800460c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004618:	ee17 2a90 	vmov	r2, s15
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
 8004636:	4613      	mov	r3, r2
 8004638:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f103 001c 	add.w	r0, r3, #28
 8004640:	1cba      	adds	r2, r7, #2
 8004642:	78f9      	ldrb	r1, [r7, #3]
 8004644:	2301      	movs	r3, #1
 8004646:	f000 fa75 	bl	8004b34 <lsm6dsl_write_reg>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	e000      	b.n	8004658 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800466c:	edd7 7a00 	vldr	s15, [r7]
 8004670:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	d801      	bhi.n	8004682 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800467e:	2301      	movs	r3, #1
 8004680:	e058      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004682:	edd7 7a00 	vldr	s15, [r7]
 8004686:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800468a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004692:	d801      	bhi.n	8004698 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004694:	2302      	movs	r3, #2
 8004696:	e04d      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004698:	edd7 7a00 	vldr	s15, [r7]
 800469c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800475c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80046a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	d801      	bhi.n	80046ae <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80046aa:	2303      	movs	r3, #3
 80046ac:	e042      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046ae:	edd7 7a00 	vldr	s15, [r7]
 80046b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004760 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80046b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d801      	bhi.n	80046c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e037      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046c4:	edd7 7a00 	vldr	s15, [r7]
 80046c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004764 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80046cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d4:	d801      	bhi.n	80046da <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80046d6:	2305      	movs	r3, #5
 80046d8:	e02c      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046da:	edd7 7a00 	vldr	s15, [r7]
 80046de:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004768 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80046e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	d801      	bhi.n	80046f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80046ec:	2306      	movs	r3, #6
 80046ee:	e021      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80046f0:	edd7 7a00 	vldr	s15, [r7]
 80046f4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800476c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80046f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	d801      	bhi.n	8004706 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004702:	2307      	movs	r3, #7
 8004704:	e016      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004706:	edd7 7a00 	vldr	s15, [r7]
 800470a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004770 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800470e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	d801      	bhi.n	800471c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004718:	2308      	movs	r3, #8
 800471a:	e00b      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800471c:	edd7 7a00 	vldr	s15, [r7]
 8004720:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004774 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	d801      	bhi.n	8004732 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800472e:	2309      	movs	r3, #9
 8004730:	e000      	b.n	8004734 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004732:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004734:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	331c      	adds	r3, #28
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fa6e 	bl	8004c20 <lsm6dsl_xl_data_rate_set>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
 800474e:	e000      	b.n	8004752 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	42500000 	.word	0x42500000
 8004760:	42d00000 	.word	0x42d00000
 8004764:	43500000 	.word	0x43500000
 8004768:	43d00000 	.word	0x43d00000
 800476c:	44504000 	.word	0x44504000
 8004770:	44cf8000 	.word	0x44cf8000
 8004774:	45502000 	.word	0x45502000

08004778 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004784:	edd7 7a00 	vldr	s15, [r7]
 8004788:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800478c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	d801      	bhi.n	800479a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004796:	2301      	movs	r3, #1
 8004798:	e058      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800479a:	edd7 7a00 	vldr	s15, [r7]
 800479e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80047a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	d801      	bhi.n	80047b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e04d      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047b0:	edd7 7a00 	vldr	s15, [r7]
 80047b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004860 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80047b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	d801      	bhi.n	80047c6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e042      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047c6:	edd7 7a00 	vldr	s15, [r7]
 80047ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004864 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80047ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d801      	bhi.n	80047dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80047d8:	2304      	movs	r3, #4
 80047da:	e037      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047dc:	edd7 7a00 	vldr	s15, [r7]
 80047e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004868 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80047e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	d801      	bhi.n	80047f2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e02c      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047f2:	edd7 7a00 	vldr	s15, [r7]
 80047f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800486c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80047fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	d801      	bhi.n	8004808 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004804:	2306      	movs	r3, #6
 8004806:	e021      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004808:	edd7 7a00 	vldr	s15, [r7]
 800480c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004870 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	d801      	bhi.n	800481e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800481a:	2307      	movs	r3, #7
 800481c:	e016      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800481e:	edd7 7a00 	vldr	s15, [r7]
 8004822:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004874 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482e:	d801      	bhi.n	8004834 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004830:	2308      	movs	r3, #8
 8004832:	e00b      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004834:	edd7 7a00 	vldr	s15, [r7]
 8004838:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004878 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800483c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	d801      	bhi.n	800484a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004846:	2309      	movs	r3, #9
 8004848:	e000      	b.n	800484c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800484a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	42500000 	.word	0x42500000
 8004864:	42d00000 	.word	0x42d00000
 8004868:	43500000 	.word	0x43500000
 800486c:	43d00000 	.word	0x43d00000
 8004870:	44504000 	.word	0x44504000
 8004874:	44cf8000 	.word	0x44cf8000
 8004878:	45502000 	.word	0x45502000

0800487c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004888:	edd7 7a00 	vldr	s15, [r7]
 800488c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d801      	bhi.n	800489e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800489a:	2301      	movs	r3, #1
 800489c:	e058      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800489e:	edd7 7a00 	vldr	s15, [r7]
 80048a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ae:	d801      	bhi.n	80048b4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e04d      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048b4:	edd7 7a00 	vldr	s15, [r7]
 80048b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004978 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80048bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c4:	d801      	bhi.n	80048ca <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e042      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048ca:	edd7 7a00 	vldr	s15, [r7]
 80048ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800497c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80048d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d801      	bhi.n	80048e0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80048dc:	2304      	movs	r3, #4
 80048de:	e037      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048e0:	edd7 7a00 	vldr	s15, [r7]
 80048e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004980 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80048e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	d801      	bhi.n	80048f6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80048f2:	2305      	movs	r3, #5
 80048f4:	e02c      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80048f6:	edd7 7a00 	vldr	s15, [r7]
 80048fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004984 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80048fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	d801      	bhi.n	800490c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004908:	2306      	movs	r3, #6
 800490a:	e021      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800490c:	edd7 7a00 	vldr	s15, [r7]
 8004910:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004988 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	d801      	bhi.n	8004922 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800491e:	2307      	movs	r3, #7
 8004920:	e016      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004922:	edd7 7a00 	vldr	s15, [r7]
 8004926:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800498c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800492a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d801      	bhi.n	8004938 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004934:	2308      	movs	r3, #8
 8004936:	e00b      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004938:	edd7 7a00 	vldr	s15, [r7]
 800493c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004990 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d801      	bhi.n	800494e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800494a:	2309      	movs	r3, #9
 800494c:	e000      	b.n	8004950 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800494e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004950:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	331c      	adds	r3, #28
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fa56 	bl	8004e0c <lsm6dsl_gy_data_rate_set>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	e000      	b.n	800496e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	42500000 	.word	0x42500000
 800497c:	42d00000 	.word	0x42d00000
 8004980:	43500000 	.word	0x43500000
 8004984:	43d00000 	.word	0x43d00000
 8004988:	44504000 	.word	0x44504000
 800498c:	44cf8000 	.word	0x44cf8000
 8004990:	45502000 	.word	0x45502000

08004994 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 80049a0:	edd7 7a00 	vldr	s15, [r7]
 80049a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b0:	d801      	bhi.n	80049b6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e058      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049b6:	edd7 7a00 	vldr	s15, [r7]
 80049ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	d801      	bhi.n	80049cc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e04d      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049cc:	edd7 7a00 	vldr	s15, [r7]
 80049d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a7c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80049d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049dc:	d801      	bhi.n	80049e2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80049de:	2303      	movs	r3, #3
 80049e0:	e042      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049e2:	edd7 7a00 	vldr	s15, [r7]
 80049e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a80 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80049ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	d801      	bhi.n	80049f8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80049f4:	2304      	movs	r3, #4
 80049f6:	e037      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80049f8:	edd7 7a00 	vldr	s15, [r7]
 80049fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	d801      	bhi.n	8004a0e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	e02c      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a0e:	edd7 7a00 	vldr	s15, [r7]
 8004a12:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	d801      	bhi.n	8004a24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004a20:	2306      	movs	r3, #6
 8004a22:	e021      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a24:	edd7 7a00 	vldr	s15, [r7]
 8004a28:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a8c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	d801      	bhi.n	8004a3a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004a36:	2307      	movs	r3, #7
 8004a38:	e016      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a3a:	edd7 7a00 	vldr	s15, [r7]
 8004a3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a90 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d801      	bhi.n	8004a50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	e00b      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a50:	edd7 7a00 	vldr	s15, [r7]
 8004a54:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a94 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	d801      	bhi.n	8004a66 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004a62:	2309      	movs	r3, #9
 8004a64:	e000      	b.n	8004a68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a66:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	42500000 	.word	0x42500000
 8004a80:	42d00000 	.word	0x42d00000
 8004a84:	43500000 	.word	0x43500000
 8004a88:	43d00000 	.word	0x43d00000
 8004a8c:	44504000 	.word	0x44504000
 8004a90:	44cf8000 	.word	0x44cf8000
 8004a94:	45502000 	.word	0x45502000

08004a98 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	72fb      	strb	r3, [r7, #11]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	695c      	ldr	r4, [r3, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	b298      	uxth	r0, r3
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	b299      	uxth	r1, r3
 8004abe:	893b      	ldrh	r3, [r7, #8]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	47a0      	blx	r4
 8004ac4:	4603      	mov	r3, r0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd90      	pop	{r4, r7, pc}

08004ace <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ace:	b590      	push	{r4, r7, lr}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	460b      	mov	r3, r1
 8004adc:	72fb      	strb	r3, [r7, #11]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	691c      	ldr	r4, [r3, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	7b1b      	ldrb	r3, [r3, #12]
 8004aee:	b298      	uxth	r0, r3
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	b299      	uxth	r1, r3
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	47a0      	blx	r4
 8004afa:	4603      	mov	r3, r0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	460b      	mov	r3, r1
 8004b12:	72fb      	strb	r3, [r7, #11]
 8004b14:	4613      	mov	r3, r2
 8004b16:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685c      	ldr	r4, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6898      	ldr	r0, [r3, #8]
 8004b20:	893b      	ldrh	r3, [r7, #8]
 8004b22:	7af9      	ldrb	r1, [r7, #11]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	47a0      	blx	r4
 8004b28:	6178      	str	r0, [r7, #20]
  return ret;
 8004b2a:	697b      	ldr	r3, [r7, #20]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}

08004b34 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	72fb      	strb	r3, [r7, #11]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681c      	ldr	r4, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6898      	ldr	r0, [r3, #8]
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	7af9      	ldrb	r1, [r7, #11]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	47a0      	blx	r4
 8004b58:	6178      	str	r0, [r7, #20]
  return ret;
 8004b5a:	697b      	ldr	r3, [r7, #20]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd90      	pop	{r4, r7, pc}

08004b64 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004b70:	f107 0208 	add.w	r2, r7, #8
 8004b74:	2301      	movs	r3, #1
 8004b76:	2110      	movs	r1, #16
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ffc3 	bl	8004b04 <lsm6dsl_read_reg>
 8004b7e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7a3b      	ldrb	r3, [r7, #8]
 8004b90:	f362 0383 	bfi	r3, r2, #2, #2
 8004b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004b96:	f107 0208 	add.w	r2, r7, #8
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	2110      	movs	r1, #16
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffc8 	bl	8004b34 <lsm6dsl_write_reg>
 8004ba4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004bba:	f107 0208 	add.w	r2, r7, #8
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	2110      	movs	r1, #16
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ff9e 	bl	8004b04 <lsm6dsl_read_reg>
 8004bc8:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004bca:	7a3b      	ldrb	r3, [r7, #8]
 8004bcc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d81a      	bhi.n	8004c0c <lsm6dsl_xl_full_scale_get+0x5c>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <lsm6dsl_xl_full_scale_get+0x2c>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bf5 	.word	0x08004bf5
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c05 	.word	0x08004c05
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
      break;
 8004bf2:	e00f      	b.n	8004c14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
      break;
 8004bfa:	e00b      	b.n	8004c14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	701a      	strb	r2, [r3, #0]
      break;
 8004c02:	e007      	b.n	8004c14 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2203      	movs	r2, #3
 8004c08:	701a      	strb	r2, [r3, #0]
      break;
 8004c0a:	e003      	b.n	8004c14 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	bf00      	nop
  }

  return ret;
 8004c14:	68fb      	ldr	r3, [r7, #12]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c2c:	f107 0208 	add.w	r2, r7, #8
 8004c30:	2301      	movs	r3, #1
 8004c32:	2110      	movs	r1, #16
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff ff65 	bl	8004b04 <lsm6dsl_read_reg>
 8004c3a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	7a3b      	ldrb	r3, [r7, #8]
 8004c4c:	f362 1307 	bfi	r3, r2, #4, #4
 8004c50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c52:	f107 0208 	add.w	r2, r7, #8
 8004c56:	2301      	movs	r3, #1
 8004c58:	2110      	movs	r1, #16
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff6a 	bl	8004b34 <lsm6dsl_write_reg>
 8004c60:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c76:	f107 0208 	add.w	r2, r7, #8
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ff40 	bl	8004b04 <lsm6dsl_read_reg>
 8004c84:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004c86:	7a3b      	ldrb	r3, [r7, #8]
 8004c88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b0b      	cmp	r3, #11
 8004c90:	d84a      	bhi.n	8004d28 <lsm6dsl_xl_data_rate_get+0xbc>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cc9 	.word	0x08004cc9
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004ce1 	.word	0x08004ce1
 8004ca8:	08004ce9 	.word	0x08004ce9
 8004cac:	08004cf1 	.word	0x08004cf1
 8004cb0:	08004cf9 	.word	0x08004cf9
 8004cb4:	08004d01 	.word	0x08004d01
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d21 	.word	0x08004d21
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
      break;
 8004cce:	e02f      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
      break;
 8004cd6:	e02b      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	701a      	strb	r2, [r3, #0]
      break;
 8004cde:	e027      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	701a      	strb	r2, [r3, #0]
      break;
 8004ce6:	e023      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2204      	movs	r2, #4
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e01f      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	701a      	strb	r2, [r3, #0]
      break;
 8004cf6:	e01b      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2206      	movs	r2, #6
 8004cfc:	701a      	strb	r2, [r3, #0]
      break;
 8004cfe:	e017      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2207      	movs	r2, #7
 8004d04:	701a      	strb	r2, [r3, #0]
      break;
 8004d06:	e013      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	e00f      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2209      	movs	r2, #9
 8004d14:	701a      	strb	r2, [r3, #0]
      break;
 8004d16:	e00b      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	701a      	strb	r2, [r3, #0]
      break;
 8004d1e:	e007      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	220b      	movs	r2, #11
 8004d24:	701a      	strb	r2, [r3, #0]
      break;
 8004d26:	e003      	b.n	8004d30 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	701a      	strb	r2, [r3, #0]
      break;
 8004d2e:	bf00      	nop
  }

  return ret;
 8004d30:	68fb      	ldr	r3, [r7, #12]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004d48:	f107 0208 	add.w	r2, r7, #8
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	2111      	movs	r1, #17
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fed7 	bl	8004b04 <lsm6dsl_read_reg>
 8004d56:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	7a3b      	ldrb	r3, [r7, #8]
 8004d68:	f362 0343 	bfi	r3, r2, #1, #3
 8004d6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	2301      	movs	r3, #1
 8004d74:	2111      	movs	r1, #17
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fedc 	bl	8004b34 <lsm6dsl_write_reg>
 8004d7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004d92:	f107 0208 	add.w	r2, r7, #8
 8004d96:	2301      	movs	r3, #1
 8004d98:	2111      	movs	r1, #17
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff feb2 	bl	8004b04 <lsm6dsl_read_reg>
 8004da0:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004da2:	7a3b      	ldrb	r3, [r7, #8]
 8004da4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d824      	bhi.n	8004df8 <lsm6dsl_gy_full_scale_get+0x70>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df9 	.word	0x08004df9
 8004dcc:	08004df1 	.word	0x08004df1
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e013      	b.n	8004e00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e00f      	b.n	8004e00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	e00b      	b.n	8004e00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2204      	movs	r2, #4
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e007      	b.n	8004e00 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2206      	movs	r2, #6
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e003      	b.n	8004e00 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	701a      	strb	r2, [r3, #0]
      break;
 8004dfe:	bf00      	nop
  }

  return ret;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e18:	f107 0208 	add.w	r2, r7, #8
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	2111      	movs	r1, #17
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fe6f 	bl	8004b04 <lsm6dsl_read_reg>
 8004e26:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	7a3b      	ldrb	r3, [r7, #8]
 8004e38:	f362 1307 	bfi	r3, r2, #4, #4
 8004e3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e3e:	f107 0208 	add.w	r2, r7, #8
 8004e42:	2301      	movs	r3, #1
 8004e44:	2111      	movs	r1, #17
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fe74 	bl	8004b34 <lsm6dsl_write_reg>
 8004e4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	2301      	movs	r3, #1
 8004e68:	2111      	movs	r1, #17
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe4a 	bl	8004b04 <lsm6dsl_read_reg>
 8004e70:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8004e72:	7a3b      	ldrb	r3, [r7, #8]
 8004e74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b0a      	cmp	r3, #10
 8004e7c:	d844      	bhi.n	8004f08 <lsm6dsl_gy_data_rate_get+0xb0>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004eb9 	.word	0x08004eb9
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004ec9 	.word	0x08004ec9
 8004e94:	08004ed1 	.word	0x08004ed1
 8004e98:	08004ed9 	.word	0x08004ed9
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ee9 	.word	0x08004ee9
 8004ea4:	08004ef1 	.word	0x08004ef1
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004f01 	.word	0x08004f01
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
      break;
 8004eb6:	e02b      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
      break;
 8004ebe:	e027      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	701a      	strb	r2, [r3, #0]
      break;
 8004ec6:	e023      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	701a      	strb	r2, [r3, #0]
      break;
 8004ece:	e01f      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e01b      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2205      	movs	r2, #5
 8004edc:	701a      	strb	r2, [r3, #0]
      break;
 8004ede:	e017      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2206      	movs	r2, #6
 8004ee4:	701a      	strb	r2, [r3, #0]
      break;
 8004ee6:	e013      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2207      	movs	r2, #7
 8004eec:	701a      	strb	r2, [r3, #0]
      break;
 8004eee:	e00f      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	701a      	strb	r2, [r3, #0]
      break;
 8004ef6:	e00b      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2209      	movs	r2, #9
 8004efc:	701a      	strb	r2, [r3, #0]
      break;
 8004efe:	e007      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	220a      	movs	r2, #10
 8004f04:	701a      	strb	r2, [r3, #0]
      break;
 8004f06:	e003      	b.n	8004f10 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	220b      	movs	r2, #11
 8004f0c:	701a      	strb	r2, [r3, #0]
      break;
 8004f0e:	bf00      	nop
  }

  return ret;
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop

08004f1c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004f28:	f107 0208 	add.w	r2, r7, #8
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2112      	movs	r1, #18
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fde7 	bl	8004b04 <lsm6dsl_read_reg>
 8004f36:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	7a3b      	ldrb	r3, [r7, #8]
 8004f48:	f362 1386 	bfi	r3, r2, #6, #1
 8004f4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	2301      	movs	r3, #1
 8004f54:	2112      	movs	r1, #18
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fdec 	bl	8004b34 <lsm6dsl_write_reg>
 8004f5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004f72:	f107 020c 	add.w	r2, r7, #12
 8004f76:	2306      	movs	r3, #6
 8004f78:	2122      	movs	r1, #34	; 0x22
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff fdc2 	bl	8004b04 <lsm6dsl_read_reg>
 8004f80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f82:	7b7b      	ldrb	r3, [r7, #13]
 8004f84:	b21a      	sxth	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	7b3b      	ldrb	r3, [r7, #12]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b21a      	sxth	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004fa4:	7bfa      	ldrb	r2, [r7, #15]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3302      	adds	r3, #2
 8004faa:	b212      	sxth	r2, r2
 8004fac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	b212      	sxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004fcc:	7c7a      	ldrb	r2, [r7, #17]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	b212      	sxth	r2, r2
 8004fd4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	7c3b      	ldrb	r3, [r7, #16]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	b212      	sxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
  return ret;
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005008:	f107 020c 	add.w	r2, r7, #12
 800500c:	2306      	movs	r3, #6
 800500e:	2128      	movs	r1, #40	; 0x28
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fd77 	bl	8004b04 <lsm6dsl_read_reg>
 8005016:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005018:	7b7b      	ldrb	r3, [r7, #13]
 800501a:	b21a      	sxth	r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005026:	b29b      	uxth	r3, r3
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b29a      	uxth	r2, r3
 800502c:	7b3b      	ldrb	r3, [r7, #12]
 800502e:	b29b      	uxth	r3, r3
 8005030:	4413      	add	r3, r2
 8005032:	b29b      	uxth	r3, r3
 8005034:	b21a      	sxth	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3302      	adds	r3, #2
 8005040:	b212      	sxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3302      	adds	r3, #2
 8005048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800504c:	b29b      	uxth	r3, r3
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	b29a      	uxth	r2, r3
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	b29b      	uxth	r3, r3
 8005056:	4413      	add	r3, r2
 8005058:	b29a      	uxth	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3302      	adds	r3, #2
 800505e:	b212      	sxth	r2, r2
 8005060:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005062:	7c7a      	ldrb	r2, [r7, #17]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	3304      	adds	r3, #4
 8005068:	b212      	sxth	r2, r2
 800506a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	3304      	adds	r3, #4
 8005070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005074:	b29b      	uxth	r3, r3
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b29a      	uxth	r2, r3
 800507a:	7c3b      	ldrb	r3, [r7, #16]
 800507c:	b29b      	uxth	r3, r3
 800507e:	4413      	add	r3, r2
 8005080:	b29a      	uxth	r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3304      	adds	r3, #4
 8005086:	b212      	sxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
  return ret;
 800508a:	697b      	ldr	r3, [r7, #20]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800509e:	2301      	movs	r3, #1
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	210f      	movs	r1, #15
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fd2d 	bl	8004b04 <lsm6dsl_read_reg>
 80050aa:	60f8      	str	r0, [r7, #12]
  return ret;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80050c2:	f107 0208 	add.w	r2, r7, #8
 80050c6:	2301      	movs	r3, #1
 80050c8:	2112      	movs	r1, #18
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff fd1a 	bl	8004b04 <lsm6dsl_read_reg>
 80050d0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	7a3b      	ldrb	r3, [r7, #8]
 80050e2:	f362 0382 	bfi	r3, r2, #2, #1
 80050e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80050e8:	f107 0208 	add.w	r2, r7, #8
 80050ec:	2301      	movs	r3, #1
 80050ee:	2112      	movs	r1, #18
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff fd1f 	bl	8004b34 <lsm6dsl_write_reg>
 80050f6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050f8:	68fb      	ldr	r3, [r7, #12]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800510e:	f107 0208 	add.w	r2, r7, #8
 8005112:	2301      	movs	r3, #1
 8005114:	210a      	movs	r1, #10
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fcf4 	bl	8004b04 <lsm6dsl_read_reg>
 800511c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10f      	bne.n	8005144 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	b2da      	uxtb	r2, r3
 800512c:	7a3b      	ldrb	r3, [r7, #8]
 800512e:	f362 0302 	bfi	r3, r2, #0, #3
 8005132:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005134:	f107 0208 	add.w	r2, r7, #8
 8005138:	2301      	movs	r3, #1
 800513a:	210a      	movs	r1, #10
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fcf9 	bl	8004b34 <lsm6dsl_write_reg>
 8005142:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800515e:	2301      	movs	r3, #1
 8005160:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <IKS01A2_ENV_SENSOR_Init+0x24>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d032      	beq.n	80051d8 <IKS01A2_ENV_SENSOR_Init+0x88>
 8005172:	e063      	b.n	800523c <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005174:	6838      	ldr	r0, [r7, #0]
 8005176:	f000 f931 	bl	80053dc <HTS221_0_Probe>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	e098      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005186:	4a4e      	ldr	r2, [pc, #312]	; (80052c0 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	494c      	ldr	r1, [pc, #304]	; (80052c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005198:	f107 0108 	add.w	r1, r7, #8
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80051a6:	f06f 0306 	mvn.w	r3, #6
 80051aa:	e085      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80051ac:	7a3b      	ldrb	r3, [r7, #8]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d103      	bne.n	80051ba <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80051ba:	7abb      	ldrb	r3, [r7, #10]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d103      	bne.n	80051c8 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80051c8:	7a7b      	ldrb	r3, [r7, #9]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d13a      	bne.n	8005244 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	61bb      	str	r3, [r7, #24]
      }
      break;
 80051d6:	e035      	b.n	8005244 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f9b9 	bl	8005550 <LPS22HB_0_Probe>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295
 80051e8:	e066      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80051ea:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <IKS01A2_ENV_SENSOR_Init+0x170>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4933      	ldr	r1, [pc, #204]	; (80052c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051fc:	f107 0108 	add.w	r1, r7, #8
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800520a:	f06f 0306 	mvn.w	r3, #6
 800520e:	e053      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005210:	7a3b      	ldrb	r3, [r7, #8]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d103      	bne.n	800521e <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800521e:	7abb      	ldrb	r3, [r7, #10]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d103      	bne.n	800522c <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800522c:	7a7b      	ldrb	r3, [r7, #9]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10a      	bne.n	8005248 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	61bb      	str	r3, [r7, #24]
      }
      break;
 800523a:	e005      	b.n	8005248 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800523c:	f06f 0301 	mvn.w	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005242:	e002      	b.n	800524a <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005248:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	e031      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e02a      	b.n	80052b0 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	4013      	ands	r3, r2
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	429a      	cmp	r2, r3
 8005264:	d11e      	bne.n	80052a4 <IKS01A2_ENV_SENSOR_Init+0x154>
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	4013      	ands	r3, r2
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	429a      	cmp	r2, r3
 8005270:	d118      	bne.n	80052a4 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800527a:	4814      	ldr	r0, [pc, #80]	; (80052cc <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	440b      	add	r3, r1
 8005286:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	490d      	ldr	r1, [pc, #52]	; (80052c4 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800529e:	f06f 0304 	mvn.w	r3, #4
 80052a2:	e009      	b.n	80052b8 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d9d1      	bls.n	800525a <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2000019c 	.word	0x2000019c
 80052c4:	200003ac 	.word	0x200003ac
 80052c8:	20000134 	.word	0x20000134
 80052cc:	20000184 	.word	0x20000184

080052d0 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d903      	bls.n	80052e8 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80052e0:	f06f 0301 	mvn.w	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e028      	b.n	800533a <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80052e8:	4a16      	ldr	r2, [pc, #88]	; (8005344 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4013      	ands	r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d11c      	bne.n	8005334 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005302:	4812      	ldr	r0, [pc, #72]	; (800534c <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4413      	add	r3, r2
 800530c:	440b      	add	r3, r1
 800530e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800531c:	4610      	mov	r0, r2
 800531e:	4798      	blx	r3
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005326:	f06f 0304 	mvn.w	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e005      	b.n	800533a <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e002      	b.n	800533a <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005334:	f06f 0301 	mvn.w	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800533a:	68fb      	ldr	r3, [r7, #12]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200001a4 	.word	0x200001a4
 8005348:	20000134 	.word	0x20000134
 800534c:	20000184 	.word	0x20000184
 8005350:	200003ac 	.word	0x200003ac

08005354 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d903      	bls.n	800536e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005366:	f06f 0301 	mvn.w	r3, #1
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e029      	b.n	80053c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d11d      	bne.n	80053bc <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005388:	4812      	ldr	r0, [pc, #72]	; (80053d4 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	440b      	add	r3, r1
 8005394:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	490f      	ldr	r1, [pc, #60]	; (80053d8 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4610      	mov	r0, r2
 80053a6:	4798      	blx	r3
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ae:	f06f 0304 	mvn.w	r3, #4
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e005      	b.n	80053c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e002      	b.n	80053c2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80053bc:	f06f 0301 	mvn.w	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80053c2:	697b      	ldr	r3, [r7, #20]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200001a4 	.word	0x200001a4
 80053d0:	20000134 	.word	0x20000134
 80053d4:	20000184 	.word	0x20000184
 80053d8:	200003ac 	.word	0x200003ac

080053dc <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	; 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80053e8:	2300      	movs	r3, #0
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80053ec:	23bf      	movs	r3, #191	; 0xbf
 80053ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80053f2:	4b49      	ldr	r3, [pc, #292]	; (8005518 <HTS221_0_Probe+0x13c>)
 80053f4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80053f6:	4b49      	ldr	r3, [pc, #292]	; (800551c <HTS221_0_Probe+0x140>)
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HTS221_0_Probe+0x144>)
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80053fe:	4b49      	ldr	r3, [pc, #292]	; (8005524 <HTS221_0_Probe+0x148>)
 8005400:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005402:	4b49      	ldr	r3, [pc, #292]	; (8005528 <HTS221_0_Probe+0x14c>)
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005406:	f107 0320 	add.w	r3, r7, #32
 800540a:	4619      	mov	r1, r3
 800540c:	4847      	ldr	r0, [pc, #284]	; (800552c <HTS221_0_Probe+0x150>)
 800540e:	f7fb fbd7 	bl	8000bc0 <HTS221_RegisterBusIO>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005418:	f06f 0306 	mvn.w	r3, #6
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541e:	e076      	b.n	800550e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8005420:	f107 031f 	add.w	r3, r7, #31
 8005424:	4619      	mov	r1, r3
 8005426:	4841      	ldr	r0, [pc, #260]	; (800552c <HTS221_0_Probe+0x150>)
 8005428:	f7fb fc4f 	bl	8000cca <HTS221_ReadID>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005432:	f06f 0306 	mvn.w	r3, #6
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005438:	e069      	b.n	800550e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2bbc      	cmp	r3, #188	; 0xbc
 800543e:	d003      	beq.n	8005448 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005440:	f06f 0306 	mvn.w	r3, #6
 8005444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005446:	e062      	b.n	800550e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005448:	f107 030c 	add.w	r3, r7, #12
 800544c:	4619      	mov	r1, r3
 800544e:	4837      	ldr	r0, [pc, #220]	; (800552c <HTS221_0_Probe+0x150>)
 8005450:	f7fb fc52 	bl	8000cf8 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005454:	7b3b      	ldrb	r3, [r7, #12]
 8005456:	461a      	mov	r2, r3
 8005458:	7b7b      	ldrb	r3, [r7, #13]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005462:	4313      	orrs	r3, r2
 8005464:	4a32      	ldr	r2, [pc, #200]	; (8005530 <HTS221_0_Probe+0x154>)
 8005466:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HTS221_0_Probe+0x158>)
 800546a:	4a30      	ldr	r2, [pc, #192]	; (800552c <HTS221_0_Probe+0x150>)
 800546c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <HTS221_0_Probe+0x15c>)
 8005470:	4a32      	ldr	r2, [pc, #200]	; (800553c <HTS221_0_Probe+0x160>)
 8005472:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11d      	bne.n	80054b6 <HTS221_0_Probe+0xda>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d018      	beq.n	80054b6 <HTS221_0_Probe+0xda>
 8005484:	7b3b      	ldrb	r3, [r7, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d115      	bne.n	80054b6 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800548a:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HTS221_0_Probe+0x164>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <HTS221_0_Probe+0x168>)
 8005490:	492d      	ldr	r1, [pc, #180]	; (8005548 <HTS221_0_Probe+0x16c>)
 8005492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <HTS221_0_Probe+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <HTS221_0_Probe+0x158>)
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	4610      	mov	r0, r2
 80054a2:	4798      	blx	r3
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054aa:	f06f 0304 	mvn.w	r3, #4
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b0:	e001      	b.n	80054b6 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d11d      	bne.n	80054f8 <HTS221_0_Probe+0x11c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <HTS221_0_Probe+0x11c>
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d115      	bne.n	80054f8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HTS221_0_Probe+0x164>)
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <HTS221_0_Probe+0x168>)
 80054d2:	491e      	ldr	r1, [pc, #120]	; (800554c <HTS221_0_Probe+0x170>)
 80054d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <HTS221_0_Probe+0x15c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HTS221_0_Probe+0x158>)
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4610      	mov	r0, r2
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054ec:	f06f 0304 	mvn.w	r3, #4
 80054f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f2:	e001      	b.n	80054f8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HTS221_0_Probe+0x132>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005508:	f06f 0304 	mvn.w	r3, #4
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005510:	4618      	mov	r0, r3
 8005512:	3740      	adds	r7, #64	; 0x40
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08000859 	.word	0x08000859
 800551c:	080008d5 	.word	0x080008d5
 8005520:	08000989 	.word	0x08000989
 8005524:	08000925 	.word	0x08000925
 8005528:	080009ed 	.word	0x080009ed
 800552c:	200001ac 	.word	0x200001ac
 8005530:	200001a4 	.word	0x200001a4
 8005534:	200003ac 	.word	0x200003ac
 8005538:	2000019c 	.word	0x2000019c
 800553c:	20000004 	.word	0x20000004
 8005540:	20000134 	.word	0x20000134
 8005544:	20000184 	.word	0x20000184
 8005548:	20000028 	.word	0x20000028
 800554c:	20000014 	.word	0x20000014

08005550 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b090      	sub	sp, #64	; 0x40
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005558:	2300      	movs	r3, #0
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800555c:	2300      	movs	r3, #0
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005560:	23bb      	movs	r3, #187	; 0xbb
 8005562:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005566:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <LPS22HB_0_Probe+0x140>)
 8005568:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800556a:	4b4a      	ldr	r3, [pc, #296]	; (8005694 <LPS22HB_0_Probe+0x144>)
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800556e:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <LPS22HB_0_Probe+0x148>)
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005572:	4b4a      	ldr	r3, [pc, #296]	; (800569c <LPS22HB_0_Probe+0x14c>)
 8005574:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <LPS22HB_0_Probe+0x150>)
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	4619      	mov	r1, r3
 8005580:	4848      	ldr	r0, [pc, #288]	; (80056a4 <LPS22HB_0_Probe+0x154>)
 8005582:	f7fc f93b 	bl	80017fc <LPS22HB_RegisterBusIO>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800558c:	f06f 0306 	mvn.w	r3, #6
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005592:	e078      	b.n	8005686 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005594:	f107 031f 	add.w	r3, r7, #31
 8005598:	4619      	mov	r1, r3
 800559a:	4842      	ldr	r0, [pc, #264]	; (80056a4 <LPS22HB_0_Probe+0x154>)
 800559c:	f7fc f9d3 	bl	8001946 <LPS22HB_ReadID>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055a6:	f06f 0306 	mvn.w	r3, #6
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	e06b      	b.n	8005686 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2bb1      	cmp	r3, #177	; 0xb1
 80055b2:	d003      	beq.n	80055bc <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80055b4:	f06f 0306 	mvn.w	r3, #6
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ba:	e064      	b.n	8005686 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	4619      	mov	r1, r3
 80055c2:	4838      	ldr	r0, [pc, #224]	; (80056a4 <LPS22HB_0_Probe+0x154>)
 80055c4:	f7fc f9d6 	bl	8001974 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055c8:	7b3b      	ldrb	r3, [r7, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	7b7b      	ldrb	r3, [r7, #13]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80055d6:	4313      	orrs	r3, r2
 80055d8:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <LPS22HB_0_Probe+0x158>)
 80055da:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80055dc:	4b33      	ldr	r3, [pc, #204]	; (80056ac <LPS22HB_0_Probe+0x15c>)
 80055de:	4a31      	ldr	r2, [pc, #196]	; (80056a4 <LPS22HB_0_Probe+0x154>)
 80055e0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80055e2:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <LPS22HB_0_Probe+0x160>)
 80055e4:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <LPS22HB_0_Probe+0x164>)
 80055e6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11e      	bne.n	800562c <LPS22HB_0_Probe+0xdc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d019      	beq.n	800562c <LPS22HB_0_Probe+0xdc>
 80055f8:	7b3b      	ldrb	r3, [r7, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d116      	bne.n	800562c <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80055fe:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <LPS22HB_0_Probe+0x168>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <LPS22HB_0_Probe+0x16c>)
 8005604:	3303      	adds	r3, #3
 8005606:	492e      	ldr	r1, [pc, #184]	; (80056c0 <LPS22HB_0_Probe+0x170>)
 8005608:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800560c:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <LPS22HB_0_Probe+0x160>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a26      	ldr	r2, [pc, #152]	; (80056ac <LPS22HB_0_Probe+0x15c>)
 8005614:	6852      	ldr	r2, [r2, #4]
 8005616:	4610      	mov	r0, r2
 8005618:	4798      	blx	r3
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005620:	f06f 0304 	mvn.w	r3, #4
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005626:	e001      	b.n	800562c <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005628:	2300      	movs	r3, #0
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11e      	bne.n	8005670 <LPS22HB_0_Probe+0x120>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d019      	beq.n	8005670 <LPS22HB_0_Probe+0x120>
 800563c:	7b7b      	ldrb	r3, [r7, #13]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d116      	bne.n	8005670 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <LPS22HB_0_Probe+0x168>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <LPS22HB_0_Probe+0x16c>)
 8005648:	3303      	adds	r3, #3
 800564a:	491e      	ldr	r1, [pc, #120]	; (80056c4 <LPS22HB_0_Probe+0x174>)
 800564c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <LPS22HB_0_Probe+0x160>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <LPS22HB_0_Probe+0x15c>)
 8005658:	6852      	ldr	r2, [r2, #4]
 800565a:	4610      	mov	r0, r2
 800565c:	4798      	blx	r3
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005664:	f06f 0304 	mvn.w	r3, #4
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566a:	e001      	b.n	8005670 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <LPS22HB_0_Probe+0x136>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005680:	f06f 0304 	mvn.w	r3, #4
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005688:	4618      	mov	r0, r3
 800568a:	3740      	adds	r7, #64	; 0x40
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	08000859 	.word	0x08000859
 8005694:	080008d5 	.word	0x080008d5
 8005698:	08000989 	.word	0x08000989
 800569c:	08000925 	.word	0x08000925
 80056a0:	080009ed 	.word	0x080009ed
 80056a4:	200001d8 	.word	0x200001d8
 80056a8:	200001a4 	.word	0x200001a4
 80056ac:	200003ac 	.word	0x200003ac
 80056b0:	2000019c 	.word	0x2000019c
 80056b4:	2000003c 	.word	0x2000003c
 80056b8:	20000134 	.word	0x20000134
 80056bc:	20000184 	.word	0x20000184
 80056c0:	20000060 	.word	0x20000060
 80056c4:	2000004c 	.word	0x2000004c

080056c8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80056d6:	2301      	movs	r3, #1
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d06e      	beq.n	80057c2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	f200 809d 	bhi.w	8005826 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <IKS01A2_MOTION_SENSOR_Init+0x32>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d032      	beq.n	800575e <IKS01A2_MOTION_SENSOR_Init+0x96>
 80056f8:	e095      	b.n	8005826 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80056fa:	6838      	ldr	r0, [r7, #0]
 80056fc:	f000 f966 	bl	80059cc <LSM6DSL_0_Probe>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	e0cc      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800570c:	4a68      	ldr	r2, [pc, #416]	; (80058b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4967      	ldr	r1, [pc, #412]	; (80058b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800571e:	f107 010c 	add.w	r1, r7, #12
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800572c:	f06f 0306 	mvn.w	r3, #6
 8005730:	e0b9      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005732:	7b3b      	ldrb	r3, [r7, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d103      	bne.n	8005740 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	f043 0302 	orr.w	r3, r3, #2
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005740:	7b7b      	ldrb	r3, [r7, #13]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d103      	bne.n	800574e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d16c      	bne.n	800582e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	f043 0304 	orr.w	r3, r3, #4
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800575c:	e067      	b.n	800582e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800575e:	6838      	ldr	r0, [r7, #0]
 8005760:	f000 f9f0 	bl	8005b44 <LSM303AGR_ACC_0_Probe>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
 800576e:	e09a      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005770:	4a4f      	ldr	r2, [pc, #316]	; (80058b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	494e      	ldr	r1, [pc, #312]	; (80058b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005782:	f107 010c 	add.w	r1, r7, #12
 8005786:	4610      	mov	r0, r2
 8005788:	4798      	blx	r3
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005790:	f06f 0306 	mvn.w	r3, #6
 8005794:	e087      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005796:	7b3b      	ldrb	r3, [r7, #12]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d103      	bne.n	80057a4 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	f043 0302 	orr.w	r3, r3, #2
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80057a4:	7b7b      	ldrb	r3, [r7, #13]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d103      	bne.n	80057b2 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80057b2:	7bbb      	ldrb	r3, [r7, #14]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d13c      	bne.n	8005832 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057c0:	e037      	b.n	8005832 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80057c2:	6838      	ldr	r0, [r7, #0]
 80057c4:	f000 fa62 	bl	8005c8c <LSM303AGR_MAG_0_Probe>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295
 80057d2:	e068      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80057d4:	4a36      	ldr	r2, [pc, #216]	; (80058b0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4935      	ldr	r1, [pc, #212]	; (80058b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057e6:	f107 010c 	add.w	r1, r7, #12
 80057ea:	4610      	mov	r0, r2
 80057ec:	4798      	blx	r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80057f4:	f06f 0306 	mvn.w	r3, #6
 80057f8:	e055      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80057fa:	7b3b      	ldrb	r3, [r7, #12]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d103      	bne.n	8005808 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005808:	7b7b      	ldrb	r3, [r7, #13]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d103      	bne.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10c      	bne.n	8005836 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005824:	e007      	b.n	8005836 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005826:	f06f 0301 	mvn.w	r3, #1
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800582c:	e004      	b.n	8005838 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005836:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	e031      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e02a      	b.n	800589e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	4013      	ands	r3, r2
 800584e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005850:	429a      	cmp	r2, r3
 8005852:	d11e      	bne.n	8005892 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	4013      	ands	r3, r2
 800585a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585c:	429a      	cmp	r2, r3
 800585e:	d118      	bne.n	8005892 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005868:	4814      	ldr	r0, [pc, #80]	; (80058bc <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4413      	add	r3, r2
 8005872:	440b      	add	r3, r1
 8005874:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	490e      	ldr	r1, [pc, #56]	; (80058b4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005882:	4610      	mov	r0, r2
 8005884:	4798      	blx	r3
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800588c:	f06f 0304 	mvn.w	r3, #4
 8005890:	e009      	b.n	80058a6 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	3301      	adds	r3, #1
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d9d1      	bls.n	8005848 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3738      	adds	r7, #56	; 0x38
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000228 	.word	0x20000228
 80058b4:	200003b4 	.word	0x200003b4
 80058b8:	20000148 	.word	0x20000148
 80058bc:	20000204 	.word	0x20000204

080058c0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d903      	bls.n	80058d8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058d0:	f06f 0301 	mvn.w	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e028      	b.n	800592a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	4013      	ands	r3, r2
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d11c      	bne.n	8005924 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058f2:	4812      	ldr	r0, [pc, #72]	; (800593c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	440b      	add	r3, r1
 80058fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	490e      	ldr	r1, [pc, #56]	; (8005940 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005916:	f06f 0304 	mvn.w	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e005      	b.n	800592a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e002      	b.n	800592a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005924:	f06f 0301 	mvn.w	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000234 	.word	0x20000234
 8005938:	20000148 	.word	0x20000148
 800593c:	20000204 	.word	0x20000204
 8005940:	200003b4 	.word	0x200003b4

08005944 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d903      	bls.n	800595e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005956:	f06f 0301 	mvn.w	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e029      	b.n	80059b2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	d11d      	bne.n	80059ac <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005978:	4812      	ldr	r0, [pc, #72]	; (80059c4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	440b      	add	r3, r1
 8005984:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	490f      	ldr	r1, [pc, #60]	; (80059c8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800599e:	f06f 0304 	mvn.w	r3, #4
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e005      	b.n	80059b2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e002      	b.n	80059b2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80059ac:	f06f 0301 	mvn.w	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000234 	.word	0x20000234
 80059c0:	20000148 	.word	0x20000148
 80059c4:	20000204 	.word	0x20000204
 80059c8:	200003b4 	.word	0x200003b4

080059cc <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b092      	sub	sp, #72	; 0x48
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80059d8:	2300      	movs	r3, #0
 80059da:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80059dc:	23d7      	movs	r3, #215	; 0xd7
 80059de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80059e2:	4b4a      	ldr	r3, [pc, #296]	; (8005b0c <LSM6DSL_0_Probe+0x140>)
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80059e6:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <LSM6DSL_0_Probe+0x144>)
 80059e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80059ea:	4b4a      	ldr	r3, [pc, #296]	; (8005b14 <LSM6DSL_0_Probe+0x148>)
 80059ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80059ee:	4b4a      	ldr	r3, [pc, #296]	; (8005b18 <LSM6DSL_0_Probe+0x14c>)
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80059f2:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <LSM6DSL_0_Probe+0x150>)
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80059f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059fa:	4619      	mov	r1, r3
 80059fc:	4848      	ldr	r0, [pc, #288]	; (8005b20 <LSM6DSL_0_Probe+0x154>)
 80059fe:	f7fe f891 	bl	8003b24 <LSM6DSL_RegisterBusIO>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a08:	f06f 0306 	mvn.w	r3, #6
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	e077      	b.n	8005b00 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005a10:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005a14:	4619      	mov	r1, r3
 8005a16:	4842      	ldr	r0, [pc, #264]	; (8005b20 <LSM6DSL_0_Probe+0x154>)
 8005a18:	f7fe f97a 	bl	8003d10 <LSM6DSL_ReadID>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a22:	f06f 0306 	mvn.w	r3, #6
 8005a26:	647b      	str	r3, [r7, #68]	; 0x44
 8005a28:	e06a      	b.n	8005b00 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a2e:	2b6a      	cmp	r3, #106	; 0x6a
 8005a30:	d003      	beq.n	8005a3a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a32:	f06f 0306 	mvn.w	r3, #6
 8005a36:	647b      	str	r3, [r7, #68]	; 0x44
 8005a38:	e062      	b.n	8005b00 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4837      	ldr	r0, [pc, #220]	; (8005b20 <LSM6DSL_0_Probe+0x154>)
 8005a42:	f7fe f97b 	bl	8003d3c <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005a46:	7a7b      	ldrb	r3, [r7, #9]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	7a3b      	ldrb	r3, [r7, #8]
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	7abb      	ldrb	r3, [r7, #10]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4313      	orrs	r3, r2
 8005a56:	4a33      	ldr	r2, [pc, #204]	; (8005b24 <LSM6DSL_0_Probe+0x158>)
 8005a58:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005a5a:	4b33      	ldr	r3, [pc, #204]	; (8005b28 <LSM6DSL_0_Probe+0x15c>)
 8005a5c:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <LSM6DSL_0_Probe+0x154>)
 8005a5e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005a60:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <LSM6DSL_0_Probe+0x160>)
 8005a62:	4a33      	ldr	r2, [pc, #204]	; (8005b30 <LSM6DSL_0_Probe+0x164>)
 8005a64:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11d      	bne.n	8005aa8 <LSM6DSL_0_Probe+0xdc>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d018      	beq.n	8005aa8 <LSM6DSL_0_Probe+0xdc>
 8005a76:	7a7b      	ldrb	r3, [r7, #9]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d115      	bne.n	8005aa8 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005a7c:	4b2d      	ldr	r3, [pc, #180]	; (8005b34 <LSM6DSL_0_Probe+0x168>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <LSM6DSL_0_Probe+0x16c>)
 8005a82:	492e      	ldr	r1, [pc, #184]	; (8005b3c <LSM6DSL_0_Probe+0x170>)
 8005a84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <LSM6DSL_0_Probe+0x160>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a26      	ldr	r2, [pc, #152]	; (8005b28 <LSM6DSL_0_Probe+0x15c>)
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4610      	mov	r0, r2
 8005a94:	4798      	blx	r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a9c:	f06f 0304 	mvn.w	r3, #4
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa2:	e001      	b.n	8005aa8 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <LSM6DSL_0_Probe+0x11e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d018      	beq.n	8005aea <LSM6DSL_0_Probe+0x11e>
 8005ab8:	7a3b      	ldrb	r3, [r7, #8]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d115      	bne.n	8005aea <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <LSM6DSL_0_Probe+0x168>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <LSM6DSL_0_Probe+0x16c>)
 8005ac4:	491e      	ldr	r1, [pc, #120]	; (8005b40 <LSM6DSL_0_Probe+0x174>)
 8005ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <LSM6DSL_0_Probe+0x160>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <LSM6DSL_0_Probe+0x15c>)
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ade:	f06f 0304 	mvn.w	r3, #4
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	e001      	b.n	8005aea <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d107      	bne.n	8005b00 <LSM6DSL_0_Probe+0x134>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005afa:	f06f 0304 	mvn.w	r3, #4
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3748      	adds	r7, #72	; 0x48
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08000859 	.word	0x08000859
 8005b10:	080008d5 	.word	0x080008d5
 8005b14:	08000989 	.word	0x08000989
 8005b18:	08000925 	.word	0x08000925
 8005b1c:	080009ed 	.word	0x080009ed
 8005b20:	20000240 	.word	0x20000240
 8005b24:	20000234 	.word	0x20000234
 8005b28:	200003b4 	.word	0x200003b4
 8005b2c:	20000228 	.word	0x20000228
 8005b30:	200000dc 	.word	0x200000dc
 8005b34:	20000148 	.word	0x20000148
 8005b38:	20000204 	.word	0x20000204
 8005b3c:	20000110 	.word	0x20000110
 8005b40:	200000ec 	.word	0x200000ec

08005b44 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b092      	sub	sp, #72	; 0x48
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005b50:	2300      	movs	r3, #0
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005b54:	2333      	movs	r3, #51	; 0x33
 8005b56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005b5a:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <LSM303AGR_ACC_0_Probe+0x114>)
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005b5e:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <LSM303AGR_ACC_0_Probe+0x118>)
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005b62:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005b66:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <LSM303AGR_ACC_0_Probe+0x120>)
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <LSM303AGR_ACC_0_Probe+0x124>)
 8005b6c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b72:	4619      	mov	r1, r3
 8005b74:	483d      	ldr	r0, [pc, #244]	; (8005c6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005b76:	f7fc fc1f 	bl	80023b8 <LSM303AGR_ACC_RegisterBusIO>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b80:	f06f 0306 	mvn.w	r3, #6
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
 8005b86:	e062      	b.n	8005c4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005b88:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4837      	ldr	r0, [pc, #220]	; (8005c6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005b90:	f7fc fcd3 	bl	800253a <LSM303AGR_ACC_ReadID>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b9a:	f06f 0306 	mvn.w	r3, #6
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba0:	e055      	b.n	8005c4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ba6:	2b33      	cmp	r3, #51	; 0x33
 8005ba8:	d003      	beq.n	8005bb2 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005baa:	f06f 0306 	mvn.w	r3, #6
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb0:	e04d      	b.n	8005c4e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	482c      	ldr	r0, [pc, #176]	; (8005c6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005bba:	f7fc fcd5 	bl	8002568 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005bbe:	7a7b      	ldrb	r3, [r7, #9]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	7a3b      	ldrb	r3, [r7, #8]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005bc8:	7abb      	ldrb	r3, [r7, #10]
 8005bca:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005bd0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005bd2:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <LSM303AGR_ACC_0_Probe+0x130>)
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <LSM303AGR_ACC_0_Probe+0x128>)
 8005bd6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <LSM303AGR_ACC_0_Probe+0x134>)
 8005bda:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <LSM303AGR_ACC_0_Probe+0x138>)
 8005bdc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11e      	bne.n	8005c22 <LSM303AGR_ACC_0_Probe+0xde>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d019      	beq.n	8005c22 <LSM303AGR_ACC_0_Probe+0xde>
 8005bee:	7a3b      	ldrb	r3, [r7, #8]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d116      	bne.n	8005c22 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <LSM303AGR_ACC_0_Probe+0x140>)
 8005bfa:	3303      	adds	r3, #3
 8005bfc:	4922      	ldr	r1, [pc, #136]	; (8005c88 <LSM303AGR_ACC_0_Probe+0x144>)
 8005bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <LSM303AGR_ACC_0_Probe+0x134>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <LSM303AGR_ACC_0_Probe+0x130>)
 8005c0a:	6852      	ldr	r2, [r2, #4]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c16:	f06f 0304 	mvn.w	r3, #4
 8005c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1c:	e001      	b.n	8005c22 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <LSM303AGR_ACC_0_Probe+0xf4>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c32:	f06f 0304 	mvn.w	r3, #4
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d107      	bne.n	8005c4e <LSM303AGR_ACC_0_Probe+0x10a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c48:	f06f 0304 	mvn.w	r3, #4
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3748      	adds	r7, #72	; 0x48
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08000859 	.word	0x08000859
 8005c5c:	080008d5 	.word	0x080008d5
 8005c60:	08000989 	.word	0x08000989
 8005c64:	08000925 	.word	0x08000925
 8005c68:	080009ed 	.word	0x080009ed
 8005c6c:	20000270 	.word	0x20000270
 8005c70:	20000234 	.word	0x20000234
 8005c74:	200003b4 	.word	0x200003b4
 8005c78:	20000228 	.word	0x20000228
 8005c7c:	20000074 	.word	0x20000074
 8005c80:	20000148 	.word	0x20000148
 8005c84:	20000204 	.word	0x20000204
 8005c88:	20000084 	.word	0x20000084

08005c8c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b092      	sub	sp, #72	; 0x48
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005c98:	2300      	movs	r3, #0
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005c9c:	233d      	movs	r3, #61	; 0x3d
 8005c9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	; (8005da0 <LSM303AGR_MAG_0_Probe+0x114>)
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <LSM303AGR_MAG_0_Probe+0x118>)
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005caa:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005cae:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <LSM303AGR_MAG_0_Probe+0x120>)
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <LSM303AGR_MAG_0_Probe+0x124>)
 8005cb4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cba:	4619      	mov	r1, r3
 8005cbc:	483d      	ldr	r0, [pc, #244]	; (8005db4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005cbe:	f7fc ff41 	bl	8002b44 <LSM303AGR_MAG_RegisterBusIO>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cc8:	f06f 0306 	mvn.w	r3, #6
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	e062      	b.n	8005d96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005cd0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4837      	ldr	r0, [pc, #220]	; (8005db4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005cd8:	f7fc ffeb 	bl	8002cb2 <LSM303AGR_MAG_ReadID>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ce2:	f06f 0306 	mvn.w	r3, #6
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	e055      	b.n	8005d96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d003      	beq.n	8005cfa <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cf2:	f06f 0306 	mvn.w	r3, #6
 8005cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf8:	e04d      	b.n	8005d96 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	4619      	mov	r1, r3
 8005d00:	482c      	ldr	r0, [pc, #176]	; (8005db4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005d02:	f7fc ffed 	bl	8002ce0 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d06:	7a7b      	ldrb	r3, [r7, #9]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	7a3b      	ldrb	r3, [r7, #8]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005d10:	7abb      	ldrb	r3, [r7, #10]
 8005d12:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d14:	4313      	orrs	r3, r2
 8005d16:	4a28      	ldr	r2, [pc, #160]	; (8005db8 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005d18:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005d1a:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <LSM303AGR_MAG_0_Probe+0x130>)
 8005d1c:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <LSM303AGR_MAG_0_Probe+0x128>)
 8005d1e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005d20:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <LSM303AGR_MAG_0_Probe+0x134>)
 8005d22:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <LSM303AGR_MAG_0_Probe+0x138>)
 8005d24:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d11e      	bne.n	8005d6a <LSM303AGR_MAG_0_Probe+0xde>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d019      	beq.n	8005d6a <LSM303AGR_MAG_0_Probe+0xde>
 8005d36:	7abb      	ldrb	r3, [r7, #10]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d116      	bne.n	8005d6a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <LSM303AGR_MAG_0_Probe+0x140>)
 8005d42:	3306      	adds	r3, #6
 8005d44:	4922      	ldr	r1, [pc, #136]	; (8005dd0 <LSM303AGR_MAG_0_Probe+0x144>)
 8005d46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <LSM303AGR_MAG_0_Probe+0x134>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <LSM303AGR_MAG_0_Probe+0x130>)
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d5e:	f06f 0304 	mvn.w	r3, #4
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
 8005d64:	e001      	b.n	8005d6a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <LSM303AGR_MAG_0_Probe+0xf4>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d7a:	f06f 0304 	mvn.w	r3, #4
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <LSM303AGR_MAG_0_Probe+0x10a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d90:	f06f 0304 	mvn.w	r3, #4
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3748      	adds	r7, #72	; 0x48
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	08000859 	.word	0x08000859
 8005da4:	080008d5 	.word	0x080008d5
 8005da8:	08000989 	.word	0x08000989
 8005dac:	08000925 	.word	0x08000925
 8005db0:	080009ed 	.word	0x080009ed
 8005db4:	2000029c 	.word	0x2000029c
 8005db8:	20000234 	.word	0x20000234
 8005dbc:	200003b4 	.word	0x200003b4
 8005dc0:	20000228 	.word	0x20000228
 8005dc4:	200000a8 	.word	0x200000a8
 8005dc8:	20000148 	.word	0x20000148
 8005dcc:	20000204 	.word	0x20000204
 8005dd0:	200000b8 	.word	0x200000b8

08005dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dde:	2003      	movs	r0, #3
 8005de0:	f000 f942 	bl	8006068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005de4:	2000      	movs	r0, #0
 8005de6:	f000 f80d 	bl	8005e04 <HAL_InitTick>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	71fb      	strb	r3, [r7, #7]
 8005df4:	e001      	b.n	8005dfa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005df6:	f7fa fc85 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_InitTick+0x6c>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d023      	beq.n	8005e60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005e18:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <HAL_InitTick+0x70>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <HAL_InitTick+0x6c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f941 	bl	80060b6 <HAL_SYSTICK_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d809      	bhi.n	8005e54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e40:	2200      	movs	r2, #0
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	f000 f919 	bl	800607e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e4c:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <HAL_InitTick+0x74>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e007      	b.n	8005e64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
 8005e58:	e004      	b.n	8005e64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
 8005e5e:	e001      	b.n	8005e64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000160 	.word	0x20000160
 8005e74:	20000000 	.word	0x20000000
 8005e78:	2000015c 	.word	0x2000015c

08005e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_IncTick+0x20>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_IncTick+0x24>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <HAL_IncTick+0x24>)
 8005e8e:	6013      	str	r3, [r2, #0]
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000160 	.word	0x20000160
 8005ea0:	200003c0 	.word	0x200003c0

08005ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <HAL_GetTick+0x14>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	200003c0 	.word	0x200003c0

08005ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7ff ffee 	bl	8005ea4 <HAL_GetTick>
 8005ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d005      	beq.n	8005ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <HAL_Delay+0x44>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ee2:	bf00      	nop
 8005ee4:	f7ff ffde 	bl	8005ea4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d8f7      	bhi.n	8005ee4 <HAL_Delay+0x28>
  {
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000160 	.word	0x20000160

08005f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <__NVIC_SetPriorityGrouping+0x44>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f36:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <__NVIC_SetPriorityGrouping+0x44>)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	60d3      	str	r3, [r2, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <__NVIC_GetPriorityGrouping+0x18>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	f003 0307 	and.w	r3, r3, #7
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	e000ed00 	.word	0xe000ed00

08005f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db0a      	blt.n	8005f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	490c      	ldr	r1, [pc, #48]	; (8005fb4 <__NVIC_SetPriority+0x4c>)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f90:	e00a      	b.n	8005fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4908      	ldr	r1, [pc, #32]	; (8005fb8 <__NVIC_SetPriority+0x50>)
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	0112      	lsls	r2, r2, #4
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	761a      	strb	r2, [r3, #24]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	e000e100 	.word	0xe000e100
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	; 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f1c3 0307 	rsb	r3, r3, #7
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	bf28      	it	cs
 8005fda:	2304      	movcs	r3, #4
 8005fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d902      	bls.n	8005fec <NVIC_EncodePriority+0x30>
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3b03      	subs	r3, #3
 8005fea:	e000      	b.n	8005fee <NVIC_EncodePriority+0x32>
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	401a      	ands	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006004:	f04f 31ff 	mov.w	r1, #4294967295
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	43d9      	mvns	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006014:	4313      	orrs	r3, r2
         );
}
 8006016:	4618      	mov	r0, r3
 8006018:	3724      	adds	r7, #36	; 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3b01      	subs	r3, #1
 8006030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006034:	d301      	bcc.n	800603a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006036:	2301      	movs	r3, #1
 8006038:	e00f      	b.n	800605a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <SysTick_Config+0x40>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006042:	210f      	movs	r1, #15
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	f7ff ff8e 	bl	8005f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <SysTick_Config+0x40>)
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <SysTick_Config+0x40>)
 8006054:	2207      	movs	r2, #7
 8006056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	e000e010 	.word	0xe000e010

08006068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff47 	bl	8005f04 <__NVIC_SetPriorityGrouping>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	4603      	mov	r3, r0
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006090:	f7ff ff5c 	bl	8005f4c <__NVIC_GetPriorityGrouping>
 8006094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f7ff ff8e 	bl	8005fbc <NVIC_EncodePriority>
 80060a0:	4602      	mov	r2, r0
 80060a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a6:	4611      	mov	r1, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff5d 	bl	8005f68 <__NVIC_SetPriority>
}
 80060ae:	bf00      	nop
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ffb0 	bl	8006024 <SysTick_Config>
 80060c4:	4603      	mov	r3, r0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060de:	e17f      	b.n	80063e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	2101      	movs	r1, #1
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8171 	beq.w	80063da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d005      	beq.n	8006110 <HAL_GPIO_Init+0x40>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d130      	bne.n	8006172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4013      	ands	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006146:	2201      	movs	r2, #1
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4013      	ands	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	f003 0201 	and.w	r2, r3, #1
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	2b03      	cmp	r3, #3
 800617c:	d118      	bne.n	80061b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006184:	2201      	movs	r2, #1
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4013      	ands	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	08db      	lsrs	r3, r3, #3
 800619a:	f003 0201 	and.w	r2, r3, #1
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d017      	beq.n	80061ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	2203      	movs	r2, #3
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	43db      	mvns	r3, r3
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4013      	ands	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d123      	bne.n	8006240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	08da      	lsrs	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3208      	adds	r2, #8
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	220f      	movs	r2, #15
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4013      	ands	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	08da      	lsrs	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3208      	adds	r2, #8
 800623a:	6939      	ldr	r1, [r7, #16]
 800623c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	2203      	movs	r2, #3
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4013      	ands	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0203 	and.w	r2, r3, #3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80ac 	beq.w	80063da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006282:	4b5f      	ldr	r3, [pc, #380]	; (8006400 <HAL_GPIO_Init+0x330>)
 8006284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006286:	4a5e      	ldr	r2, [pc, #376]	; (8006400 <HAL_GPIO_Init+0x330>)
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	6613      	str	r3, [r2, #96]	; 0x60
 800628e:	4b5c      	ldr	r3, [pc, #368]	; (8006400 <HAL_GPIO_Init+0x330>)
 8006290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
 8006298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800629a:	4a5a      	ldr	r2, [pc, #360]	; (8006404 <HAL_GPIO_Init+0x334>)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	089b      	lsrs	r3, r3, #2
 80062a0:	3302      	adds	r3, #2
 80062a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	220f      	movs	r2, #15
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062c4:	d025      	beq.n	8006312 <HAL_GPIO_Init+0x242>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a4f      	ldr	r2, [pc, #316]	; (8006408 <HAL_GPIO_Init+0x338>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01f      	beq.n	800630e <HAL_GPIO_Init+0x23e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a4e      	ldr	r2, [pc, #312]	; (800640c <HAL_GPIO_Init+0x33c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d019      	beq.n	800630a <HAL_GPIO_Init+0x23a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a4d      	ldr	r2, [pc, #308]	; (8006410 <HAL_GPIO_Init+0x340>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_GPIO_Init+0x236>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a4c      	ldr	r2, [pc, #304]	; (8006414 <HAL_GPIO_Init+0x344>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00d      	beq.n	8006302 <HAL_GPIO_Init+0x232>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a4b      	ldr	r2, [pc, #300]	; (8006418 <HAL_GPIO_Init+0x348>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <HAL_GPIO_Init+0x22e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a4a      	ldr	r2, [pc, #296]	; (800641c <HAL_GPIO_Init+0x34c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_GPIO_Init+0x22a>
 80062f6:	2306      	movs	r3, #6
 80062f8:	e00c      	b.n	8006314 <HAL_GPIO_Init+0x244>
 80062fa:	2307      	movs	r3, #7
 80062fc:	e00a      	b.n	8006314 <HAL_GPIO_Init+0x244>
 80062fe:	2305      	movs	r3, #5
 8006300:	e008      	b.n	8006314 <HAL_GPIO_Init+0x244>
 8006302:	2304      	movs	r3, #4
 8006304:	e006      	b.n	8006314 <HAL_GPIO_Init+0x244>
 8006306:	2303      	movs	r3, #3
 8006308:	e004      	b.n	8006314 <HAL_GPIO_Init+0x244>
 800630a:	2302      	movs	r3, #2
 800630c:	e002      	b.n	8006314 <HAL_GPIO_Init+0x244>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <HAL_GPIO_Init+0x244>
 8006312:	2300      	movs	r3, #0
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	f002 0203 	and.w	r2, r2, #3
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	4093      	lsls	r3, r2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006324:	4937      	ldr	r1, [pc, #220]	; (8006404 <HAL_GPIO_Init+0x334>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3302      	adds	r3, #2
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006332:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_GPIO_Init+0x350>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	43db      	mvns	r3, r3
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4013      	ands	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006356:	4a32      	ldr	r2, [pc, #200]	; (8006420 <HAL_GPIO_Init+0x350>)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800635c:	4b30      	ldr	r3, [pc, #192]	; (8006420 <HAL_GPIO_Init+0x350>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	43db      	mvns	r3, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4013      	ands	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006380:	4a27      	ldr	r2, [pc, #156]	; (8006420 <HAL_GPIO_Init+0x350>)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006386:	4b26      	ldr	r3, [pc, #152]	; (8006420 <HAL_GPIO_Init+0x350>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	43db      	mvns	r3, r3
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4013      	ands	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <HAL_GPIO_Init+0x350>)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_GPIO_Init+0x350>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4013      	ands	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063d4:	4a12      	ldr	r2, [pc, #72]	; (8006420 <HAL_GPIO_Init+0x350>)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	3301      	adds	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f47f ae78 	bne.w	80060e0 <HAL_GPIO_Init+0x10>
  }
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	40010000 	.word	0x40010000
 8006408:	48000400 	.word	0x48000400
 800640c:	48000800 	.word	0x48000800
 8006410:	48000c00 	.word	0x48000c00
 8006414:	48001000 	.word	0x48001000
 8006418:	48001400 	.word	0x48001400
 800641c:	48001800 	.word	0x48001800
 8006420:	40010400 	.word	0x40010400

08006424 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006432:	e0cd      	b.n	80065d0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006434:	2201      	movs	r2, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	4013      	ands	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80c0 	beq.w	80065ca <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800644a:	4a68      	ldr	r2, [pc, #416]	; (80065ec <HAL_GPIO_DeInit+0x1c8>)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	3302      	adds	r3, #2
 8006452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006456:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	220f      	movs	r2, #15
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006472:	d025      	beq.n	80064c0 <HAL_GPIO_DeInit+0x9c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a5e      	ldr	r2, [pc, #376]	; (80065f0 <HAL_GPIO_DeInit+0x1cc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01f      	beq.n	80064bc <HAL_GPIO_DeInit+0x98>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a5d      	ldr	r2, [pc, #372]	; (80065f4 <HAL_GPIO_DeInit+0x1d0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d019      	beq.n	80064b8 <HAL_GPIO_DeInit+0x94>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a5c      	ldr	r2, [pc, #368]	; (80065f8 <HAL_GPIO_DeInit+0x1d4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_GPIO_DeInit+0x90>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a5b      	ldr	r2, [pc, #364]	; (80065fc <HAL_GPIO_DeInit+0x1d8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00d      	beq.n	80064b0 <HAL_GPIO_DeInit+0x8c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a5a      	ldr	r2, [pc, #360]	; (8006600 <HAL_GPIO_DeInit+0x1dc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <HAL_GPIO_DeInit+0x88>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a59      	ldr	r2, [pc, #356]	; (8006604 <HAL_GPIO_DeInit+0x1e0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d101      	bne.n	80064a8 <HAL_GPIO_DeInit+0x84>
 80064a4:	2306      	movs	r3, #6
 80064a6:	e00c      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064a8:	2307      	movs	r3, #7
 80064aa:	e00a      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064ac:	2305      	movs	r3, #5
 80064ae:	e008      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064b0:	2304      	movs	r3, #4
 80064b2:	e006      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064b4:	2303      	movs	r3, #3
 80064b6:	e004      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e002      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_GPIO_DeInit+0x9e>
 80064c0:	2300      	movs	r3, #0
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f002 0203 	and.w	r2, r2, #3
 80064c8:	0092      	lsls	r2, r2, #2
 80064ca:	4093      	lsls	r3, r2
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d132      	bne.n	8006538 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80064d2:	4b4d      	ldr	r3, [pc, #308]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	43db      	mvns	r3, r3
 80064da:	494b      	ldr	r1, [pc, #300]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064dc:	4013      	ands	r3, r2
 80064de:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80064e0:	4b49      	ldr	r3, [pc, #292]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	4947      	ldr	r1, [pc, #284]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80064ee:	4b46      	ldr	r3, [pc, #280]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	4944      	ldr	r1, [pc, #272]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80064fc:	4b42      	ldr	r3, [pc, #264]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	43db      	mvns	r3, r3
 8006504:	4940      	ldr	r1, [pc, #256]	; (8006608 <HAL_GPIO_DeInit+0x1e4>)
 8006506:	4013      	ands	r3, r2
 8006508:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	220f      	movs	r2, #15
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800651a:	4a34      	ldr	r2, [pc, #208]	; (80065ec <HAL_GPIO_DeInit+0x1c8>)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	3302      	adds	r3, #2
 8006522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	43da      	mvns	r2, r3
 800652a:	4830      	ldr	r0, [pc, #192]	; (80065ec <HAL_GPIO_DeInit+0x1c8>)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	400a      	ands	r2, r1
 8006532:	3302      	adds	r3, #2
 8006534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	2103      	movs	r1, #3
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	08da      	lsrs	r2, r3, #3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3208      	adds	r2, #8
 8006554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	220f      	movs	r2, #15
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	43db      	mvns	r3, r3
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	08d2      	lsrs	r2, r2, #3
 800656c:	4019      	ands	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3208      	adds	r2, #8
 8006572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	2103      	movs	r1, #3
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	2101      	movs	r1, #1
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	fa01 f303 	lsl.w	r3, r1, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	401a      	ands	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	2103      	movs	r1, #3
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	401a      	ands	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	2101      	movs	r1, #1
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fa01 f303 	lsl.w	r3, r1, r3
 80065c2:	43db      	mvns	r3, r3
 80065c4:	401a      	ands	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	3301      	adds	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f47f af2b 	bne.w	8006434 <HAL_GPIO_DeInit+0x10>
  }
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40010000 	.word	0x40010000
 80065f0:	48000400 	.word	0x48000400
 80065f4:	48000800 	.word	0x48000800
 80065f8:	48000c00 	.word	0x48000c00
 80065fc:	48001000 	.word	0x48001000
 8006600:	48001400 	.word	0x48001400
 8006604:	48001800 	.word	0x48001800
 8006608:	40010400 	.word	0x40010400

0800660c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
 8006618:	4613      	mov	r3, r2
 800661a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800661c:	787b      	ldrb	r3, [r7, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006628:	e002      	b.n	8006630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800662a:	887a      	ldrh	r2, [r7, #2]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e081      	b.n	8006752 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8a8 	bl	80067b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2224      	movs	r2, #36	; 0x24
 800666c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800668c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800669c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	e006      	b.n	80066c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d104      	bne.n	80066d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e021      	b.n	80067b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2224      	movs	r2, #36	; 0x24
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0201 	bic.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f821 	bl	80067cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	4608      	mov	r0, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	461a      	mov	r2, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	817b      	strh	r3, [r7, #10]
 80067f2:	460b      	mov	r3, r1
 80067f4:	813b      	strh	r3, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	f040 80f9 	bne.w	80069fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_I2C_Mem_Write+0x34>
 800680e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0ed      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_I2C_Mem_Write+0x4e>
 800682a:	2302      	movs	r3, #2
 800682c:	e0e6      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006836:	f7ff fb35 	bl	8005ea4 <HAL_GetTick>
 800683a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2319      	movs	r3, #25
 8006842:	2201      	movs	r2, #1
 8006844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fadd 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0d1      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	; 0x21
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2240      	movs	r2, #64	; 0x40
 8006864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006880:	88f8      	ldrh	r0, [r7, #6]
 8006882:	893a      	ldrh	r2, [r7, #8]
 8006884:	8979      	ldrh	r1, [r7, #10]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4603      	mov	r3, r0
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f9ed 	bl	8006c70 <I2C_RequestMemoryWrite>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0a9      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	d90e      	bls.n	80068d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	8979      	ldrh	r1, [r7, #10]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fc45 	bl	8007158 <I2C_TransferConfig>
 80068ce:	e00f      	b.n	80068f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fc34 	bl	8007158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fac7 	bl	8006e88 <I2C_WaitOnTXISFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e07b      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d034      	beq.n	80069a8 <HAL_I2C_Mem_Write+0x1c8>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	2b00      	cmp	r3, #0
 8006944:	d130      	bne.n	80069a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	2200      	movs	r2, #0
 800694e:	2180      	movs	r1, #128	; 0x80
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 fa59 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e04d      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2bff      	cmp	r3, #255	; 0xff
 8006968:	d90e      	bls.n	8006988 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	22ff      	movs	r2, #255	; 0xff
 800696e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006974:	b2da      	uxtb	r2, r3
 8006976:	8979      	ldrh	r1, [r7, #10]
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fbe9 	bl	8007158 <I2C_TransferConfig>
 8006986:	e00f      	b.n	80069a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006996:	b2da      	uxtb	r2, r3
 8006998:	8979      	ldrh	r1, [r7, #10]
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fbd8 	bl	8007158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d19e      	bne.n	80068f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 faa6 	bl	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e01a      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2220      	movs	r2, #32
 80069cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6859      	ldr	r1, [r3, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <HAL_I2C_Mem_Write+0x224>)
 80069da:	400b      	ands	r3, r1
 80069dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e000      	b.n	80069fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
  }
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	fe00e800 	.word	0xfe00e800

08006a08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	817b      	strh	r3, [r7, #10]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	813b      	strh	r3, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	f040 80fd 	bne.w	8006c2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_I2C_Mem_Read+0x34>
 8006a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0f1      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_I2C_Mem_Read+0x4e>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0ea      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a5e:	f7ff fa21 	bl	8005ea4 <HAL_GetTick>
 8006a62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2319      	movs	r3, #25
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f9c9 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0d5      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2222      	movs	r2, #34	; 0x22
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2240      	movs	r2, #64	; 0x40
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aa8:	88f8      	ldrh	r0, [r7, #6]
 8006aaa:	893a      	ldrh	r2, [r7, #8]
 8006aac:	8979      	ldrh	r1, [r7, #10]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f92d 	bl	8006d18 <I2C_RequestMemoryRead>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0ad      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d90e      	bls.n	8006af8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	8979      	ldrh	r1, [r7, #10]
 8006ae8:	4b52      	ldr	r3, [pc, #328]	; (8006c34 <HAL_I2C_Mem_Read+0x22c>)
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fb31 	bl	8007158 <I2C_TransferConfig>
 8006af6:	e00f      	b.n	8006b18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	8979      	ldrh	r1, [r7, #10]
 8006b0a:	4b4a      	ldr	r3, [pc, #296]	; (8006c34 <HAL_I2C_Mem_Read+0x22c>)
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fb20 	bl	8007158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2104      	movs	r1, #4
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f970 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e07c      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d034      	beq.n	8006bd8 <HAL_I2C_Mem_Read+0x1d0>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d130      	bne.n	8006bd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f941 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e04d      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d90e      	bls.n	8006bb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	8979      	ldrh	r1, [r7, #10]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fad1 	bl	8007158 <I2C_TransferConfig>
 8006bb6:	e00f      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fac0 	bl	8007158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d19a      	bne.n	8006b18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f98e 	bl	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e01a      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6859      	ldr	r1, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_I2C_Mem_Read+0x230>)
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	80002400 	.word	0x80002400
 8006c38:	fe00e800 	.word	0xfe00e800

08006c3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4a:	b2db      	uxtb	r3, r3
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	817b      	strh	r3, [r7, #10]
 8006c82:	460b      	mov	r3, r1
 8006c84:	813b      	strh	r3, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	8979      	ldrh	r1, [r7, #10]
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <I2C_RequestMemoryWrite+0xa4>)
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fa5d 	bl	8007158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f8f0 	bl	8006e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e02c      	b.n	8006d0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cc2:	e015      	b.n	8006cf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cc4:	893b      	ldrh	r3, [r7, #8]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f8d6 	bl	8006e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e012      	b.n	8006d0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce6:	893b      	ldrh	r3, [r7, #8]
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2180      	movs	r1, #128	; 0x80
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f884 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	80002000 	.word	0x80002000

08006d18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	817b      	strh	r3, [r7, #10]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	813b      	strh	r3, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	8979      	ldrh	r1, [r7, #10]
 8006d38:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <I2C_RequestMemoryRead+0xa4>)
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa0a 	bl	8007158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f89d 	bl	8006e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e02c      	b.n	8006db2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d105      	bne.n	8006d6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5e:	893b      	ldrh	r3, [r7, #8]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28
 8006d68:	e015      	b.n	8006d96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d6a:	893b      	ldrh	r3, [r7, #8]
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	69b9      	ldr	r1, [r7, #24]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f883 	bl	8006e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e012      	b.n	8006db2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8c:	893b      	ldrh	r3, [r7, #8]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2140      	movs	r1, #64	; 0x40
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f831 	bl	8006e08 <I2C_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	80002000 	.word	0x80002000

08006dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d103      	bne.n	8006dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d007      	beq.n	8006dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	619a      	str	r2, [r3, #24]
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	4613      	mov	r3, r2
 8006e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e18:	e022      	b.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d01e      	beq.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e22:	f7ff f83f 	bl	8005ea4 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d113      	bne.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e00f      	b.n	8006e80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf0c      	ite	eq
 8006e70:	2301      	moveq	r3, #1
 8006e72:	2300      	movne	r3, #0
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d0cd      	beq.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e94:	e02c      	b.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f870 	bl	8006f80 <I2C_IsErrorOccurred>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e02a      	b.n	8006f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d01e      	beq.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb2:	f7fe fff7 	bl	8005ea4 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d113      	bne.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e007      	b.n	8006f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d1cb      	bne.n	8006e96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f14:	e028      	b.n	8006f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f830 	bl	8006f80 <I2C_IsErrorOccurred>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e026      	b.n	8006f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2a:	f7fe ffbb 	bl	8005ea4 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d113      	bne.n	8006f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e007      	b.n	8006f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d1cf      	bne.n	8006f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d075      	beq.n	8007098 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fb4:	e056      	b.n	8007064 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d052      	beq.n	8007064 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fbe:	f7fe ff71 	bl	8005ea4 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <I2C_IsErrorOccurred+0x54>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d147      	bne.n	8007064 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d12e      	bne.n	8007056 <I2C_IsErrorOccurred+0xd6>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ffe:	d02a      	beq.n	8007056 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007000:	7cfb      	ldrb	r3, [r7, #19]
 8007002:	2b20      	cmp	r3, #32
 8007004:	d027      	beq.n	8007056 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007014:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007016:	f7fe ff45 	bl	8005ea4 <HAL_GetTick>
 800701a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800701c:	e01b      	b.n	8007056 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800701e:	f7fe ff41 	bl	8005ea4 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b19      	cmp	r3, #25
 800702a:	d914      	bls.n	8007056 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b20      	cmp	r3, #32
 8007062:	d1dc      	bne.n	800701e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d003      	beq.n	800707a <I2C_IsErrorOccurred+0xfa>
 8007072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007076:	2b00      	cmp	r3, #0
 8007078:	d09d      	beq.n	8006fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800707a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2220      	movs	r2, #32
 8007088:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f043 0304 	orr.w	r3, r3, #4
 8007090:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	f043 0308 	orr.w	r3, r3, #8
 80070d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f043 0302 	orr.w	r3, r3, #2
 80070f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01c      	beq.n	8007148 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7ff fe56 	bl	8006dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <I2C_IsErrorOccurred+0x1d4>)
 8007120:	400b      	ands	r3, r1
 8007122:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	431a      	orrs	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	; 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	fe00e800 	.word	0xfe00e800

08007158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	817b      	strh	r3, [r7, #10]
 8007166:	4613      	mov	r3, r2
 8007168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800716a:	897b      	ldrh	r3, [r7, #10]
 800716c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007170:	7a7b      	ldrb	r3, [r7, #9]
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007178:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	4313      	orrs	r3, r2
 8007182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007186:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	0d5b      	lsrs	r3, r3, #21
 8007192:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <I2C_TransferConfig+0x60>)
 8007198:	430b      	orrs	r3, r1
 800719a:	43db      	mvns	r3, r3
 800719c:	ea02 0103 	and.w	r1, r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	03ff63ff 	.word	0x03ff63ff

080071bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d138      	bne.n	8007244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071dc:	2302      	movs	r3, #2
 80071de:	e032      	b.n	8007246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800720e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6819      	ldr	r1, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007244:	2302      	movs	r3, #2
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b20      	cmp	r3, #32
 8007266:	d139      	bne.n	80072dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007272:	2302      	movs	r3, #2
 8007274:	e033      	b.n	80072de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2224      	movs	r2, #36	; 0x24
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_PWREx_GetVoltageRange+0x18>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40007000 	.word	0x40007000

08007308 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007316:	d130      	bne.n	800737a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007318:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007324:	d038      	beq.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007326:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800732e:	4a1e      	ldr	r2, [pc, #120]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007334:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2232      	movs	r2, #50	; 0x32
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	4a1b      	ldr	r2, [pc, #108]	; (80073b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	0c9b      	lsrs	r3, r3, #18
 8007348:	3301      	adds	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800734c:	e002      	b.n	8007354 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b01      	subs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007354:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d102      	bne.n	8007368 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f2      	bne.n	800734e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d110      	bne.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e00f      	b.n	800739a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007386:	d007      	beq.n	8007398 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007390:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007396:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40007000 	.word	0x40007000
 80073ac:	20000000 	.word	0x20000000
 80073b0:	431bde83 	.word	0x431bde83

080073b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e3d4      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c6:	4ba1      	ldr	r3, [pc, #644]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 030c 	and.w	r3, r3, #12
 80073ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073d0:	4b9e      	ldr	r3, [pc, #632]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80e4 	beq.w	80075b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <HAL_RCC_OscConfig+0x4a>
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b0c      	cmp	r3, #12
 80073f2:	f040 808b 	bne.w	800750c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 8087 	bne.w	800750c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80073fe:	4b93      	ldr	r3, [pc, #588]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_RCC_OscConfig+0x62>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e3ac      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	4b8c      	ldr	r3, [pc, #560]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <HAL_RCC_OscConfig+0x7c>
 8007426:	4b89      	ldr	r3, [pc, #548]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800742e:	e005      	b.n	800743c <HAL_RCC_OscConfig+0x88>
 8007430:	4b86      	ldr	r3, [pc, #536]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800743c:	4293      	cmp	r3, r2
 800743e:	d223      	bcs.n	8007488 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fd41 	bl	8007ecc <RCC_SetFlashLatencyFromMSIRange>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e38d      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007454:	4b7d      	ldr	r3, [pc, #500]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a7c      	ldr	r2, [pc, #496]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800745a:	f043 0308 	orr.w	r3, r3, #8
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	4b7a      	ldr	r3, [pc, #488]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	4977      	ldr	r1, [pc, #476]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007472:	4b76      	ldr	r3, [pc, #472]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	4972      	ldr	r1, [pc, #456]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007482:	4313      	orrs	r3, r2
 8007484:	604b      	str	r3, [r1, #4]
 8007486:	e025      	b.n	80074d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007488:	4b70      	ldr	r3, [pc, #448]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a6f      	ldr	r2, [pc, #444]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800748e:	f043 0308 	orr.w	r3, r3, #8
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4b6d      	ldr	r3, [pc, #436]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	496a      	ldr	r1, [pc, #424]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a6:	4b69      	ldr	r3, [pc, #420]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	4965      	ldr	r1, [pc, #404]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d109      	bne.n	80074d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fd01 	bl	8007ecc <RCC_SetFlashLatencyFromMSIRange>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e34d      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074d4:	f000 fc36 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 80074d8:	4602      	mov	r2, r0
 80074da:	4b5c      	ldr	r3, [pc, #368]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	091b      	lsrs	r3, r3, #4
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	495a      	ldr	r1, [pc, #360]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80074e6:	5ccb      	ldrb	r3, [r1, r3]
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	4a58      	ldr	r2, [pc, #352]	; (8007654 <HAL_RCC_OscConfig+0x2a0>)
 80074f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80074f4:	4b58      	ldr	r3, [pc, #352]	; (8007658 <HAL_RCC_OscConfig+0x2a4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fc83 	bl	8005e04 <HAL_InitTick>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d052      	beq.n	80075ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	e331      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d032      	beq.n	800757a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007514:	4b4d      	ldr	r3, [pc, #308]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a4c      	ldr	r2, [pc, #304]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007520:	f7fe fcc0 	bl	8005ea4 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007528:	f7fe fcbc 	bl	8005ea4 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e31a      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800753a:	4b44      	ldr	r3, [pc, #272]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007546:	4b41      	ldr	r3, [pc, #260]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a40      	ldr	r2, [pc, #256]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800754c:	f043 0308 	orr.w	r3, r3, #8
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b3e      	ldr	r3, [pc, #248]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	493b      	ldr	r1, [pc, #236]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007560:	4313      	orrs	r3, r2
 8007562:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007564:	4b39      	ldr	r3, [pc, #228]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	4936      	ldr	r1, [pc, #216]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007574:	4313      	orrs	r3, r2
 8007576:	604b      	str	r3, [r1, #4]
 8007578:	e01a      	b.n	80075b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800757a:	4b34      	ldr	r3, [pc, #208]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a33      	ldr	r2, [pc, #204]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007586:	f7fe fc8d 	bl	8005ea4 <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800758e:	f7fe fc89 	bl	8005ea4 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e2e7      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80075a0:	4b2a      	ldr	r3, [pc, #168]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f0      	bne.n	800758e <HAL_RCC_OscConfig+0x1da>
 80075ac:	e000      	b.n	80075b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d074      	beq.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b08      	cmp	r3, #8
 80075c0:	d005      	beq.n	80075ce <HAL_RCC_OscConfig+0x21a>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d10e      	bne.n	80075e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ce:	4b1f      	ldr	r3, [pc, #124]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d064      	beq.n	80076a4 <HAL_RCC_OscConfig+0x2f0>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d160      	bne.n	80076a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e2c4      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x24a>
 80075f0:	4b16      	ldr	r3, [pc, #88]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <HAL_RCC_OscConfig+0x298>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e01d      	b.n	800763a <HAL_RCC_OscConfig+0x286>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007606:	d10c      	bne.n	8007622 <HAL_RCC_OscConfig+0x26e>
 8007608:	4b10      	ldr	r3, [pc, #64]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a0f      	ldr	r2, [pc, #60]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800760e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a0c      	ldr	r2, [pc, #48]	; (800764c <HAL_RCC_OscConfig+0x298>)
 800761a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e00b      	b.n	800763a <HAL_RCC_OscConfig+0x286>
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a06      	ldr	r2, [pc, #24]	; (800764c <HAL_RCC_OscConfig+0x298>)
 8007634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007638:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01c      	beq.n	800767c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fe fc2f 	bl	8005ea4 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007648:	e011      	b.n	800766e <HAL_RCC_OscConfig+0x2ba>
 800764a:	bf00      	nop
 800764c:	40021000 	.word	0x40021000
 8007650:	08009284 	.word	0x08009284
 8007654:	20000000 	.word	0x20000000
 8007658:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800765c:	f7fe fc22 	bl	8005ea4 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	; 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e280      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800766e:	4baf      	ldr	r3, [pc, #700]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x2a8>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fe fc12 	bl	8005ea4 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007684:	f7fe fc0e 	bl	8005ea4 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	; 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e26c      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007696:	4ba5      	ldr	r3, [pc, #660]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x2d0>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d060      	beq.n	8007774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d005      	beq.n	80076c4 <HAL_RCC_OscConfig+0x310>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	2b0c      	cmp	r3, #12
 80076bc:	d119      	bne.n	80076f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d116      	bne.n	80076f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076c4:	4b99      	ldr	r3, [pc, #612]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_OscConfig+0x328>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e249      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076dc:	4b93      	ldr	r3, [pc, #588]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	061b      	lsls	r3, r3, #24
 80076ea:	4990      	ldr	r1, [pc, #576]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f0:	e040      	b.n	8007774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d023      	beq.n	8007742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076fa:	4b8c      	ldr	r3, [pc, #560]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a8b      	ldr	r2, [pc, #556]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007706:	f7fe fbcd 	bl	8005ea4 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800770e:	f7fe fbc9 	bl	8005ea4 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e227      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007720:	4b82      	ldr	r3, [pc, #520]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800772c:	4b7f      	ldr	r3, [pc, #508]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	497c      	ldr	r1, [pc, #496]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
 8007740:	e018      	b.n	8007774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007742:	4b7a      	ldr	r3, [pc, #488]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a79      	ldr	r2, [pc, #484]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774e:	f7fe fba9 	bl	8005ea4 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007756:	f7fe fba5 	bl	8005ea4 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e203      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007768:	4b70      	ldr	r3, [pc, #448]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f0      	bne.n	8007756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d03c      	beq.n	80077fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01c      	beq.n	80077c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007788:	4b68      	ldr	r3, [pc, #416]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800778a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800778e:	4a67      	ldr	r2, [pc, #412]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007798:	f7fe fb84 	bl	8005ea4 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077a0:	f7fe fb80 	bl	8005ea4 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e1de      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077b2:	4b5e      	ldr	r3, [pc, #376]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0ef      	beq.n	80077a0 <HAL_RCC_OscConfig+0x3ec>
 80077c0:	e01b      	b.n	80077fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077c2:	4b5a      	ldr	r3, [pc, #360]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80077c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c8:	4a58      	ldr	r2, [pc, #352]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d2:	f7fe fb67 	bl	8005ea4 <HAL_GetTick>
 80077d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077da:	f7fe fb63 	bl	8005ea4 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e1c1      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077ec:	4b4f      	ldr	r3, [pc, #316]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80077ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1ef      	bne.n	80077da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80a6 	beq.w	8007954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800780c:	4b47      	ldr	r3, [pc, #284]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10d      	bne.n	8007834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007818:	4b44      	ldr	r3, [pc, #272]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	4a43      	ldr	r2, [pc, #268]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800781e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007822:	6593      	str	r3, [r2, #88]	; 0x58
 8007824:	4b41      	ldr	r3, [pc, #260]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007830:	2301      	movs	r3, #1
 8007832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007834:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <HAL_RCC_OscConfig+0x57c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d118      	bne.n	8007872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007840:	4b3b      	ldr	r3, [pc, #236]	; (8007930 <HAL_RCC_OscConfig+0x57c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3a      	ldr	r2, [pc, #232]	; (8007930 <HAL_RCC_OscConfig+0x57c>)
 8007846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784c:	f7fe fb2a 	bl	8005ea4 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007854:	f7fe fb26 	bl	8005ea4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e184      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007866:	4b32      	ldr	r3, [pc, #200]	; (8007930 <HAL_RCC_OscConfig+0x57c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d108      	bne.n	800788c <HAL_RCC_OscConfig+0x4d8>
 800787a:	4b2c      	ldr	r3, [pc, #176]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	4a2a      	ldr	r2, [pc, #168]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800788a:	e024      	b.n	80078d6 <HAL_RCC_OscConfig+0x522>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d110      	bne.n	80078b6 <HAL_RCC_OscConfig+0x502>
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <HAL_RCC_OscConfig+0x578>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	4a24      	ldr	r2, [pc, #144]	; (800792c <HAL_RCC_OscConfig+0x578>)
 800789c:	f043 0304 	orr.w	r3, r3, #4
 80078a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078a4:	4b21      	ldr	r3, [pc, #132]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078aa:	4a20      	ldr	r2, [pc, #128]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078b4:	e00f      	b.n	80078d6 <HAL_RCC_OscConfig+0x522>
 80078b6:	4b1d      	ldr	r3, [pc, #116]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078c6:	4b19      	ldr	r3, [pc, #100]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078cc:	4a17      	ldr	r2, [pc, #92]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078ce:	f023 0304 	bic.w	r3, r3, #4
 80078d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d016      	beq.n	800790c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078de:	f7fe fae1 	bl	8005ea4 <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078e4:	e00a      	b.n	80078fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e6:	f7fe fadd 	bl	8005ea4 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e139      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_RCC_OscConfig+0x578>)
 80078fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0ed      	beq.n	80078e6 <HAL_RCC_OscConfig+0x532>
 800790a:	e01a      	b.n	8007942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790c:	f7fe faca 	bl	8005ea4 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007912:	e00f      	b.n	8007934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007914:	f7fe fac6 	bl	8005ea4 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007922:	4293      	cmp	r3, r2
 8007924:	d906      	bls.n	8007934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e122      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
 800792a:	bf00      	nop
 800792c:	40021000 	.word	0x40021000
 8007930:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007934:	4b90      	ldr	r3, [pc, #576]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e8      	bne.n	8007914 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007942:	7ffb      	ldrb	r3, [r7, #31]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d105      	bne.n	8007954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007948:	4b8b      	ldr	r3, [pc, #556]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	4a8a      	ldr	r2, [pc, #552]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 800794e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007952:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8108 	beq.w	8007b6e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	2b02      	cmp	r3, #2
 8007964:	f040 80d0 	bne.w	8007b08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007968:	4b83      	ldr	r3, [pc, #524]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f003 0203 	and.w	r2, r3, #3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	429a      	cmp	r2, r3
 800797a:	d130      	bne.n	80079de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	3b01      	subs	r3, #1
 8007988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800798a:	429a      	cmp	r2, r3
 800798c:	d127      	bne.n	80079de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d11f      	bne.n	80079de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079a8:	2a07      	cmp	r2, #7
 80079aa:	bf14      	ite	ne
 80079ac:	2201      	movne	r2, #1
 80079ae:	2200      	moveq	r2, #0
 80079b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d113      	bne.n	80079de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	3b01      	subs	r3, #1
 80079c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d109      	bne.n	80079de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	3b01      	subs	r3, #1
 80079d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079da:	429a      	cmp	r2, r3
 80079dc:	d06e      	beq.n	8007abc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d069      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079e4:	4b64      	ldr	r3, [pc, #400]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d105      	bne.n	80079fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079f0:	4b61      	ldr	r3, [pc, #388]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e0b7      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a00:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a5c      	ldr	r2, [pc, #368]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a0c:	f7fe fa4a 	bl	8005ea4 <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a14:	f7fe fa46 	bl	8005ea4 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e0a4      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a26:	4b54      	ldr	r3, [pc, #336]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a32:	4b51      	ldr	r3, [pc, #324]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	4b51      	ldr	r3, [pc, #324]	; (8007b7c <HAL_RCC_OscConfig+0x7c8>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a42:	3a01      	subs	r2, #1
 8007a44:	0112      	lsls	r2, r2, #4
 8007a46:	4311      	orrs	r1, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a4c:	0212      	lsls	r2, r2, #8
 8007a4e:	4311      	orrs	r1, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a54:	0852      	lsrs	r2, r2, #1
 8007a56:	3a01      	subs	r2, #1
 8007a58:	0552      	lsls	r2, r2, #21
 8007a5a:	4311      	orrs	r1, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a60:	0852      	lsrs	r2, r2, #1
 8007a62:	3a01      	subs	r2, #1
 8007a64:	0652      	lsls	r2, r2, #25
 8007a66:	4311      	orrs	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a6c:	0912      	lsrs	r2, r2, #4
 8007a6e:	0452      	lsls	r2, r2, #17
 8007a70:	430a      	orrs	r2, r1
 8007a72:	4941      	ldr	r1, [pc, #260]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a78:	4b3f      	ldr	r3, [pc, #252]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3e      	ldr	r2, [pc, #248]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a84:	4b3c      	ldr	r3, [pc, #240]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a3b      	ldr	r2, [pc, #236]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a90:	f7fe fa08 	bl	8005ea4 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fe fa04 	bl	8005ea4 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e062      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aaa:	4b33      	ldr	r3, [pc, #204]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ab6:	e05a      	b.n	8007b6e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e059      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007abc:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d152      	bne.n	8007b6e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2a      	ldr	r2, [pc, #168]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ad4:	4b28      	ldr	r3, [pc, #160]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ae0:	f7fe f9e0 	bl	8005ea4 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fe f9dc 	bl	8005ea4 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e03a      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afa:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x734>
 8007b06:	e032      	b.n	8007b6e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d02d      	beq.n	8007b6a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b2c:	f023 0303 	bic.w	r3, r3, #3
 8007b30:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b40:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b42:	f7fe f9af 	bl	8005ea4 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b4a:	f7fe f9ab 	bl	8005ea4 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e009      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b5c:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <HAL_RCC_OscConfig+0x7c4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f0      	bne.n	8007b4a <HAL_RCC_OscConfig+0x796>
 8007b68:	e001      	b.n	8007b6e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	f99d808c 	.word	0xf99d808c

08007b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0c8      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b94:	4b66      	ldr	r3, [pc, #408]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	683a      	ldr	r2, [r7, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d910      	bls.n	8007bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba2:	4b63      	ldr	r3, [pc, #396]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f023 0207 	bic.w	r2, r3, #7
 8007baa:	4961      	ldr	r1, [pc, #388]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb2:	4b5f      	ldr	r3, [pc, #380]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0b0      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d04c      	beq.n	8007c6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d107      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bd8:	4b56      	ldr	r3, [pc, #344]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d121      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e09e      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d107      	bne.n	8007c00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bf0:	4b50      	ldr	r3, [pc, #320]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d115      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e092      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c08:	4b4a      	ldr	r3, [pc, #296]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e086      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c18:	4b46      	ldr	r3, [pc, #280]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e07e      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c28:	4b42      	ldr	r3, [pc, #264]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f023 0203 	bic.w	r2, r3, #3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	493f      	ldr	r1, [pc, #252]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7fe f933 	bl	8005ea4 <HAL_GetTick>
 8007c3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c40:	e00a      	b.n	8007c58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c42:	f7fe f92f 	bl	8005ea4 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e066      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c58:	4b36      	ldr	r3, [pc, #216]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 020c 	and.w	r2, r3, #12
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d1eb      	bne.n	8007c42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c76:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	492c      	ldr	r1, [pc, #176]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d210      	bcs.n	8007cb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c96:	4b26      	ldr	r3, [pc, #152]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 0207 	bic.w	r2, r3, #7
 8007c9e:	4924      	ldr	r1, [pc, #144]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca6:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <HAL_RCC_ClockConfig+0x1b0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d001      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e036      	b.n	8007d26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cc4:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4918      	ldr	r1, [pc, #96]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4910      	ldr	r1, [pc, #64]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cf6:	f000 f825 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <HAL_RCC_ClockConfig+0x1b4>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	490c      	ldr	r1, [pc, #48]	; (8007d38 <HAL_RCC_ClockConfig+0x1b8>)
 8007d08:	5ccb      	ldrb	r3, [r1, r3]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <HAL_RCC_ClockConfig+0x1c0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe f872 	bl	8005e04 <HAL_InitTick>
 8007d20:	4603      	mov	r3, r0
 8007d22:	72fb      	strb	r3, [r7, #11]

  return status;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40022000 	.word	0x40022000
 8007d34:	40021000 	.word	0x40021000
 8007d38:	08009284 	.word	0x08009284
 8007d3c:	20000000 	.word	0x20000000
 8007d40:	2000015c 	.word	0x2000015c

08007d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d52:	4b3e      	ldr	r3, [pc, #248]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_RCC_GetSysClockFreq+0x34>
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b0c      	cmp	r3, #12
 8007d70:	d121      	bne.n	8007db6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d11e      	bne.n	8007db6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d78:	4b34      	ldr	r3, [pc, #208]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d107      	bne.n	8007d94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d84:	4b31      	ldr	r3, [pc, #196]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	e005      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d94:	4b2d      	ldr	r3, [pc, #180]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	091b      	lsrs	r3, r3, #4
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007da0:	4a2b      	ldr	r2, [pc, #172]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10d      	bne.n	8007dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007db4:	e00a      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007dbe:	61bb      	str	r3, [r7, #24]
 8007dc0:	e004      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d101      	bne.n	8007dcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dc8:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8007dca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	d134      	bne.n	8007e3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dd2:	4b1e      	ldr	r3, [pc, #120]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d003      	beq.n	8007dea <HAL_RCC_GetSysClockFreq+0xa6>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d003      	beq.n	8007df0 <HAL_RCC_GetSysClockFreq+0xac>
 8007de8:	e005      	b.n	8007df6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007dea:	4b1a      	ldr	r3, [pc, #104]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x110>)
 8007dec:	617b      	str	r3, [r7, #20]
      break;
 8007dee:	e005      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007df0:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x114>)
 8007df2:	617b      	str	r3, [r7, #20]
      break;
 8007df4:	e002      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	617b      	str	r3, [r7, #20]
      break;
 8007dfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dfc:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	091b      	lsrs	r3, r3, #4
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	3301      	adds	r3, #1
 8007e08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	fb02 f203 	mul.w	r2, r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x108>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	0e5b      	lsrs	r3, r3, #25
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3724      	adds	r7, #36	; 0x24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	0800929c 	.word	0x0800929c
 8007e54:	00f42400 	.word	0x00f42400
 8007e58:	007a1200 	.word	0x007a1200

08007e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e62:	681b      	ldr	r3, [r3, #0]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20000000 	.word	0x20000000

08007e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e78:	f7ff fff0 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	4904      	ldr	r1, [pc, #16]	; (8007e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e8a:	5ccb      	ldrb	r3, [r1, r3]
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	08009294 	.word	0x08009294

08007ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ea4:	f7ff ffda 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	0adb      	lsrs	r3, r3, #11
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	f003 031f 	and.w	r3, r3, #31
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	08009294 	.word	0x08009294

08007ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ed8:	4b2a      	ldr	r3, [pc, #168]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d003      	beq.n	8007eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ee4:	f7ff fa02 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8007ee8:	6178      	str	r0, [r7, #20]
 8007eea:	e014      	b.n	8007f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007eec:	4b25      	ldr	r3, [pc, #148]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	4a24      	ldr	r2, [pc, #144]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ef8:	4b22      	ldr	r3, [pc, #136]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f04:	f7ff f9f2 	bl	80072ec <HAL_PWREx_GetVoltageRange>
 8007f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f0a:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0e:	4a1d      	ldr	r2, [pc, #116]	; (8007f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1c:	d10b      	bne.n	8007f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d919      	bls.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2ba0      	cmp	r3, #160	; 0xa0
 8007f28:	d902      	bls.n	8007f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	e013      	b.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f30:	2301      	movs	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	e010      	b.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d902      	bls.n	8007f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	613b      	str	r3, [r7, #16]
 8007f40:	e00a      	b.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d102      	bne.n	8007f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f48:	2302      	movs	r3, #2
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	e004      	b.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b70      	cmp	r3, #112	; 0x70
 8007f52:	d101      	bne.n	8007f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f54:	2301      	movs	r3, #1
 8007f56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f023 0207 	bic.w	r2, r3, #7
 8007f60:	4909      	ldr	r1, [pc, #36]	; (8007f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007f68:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d001      	beq.n	8007f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40021000 	.word	0x40021000
 8007f88:	40022000 	.word	0x40022000

08007f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f94:	2300      	movs	r3, #0
 8007f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f98:	2300      	movs	r3, #0
 8007f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d041      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fb0:	d02a      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fb6:	d824      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fbc:	d008      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc2:	d81e      	bhi.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fcc:	d010      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fce:	e018      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fd0:	4b86      	ldr	r3, [pc, #536]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4a85      	ldr	r2, [pc, #532]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fdc:	e015      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fabb 	bl	8008560 <RCCEx_PLLSAI1_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fee:	e00c      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3320      	adds	r3, #32
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fba6 	bl	8008748 <RCCEx_PLLSAI2_Config>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008000:	e003      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	74fb      	strb	r3, [r7, #19]
      break;
 8008006:	e000      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800a:	7cfb      	ldrb	r3, [r7, #19]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008010:	4b76      	ldr	r3, [pc, #472]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800801e:	4973      	ldr	r1, [pc, #460]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008020:	4313      	orrs	r3, r2
 8008022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008026:	e001      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	7cfb      	ldrb	r3, [r7, #19]
 800802a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d041      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800803c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008040:	d02a      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008042:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008046:	d824      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800804c:	d008      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800804e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008052:	d81e      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800805c:	d010      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800805e:	e018      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008060:	4b62      	ldr	r3, [pc, #392]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4a61      	ldr	r2, [pc, #388]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800806a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800806c:	e015      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fa73 	bl	8008560 <RCCEx_PLLSAI1_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800807e:	e00c      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3320      	adds	r3, #32
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fb5e 	bl	8008748 <RCCEx_PLLSAI2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	74fb      	strb	r3, [r7, #19]
      break;
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80080a0:	4b52      	ldr	r3, [pc, #328]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ae:	494f      	ldr	r1, [pc, #316]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80080b6:	e001      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	7cfb      	ldrb	r3, [r7, #19]
 80080ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80a0 	beq.w	800820a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080ca:	2300      	movs	r3, #0
 80080cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080ce:	4b47      	ldr	r3, [pc, #284]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080e4:	4b41      	ldr	r3, [pc, #260]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	4a40      	ldr	r2, [pc, #256]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	6593      	str	r3, [r2, #88]	; 0x58
 80080f0:	4b3e      	ldr	r3, [pc, #248]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080fc:	2301      	movs	r3, #1
 80080fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008100:	4b3b      	ldr	r3, [pc, #236]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a3a      	ldr	r2, [pc, #232]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800810c:	f7fd feca 	bl	8005ea4 <HAL_GetTick>
 8008110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008112:	e009      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008114:	f7fd fec6 	bl	8005ea4 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d902      	bls.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	74fb      	strb	r3, [r7, #19]
        break;
 8008126:	e005      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008128:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ef      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d15c      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800813a:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01f      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	429a      	cmp	r2, r3
 8008156:	d019      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008158:	4b24      	ldr	r3, [pc, #144]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008164:	4b21      	ldr	r3, [pc, #132]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816a:	4a20      	ldr	r2, [pc, #128]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800816c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008174:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800817c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d016      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008196:	f7fd fe85 	bl	8005ea4 <HAL_GetTick>
 800819a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800819c:	e00b      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819e:	f7fd fe81 	bl	8005ea4 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d902      	bls.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	74fb      	strb	r3, [r7, #19]
            break;
 80081b4:	e006      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0ec      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80081c4:	7cfb      	ldrb	r3, [r7, #19]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10c      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081ca:	4b08      	ldr	r3, [pc, #32]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081da:	4904      	ldr	r1, [pc, #16]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80081e2:	e009      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081e4:	7cfb      	ldrb	r3, [r7, #19]
 80081e6:	74bb      	strb	r3, [r7, #18]
 80081e8:	e006      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80081ea:	bf00      	nop
 80081ec:	40021000 	.word	0x40021000
 80081f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	7cfb      	ldrb	r3, [r7, #19]
 80081f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081f8:	7c7b      	ldrb	r3, [r7, #17]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d105      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081fe:	4b9e      	ldr	r3, [pc, #632]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008202:	4a9d      	ldr	r2, [pc, #628]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008216:	4b98      	ldr	r3, [pc, #608]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821c:	f023 0203 	bic.w	r2, r3, #3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	4994      	ldr	r1, [pc, #592]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008238:	4b8f      	ldr	r3, [pc, #572]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	f023 020c 	bic.w	r2, r3, #12
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	498c      	ldr	r1, [pc, #560]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008248:	4313      	orrs	r3, r2
 800824a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800825a:	4b87      	ldr	r3, [pc, #540]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800825c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	4983      	ldr	r1, [pc, #524]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800827c:	4b7e      	ldr	r3, [pc, #504]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	497b      	ldr	r1, [pc, #492]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800829e:	4b76      	ldr	r3, [pc, #472]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ac:	4972      	ldr	r1, [pc, #456]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082c0:	4b6d      	ldr	r3, [pc, #436]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	496a      	ldr	r1, [pc, #424]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082e2:	4b65      	ldr	r3, [pc, #404]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f0:	4961      	ldr	r1, [pc, #388]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008304:	4b5c      	ldr	r3, [pc, #368]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008312:	4959      	ldr	r1, [pc, #356]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008326:	4b54      	ldr	r3, [pc, #336]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008334:	4950      	ldr	r1, [pc, #320]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008348:	4b4b      	ldr	r3, [pc, #300]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800834a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	4948      	ldr	r1, [pc, #288]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800836a:	4b43      	ldr	r3, [pc, #268]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800836c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	493f      	ldr	r1, [pc, #252]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d028      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800838c:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839a:	4937      	ldr	r1, [pc, #220]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800839c:	4313      	orrs	r3, r2
 800839e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083aa:	d106      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083ac:	4b32      	ldr	r3, [pc, #200]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4a31      	ldr	r2, [pc, #196]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083b6:	60d3      	str	r3, [r2, #12]
 80083b8:	e011      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083c2:	d10c      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
 80083c8:	2101      	movs	r1, #1
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f8c8 	bl	8008560 <RCCEx_PLLSAI1_Config>
 80083d0:	4603      	mov	r3, r0
 80083d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083d4:	7cfb      	ldrb	r3, [r7, #19]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80083da:	7cfb      	ldrb	r3, [r7, #19]
 80083dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d028      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083ea:	4b23      	ldr	r3, [pc, #140]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	491f      	ldr	r1, [pc, #124]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008408:	d106      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800840a:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008414:	60d3      	str	r3, [r2, #12]
 8008416:	e011      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008420:	d10c      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3304      	adds	r3, #4
 8008426:	2101      	movs	r1, #1
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f899 	bl	8008560 <RCCEx_PLLSAI1_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008432:	7cfb      	ldrb	r3, [r7, #19]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008438:	7cfb      	ldrb	r3, [r7, #19]
 800843a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02b      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008448:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008456:	4908      	ldr	r1, [pc, #32]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008466:	d109      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a02      	ldr	r2, [pc, #8]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800846e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008472:	60d3      	str	r3, [r2, #12]
 8008474:	e014      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008476:	bf00      	nop
 8008478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008484:	d10c      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f867 	bl	8008560 <RCCEx_PLLSAI1_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008496:	7cfb      	ldrb	r3, [r7, #19]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800849c:	7cfb      	ldrb	r3, [r7, #19]
 800849e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d02f      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ba:	4928      	ldr	r1, [pc, #160]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ca:	d10d      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	2102      	movs	r1, #2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f844 	bl	8008560 <RCCEx_PLLSAI1_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084dc:	7cfb      	ldrb	r3, [r7, #19]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d014      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80084e2:	7cfb      	ldrb	r3, [r7, #19]
 80084e4:	74bb      	strb	r3, [r7, #18]
 80084e6:	e011      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f0:	d10c      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3320      	adds	r3, #32
 80084f6:	2102      	movs	r1, #2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 f925 	bl	8008748 <RCCEx_PLLSAI2_Config>
 80084fe:	4603      	mov	r3, r0
 8008500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008502:	7cfb      	ldrb	r3, [r7, #19]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008508:	7cfb      	ldrb	r3, [r7, #19]
 800850a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008518:	4b10      	ldr	r3, [pc, #64]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800851a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008526:	490d      	ldr	r1, [pc, #52]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00b      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854a:	4904      	ldr	r1, [pc, #16]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008552:	7cbb      	ldrb	r3, [r7, #18]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40021000 	.word	0x40021000

08008560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800856e:	4b75      	ldr	r3, [pc, #468]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d018      	beq.n	80085ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800857a:	4b72      	ldr	r3, [pc, #456]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0203 	and.w	r2, r3, #3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d10d      	bne.n	80085a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
       ||
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008592:	4b6c      	ldr	r3, [pc, #432]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
       ||
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d047      	beq.n	8008636 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]
 80085aa:	e044      	b.n	8008636 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d018      	beq.n	80085e6 <RCCEx_PLLSAI1_Config+0x86>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d825      	bhi.n	8008604 <RCCEx_PLLSAI1_Config+0xa4>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d002      	beq.n	80085c2 <RCCEx_PLLSAI1_Config+0x62>
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d009      	beq.n	80085d4 <RCCEx_PLLSAI1_Config+0x74>
 80085c0:	e020      	b.n	8008604 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085c2:	4b60      	ldr	r3, [pc, #384]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d11d      	bne.n	800860a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085d2:	e01a      	b.n	800860a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085d4:	4b5b      	ldr	r3, [pc, #364]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d116      	bne.n	800860e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e4:	e013      	b.n	800860e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085e6:	4b57      	ldr	r3, [pc, #348]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10f      	bne.n	8008612 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085f2:	4b54      	ldr	r3, [pc, #336]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008602:	e006      	b.n	8008612 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
      break;
 8008608:	e004      	b.n	8008614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800860a:	bf00      	nop
 800860c:	e002      	b.n	8008614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800860e:	bf00      	nop
 8008610:	e000      	b.n	8008614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008612:	bf00      	nop
    }

    if(status == HAL_OK)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10d      	bne.n	8008636 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800861a:	4b4a      	ldr	r3, [pc, #296]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6819      	ldr	r1, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	3b01      	subs	r3, #1
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	430b      	orrs	r3, r1
 8008630:	4944      	ldr	r1, [pc, #272]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008632:	4313      	orrs	r3, r2
 8008634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d17d      	bne.n	8008738 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800863c:	4b41      	ldr	r3, [pc, #260]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a40      	ldr	r2, [pc, #256]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008648:	f7fd fc2c 	bl	8005ea4 <HAL_GetTick>
 800864c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800864e:	e009      	b.n	8008664 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008650:	f7fd fc28 	bl	8005ea4 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d902      	bls.n	8008664 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	73fb      	strb	r3, [r7, #15]
        break;
 8008662:	e005      	b.n	8008670 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008664:	4b37      	ldr	r3, [pc, #220]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1ef      	bne.n	8008650 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d160      	bne.n	8008738 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d111      	bne.n	80086a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800867c:	4b31      	ldr	r3, [pc, #196]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6892      	ldr	r2, [r2, #8]
 800868c:	0211      	lsls	r1, r2, #8
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	68d2      	ldr	r2, [r2, #12]
 8008692:	0912      	lsrs	r2, r2, #4
 8008694:	0452      	lsls	r2, r2, #17
 8008696:	430a      	orrs	r2, r1
 8008698:	492a      	ldr	r1, [pc, #168]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800869a:	4313      	orrs	r3, r2
 800869c:	610b      	str	r3, [r1, #16]
 800869e:	e027      	b.n	80086f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d112      	bne.n	80086cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086a6:	4b27      	ldr	r3, [pc, #156]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80086ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	0211      	lsls	r1, r2, #8
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6912      	ldr	r2, [r2, #16]
 80086bc:	0852      	lsrs	r2, r2, #1
 80086be:	3a01      	subs	r2, #1
 80086c0:	0552      	lsls	r2, r2, #21
 80086c2:	430a      	orrs	r2, r1
 80086c4:	491f      	ldr	r1, [pc, #124]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	610b      	str	r3, [r1, #16]
 80086ca:	e011      	b.n	80086f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086cc:	4b1d      	ldr	r3, [pc, #116]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6892      	ldr	r2, [r2, #8]
 80086dc:	0211      	lsls	r1, r2, #8
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6952      	ldr	r2, [r2, #20]
 80086e2:	0852      	lsrs	r2, r2, #1
 80086e4:	3a01      	subs	r2, #1
 80086e6:	0652      	lsls	r2, r2, #25
 80086e8:	430a      	orrs	r2, r1
 80086ea:	4916      	ldr	r1, [pc, #88]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086f0:	4b14      	ldr	r3, [pc, #80]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a13      	ldr	r2, [pc, #76]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fc:	f7fd fbd2 	bl	8005ea4 <HAL_GetTick>
 8008700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008702:	e009      	b.n	8008718 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008704:	f7fd fbce 	bl	8005ea4 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d902      	bls.n	8008718 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	73fb      	strb	r3, [r7, #15]
          break;
 8008716:	e005      	b.n	8008724 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0ef      	beq.n	8008704 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800872a:	4b06      	ldr	r3, [pc, #24]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	4904      	ldr	r1, [pc, #16]	; (8008744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008734:	4313      	orrs	r3, r2
 8008736:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40021000 	.word	0x40021000

08008748 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008756:	4b6a      	ldr	r3, [pc, #424]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d018      	beq.n	8008794 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008762:	4b67      	ldr	r3, [pc, #412]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f003 0203 	and.w	r2, r3, #3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d10d      	bne.n	800878e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
       ||
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800877a:	4b61      	ldr	r3, [pc, #388]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	091b      	lsrs	r3, r3, #4
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
       ||
 800878a:	429a      	cmp	r2, r3
 800878c:	d047      	beq.n	800881e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	73fb      	strb	r3, [r7, #15]
 8008792:	e044      	b.n	800881e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d018      	beq.n	80087ce <RCCEx_PLLSAI2_Config+0x86>
 800879c:	2b03      	cmp	r3, #3
 800879e:	d825      	bhi.n	80087ec <RCCEx_PLLSAI2_Config+0xa4>
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d002      	beq.n	80087aa <RCCEx_PLLSAI2_Config+0x62>
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d009      	beq.n	80087bc <RCCEx_PLLSAI2_Config+0x74>
 80087a8:	e020      	b.n	80087ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087aa:	4b55      	ldr	r3, [pc, #340]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d11d      	bne.n	80087f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ba:	e01a      	b.n	80087f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087bc:	4b50      	ldr	r3, [pc, #320]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d116      	bne.n	80087f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087cc:	e013      	b.n	80087f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087ce:	4b4c      	ldr	r3, [pc, #304]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10f      	bne.n	80087fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087da:	4b49      	ldr	r3, [pc, #292]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087ea:	e006      	b.n	80087fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
      break;
 80087f0:	e004      	b.n	80087fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80087f2:	bf00      	nop
 80087f4:	e002      	b.n	80087fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80087f6:	bf00      	nop
 80087f8:	e000      	b.n	80087fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80087fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10d      	bne.n	800881e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008802:	4b3f      	ldr	r3, [pc, #252]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6819      	ldr	r1, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	3b01      	subs	r3, #1
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	430b      	orrs	r3, r1
 8008818:	4939      	ldr	r1, [pc, #228]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800881a:	4313      	orrs	r3, r2
 800881c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d167      	bne.n	80088f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008824:	4b36      	ldr	r3, [pc, #216]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a35      	ldr	r2, [pc, #212]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800882a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800882e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008830:	f7fd fb38 	bl	8005ea4 <HAL_GetTick>
 8008834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008836:	e009      	b.n	800884c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008838:	f7fd fb34 	bl	8005ea4 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d902      	bls.n	800884c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	73fb      	strb	r3, [r7, #15]
        break;
 800884a:	e005      	b.n	8008858 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800884c:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1ef      	bne.n	8008838 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d14a      	bne.n	80088f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d111      	bne.n	8008888 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008864:	4b26      	ldr	r3, [pc, #152]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800886c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6892      	ldr	r2, [r2, #8]
 8008874:	0211      	lsls	r1, r2, #8
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	68d2      	ldr	r2, [r2, #12]
 800887a:	0912      	lsrs	r2, r2, #4
 800887c:	0452      	lsls	r2, r2, #17
 800887e:	430a      	orrs	r2, r1
 8008880:	491f      	ldr	r1, [pc, #124]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008882:	4313      	orrs	r3, r2
 8008884:	614b      	str	r3, [r1, #20]
 8008886:	e011      	b.n	80088ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008890:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6892      	ldr	r2, [r2, #8]
 8008898:	0211      	lsls	r1, r2, #8
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6912      	ldr	r2, [r2, #16]
 800889e:	0852      	lsrs	r2, r2, #1
 80088a0:	3a01      	subs	r2, #1
 80088a2:	0652      	lsls	r2, r2, #25
 80088a4:	430a      	orrs	r2, r1
 80088a6:	4916      	ldr	r1, [pc, #88]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80088ac:	4b14      	ldr	r3, [pc, #80]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a13      	ldr	r2, [pc, #76]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b8:	f7fd faf4 	bl	8005ea4 <HAL_GetTick>
 80088bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088be:	e009      	b.n	80088d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80088c0:	f7fd faf0 	bl	8005ea4 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d902      	bls.n	80088d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	73fb      	strb	r3, [r7, #15]
          break;
 80088d2:	e005      	b.n	80088e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0ef      	beq.n	80088c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80088e6:	4b06      	ldr	r3, [pc, #24]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088e8:	695a      	ldr	r2, [r3, #20]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	4904      	ldr	r1, [pc, #16]	; (8008900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40021000 	.word	0x40021000

08008904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e040      	b.n	8008998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7f7 ff10 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2224      	movs	r2, #36	; 0x24
 8008930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0201 	bic.w	r2, r2, #1
 8008940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f82c 	bl	80089a0 <UART_SetConfig>
 8008948:	4603      	mov	r3, r0
 800894a:	2b01      	cmp	r3, #1
 800894c:	d101      	bne.n	8008952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e022      	b.n	8008998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 faaa 	bl	8008eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800896e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800897e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fb31 	bl	8008ff8 <UART_CheckIdleState>
 8008996:	4603      	mov	r3, r0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089a0:	b5b0      	push	{r4, r5, r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4bad      	ldr	r3, [pc, #692]	; (8008c80 <UART_SetConfig+0x2e0>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	69f9      	ldr	r1, [r7, #28]
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4aa2      	ldr	r2, [pc, #648]	; (8008c84 <UART_SetConfig+0x2e4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d004      	beq.n	8008a08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a99      	ldr	r2, [pc, #612]	; (8008c88 <UART_SetConfig+0x2e8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d121      	bne.n	8008a6a <UART_SetConfig+0xca>
 8008a26:	4b99      	ldr	r3, [pc, #612]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d817      	bhi.n	8008a64 <UART_SetConfig+0xc4>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x9c>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a59 	.word	0x08008a59
 8008a44:	08008a53 	.word	0x08008a53
 8008a48:	08008a5f 	.word	0x08008a5f
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	76fb      	strb	r3, [r7, #27]
 8008a50:	e0e7      	b.n	8008c22 <UART_SetConfig+0x282>
 8008a52:	2302      	movs	r3, #2
 8008a54:	76fb      	strb	r3, [r7, #27]
 8008a56:	e0e4      	b.n	8008c22 <UART_SetConfig+0x282>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	76fb      	strb	r3, [r7, #27]
 8008a5c:	e0e1      	b.n	8008c22 <UART_SetConfig+0x282>
 8008a5e:	2308      	movs	r3, #8
 8008a60:	76fb      	strb	r3, [r7, #27]
 8008a62:	e0de      	b.n	8008c22 <UART_SetConfig+0x282>
 8008a64:	2310      	movs	r3, #16
 8008a66:	76fb      	strb	r3, [r7, #27]
 8008a68:	e0db      	b.n	8008c22 <UART_SetConfig+0x282>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a88      	ldr	r2, [pc, #544]	; (8008c90 <UART_SetConfig+0x2f0>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d132      	bne.n	8008ada <UART_SetConfig+0x13a>
 8008a74:	4b85      	ldr	r3, [pc, #532]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7a:	f003 030c 	and.w	r3, r3, #12
 8008a7e:	2b0c      	cmp	r3, #12
 8008a80:	d828      	bhi.n	8008ad4 <UART_SetConfig+0x134>
 8008a82:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0xe8>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008abd 	.word	0x08008abd
 8008a8c:	08008ad5 	.word	0x08008ad5
 8008a90:	08008ad5 	.word	0x08008ad5
 8008a94:	08008ad5 	.word	0x08008ad5
 8008a98:	08008ac9 	.word	0x08008ac9
 8008a9c:	08008ad5 	.word	0x08008ad5
 8008aa0:	08008ad5 	.word	0x08008ad5
 8008aa4:	08008ad5 	.word	0x08008ad5
 8008aa8:	08008ac3 	.word	0x08008ac3
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008ad5 	.word	0x08008ad5
 8008ab8:	08008acf 	.word	0x08008acf
 8008abc:	2300      	movs	r3, #0
 8008abe:	76fb      	strb	r3, [r7, #27]
 8008ac0:	e0af      	b.n	8008c22 <UART_SetConfig+0x282>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	76fb      	strb	r3, [r7, #27]
 8008ac6:	e0ac      	b.n	8008c22 <UART_SetConfig+0x282>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	76fb      	strb	r3, [r7, #27]
 8008acc:	e0a9      	b.n	8008c22 <UART_SetConfig+0x282>
 8008ace:	2308      	movs	r3, #8
 8008ad0:	76fb      	strb	r3, [r7, #27]
 8008ad2:	e0a6      	b.n	8008c22 <UART_SetConfig+0x282>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	76fb      	strb	r3, [r7, #27]
 8008ad8:	e0a3      	b.n	8008c22 <UART_SetConfig+0x282>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a6d      	ldr	r2, [pc, #436]	; (8008c94 <UART_SetConfig+0x2f4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d120      	bne.n	8008b26 <UART_SetConfig+0x186>
 8008ae4:	4b69      	ldr	r3, [pc, #420]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008aee:	2b30      	cmp	r3, #48	; 0x30
 8008af0:	d013      	beq.n	8008b1a <UART_SetConfig+0x17a>
 8008af2:	2b30      	cmp	r3, #48	; 0x30
 8008af4:	d814      	bhi.n	8008b20 <UART_SetConfig+0x180>
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d009      	beq.n	8008b0e <UART_SetConfig+0x16e>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d810      	bhi.n	8008b20 <UART_SetConfig+0x180>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <UART_SetConfig+0x168>
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d006      	beq.n	8008b14 <UART_SetConfig+0x174>
 8008b06:	e00b      	b.n	8008b20 <UART_SetConfig+0x180>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	76fb      	strb	r3, [r7, #27]
 8008b0c:	e089      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	76fb      	strb	r3, [r7, #27]
 8008b12:	e086      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b14:	2304      	movs	r3, #4
 8008b16:	76fb      	strb	r3, [r7, #27]
 8008b18:	e083      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b1a:	2308      	movs	r3, #8
 8008b1c:	76fb      	strb	r3, [r7, #27]
 8008b1e:	e080      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b20:	2310      	movs	r3, #16
 8008b22:	76fb      	strb	r3, [r7, #27]
 8008b24:	e07d      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a5b      	ldr	r2, [pc, #364]	; (8008c98 <UART_SetConfig+0x2f8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d120      	bne.n	8008b72 <UART_SetConfig+0x1d2>
 8008b30:	4b56      	ldr	r3, [pc, #344]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b3c:	d013      	beq.n	8008b66 <UART_SetConfig+0x1c6>
 8008b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b40:	d814      	bhi.n	8008b6c <UART_SetConfig+0x1cc>
 8008b42:	2b80      	cmp	r3, #128	; 0x80
 8008b44:	d009      	beq.n	8008b5a <UART_SetConfig+0x1ba>
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d810      	bhi.n	8008b6c <UART_SetConfig+0x1cc>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <UART_SetConfig+0x1b4>
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d006      	beq.n	8008b60 <UART_SetConfig+0x1c0>
 8008b52:	e00b      	b.n	8008b6c <UART_SetConfig+0x1cc>
 8008b54:	2300      	movs	r3, #0
 8008b56:	76fb      	strb	r3, [r7, #27]
 8008b58:	e063      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	76fb      	strb	r3, [r7, #27]
 8008b5e:	e060      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b60:	2304      	movs	r3, #4
 8008b62:	76fb      	strb	r3, [r7, #27]
 8008b64:	e05d      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b66:	2308      	movs	r3, #8
 8008b68:	76fb      	strb	r3, [r7, #27]
 8008b6a:	e05a      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	76fb      	strb	r3, [r7, #27]
 8008b70:	e057      	b.n	8008c22 <UART_SetConfig+0x282>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a49      	ldr	r2, [pc, #292]	; (8008c9c <UART_SetConfig+0x2fc>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d125      	bne.n	8008bc8 <UART_SetConfig+0x228>
 8008b7c:	4b43      	ldr	r3, [pc, #268]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b8a:	d017      	beq.n	8008bbc <UART_SetConfig+0x21c>
 8008b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b90:	d817      	bhi.n	8008bc2 <UART_SetConfig+0x222>
 8008b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b96:	d00b      	beq.n	8008bb0 <UART_SetConfig+0x210>
 8008b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b9c:	d811      	bhi.n	8008bc2 <UART_SetConfig+0x222>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <UART_SetConfig+0x20a>
 8008ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba6:	d006      	beq.n	8008bb6 <UART_SetConfig+0x216>
 8008ba8:	e00b      	b.n	8008bc2 <UART_SetConfig+0x222>
 8008baa:	2300      	movs	r3, #0
 8008bac:	76fb      	strb	r3, [r7, #27]
 8008bae:	e038      	b.n	8008c22 <UART_SetConfig+0x282>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	76fb      	strb	r3, [r7, #27]
 8008bb4:	e035      	b.n	8008c22 <UART_SetConfig+0x282>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	76fb      	strb	r3, [r7, #27]
 8008bba:	e032      	b.n	8008c22 <UART_SetConfig+0x282>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	76fb      	strb	r3, [r7, #27]
 8008bc0:	e02f      	b.n	8008c22 <UART_SetConfig+0x282>
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	76fb      	strb	r3, [r7, #27]
 8008bc6:	e02c      	b.n	8008c22 <UART_SetConfig+0x282>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <UART_SetConfig+0x2e4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d125      	bne.n	8008c1e <UART_SetConfig+0x27e>
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <UART_SetConfig+0x2ec>)
 8008bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008be0:	d017      	beq.n	8008c12 <UART_SetConfig+0x272>
 8008be2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008be6:	d817      	bhi.n	8008c18 <UART_SetConfig+0x278>
 8008be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bec:	d00b      	beq.n	8008c06 <UART_SetConfig+0x266>
 8008bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bf2:	d811      	bhi.n	8008c18 <UART_SetConfig+0x278>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <UART_SetConfig+0x260>
 8008bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfc:	d006      	beq.n	8008c0c <UART_SetConfig+0x26c>
 8008bfe:	e00b      	b.n	8008c18 <UART_SetConfig+0x278>
 8008c00:	2300      	movs	r3, #0
 8008c02:	76fb      	strb	r3, [r7, #27]
 8008c04:	e00d      	b.n	8008c22 <UART_SetConfig+0x282>
 8008c06:	2302      	movs	r3, #2
 8008c08:	76fb      	strb	r3, [r7, #27]
 8008c0a:	e00a      	b.n	8008c22 <UART_SetConfig+0x282>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	76fb      	strb	r3, [r7, #27]
 8008c10:	e007      	b.n	8008c22 <UART_SetConfig+0x282>
 8008c12:	2308      	movs	r3, #8
 8008c14:	76fb      	strb	r3, [r7, #27]
 8008c16:	e004      	b.n	8008c22 <UART_SetConfig+0x282>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	76fb      	strb	r3, [r7, #27]
 8008c1c:	e001      	b.n	8008c22 <UART_SetConfig+0x282>
 8008c1e:	2310      	movs	r3, #16
 8008c20:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <UART_SetConfig+0x2e4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	f040 8087 	bne.w	8008d3c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c2e:	7efb      	ldrb	r3, [r7, #27]
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d837      	bhi.n	8008ca4 <UART_SetConfig+0x304>
 8008c34:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0x29c>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008ca5 	.word	0x08008ca5
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008ca5 	.word	0x08008ca5
 8008c4c:	08008c6f 	.word	0x08008c6f
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	08008ca5 	.word	0x08008ca5
 8008c5c:	08008c77 	.word	0x08008c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c60:	f7ff f908 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 8008c64:	6178      	str	r0, [r7, #20]
        break;
 8008c66:	e022      	b.n	8008cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <UART_SetConfig+0x300>)
 8008c6a:	617b      	str	r3, [r7, #20]
        break;
 8008c6c:	e01f      	b.n	8008cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6e:	f7ff f869 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8008c72:	6178      	str	r0, [r7, #20]
        break;
 8008c74:	e01b      	b.n	8008cae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c7a:	617b      	str	r3, [r7, #20]
        break;
 8008c7c:	e017      	b.n	8008cae <UART_SetConfig+0x30e>
 8008c7e:	bf00      	nop
 8008c80:	efff69f3 	.word	0xefff69f3
 8008c84:	40008000 	.word	0x40008000
 8008c88:	40013800 	.word	0x40013800
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	40004400 	.word	0x40004400
 8008c94:	40004800 	.word	0x40004800
 8008c98:	40004c00 	.word	0x40004c00
 8008c9c:	40005000 	.word	0x40005000
 8008ca0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	76bb      	strb	r3, [r7, #26]
        break;
 8008cac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 80f1 	beq.w	8008e98 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d305      	bcc.n	8008cd2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d902      	bls.n	8008cd8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	76bb      	strb	r3, [r7, #26]
 8008cd6:	e0df      	b.n	8008e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f04f 0100 	mov.w	r1, #0
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	020b      	lsls	r3, r1, #8
 8008cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cee:	0202      	lsls	r2, r0, #8
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	6849      	ldr	r1, [r1, #4]
 8008cf4:	0849      	lsrs	r1, r1, #1
 8008cf6:	4608      	mov	r0, r1
 8008cf8:	f04f 0100 	mov.w	r1, #0
 8008cfc:	1814      	adds	r4, r2, r0
 8008cfe:	eb43 0501 	adc.w	r5, r3, r1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 fa5a 	bl	80001c8 <__aeabi_uldivmod>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4613      	mov	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d22:	d308      	bcc.n	8008d36 <UART_SetConfig+0x396>
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d2a:	d204      	bcs.n	8008d36 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	60da      	str	r2, [r3, #12]
 8008d34:	e0b0      	b.n	8008e98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	76bb      	strb	r3, [r7, #26]
 8008d3a:	e0ad      	b.n	8008e98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d44:	d15b      	bne.n	8008dfe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008d46:	7efb      	ldrb	r3, [r7, #27]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d828      	bhi.n	8008d9e <UART_SetConfig+0x3fe>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x3b4>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	08008d9f 	.word	0x08008d9f
 8008d64:	08008d8f 	.word	0x08008d8f
 8008d68:	08008d9f 	.word	0x08008d9f
 8008d6c:	08008d9f 	.word	0x08008d9f
 8008d70:	08008d9f 	.word	0x08008d9f
 8008d74:	08008d97 	.word	0x08008d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d78:	f7ff f87c 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 8008d7c:	6178      	str	r0, [r7, #20]
        break;
 8008d7e:	e013      	b.n	8008da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d80:	f7ff f88e 	bl	8007ea0 <HAL_RCC_GetPCLK2Freq>
 8008d84:	6178      	str	r0, [r7, #20]
        break;
 8008d86:	e00f      	b.n	8008da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d88:	4b49      	ldr	r3, [pc, #292]	; (8008eb0 <UART_SetConfig+0x510>)
 8008d8a:	617b      	str	r3, [r7, #20]
        break;
 8008d8c:	e00c      	b.n	8008da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d8e:	f7fe ffd9 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8008d92:	6178      	str	r0, [r7, #20]
        break;
 8008d94:	e008      	b.n	8008da8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d9a:	617b      	str	r3, [r7, #20]
        break;
 8008d9c:	e004      	b.n	8008da8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	76bb      	strb	r3, [r7, #26]
        break;
 8008da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d074      	beq.n	8008e98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	005a      	lsls	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	441a      	add	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d916      	bls.n	8008df8 <UART_SetConfig+0x458>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd0:	d212      	bcs.n	8008df8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f023 030f 	bic.w	r3, r3, #15
 8008dda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	89fb      	ldrh	r3, [r7, #14]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	89fa      	ldrh	r2, [r7, #14]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e04f      	b.n	8008e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	76bb      	strb	r3, [r7, #26]
 8008dfc:	e04c      	b.n	8008e98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dfe:	7efb      	ldrb	r3, [r7, #27]
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d828      	bhi.n	8008e56 <UART_SetConfig+0x4b6>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <UART_SetConfig+0x46c>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e39 	.word	0x08008e39
 8008e14:	08008e41 	.word	0x08008e41
 8008e18:	08008e57 	.word	0x08008e57
 8008e1c:	08008e47 	.word	0x08008e47
 8008e20:	08008e57 	.word	0x08008e57
 8008e24:	08008e57 	.word	0x08008e57
 8008e28:	08008e57 	.word	0x08008e57
 8008e2c:	08008e4f 	.word	0x08008e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e30:	f7ff f820 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 8008e34:	6178      	str	r0, [r7, #20]
        break;
 8008e36:	e013      	b.n	8008e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e38:	f7ff f832 	bl	8007ea0 <HAL_RCC_GetPCLK2Freq>
 8008e3c:	6178      	str	r0, [r7, #20]
        break;
 8008e3e:	e00f      	b.n	8008e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e40:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <UART_SetConfig+0x510>)
 8008e42:	617b      	str	r3, [r7, #20]
        break;
 8008e44:	e00c      	b.n	8008e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e46:	f7fe ff7d 	bl	8007d44 <HAL_RCC_GetSysClockFreq>
 8008e4a:	6178      	str	r0, [r7, #20]
        break;
 8008e4c:	e008      	b.n	8008e60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e52:	617b      	str	r3, [r7, #20]
        break;
 8008e54:	e004      	b.n	8008e60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8008e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d018      	beq.n	8008e98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	085a      	lsrs	r2, r3, #1
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	441a      	add	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d909      	bls.n	8008e94 <UART_SetConfig+0x4f4>
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e86:	d205      	bcs.n	8008e94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	e001      	b.n	8008e98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ea4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bdb0      	pop	{r4, r5, r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	00f42400 	.word	0x00f42400

08008eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00a      	beq.n	8008ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00a      	beq.n	8008f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	f003 0308 	and.w	r3, r3, #8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01a      	beq.n	8008fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fb2:	d10a      	bne.n	8008fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	605a      	str	r2, [r3, #4]
  }
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af02      	add	r7, sp, #8
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009008:	f7fc ff4c 	bl	8005ea4 <HAL_GetTick>
 800900c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b08      	cmp	r3, #8
 800901a:	d10e      	bne.n	800903a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800901c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f82d 	bl	800908a <UART_WaitOnFlagUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e023      	b.n	8009082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b04      	cmp	r3, #4
 8009046:	d10e      	bne.n	8009066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f817 	bl	800908a <UART_WaitOnFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e00d      	b.n	8009082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2220      	movs	r2, #32
 8009070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b09c      	sub	sp, #112	; 0x70
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4613      	mov	r3, r2
 8009098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909a:	e0a5      	b.n	80091e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800909c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	f000 80a1 	beq.w	80091e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a6:	f7fc fefd 	bl	8005ea4 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <UART_WaitOnFlagUntilTimeout+0x32>
 80090b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d13e      	bne.n	800913a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090d0:	667b      	str	r3, [r7, #100]	; 0x64
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e6      	bne.n	80090bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	663b      	str	r3, [r7, #96]	; 0x60
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800910e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800911c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e5      	bne.n	80090ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2220      	movs	r2, #32
 8009126:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2220      	movs	r2, #32
 800912c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e067      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d04f      	beq.n	80091e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009156:	d147      	bne.n	80091e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009160:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
 8009182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e6      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3308      	adds	r3, #8
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	613b      	str	r3, [r7, #16]
   return(result);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f023 0301 	bic.w	r3, r3, #1
 80091aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3308      	adds	r3, #8
 80091b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091b4:	623a      	str	r2, [r7, #32]
 80091b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e5      	bne.n	8009194 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2220      	movs	r2, #32
 80091d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e010      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69da      	ldr	r2, [r3, #28]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	4013      	ands	r3, r2
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	bf0c      	ite	eq
 80091f8:	2301      	moveq	r3, #1
 80091fa:	2300      	movne	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	429a      	cmp	r2, r3
 8009204:	f43f af4a 	beq.w	800909c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3770      	adds	r7, #112	; 0x70
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <__libc_init_array>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	4d0d      	ldr	r5, [pc, #52]	; (800924c <__libc_init_array+0x38>)
 8009218:	4c0d      	ldr	r4, [pc, #52]	; (8009250 <__libc_init_array+0x3c>)
 800921a:	1b64      	subs	r4, r4, r5
 800921c:	10a4      	asrs	r4, r4, #2
 800921e:	2600      	movs	r6, #0
 8009220:	42a6      	cmp	r6, r4
 8009222:	d109      	bne.n	8009238 <__libc_init_array+0x24>
 8009224:	4d0b      	ldr	r5, [pc, #44]	; (8009254 <__libc_init_array+0x40>)
 8009226:	4c0c      	ldr	r4, [pc, #48]	; (8009258 <__libc_init_array+0x44>)
 8009228:	f000 f820 	bl	800926c <_init>
 800922c:	1b64      	subs	r4, r4, r5
 800922e:	10a4      	asrs	r4, r4, #2
 8009230:	2600      	movs	r6, #0
 8009232:	42a6      	cmp	r6, r4
 8009234:	d105      	bne.n	8009242 <__libc_init_array+0x2e>
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	f855 3b04 	ldr.w	r3, [r5], #4
 800923c:	4798      	blx	r3
 800923e:	3601      	adds	r6, #1
 8009240:	e7ee      	b.n	8009220 <__libc_init_array+0xc>
 8009242:	f855 3b04 	ldr.w	r3, [r5], #4
 8009246:	4798      	blx	r3
 8009248:	3601      	adds	r6, #1
 800924a:	e7f2      	b.n	8009232 <__libc_init_array+0x1e>
 800924c:	080092d4 	.word	0x080092d4
 8009250:	080092d4 	.word	0x080092d4
 8009254:	080092d4 	.word	0x080092d4
 8009258:	080092d8 	.word	0x080092d8

0800925c <memset>:
 800925c:	4402      	add	r2, r0
 800925e:	4603      	mov	r3, r0
 8009260:	4293      	cmp	r3, r2
 8009262:	d100      	bne.n	8009266 <memset+0xa>
 8009264:	4770      	bx	lr
 8009266:	f803 1b01 	strb.w	r1, [r3], #1
 800926a:	e7f9      	b.n	8009260 <memset+0x4>

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr

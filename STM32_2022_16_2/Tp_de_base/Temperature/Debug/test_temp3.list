
test_temp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005cc0  08005cc0  00015cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08005f08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08005f08  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cb  00000000  00000000  00034097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00036868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00037598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e51  00000000  00000000  000381b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ef  00000000  00000000  00060001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec951  00000000  00000000  000718f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  0015e294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ca8 	.word	0x08005ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ca8 	.word	0x08005ca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_GPIO_Init+0xc4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <MX_GPIO_Init+0xc4>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b28      	ldr	r3, [pc, #160]	; (800062c <MX_GPIO_Init+0xc4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_GPIO_Init+0xc4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a24      	ldr	r2, [pc, #144]	; (800062c <MX_GPIO_Init+0xc4>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_GPIO_Init+0xc4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a1e      	ldr	r2, [pc, #120]	; (800062c <MX_GPIO_Init+0xc4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_GPIO_Init+0xc4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_GPIO_Init+0xc4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a18      	ldr	r2, [pc, #96]	; (800062c <MX_GPIO_Init+0xc4>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_GPIO_Init+0xc4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f001 f961 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000602:	f000 ffa9 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000606:	2320      	movs	r3, #32
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f000 ff9a 	bl	8001558 <HAL_GPIO_Init>

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	; 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	48000800 	.word	0x48000800

08000634 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x74>)
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <MX_I2C1_Init+0x78>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <MX_I2C1_Init+0x7c>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_I2C1_Init+0x74>)
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000670:	f001 f934 	bl	80018dc <HAL_I2C_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 fad6 	bl	8000c2a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067e:	2100      	movs	r1, #0
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000682:	f002 f893 	bl	80027ac <HAL_I2CEx_ConfigAnalogFilter>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 facd 	bl	8000c2a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000694:	f002 f8d5 	bl	8002842 <HAL_I2CEx_ConfigDigitalFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 fac4 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000098 	.word	0x20000098
 80006ac:	40005400 	.word	0x40005400
 80006b0:	10909cec 	.word	0x10909cec

080006b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0ac      	sub	sp, #176	; 0xb0
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2288      	movs	r2, #136	; 0x88
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 f983 	bl	80049e0 <memset>
  if(i2cHandle->Instance==I2C1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a21      	ldr	r2, [pc, #132]	; (8000764 <HAL_I2C_MspInit+0xb0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d13b      	bne.n	800075c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 ff43 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006fc:	f000 fa95 	bl	8000c2a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000718:	f44f 7340 	mov.w	r3, #768	; 0x300
 800071c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000720:	2312      	movs	r3, #18
 8000722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000732:	2304      	movs	r3, #4
 8000734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <HAL_I2C_MspInit+0xb8>)
 8000740:	f000 ff0a 	bl	8001558 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 800074a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800074e:	6593      	str	r3, [r2, #88]	; 0x58
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_I2C_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	37b0      	adds	r7, #176	; 0xb0
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005400 	.word	0x40005400
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400

08000770 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f043 030c 	orr.w	r3, r3, #12
 8000786:	b2da      	uxtb	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f043 0320 	orr.w	r3, r3, #32
 8000798:	b2db      	uxtb	r3, r3
 800079a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800079c:	f107 0118 	add.w	r1, r7, #24
 80007a0:	230a      	movs	r3, #10
 80007a2:	2202      	movs	r2, #2
 80007a4:	486c      	ldr	r0, [pc, #432]	; (8000958 <lcd_init+0x1e8>)
 80007a6:	f003 fbf3 	bl	8003f90 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007aa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007ae:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007b0:	f107 0114 	add.w	r1, r7, #20
 80007b4:	230a      	movs	r3, #10
 80007b6:	2202      	movs	r2, #2
 80007b8:	4867      	ldr	r0, [pc, #412]	; (8000958 <lcd_init+0x1e8>)
 80007ba:	f003 fbe9 	bl	8003f90 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	2205      	movs	r2, #5
 80007c2:	217c      	movs	r1, #124	; 0x7c
 80007c4:	69f8      	ldr	r0, [r7, #28]
 80007c6:	f001 fc1d 	bl	8002004 <HAL_I2C_IsDeviceReady>
 80007ca:	4603      	mov	r3, r0
 80007cc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007ce:	f107 0113 	add.w	r1, r7, #19
 80007d2:	230a      	movs	r3, #10
 80007d4:	2201      	movs	r2, #1
 80007d6:	4860      	ldr	r0, [pc, #384]	; (8000958 <lcd_init+0x1e8>)
 80007d8:	f003 fbda 	bl	8003f90 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007dc:	2032      	movs	r0, #50	; 0x32
 80007de:	f000 fdb1 	bl	8001344 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80007e2:	f107 0218 	add.w	r2, r7, #24
 80007e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2302      	movs	r3, #2
 80007ee:	217c      	movs	r1, #124	; 0x7c
 80007f0:	69f8      	ldr	r0, [r7, #28]
 80007f2:	f001 f903 	bl	80019fc <HAL_I2C_Master_Transmit>
 80007f6:	4603      	mov	r3, r0
 80007f8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80007fa:	f107 0112 	add.w	r1, r7, #18
 80007fe:	230a      	movs	r3, #10
 8000800:	2201      	movs	r2, #1
 8000802:	4855      	ldr	r0, [pc, #340]	; (8000958 <lcd_init+0x1e8>)
 8000804:	f003 fbc4 	bl	8003f90 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fd9b 	bl	8001344 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800080e:	f107 0218 	add.w	r2, r7, #24
 8000812:	f241 3388 	movw	r3, #5000	; 0x1388
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2302      	movs	r3, #2
 800081a:	217c      	movs	r1, #124	; 0x7c
 800081c:	69f8      	ldr	r0, [r7, #28]
 800081e:	f001 f8ed 	bl	80019fc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000822:	2005      	movs	r0, #5
 8000824:	f000 fd8e 	bl	8001344 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000828:	f107 0218 	add.w	r2, r7, #24
 800082c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2302      	movs	r3, #2
 8000834:	217c      	movs	r1, #124	; 0x7c
 8000836:	69f8      	ldr	r0, [r7, #28]
 8000838:	f001 f8e0 	bl	80019fc <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2204      	movs	r2, #4
 8000840:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	b2db      	uxtb	r3, r3
 800084c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800084e:	f107 0218 	add.w	r2, r7, #24
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2302      	movs	r3, #2
 800085a:	217c      	movs	r1, #124	; 0x7c
 800085c:	69f8      	ldr	r0, [r7, #28]
 800085e:	f001 f8cd 	bl	80019fc <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000862:	2301      	movs	r3, #1
 8000864:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000866:	f107 0218 	add.w	r2, r7, #24
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2302      	movs	r3, #2
 8000872:	217c      	movs	r1, #124	; 0x7c
 8000874:	69f8      	ldr	r0, [r7, #28]
 8000876:	f001 f8c1 	bl	80019fc <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800087a:	2002      	movs	r0, #2
 800087c:	f000 fd62 	bl	8001344 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2202      	movs	r2, #2
 8000884:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
 8000890:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000892:	f107 0218 	add.w	r2, r7, #24
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2302      	movs	r3, #2
 800089e:	217c      	movs	r1, #124	; 0x7c
 80008a0:	69f8      	ldr	r0, [r7, #28]
 80008a2:	f001 f8ab 	bl	80019fc <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008ae:	f107 0210 	add.w	r2, r7, #16
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	21c4      	movs	r1, #196	; 0xc4
 80008bc:	69f8      	ldr	r0, [r7, #28]
 80008be:	f001 f89d 	bl	80019fc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008c2:	2308      	movs	r3, #8
 80008c4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008c6:	23ff      	movs	r3, #255	; 0xff
 80008c8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008ca:	f107 0210 	add.w	r2, r7, #16
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2302      	movs	r3, #2
 80008d6:	21c4      	movs	r1, #196	; 0xc4
 80008d8:	69f8      	ldr	r0, [r7, #28]
 80008da:	f001 f88f 	bl	80019fc <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80008de:	2301      	movs	r3, #1
 80008e0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80008e2:	2320      	movs	r3, #32
 80008e4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008e6:	f107 0210 	add.w	r2, r7, #16
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2302      	movs	r3, #2
 80008f2:	21c4      	movs	r1, #196	; 0xc4
 80008f4:	69f8      	ldr	r0, [r7, #28]
 80008f6:	f001 f881 	bl	80019fc <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80008fa:	2304      	movs	r3, #4
 80008fc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80008fe:	23ff      	movs	r3, #255	; 0xff
 8000900:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000902:	f107 020c 	add.w	r2, r7, #12
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2302      	movs	r3, #2
 800090e:	21c4      	movs	r1, #196	; 0xc4
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f001 f873 	bl	80019fc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000916:	2303      	movs	r3, #3
 8000918:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800091a:	23ff      	movs	r3, #255	; 0xff
 800091c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2302      	movs	r3, #2
 800092a:	21c4      	movs	r1, #196	; 0xc4
 800092c:	69f8      	ldr	r0, [r7, #28]
 800092e:	f001 f865 	bl	80019fc <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000932:	2302      	movs	r3, #2
 8000934:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000936:	23ff      	movs	r3, #255	; 0xff
 8000938:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2302      	movs	r3, #2
 8000946:	21c4      	movs	r1, #196	; 0xc4
 8000948:	69f8      	ldr	r0, [r7, #28]
 800094a:	f001 f857 	bl	80019fc <HAL_I2C_Master_Transmit>


}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000e4 	.word	0x200000e4

0800095c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <clearlcd+0x2c>)
 8000966:	f000 f83c 	bl	80009e2 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <clearlcd+0x30>)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <clearlcd+0x2c>)
 800096e:	f000 f80f 	bl	8000990 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8000972:	2201      	movs	r2, #1
 8000974:	2100      	movs	r1, #0
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <clearlcd+0x2c>)
 8000978:	f000 f833 	bl	80009e2 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800097c:	4903      	ldr	r1, [pc, #12]	; (800098c <clearlcd+0x30>)
 800097e:	4802      	ldr	r0, [pc, #8]	; (8000988 <clearlcd+0x2c>)
 8000980:	f000 f806 	bl	8000990 <lcd_print>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000098 	.word	0x20000098
 800098c:	08005cc0 	.word	0x08005cc0

08000990 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	733b      	strb	r3, [r7, #12]
    int i=0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009a6:	e011      	b.n	80009cc <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009b2:	f107 020c 	add.w	r2, r7, #12
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	217c      	movs	r1, #124	; 0x7c
 80009c0:	6938      	ldr	r0, [r7, #16]
 80009c2:	f001 f81b 	bl	80019fc <HAL_I2C_Master_Transmit>
            i++;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e7      	bne.n	80009a8 <lcd_print+0x18>
   }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	70fb      	strb	r3, [r7, #3]
 80009ee:	4613      	mov	r3, r2
 80009f0:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009f6:	78bb      	ldrb	r3, [r7, #2]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <lcd_position+0x24>
    {
        col = col | 0x80;
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a02:	70fb      	strb	r3, [r7, #3]
 8000a04:	e003      	b.n	8000a0e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000a0c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a16:	f107 0208 	add.w	r2, r7, #8
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2302      	movs	r3, #2
 8000a22:	217c      	movs	r1, #124	; 0x7c
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f000 ffe9 	bl	80019fc <HAL_I2C_Master_Transmit>
}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0ce      	sub	sp, #312	; 0x138
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	rgb_lcd* datalcd ;
	char buf[256];

	// Create the handle for the sensor.
	sht3x_handle_t handle = {
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4a4b      	ldr	r2, [pc, #300]	; (8000b6c <main+0x138>)
 8000a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a44:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 fc00 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f89c 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f7ff fd8a 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a54:	f000 fb44 	bl	80010e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a58:	f7ff fdec 	bl	8000634 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init(&hi2c1, &datalcd) ;
 8000a5c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4843      	ldr	r0, [pc, #268]	; (8000b70 <main+0x13c>)
 8000a64:	f7ff fe84 	bl	8000770 <lcd_init>

// Initialise sensor (tests connection by reading the status register).
if (!sht3x_init(&handle)) {
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f953 	bl	8000d18 <sht3x_init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f083 0301 	eor.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <main+0x64>
	  lcd_position(&hi2c1, 0, 0) ;
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	483b      	ldr	r0, [pc, #236]	; (8000b70 <main+0x13c>)
 8000a84:	f7ff ffad 	bl	80009e2 <lcd_position>
	  lcd_print(&hi2c1, "Access failed") ;
 8000a88:	493a      	ldr	r1, [pc, #232]	; (8000b74 <main+0x140>)
 8000a8a:	4839      	ldr	r0, [pc, #228]	; (8000b70 <main+0x13c>)
 8000a8c:	f7ff ff80 	bl	8000990 <lcd_print>
	  HAL_Delay(2000) ;
 8000a90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a94:	f000 fc56 	bl	8001344 <HAL_Delay>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
lcd_position(&hi2c1, 0, 0) ;
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4834      	ldr	r0, [pc, #208]	; (8000b70 <main+0x13c>)
 8000a9e:	f7ff ffa0 	bl	80009e2 <lcd_position>
lcd_print(&hi2c1, "Access granted") ;
 8000aa2:	4935      	ldr	r1, [pc, #212]	; (8000b78 <main+0x144>)
 8000aa4:	4832      	ldr	r0, [pc, #200]	; (8000b70 <main+0x13c>)
 8000aa6:	f7ff ff73 	bl	8000990 <lcd_print>
HAL_Delay(2000) ;
 8000aaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aae:	f000 fc49 	bl	8001344 <HAL_Delay>
clearlcd() ;
 8000ab2:	f7ff ff53 	bl	800095c <clearlcd>


	  // Read temperature and humidity.
	  float temperature, humidity;
	  int b, c ;
	  sht3x_read_temperature_and_humidity(&handle, &temperature, &humidity);
 8000ab6:	f107 021c 	add.w	r2, r7, #28
 8000aba:	f107 0120 	add.w	r1, r7, #32
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f968 	bl	8000d98 <sht3x_read_temperature_and_humidity>
	  //char a[2] = (char)b ;
	  //a[0] = (char)temperature ;
	  //a[1] = "°" ;

	  //int myInt = 47;
	  b = (int)temperature ;
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad4:	ee17 3a90 	vmov	r3, s15
 8000ad8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char myStg1[10];
	  sprintf(myStg1, "%d", b);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000ae4:	4925      	ldr	r1, [pc, #148]	; (8000b7c <main+0x148>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 fa70 	bl	8004fcc <siprintf>

	  c = (int)humidity ;
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af8:	ee17 3a90 	vmov	r3, s15
 8000afc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  char myStg2[10];
	  sprintf(myStg2, "%d", c);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000b06:	491d      	ldr	r1, [pc, #116]	; (8000b7c <main+0x148>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fa5f 	bl	8004fcc <siprintf>
	  //lcd.print(myStg);

	  lcd_position(&hi2c1, 0, 0) ;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	4817      	ldr	r0, [pc, #92]	; (8000b70 <main+0x13c>)
 8000b14:	f7ff ff65 	bl	80009e2 <lcd_position>
	  lcd_print(&hi2c1, myStg1) ;
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <main+0x13c>)
 8000b20:	f7ff ff36 	bl	8000990 <lcd_print>
	  lcd_position(&hi2c1, 2, 0) ;
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <main+0x13c>)
 8000b2a:	f7ff ff5a 	bl	80009e2 <lcd_position>
	  lcd_print(&hi2c1, "DegC") ;
 8000b2e:	4914      	ldr	r1, [pc, #80]	; (8000b80 <main+0x14c>)
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <main+0x13c>)
 8000b32:	f7ff ff2d 	bl	8000990 <lcd_print>

	  lcd_position(&hi2c1, 0, 1) ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <main+0x13c>)
 8000b3c:	f7ff ff51 	bl	80009e2 <lcd_position>
	  lcd_print(&hi2c1, myStg2) ;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <main+0x13c>)
 8000b46:	f7ff ff23 	bl	8000990 <lcd_print>
	  lcd_position(&hi2c1, 2, 1) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <main+0x13c>)
 8000b50:	f7ff ff47 	bl	80009e2 <lcd_position>
	  lcd_print(&hi2c1, "%") ;
 8000b54:	490b      	ldr	r1, [pc, #44]	; (8000b84 <main+0x150>)
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <main+0x13c>)
 8000b58:	f7ff ff1a 	bl	8000990 <lcd_print>

	  HAL_Delay(1000) ;
 8000b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b60:	f000 fbf0 	bl	8001344 <HAL_Delay>
	  clearlcd() ;
 8000b64:	f7ff fefa 	bl	800095c <clearlcd>
  {
 8000b68:	e7a5      	b.n	8000ab6 <main+0x82>
 8000b6a:	bf00      	nop
 8000b6c:	08005d04 	.word	0x08005d04
 8000b70:	20000098 	.word	0x20000098
 8000b74:	08005cd4 	.word	0x08005cd4
 8000b78:	08005ce4 	.word	0x08005ce4
 8000b7c:	08005cf4 	.word	0x08005cf4
 8000b80:	08005cf8 	.word	0x08005cf8
 8000b84:	08005d00 	.word	0x08005d00

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b096      	sub	sp, #88	; 0x58
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2244      	movs	r2, #68	; 0x44
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 ff22 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000baa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bae:	f001 fea3 	bl	80028f8 <HAL_PWREx_ControlVoltageScaling>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bb8:	f000 f837 	bl	8000c2a <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 feda 	bl	80029a4 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bf6:	f000 f818 	bl	8000c2a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2104      	movs	r1, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 faac 	bl	8003170 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c1e:	f000 f804 	bl	8000c2a <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3758      	adds	r7, #88	; 0x58
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2e:	b672      	cpsid	i
}
 8000c30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <Error_Handler+0x8>

08000c34 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b087      	sub	sp, #28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000c3e:	23ff      	movs	r3, #255	; 0xff
 8000c40:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e020      	b.n	8000c8a <calculate_crc+0x56>
		crc ^= data[i];
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	4053      	eors	r3, r2
 8000c54:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e010      	b.n	8000c7e <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da06      	bge.n	8000c72 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	e002      	b.n	8000c78 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	d9eb      	bls.n	8000c5c <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3da      	bcc.n	8000c48 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	733b      	strb	r3, [r7, #12]
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	b299      	uxth	r1, r3
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	231e      	movs	r3, #30
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f000 fe93 	bl	80019fc <HAL_I2C_Master_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e000      	b.n	8000ce2 <sht3x_send_command+0x42>
	}

	return true;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b29b      	uxth	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <sht3x_init+0x1e>
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <sht3x_init+0x74>)
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <sht3x_init+0x78>)
 8000d2e:	2138      	movs	r1, #56	; 0x38
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <sht3x_init+0x7c>)
 8000d32:	f003 fdfb 	bl	800492c <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	889b      	ldrh	r3, [r3, #4]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	b299      	uxth	r1, r3
 8000d42:	231e      	movs	r3, #30
 8000d44:	9302      	str	r3, [sp, #8]
 8000d46:	2303      	movs	r3, #3
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2302      	movs	r3, #2
 8000d52:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000d56:	f001 f83b 	bl	8001dd0 <HAL_I2C_Mem_Read>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e00e      	b.n	8000d82 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff62 	bl	8000c34 <calculate_crc>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d001      	beq.n	8000d80 <sht3x_init+0x68>
		return false;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e000      	b.n	8000d82 <sht3x_init+0x6a>
	}

	return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08005d0c 	.word	0x08005d0c
 8000d90:	08005d60 	.word	0x08005d60
 8000d94:	08005d4c 	.word	0x08005d4c

08000d98 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000da4:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f7ff ff79 	bl	8000ca0 <sht3x_send_command>

	HAL_Delay(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 fac8 	bl	8001344 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	f107 0214 	add.w	r2, r7, #20
 8000dc4:	231e      	movs	r3, #30
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2306      	movs	r3, #6
 8000dca:	f000 ff0b 	bl	8001be4 <HAL_I2C_Master_Receive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e050      	b.n	8000e7a <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff28 	bl	8000c34 <calculate_crc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	3303      	adds	r3, #3
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff1f 	bl	8000c34 <calculate_crc>
 8000df6:	4603      	mov	r3, r0
 8000df8:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	7ffa      	ldrb	r2, [r7, #31]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d103      	bne.n	8000e0a <sht3x_read_temperature_and_humidity+0x72>
 8000e02:	7e7b      	ldrb	r3, [r7, #25]
 8000e04:	7fba      	ldrb	r2, [r7, #30]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d001      	beq.n	8000e0e <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e035      	b.n	8000e7a <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	7d7a      	ldrb	r2, [r7, #21]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff68 	bl	8000cea <uint8_to_uint16>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	7e3a      	ldrb	r2, [r7, #24]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff60 	bl	8000cea <uint8_to_uint16>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000e2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e84 <sht3x_read_temperature_and_humidity+0xec>
 8000e3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e42:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000e88 <sht3x_read_temperature_and_humidity+0xf0>
 8000e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e8c <sht3x_read_temperature_and_humidity+0xf4>
 8000e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8000e58:	8b7b      	ldrh	r3, [r7, #26]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e62:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e90 <sht3x_read_temperature_and_humidity+0xf8>
 8000e66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e6a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000e88 <sht3x_read_temperature_and_humidity+0xf0>
 8000e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	432f0000 	.word	0x432f0000
 8000e88:	477fff00 	.word	0x477fff00
 8000e8c:	42340000 	.word	0x42340000
 8000e90:	42c80000 	.word	0x42c80000

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f9ec 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4a:	f003 fd0d 	bl	8004968 <__errno>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2216      	movs	r2, #22
 8000f52:	601a      	str	r2, [r3, #0]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fc72 	bl	8004968 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20018000 	.word	0x20018000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	2000008c 	.word	0x2000008c
 80010b8:	20000180 	.word	0x20000180

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_USART2_UART_Init+0x5c>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x58>)
 8001124:	f002 fee6 	bl	8003ef4 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800112e:	f7ff fd7c 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e4 	.word	0x200000e4
 800113c:	40004400 	.word	0x40004400

08001140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0ac      	sub	sp, #176	; 0xb0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2288      	movs	r2, #136	; 0x88
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fc3d 	bl	80049e0 <memset>
  if(uartHandle->Instance==USART2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <HAL_UART_MspInit+0xb0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d13b      	bne.n	80011e8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001170:	2302      	movs	r3, #2
 8001172:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f9fd 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001188:	f7ff fd4f 	bl	8000c2a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_UART_MspInit+0xb4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011bc:	230c      	movs	r3, #12
 80011be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d4:	2307      	movs	r3, #7
 80011d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f000 f9b8 	bl	8001558 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	37b0      	adds	r7, #176	; 0xb0
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	40021000 	.word	0x40021000

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff ff5e 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f003 fbb7 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff fc03 	bl	8000a34 <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800123c:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 8001240:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001244:	2000017c 	.word	0x2000017c

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_Init+0x3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x3c>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f944 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001268:	2000      	movs	r0, #0
 800126a:	f000 f80f 	bl	800128c <HAL_InitTick>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	e001      	b.n	800127e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127a:	f7ff fe0b 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127e:	79fb      	ldrb	r3, [r7, #7]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_InitTick+0x70>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_InitTick+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f941 	bl	800153e <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d809      	bhi.n	80012dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d0:	f000 f919 	bl	8001506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e007      	b.n	80012ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	20000168 	.word	0x20000168

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000168 	.word	0x20000168

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff5c 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffb0 	bl	80014ac <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e17f      	b.n	8001868 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8171 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d005      	beq.n	8001598 <HAL_GPIO_Init+0x40>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b03      	cmp	r3, #3
 8001604:	d118      	bne.n	8001638 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80ac 	beq.w	8001862 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_GPIO_Init+0x330>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	4a5e      	ldr	r2, [pc, #376]	; (8001888 <HAL_GPIO_Init+0x330>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6613      	str	r3, [r2, #96]	; 0x60
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_GPIO_Init+0x330>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001722:	4a5a      	ldr	r2, [pc, #360]	; (800188c <HAL_GPIO_Init+0x334>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x242>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_GPIO_Init+0x338>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x23e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x33c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x23a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_GPIO_Init+0x340>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x236>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x344>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x232>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x348>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x22e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x34c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x22a>
 800177e:	2306      	movs	r3, #6
 8001780:	e00c      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001782:	2307      	movs	r3, #7
 8001784:	e00a      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001786:	2305      	movs	r3, #5
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178a:	2304      	movs	r3, #4
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x244>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x244>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x244>
 800179a:	2300      	movs	r3, #0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ac:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_GPIO_Init+0x334>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_GPIO_Init+0x350>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_GPIO_Init+0x350>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_GPIO_Init+0x350>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae78 	bne.w	8001568 <HAL_GPIO_Init+0x10>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48000c00 	.word	0x48000c00
 800189c:	48001000 	.word	0x48001000
 80018a0:	48001400 	.word	0x48001400
 80018a4:	48001800 	.word	0x48001800
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e081      	b.n	80019f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fed6 	bl	80006b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800192c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800193c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e006      	b.n	8001964 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001962:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d104      	bne.n	8001976 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69d9      	ldr	r1, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	f040 80da 	bne.w	8001bd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0x30>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0d3      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff fc7a 	bl	800132c <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2319      	movs	r3, #25
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fc5c 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0be      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2210      	movs	r2, #16
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	d90e      	bls.n	8001aa6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fe52 	bl	8002748 <I2C_TransferConfig>
 8001aa4:	e06c      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fe41 	bl	8002748 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ac6:	e05b      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6a39      	ldr	r1, [r7, #32]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fc59 	bl	8002384 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e07b      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d034      	beq.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d130      	bne.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fbeb 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04d      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d90e      	bls.n	8001b60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	22ff      	movs	r2, #255	; 0xff
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	8979      	ldrh	r1, [r7, #10]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fdf5 	bl	8002748 <I2C_TransferConfig>
 8001b5e:	e00f      	b.n	8001b80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	8979      	ldrh	r1, [r7, #10]
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fde4 	bl	8002748 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d19e      	bne.n	8001ac8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fc38 	bl	8002404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e01a      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	80002000 	.word	0x80002000
 8001be0:	fe00e800 	.word	0xfe00e800

08001be4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	f040 80db 	bne.w	8001dbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_Master_Receive+0x30>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0d4      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c1c:	f7ff fb86 	bl	800132c <HAL_GetTick>
 8001c20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2319      	movs	r3, #25
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fb68 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0bf      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2222      	movs	r2, #34	; 0x22
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2bff      	cmp	r3, #255	; 0xff
 8001c6e:	d90e      	bls.n	8001c8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	22ff      	movs	r2, #255	; 0xff
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fd5e 	bl	8002748 <I2C_TransferConfig>
 8001c8c:	e06d      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	8979      	ldrh	r1, [r7, #10]
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fd4d 	bl	8002748 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cae:	e05c      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fbe1 	bl	800247c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e07c      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d034      	beq.n	8001d6a <HAL_I2C_Master_Receive+0x186>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d130      	bne.n	8001d6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 faf6 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e04d      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d90e      	bls.n	8001d4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fd00 	bl	8002748 <I2C_TransferConfig>
 8001d48:	e00f      	b.n	8001d6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	8979      	ldrh	r1, [r7, #10]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fcef 	bl	8002748 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d19d      	bne.n	8001cb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	6a39      	ldr	r1, [r7, #32]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fb43 	bl	8002404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e01a      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_I2C_Master_Receive+0x1e8>)
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	80002400 	.word	0x80002400
 8001dcc:	fe00e800 	.word	0xfe00e800

08001dd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	f040 80fd 	bne.w	8001ff2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_I2C_Mem_Read+0x34>
 8001dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0f1      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Mem_Read+0x4e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0ea      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e26:	f7ff fa81 	bl	800132c <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fa63 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0d5      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2222      	movs	r2, #34	; 0x22
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	893a      	ldrh	r2, [r7, #8]
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f9c7 	bl	8002214 <I2C_RequestMemoryRead>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0ad      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d90e      	bls.n	8001ec0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	22ff      	movs	r2, #255	; 0xff
 8001ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	8979      	ldrh	r1, [r7, #10]
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <HAL_I2C_Mem_Read+0x22c>)
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fc45 	bl	8002748 <I2C_TransferConfig>
 8001ebe:	e00f      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_I2C_Mem_Read+0x22c>)
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fc34 	bl	8002748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2104      	movs	r1, #4
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fa0a 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07c      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d034      	beq.n	8001fa0 <HAL_I2C_Mem_Read+0x1d0>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d130      	bne.n	8001fa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 f9db 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04d      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2bff      	cmp	r3, #255	; 0xff
 8001f60:	d90e      	bls.n	8001f80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	8979      	ldrh	r1, [r7, #10]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fbe5 	bl	8002748 <I2C_TransferConfig>
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fbd4 	bl	8002748 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d19a      	bne.n	8001ee0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fa28 	bl	8002404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e01a      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_I2C_Mem_Read+0x230>)
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	80002400 	.word	0x80002400
 8002000:	fe00e800 	.word	0xfe00e800

08002004 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	460b      	mov	r3, r1
 8002012:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	f040 80f1 	bne.w	8002208 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002034:	d101      	bne.n	800203a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	e0e7      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_I2C_IsDeviceReady+0x44>
 8002044:	2302      	movs	r3, #2
 8002046:	e0e0      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_I2C_IsDeviceReady+0x72>
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002074:	e004      	b.n	8002080 <HAL_I2C_IsDeviceReady+0x7c>
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002086:	f7ff f951 	bl	800132c <HAL_GetTick>
 800208a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020b8:	e034      	b.n	8002124 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c0:	d01a      	beq.n	80020f8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f933 	bl	800132c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <HAL_I2C_IsDeviceReady+0xd4>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e088      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b20      	cmp	r3, #32
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_I2C_IsDeviceReady+0x12c>
 800212a:	7fbb      	ldrb	r3, [r7, #30]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0c4      	beq.n	80020ba <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b10      	cmp	r3, #16
 800213c:	d01a      	beq.n	8002174 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	2120      	movs	r1, #32
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8db 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e058      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2220      	movs	r2, #32
 800215e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e04a      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	2120      	movs	r1, #32
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f8c0 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e03d      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2210      	movs	r2, #16
 8002194:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2220      	movs	r2, #32
 800219c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d118      	bne.n	80021d8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f89f 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e01c      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2220      	movs	r2, #32
 80021d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	f63f af3b 	bhi.w	800205e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <I2C_RequestMemoryRead+0xa4>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa84 	bl	8002748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f89d 	bl	8002384 <I2C_WaitOnTXISFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e02c      	b.n	80022ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800225a:	893b      	ldrh	r3, [r7, #8]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
 8002264:	e015      	b.n	8002292 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	b29b      	uxth	r3, r3
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f883 	bl	8002384 <I2C_WaitOnTXISFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e012      	b.n	80022ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002288:	893b      	ldrh	r3, [r7, #8]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	; 0x40
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f831 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	80002000 	.word	0x80002000

080022bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d007      	beq.n	80022f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	619a      	str	r2, [r3, #24]
  }
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002314:	e022      	b.n	800235c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231c:	d01e      	beq.n	800235c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7ff f805 	bl	800132c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d113      	bne.n	800235c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00f      	b.n	800237c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	429a      	cmp	r2, r3
 8002378:	d0cd      	beq.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002390:	e02c      	b.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8ea 	bl	8002570 <I2C_IsErrorOccurred>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e02a      	b.n	80023fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ac:	d01e      	beq.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7fe ffbd 	bl	800132c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d113      	bne.n	80023ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e007      	b.n	80023fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d1cb      	bne.n	8002392 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002410:	e028      	b.n	8002464 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f8aa 	bl	8002570 <I2C_IsErrorOccurred>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e026      	b.n	8002474 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7fe ff81 	bl	800132c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d113      	bne.n	8002464 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d1cf      	bne.n	8002412 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002488:	e064      	b.n	8002554 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f86e 	bl	8002570 <I2C_IsErrorOccurred>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e062      	b.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d138      	bne.n	800251e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d105      	bne.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e04e      	b.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d107      	bne.n	80024e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2204      	movs	r2, #4
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
 80024e2:	e002      	b.n	80024ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2220      	movs	r2, #32
 80024f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80024fe:	400b      	ands	r3, r1
 8002500:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e022      	b.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe ff05 	bl	800132c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d193      	bne.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fe00e800 	.word	0xfe00e800

08002570 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d075      	beq.n	8002688 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a4:	e056      	b.n	8002654 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ac:	d052      	beq.n	8002654 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7fe febd 	bl	800132c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_IsErrorOccurred+0x54>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d147      	bne.n	8002654 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e6:	d12e      	bne.n	8002646 <I2C_IsErrorOccurred+0xd6>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ee:	d02a      	beq.n	8002646 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d027      	beq.n	8002646 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002604:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002606:	f7fe fe91 	bl	800132c <HAL_GetTick>
 800260a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260c:	e01b      	b.n	8002646 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800260e:	f7fe fe8d 	bl	800132c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b19      	cmp	r3, #25
 800261a:	d914      	bls.n	8002646 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b20      	cmp	r3, #32
 8002652:	d1dc      	bne.n	800260e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b20      	cmp	r3, #32
 8002660:	d003      	beq.n	800266a <I2C_IsErrorOccurred+0xfa>
 8002662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002666:	2b00      	cmp	r3, #0
 8002668:	d09d      	beq.n	80025a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266e:	2b00      	cmp	r3, #0
 8002670:	d103      	bne.n	800267a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2220      	movs	r2, #32
 8002678:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01c      	beq.n	8002738 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fddc 	bl	80022bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <I2C_IsErrorOccurred+0x1d4>)
 8002710:	400b      	ands	r3, r1
 8002712:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	431a      	orrs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800273c:	4618      	mov	r0, r3
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	fe00e800 	.word	0xfe00e800

08002748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	4613      	mov	r3, r2
 8002758:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002760:	7a7b      	ldrb	r3, [r7, #9]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002768:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	4313      	orrs	r3, r2
 8002772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002776:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	0d5b      	lsrs	r3, r3, #21
 8002782:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <I2C_TransferConfig+0x60>)
 8002788:	430b      	orrs	r3, r1
 800278a:	43db      	mvns	r3, r3
 800278c:	ea02 0103 	and.w	r1, r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	03ff63ff 	.word	0x03ff63ff

080027ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d138      	bne.n	8002834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e032      	b.n	8002836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	d139      	bne.n	80028cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002862:	2302      	movs	r3, #2
 8002864:	e033      	b.n	80028ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002894:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002906:	d130      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d038      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002924:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2232      	movs	r2, #50	; 0x32
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293c:	e002      	b.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d102      	bne.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f2      	bne.n	800293e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002964:	d110      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d007      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002980:	4a05      	ldr	r2, [pc, #20]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002986:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40007000 	.word	0x40007000
 800299c:	20000000 	.word	0x20000000
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3d4      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b6:	4ba1      	ldr	r3, [pc, #644]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c0:	4b9e      	ldr	r3, [pc, #632]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80e4 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_RCC_OscConfig+0x4a>
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b0c      	cmp	r3, #12
 80029e2:	f040 808b 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 8087 	bne.w	8002afc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ee:	4b93      	ldr	r3, [pc, #588]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e3ac      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_RCC_OscConfig+0x7c>
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_OscConfig+0x88>
 8002a20:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d223      	bcs.n	8002a78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fd41 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e38d      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b7d      	ldr	r3, [pc, #500]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7c      	ldr	r2, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b7a      	ldr	r3, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4977      	ldr	r1, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a62:	4b76      	ldr	r3, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4972      	ldr	r1, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	e025      	b.n	8002ac4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6f      	ldr	r2, [pc, #444]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	496a      	ldr	r1, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a96:	4b69      	ldr	r3, [pc, #420]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4965      	ldr	r1, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fd01 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e34d      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac4:	f000 fc36 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	495a      	ldr	r1, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x29c>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <HAL_RCC_OscConfig+0x2a0>)
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae4:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x2a4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fbcf 	bl	800128c <HAL_InitTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d052      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	e331      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc0c 	bl	800132c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b18:	f7fe fc08 	bl	800132c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e31a      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b2a:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a40      	ldr	r2, [pc, #256]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b3c:	f043 0308 	orr.w	r3, r3, #8
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	493b      	ldr	r1, [pc, #236]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b54:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4936      	ldr	r1, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b6a:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b76:	f7fe fbd9 	bl	800132c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fbd5 	bl	800132c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e2e7      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x1da>
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d074      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x21a>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b0c      	cmp	r3, #12
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d064      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d160      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e2c4      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x24a>
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e01d      	b.n	8002c2a <HAL_RCC_OscConfig+0x286>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x26e>
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x286>
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a06      	ldr	r2, [pc, #24]	; (8002c3c <HAL_RCC_OscConfig+0x298>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fb7b 	bl	800132c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c38:	e011      	b.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08005d6c 	.word	0x08005d6c
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fb6e 	bl	800132c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e280      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5e:	4baf      	ldr	r3, [pc, #700]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2a8>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb5e 	bl	800132c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fb5a 	bl	800132c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e26c      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c86:	4ba5      	ldr	r3, [pc, #660]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2d0>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d060      	beq.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x310>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d116      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	4b99      	ldr	r3, [pc, #612]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_OscConfig+0x328>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e249      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4990      	ldr	r1, [pc, #576]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce0:	e040      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d023      	beq.n	8002d32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cea:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a8b      	ldr	r2, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fb19 	bl	800132c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fb15 	bl	800132c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e227      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d10:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b7f      	ldr	r3, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	497c      	ldr	r1, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a79      	ldr	r2, [pc, #484]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe faf5 	bl	800132c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe faf1 	bl	800132c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e203      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d58:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03c      	beq.n	8002dea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fad0 	bl	800132c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe facc 	bl	800132c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1de      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da2:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3ec>
 8002db0:	e01b      	b.n	8002dea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fab3 	bl	800132c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe faaf 	bl	800132c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1c1      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80a6 	beq.w	8002f44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a43      	ldr	r2, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_OscConfig+0x57c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d118      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x57c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <HAL_RCC_OscConfig+0x57c>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fa76 	bl	800132c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe fa72 	bl	800132c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e184      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x57c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d8>
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e7a:	e024      	b.n	8002ec6 <HAL_RCC_OscConfig+0x522>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d110      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x502>
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea4:	e00f      	b.n	8002ec6 <HAL_RCC_OscConfig+0x522>
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f023 0304 	bic.w	r3, r3, #4
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe fa2d 	bl	800132c <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fe fa29 	bl	800132c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e139      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x578>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ed      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x532>
 8002efa:	e01a      	b.n	8002f32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fa16 	bl	800132c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f02:	e00f      	b.n	8002f24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe fa12 	bl	800132c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d906      	bls.n	8002f24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e122      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f24:	4b90      	ldr	r3, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e8      	bne.n	8002f04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8108 	beq.w	800315e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 80d0 	bne.w	80030f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f58:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d130      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d127      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11f      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f98:	2a07      	cmp	r2, #7
 8002f9a:	bf14      	ite	ne
 8002f9c:	2201      	movne	r2, #1
 8002f9e:	2200      	moveq	r2, #0
 8002fa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d06e      	beq.n	80030ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d069      	beq.n	80030a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd4:	4b64      	ldr	r3, [pc, #400]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fe0:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b7      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ffc:	f7fe f996 	bl	800132c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f992 	bl	800132c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0a4      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003016:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_OscConfig+0x7c8>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003032:	3a01      	subs	r2, #1
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	4311      	orrs	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800303c:	0212      	lsls	r2, r2, #8
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003044:	0852      	lsrs	r2, r2, #1
 8003046:	3a01      	subs	r2, #1
 8003048:	0552      	lsls	r2, r2, #21
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	3a01      	subs	r2, #1
 8003054:	0652      	lsls	r2, r2, #25
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305c:	0912      	lsrs	r2, r2, #4
 800305e:	0452      	lsls	r2, r2, #17
 8003060:	430a      	orrs	r2, r1
 8003062:	4941      	ldr	r1, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a3e      	ldr	r2, [pc, #248]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003080:	f7fe f954 	bl	800132c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f950 	bl	800132c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e062      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	e05a      	b.n	800315e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e059      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d152      	bne.n	800315e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030d0:	f7fe f92c 	bl	800132c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f928 	bl	800132c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e03a      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x734>
 80030f6:	e032      	b.n	800315e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d02d      	beq.n	800315a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a19      	ldr	r2, [pc, #100]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800311c:	f023 0303 	bic.w	r3, r3, #3
 8003120:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 8003128:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe f8fb 	bl	800132c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe f8f7 	bl	800132c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e009      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_OscConfig+0x7c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x796>
 8003158:	e001      	b.n	800315e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	f99d808c 	.word	0xf99d808c

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0c8      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d910      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b63      	ldr	r3, [pc, #396]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	4961      	ldr	r1, [pc, #388]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b0      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04c      	beq.n	800325a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e09e      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e092      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e086      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e07e      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003218:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 0203 	bic.w	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	493f      	ldr	r1, [pc, #252]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322a:	f7fe f87f 	bl	800132c <HAL_GetTick>
 800322e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	e00a      	b.n	8003248 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fe f87b 	bl	800132c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e066      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 020c 	and.w	r2, r3, #12
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	429a      	cmp	r2, r3
 8003258:	d1eb      	bne.n	8003232 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	492c      	ldr	r1, [pc, #176]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d210      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0207 	bic.w	r2, r3, #7
 800328e:	4924      	ldr	r1, [pc, #144]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_RCC_ClockConfig+0x1b0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e036      	b.n	8003316 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4918      	ldr	r1, [pc, #96]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4910      	ldr	r1, [pc, #64]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e6:	f000 f825 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_ClockConfig+0x1b4>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490c      	ldr	r1, [pc, #48]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd ffbe 	bl	800128c <HAL_InitTick>
 8003310:	4603      	mov	r3, r0
 8003312:	72fb      	strb	r3, [r7, #11]

  return status;
 8003314:	7afb      	ldrb	r3, [r7, #11]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	08005d6c 	.word	0x08005d6c
 800332c:	20000000 	.word	0x20000000
 8003330:	20000004 	.word	0x20000004

08003334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x34>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d11e      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003374:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e005      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003390:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	e004      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d134      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0xa6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xac>
 80033d8:	e005      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033dc:	617b      	str	r3, [r7, #20]
      break;
 80033de:	e005      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e2:	617b      	str	r3, [r7, #20]
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	617b      	str	r3, [r7, #20]
      break;
 80033ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	fb02 f203 	mul.w	r2, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	0e5b      	lsrs	r3, r3, #25
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	3301      	adds	r3, #1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800342c:	69bb      	ldr	r3, [r7, #24]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	08005d84 	.word	0x08005d84
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003468:	f7ff fff0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0a1b      	lsrs	r3, r3, #8
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4904      	ldr	r1, [pc, #16]	; (800348c <HAL_RCC_GetPCLK1Freq+0x28>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	08005d7c 	.word	0x08005d7c

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003494:	f7ff ffda 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4904      	ldr	r1, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	08005d7c 	.word	0x08005d7c

080034bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034d4:	f7ff fa02 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 80034d8:	6178      	str	r0, [r7, #20]
 80034da:	e014      	b.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6593      	str	r3, [r2, #88]	; 0x58
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034f4:	f7ff f9f2 	bl	80028dc <HAL_PWREx_GetVoltageRange>
 80034f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d10b      	bne.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d919      	bls.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2ba0      	cmp	r3, #160	; 0xa0
 8003518:	d902      	bls.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800351a:	2302      	movs	r3, #2
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e013      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e010      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b80      	cmp	r3, #128	; 0x80
 800352a:	d902      	bls.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800352c:	2303      	movs	r3, #3
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e00a      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d102      	bne.n	800353e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003538:	2302      	movs	r3, #2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e004      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d101      	bne.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 0207 	bic.w	r2, r3, #7
 8003550:	4909      	ldr	r1, [pc, #36]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	40022000 	.word	0x40022000

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003584:	2300      	movs	r3, #0
 8003586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003588:	2300      	movs	r3, #0
 800358a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003594:	2b00      	cmp	r3, #0
 8003596:	d041      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a0:	d02a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a6:	d824      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b2:	d81e      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d010      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035be:	e018      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c0:	4b86      	ldr	r3, [pc, #536]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a85      	ldr	r2, [pc, #532]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035cc:	e015      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fabb 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035de:	e00c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3320      	adds	r3, #32
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fba6 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	74fb      	strb	r3, [r7, #19]
      break;
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360e:	4973      	ldr	r1, [pc, #460]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003616:	e001      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d041      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003630:	d02a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003636:	d824      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800363e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003642:	d81e      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800364c:	d010      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800364e:	e018      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a61      	ldr	r2, [pc, #388]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800365c:	e015      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fa73 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3320      	adds	r3, #32
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fb5e 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	74fb      	strb	r3, [r7, #19]
      break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369e:	494f      	ldr	r1, [pc, #316]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a0 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a40      	ldr	r2, [pc, #256]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fe16 	bl	800132c <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fe12 	bl	800132c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	74fb      	strb	r3, [r7, #19]
        break;
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003718:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d15c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	d019      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fdd1 	bl	800132c <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	e00b      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fdcd 	bl	800132c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d902      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	74fb      	strb	r3, [r7, #19]
            break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ec      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037d2:	e009      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	74bb      	strb	r3, [r7, #18]
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e8:	7c7b      	ldrb	r3, [r7, #17]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ee:	4b9e      	ldr	r3, [pc, #632]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	4a9d      	ldr	r2, [pc, #628]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003806:	4b98      	ldr	r3, [pc, #608]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 0203 	bic.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	4994      	ldr	r1, [pc, #592]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003828:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f023 020c 	bic.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	498c      	ldr	r1, [pc, #560]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384a:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4983      	ldr	r1, [pc, #524]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	497b      	ldr	r1, [pc, #492]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	4972      	ldr	r1, [pc, #456]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b0:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	496a      	ldr	r1, [pc, #424]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	4961      	ldr	r1, [pc, #388]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	4959      	ldr	r1, [pc, #356]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	4950      	ldr	r1, [pc, #320]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	4948      	ldr	r1, [pc, #288]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	493f      	ldr	r1, [pc, #252]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d028      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800397c:	4b3a      	ldr	r3, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	4937      	ldr	r1, [pc, #220]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d106      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e011      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b2:	d10c      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f8c8 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d028      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a04:	60d3      	str	r3, [r2, #12]
 8003a06:	e011      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f899 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a56:	d109      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a62:	60d3      	str	r3, [r2, #12]
 8003a64:	e014      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f867 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aaa:	4928      	ldr	r1, [pc, #160]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f844 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d014      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	74bb      	strb	r3, [r7, #18]
 8003ad6:	e011      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f925 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3a:	4904      	ldr	r1, [pc, #16]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b42:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b5e:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10d      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
       ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d047      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e044      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d018      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x86>
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d825      	bhi.n	8003bf4 <RCCEx_PLLSAI1_Config+0xa4>
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d002      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x62>
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d009      	beq.n	8003bc4 <RCCEx_PLLSAI1_Config+0x74>
 8003bb0:	e020      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc2:	e01a      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e013      	b.n	8003bfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bd6:	4b57      	ldr	r3, [pc, #348]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003be2:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bf2:	e006      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e004      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e002      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	4944      	ldr	r1, [pc, #272]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d17d      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c2c:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fd fb78 	bl	800132c <HAL_GetTick>
 8003c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c3e:	e009      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c40:	f7fd fb74 	bl	800132c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d902      	bls.n	8003c54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	73fb      	strb	r3, [r7, #15]
        break;
 8003c52:	e005      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ef      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d160      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6892      	ldr	r2, [r2, #8]
 8003c7c:	0211      	lsls	r1, r2, #8
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	0912      	lsrs	r2, r2, #4
 8003c84:	0452      	lsls	r2, r2, #17
 8003c86:	430a      	orrs	r2, r1
 8003c88:	492a      	ldr	r1, [pc, #168]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
 8003c8e:	e027      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d112      	bne.n	8003cbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	0211      	lsls	r1, r2, #8
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6912      	ldr	r2, [r2, #16]
 8003cac:	0852      	lsrs	r2, r2, #1
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0552      	lsls	r2, r2, #21
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	491f      	ldr	r1, [pc, #124]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]
 8003cba:	e011      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	0211      	lsls	r1, r2, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6952      	ldr	r2, [r2, #20]
 8003cd2:	0852      	lsrs	r2, r2, #1
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0652      	lsls	r2, r2, #25
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	4916      	ldr	r1, [pc, #88]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd fb1e 	bl	800132c <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf2:	e009      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf4:	f7fd fb1a 	bl	800132c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	73fb      	strb	r3, [r7, #15]
          break;
 8003d06:	e005      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	4904      	ldr	r1, [pc, #16]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000

08003d38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10d      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
       ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d047      	beq.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e044      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d018      	beq.n	8003dbe <RCCEx_PLLSAI2_Config+0x86>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCCEx_PLLSAI2_Config+0xa4>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x62>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI2_Config+0x74>
 8003d98:	e020      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003daa:	e01a      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e013      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dda:	e006      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	430b      	orrs	r3, r1
 8003e08:	4939      	ldr	r1, [pc, #228]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d167      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a35      	ldr	r2, [pc, #212]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd fa84 	bl	800132c <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e28:	f7fd fa80 	bl	800132c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d14a      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d111      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	0211      	lsls	r1, r2, #8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	0912      	lsrs	r2, r2, #4
 8003e6c:	0452      	lsls	r2, r2, #17
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	491f      	ldr	r1, [pc, #124]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	614b      	str	r3, [r1, #20]
 8003e76:	e011      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6912      	ldr	r2, [r2, #16]
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0652      	lsls	r2, r2, #25
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fa40 	bl	800132c <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb0:	f7fd fa3c 	bl	800132c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e040      	b.n	8003f88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd f912 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	; 0x24
 8003f20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8c0 	bl	80040b8 <UART_SetConfig>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e022      	b.n	8003f88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb3e 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fbc5 	bl	8004710 <UART_CheckIdleState>
 8003f86:	4603      	mov	r3, r0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	; 0x28
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	f040 8082 	bne.w	80040ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Transmit+0x26>
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07a      	b.n	80040b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Transmit+0x38>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e073      	b.n	80040b0 <HAL_UART_Transmit+0x120>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2221      	movs	r2, #33	; 0x21
 8003fdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fde:	f7fd f9a5 	bl	800132c <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d108      	bne.n	8004010 <HAL_UART_Transmit+0x80>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004020:	e02d      	b.n	800407e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fbb8 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e039      	b.n	80040b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	881a      	ldrh	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404e:	b292      	uxth	r2, r2
 8004050:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	3302      	adds	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e008      	b.n	800406c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b292      	uxth	r2, r2
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cb      	bne.n	8004022 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fb84 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e005      	b.n	80040b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4bad      	ldr	r3, [pc, #692]	; (8004398 <UART_SetConfig+0x2e0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	69f9      	ldr	r1, [r7, #28]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4aa2      	ldr	r2, [pc, #648]	; (800439c <UART_SetConfig+0x2e4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	4313      	orrs	r3, r2
 800411e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a99      	ldr	r2, [pc, #612]	; (80043a0 <UART_SetConfig+0x2e8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d121      	bne.n	8004182 <UART_SetConfig+0xca>
 800413e:	4b99      	ldr	r3, [pc, #612]	; (80043a4 <UART_SetConfig+0x2ec>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	2b03      	cmp	r3, #3
 800414a:	d817      	bhi.n	800417c <UART_SetConfig+0xc4>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x9c>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004165 	.word	0x08004165
 8004158:	08004171 	.word	0x08004171
 800415c:	0800416b 	.word	0x0800416b
 8004160:	08004177 	.word	0x08004177
 8004164:	2301      	movs	r3, #1
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e0e7      	b.n	800433a <UART_SetConfig+0x282>
 800416a:	2302      	movs	r3, #2
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e0e4      	b.n	800433a <UART_SetConfig+0x282>
 8004170:	2304      	movs	r3, #4
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e0e1      	b.n	800433a <UART_SetConfig+0x282>
 8004176:	2308      	movs	r3, #8
 8004178:	76fb      	strb	r3, [r7, #27]
 800417a:	e0de      	b.n	800433a <UART_SetConfig+0x282>
 800417c:	2310      	movs	r3, #16
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	e0db      	b.n	800433a <UART_SetConfig+0x282>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a88      	ldr	r2, [pc, #544]	; (80043a8 <UART_SetConfig+0x2f0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d132      	bne.n	80041f2 <UART_SetConfig+0x13a>
 800418c:	4b85      	ldr	r3, [pc, #532]	; (80043a4 <UART_SetConfig+0x2ec>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d828      	bhi.n	80041ec <UART_SetConfig+0x134>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0xe8>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041ed 	.word	0x080041ed
 80041a8:	080041ed 	.word	0x080041ed
 80041ac:	080041ed 	.word	0x080041ed
 80041b0:	080041e1 	.word	0x080041e1
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080041ed 	.word	0x080041ed
 80041c0:	080041db 	.word	0x080041db
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041ed 	.word	0x080041ed
 80041d0:	080041e7 	.word	0x080041e7
 80041d4:	2300      	movs	r3, #0
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e0af      	b.n	800433a <UART_SetConfig+0x282>
 80041da:	2302      	movs	r3, #2
 80041dc:	76fb      	strb	r3, [r7, #27]
 80041de:	e0ac      	b.n	800433a <UART_SetConfig+0x282>
 80041e0:	2304      	movs	r3, #4
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	e0a9      	b.n	800433a <UART_SetConfig+0x282>
 80041e6:	2308      	movs	r3, #8
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e0a6      	b.n	800433a <UART_SetConfig+0x282>
 80041ec:	2310      	movs	r3, #16
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e0a3      	b.n	800433a <UART_SetConfig+0x282>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6d      	ldr	r2, [pc, #436]	; (80043ac <UART_SetConfig+0x2f4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d120      	bne.n	800423e <UART_SetConfig+0x186>
 80041fc:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <UART_SetConfig+0x2ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004206:	2b30      	cmp	r3, #48	; 0x30
 8004208:	d013      	beq.n	8004232 <UART_SetConfig+0x17a>
 800420a:	2b30      	cmp	r3, #48	; 0x30
 800420c:	d814      	bhi.n	8004238 <UART_SetConfig+0x180>
 800420e:	2b20      	cmp	r3, #32
 8004210:	d009      	beq.n	8004226 <UART_SetConfig+0x16e>
 8004212:	2b20      	cmp	r3, #32
 8004214:	d810      	bhi.n	8004238 <UART_SetConfig+0x180>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <UART_SetConfig+0x168>
 800421a:	2b10      	cmp	r3, #16
 800421c:	d006      	beq.n	800422c <UART_SetConfig+0x174>
 800421e:	e00b      	b.n	8004238 <UART_SetConfig+0x180>
 8004220:	2300      	movs	r3, #0
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e089      	b.n	800433a <UART_SetConfig+0x282>
 8004226:	2302      	movs	r3, #2
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e086      	b.n	800433a <UART_SetConfig+0x282>
 800422c:	2304      	movs	r3, #4
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e083      	b.n	800433a <UART_SetConfig+0x282>
 8004232:	2308      	movs	r3, #8
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e080      	b.n	800433a <UART_SetConfig+0x282>
 8004238:	2310      	movs	r3, #16
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e07d      	b.n	800433a <UART_SetConfig+0x282>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <UART_SetConfig+0x2f8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d120      	bne.n	800428a <UART_SetConfig+0x1d2>
 8004248:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <UART_SetConfig+0x2ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004252:	2bc0      	cmp	r3, #192	; 0xc0
 8004254:	d013      	beq.n	800427e <UART_SetConfig+0x1c6>
 8004256:	2bc0      	cmp	r3, #192	; 0xc0
 8004258:	d814      	bhi.n	8004284 <UART_SetConfig+0x1cc>
 800425a:	2b80      	cmp	r3, #128	; 0x80
 800425c:	d009      	beq.n	8004272 <UART_SetConfig+0x1ba>
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d810      	bhi.n	8004284 <UART_SetConfig+0x1cc>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <UART_SetConfig+0x1b4>
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d006      	beq.n	8004278 <UART_SetConfig+0x1c0>
 800426a:	e00b      	b.n	8004284 <UART_SetConfig+0x1cc>
 800426c:	2300      	movs	r3, #0
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e063      	b.n	800433a <UART_SetConfig+0x282>
 8004272:	2302      	movs	r3, #2
 8004274:	76fb      	strb	r3, [r7, #27]
 8004276:	e060      	b.n	800433a <UART_SetConfig+0x282>
 8004278:	2304      	movs	r3, #4
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e05d      	b.n	800433a <UART_SetConfig+0x282>
 800427e:	2308      	movs	r3, #8
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e05a      	b.n	800433a <UART_SetConfig+0x282>
 8004284:	2310      	movs	r3, #16
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e057      	b.n	800433a <UART_SetConfig+0x282>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a49      	ldr	r2, [pc, #292]	; (80043b4 <UART_SetConfig+0x2fc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d125      	bne.n	80042e0 <UART_SetConfig+0x228>
 8004294:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <UART_SetConfig+0x2ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a2:	d017      	beq.n	80042d4 <UART_SetConfig+0x21c>
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a8:	d817      	bhi.n	80042da <UART_SetConfig+0x222>
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ae:	d00b      	beq.n	80042c8 <UART_SetConfig+0x210>
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b4:	d811      	bhi.n	80042da <UART_SetConfig+0x222>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <UART_SetConfig+0x20a>
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042be:	d006      	beq.n	80042ce <UART_SetConfig+0x216>
 80042c0:	e00b      	b.n	80042da <UART_SetConfig+0x222>
 80042c2:	2300      	movs	r3, #0
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e038      	b.n	800433a <UART_SetConfig+0x282>
 80042c8:	2302      	movs	r3, #2
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e035      	b.n	800433a <UART_SetConfig+0x282>
 80042ce:	2304      	movs	r3, #4
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e032      	b.n	800433a <UART_SetConfig+0x282>
 80042d4:	2308      	movs	r3, #8
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e02f      	b.n	800433a <UART_SetConfig+0x282>
 80042da:	2310      	movs	r3, #16
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e02c      	b.n	800433a <UART_SetConfig+0x282>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2d      	ldr	r2, [pc, #180]	; (800439c <UART_SetConfig+0x2e4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d125      	bne.n	8004336 <UART_SetConfig+0x27e>
 80042ea:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <UART_SetConfig+0x2ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f8:	d017      	beq.n	800432a <UART_SetConfig+0x272>
 80042fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042fe:	d817      	bhi.n	8004330 <UART_SetConfig+0x278>
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004304:	d00b      	beq.n	800431e <UART_SetConfig+0x266>
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d811      	bhi.n	8004330 <UART_SetConfig+0x278>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x260>
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d006      	beq.n	8004324 <UART_SetConfig+0x26c>
 8004316:	e00b      	b.n	8004330 <UART_SetConfig+0x278>
 8004318:	2300      	movs	r3, #0
 800431a:	76fb      	strb	r3, [r7, #27]
 800431c:	e00d      	b.n	800433a <UART_SetConfig+0x282>
 800431e:	2302      	movs	r3, #2
 8004320:	76fb      	strb	r3, [r7, #27]
 8004322:	e00a      	b.n	800433a <UART_SetConfig+0x282>
 8004324:	2304      	movs	r3, #4
 8004326:	76fb      	strb	r3, [r7, #27]
 8004328:	e007      	b.n	800433a <UART_SetConfig+0x282>
 800432a:	2308      	movs	r3, #8
 800432c:	76fb      	strb	r3, [r7, #27]
 800432e:	e004      	b.n	800433a <UART_SetConfig+0x282>
 8004330:	2310      	movs	r3, #16
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	e001      	b.n	800433a <UART_SetConfig+0x282>
 8004336:	2310      	movs	r3, #16
 8004338:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <UART_SetConfig+0x2e4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	f040 8087 	bne.w	8004454 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d837      	bhi.n	80043bc <UART_SetConfig+0x304>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x29c>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	080043bd 	.word	0x080043bd
 800435c:	08004381 	.word	0x08004381
 8004360:	080043bd 	.word	0x080043bd
 8004364:	08004387 	.word	0x08004387
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043bd 	.word	0x080043bd
 8004374:	0800438f 	.word	0x0800438f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7ff f874 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 800437c:	6178      	str	r0, [r7, #20]
        break;
 800437e:	e022      	b.n	80043c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <UART_SetConfig+0x300>)
 8004382:	617b      	str	r3, [r7, #20]
        break;
 8004384:	e01f      	b.n	80043c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004386:	f7fe ffd5 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 800438a:	6178      	str	r0, [r7, #20]
        break;
 800438c:	e01b      	b.n	80043c6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	617b      	str	r3, [r7, #20]
        break;
 8004394:	e017      	b.n	80043c6 <UART_SetConfig+0x30e>
 8004396:	bf00      	nop
 8004398:	efff69f3 	.word	0xefff69f3
 800439c:	40008000 	.word	0x40008000
 80043a0:	40013800 	.word	0x40013800
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40004400 	.word	0x40004400
 80043ac:	40004800 	.word	0x40004800
 80043b0:	40004c00 	.word	0x40004c00
 80043b4:	40005000 	.word	0x40005000
 80043b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	76bb      	strb	r3, [r7, #26]
        break;
 80043c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80f1 	beq.w	80045b0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d305      	bcc.n	80043ea <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d902      	bls.n	80043f0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	76bb      	strb	r3, [r7, #26]
 80043ee:	e0df      	b.n	80045b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	020b      	lsls	r3, r1, #8
 8004402:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004406:	0202      	lsls	r2, r0, #8
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	6849      	ldr	r1, [r1, #4]
 800440c:	0849      	lsrs	r1, r1, #1
 800440e:	4608      	mov	r0, r1
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	1814      	adds	r4, r2, r0
 8004416:	eb43 0501 	adc.w	r5, r3, r1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fb ff22 	bl	8000270 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443a:	d308      	bcc.n	800444e <UART_SetConfig+0x396>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004442:	d204      	bcs.n	800444e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	e0b0      	b.n	80045b0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	76bb      	strb	r3, [r7, #26]
 8004452:	e0ad      	b.n	80045b0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	d15b      	bne.n	8004516 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800445e:	7efb      	ldrb	r3, [r7, #27]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d828      	bhi.n	80044b6 <UART_SetConfig+0x3fe>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x3b4>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe ffe8 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8004494:	6178      	str	r0, [r7, #20]
        break;
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7fe fffa 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800449c:	6178      	str	r0, [r7, #20]
        break;
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <UART_SetConfig+0x510>)
 80044a2:	617b      	str	r3, [r7, #20]
        break;
 80044a4:	e00c      	b.n	80044c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe ff45 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80044aa:	6178      	str	r0, [r7, #20]
        break;
 80044ac:	e008      	b.n	80044c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	617b      	str	r3, [r7, #20]
        break;
 80044b4:	e004      	b.n	80044c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	76bb      	strb	r3, [r7, #26]
        break;
 80044be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d074      	beq.n	80045b0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	005a      	lsls	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d916      	bls.n	8004510 <UART_SetConfig+0x458>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d212      	bcs.n	8004510 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	b29a      	uxth	r2, r3
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	4313      	orrs	r3, r2
 8004504:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	89fa      	ldrh	r2, [r7, #14]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	e04f      	b.n	80045b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	76bb      	strb	r3, [r7, #26]
 8004514:	e04c      	b.n	80045b0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004516:	7efb      	ldrb	r3, [r7, #27]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d828      	bhi.n	800456e <UART_SetConfig+0x4b6>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <UART_SetConfig+0x46c>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004549 	.word	0x08004549
 8004528:	08004551 	.word	0x08004551
 800452c:	08004559 	.word	0x08004559
 8004530:	0800456f 	.word	0x0800456f
 8004534:	0800455f 	.word	0x0800455f
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800456f 	.word	0x0800456f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7fe ff8c 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 800454c:	6178      	str	r0, [r7, #20]
        break;
 800454e:	e013      	b.n	8004578 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004550:	f7fe ff9e 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8004554:	6178      	str	r0, [r7, #20]
        break;
 8004556:	e00f      	b.n	8004578 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <UART_SetConfig+0x510>)
 800455a:	617b      	str	r3, [r7, #20]
        break;
 800455c:	e00c      	b.n	8004578 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7fe fee9 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 8004562:	6178      	str	r0, [r7, #20]
        break;
 8004564:	e008      	b.n	8004578 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456a:	617b      	str	r3, [r7, #20]
        break;
 800456c:	e004      	b.n	8004578 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	76bb      	strb	r3, [r7, #26]
        break;
 8004576:	bf00      	nop
    }

    if (pclk != 0U)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085a      	lsrs	r2, r3, #1
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d909      	bls.n	80045ac <UART_SetConfig+0x4f4>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459e:	d205      	bcs.n	80045ac <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e001      	b.n	80045b0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045bc:	7ebb      	ldrb	r3, [r7, #26]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bdb0      	pop	{r4, r5, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	00f42400 	.word	0x00f42400

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004720:	f7fc fe04 	bl	800132c <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f82d 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e023      	b.n	800479a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f817 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00d      	b.n	800479a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b09c      	sub	sp, #112	; 0x70
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e0a5      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ba:	f000 80a1 	beq.w	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fc fdb5 	bl	800132c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d13e      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e6      	bne.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	663b      	str	r3, [r7, #96]	; 0x60
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004826:	64ba      	str	r2, [r7, #72]	; 0x48
 8004828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800482c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e067      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04f      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486e:	d147      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004878:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048cc:	623a      	str	r2, [r7, #32]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e010      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	f43f af4a 	beq.w	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3770      	adds	r7, #112	; 0x70
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <__assert_func>:
 800492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800492e:	4614      	mov	r4, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <__assert_func+0x2c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4605      	mov	r5, r0
 8004938:	68d8      	ldr	r0, [r3, #12]
 800493a:	b14c      	cbz	r4, 8004950 <__assert_func+0x24>
 800493c:	4b07      	ldr	r3, [pc, #28]	; (800495c <__assert_func+0x30>)
 800493e:	9100      	str	r1, [sp, #0]
 8004940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004944:	4906      	ldr	r1, [pc, #24]	; (8004960 <__assert_func+0x34>)
 8004946:	462b      	mov	r3, r5
 8004948:	f000 f814 	bl	8004974 <fiprintf>
 800494c:	f000 fc1e 	bl	800518c <abort>
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__assert_func+0x38>)
 8004952:	461c      	mov	r4, r3
 8004954:	e7f3      	b.n	800493e <__assert_func+0x12>
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c
 800495c:	08005db4 	.word	0x08005db4
 8004960:	08005dc1 	.word	0x08005dc1
 8004964:	08005def 	.word	0x08005def

08004968 <__errno>:
 8004968:	4b01      	ldr	r3, [pc, #4]	; (8004970 <__errno+0x8>)
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c

08004974 <fiprintf>:
 8004974:	b40e      	push	{r1, r2, r3}
 8004976:	b503      	push	{r0, r1, lr}
 8004978:	4601      	mov	r1, r0
 800497a:	ab03      	add	r3, sp, #12
 800497c:	4805      	ldr	r0, [pc, #20]	; (8004994 <fiprintf+0x20>)
 800497e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	f000 f85d 	bl	8004a44 <_vfiprintf_r>
 800498a:	b002      	add	sp, #8
 800498c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004990:	b003      	add	sp, #12
 8004992:	4770      	bx	lr
 8004994:	2000000c 	.word	0x2000000c

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	4d0d      	ldr	r5, [pc, #52]	; (80049d0 <__libc_init_array+0x38>)
 800499c:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	2600      	movs	r6, #0
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	4d0b      	ldr	r5, [pc, #44]	; (80049d8 <__libc_init_array+0x40>)
 80049aa:	4c0c      	ldr	r4, [pc, #48]	; (80049dc <__libc_init_array+0x44>)
 80049ac:	f001 f97c 	bl	8005ca8 <_init>
 80049b0:	1b64      	subs	r4, r4, r5
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	2600      	movs	r6, #0
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005e90 	.word	0x08005e90
 80049d4:	08005e90 	.word	0x08005e90
 80049d8:	08005e90 	.word	0x08005e90
 80049dc:	08005e94 	.word	0x08005e94

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <__sfputc_r>:
 80049f0:	6893      	ldr	r3, [r2, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	b410      	push	{r4}
 80049f8:	6093      	str	r3, [r2, #8]
 80049fa:	da08      	bge.n	8004a0e <__sfputc_r+0x1e>
 80049fc:	6994      	ldr	r4, [r2, #24]
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	db01      	blt.n	8004a06 <__sfputc_r+0x16>
 8004a02:	290a      	cmp	r1, #10
 8004a04:	d103      	bne.n	8004a0e <__sfputc_r+0x1e>
 8004a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a0a:	f000 baff 	b.w	800500c <__swbuf_r>
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	1c58      	adds	r0, r3, #1
 8004a12:	6010      	str	r0, [r2, #0]
 8004a14:	7019      	strb	r1, [r3, #0]
 8004a16:	4608      	mov	r0, r1
 8004a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <__sfputs_r>:
 8004a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a20:	4606      	mov	r6, r0
 8004a22:	460f      	mov	r7, r1
 8004a24:	4614      	mov	r4, r2
 8004a26:	18d5      	adds	r5, r2, r3
 8004a28:	42ac      	cmp	r4, r5
 8004a2a:	d101      	bne.n	8004a30 <__sfputs_r+0x12>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e007      	b.n	8004a40 <__sfputs_r+0x22>
 8004a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a34:	463a      	mov	r2, r7
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7ff ffda 	bl	80049f0 <__sfputc_r>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d1f3      	bne.n	8004a28 <__sfputs_r+0xa>
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a44 <_vfiprintf_r>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	460d      	mov	r5, r1
 8004a4a:	b09d      	sub	sp, #116	; 0x74
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	4698      	mov	r8, r3
 8004a50:	4606      	mov	r6, r0
 8004a52:	b118      	cbz	r0, 8004a5c <_vfiprintf_r+0x18>
 8004a54:	6983      	ldr	r3, [r0, #24]
 8004a56:	b90b      	cbnz	r3, 8004a5c <_vfiprintf_r+0x18>
 8004a58:	f000 fcba 	bl	80053d0 <__sinit>
 8004a5c:	4b89      	ldr	r3, [pc, #548]	; (8004c84 <_vfiprintf_r+0x240>)
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	d11b      	bne.n	8004a9a <_vfiprintf_r+0x56>
 8004a62:	6875      	ldr	r5, [r6, #4]
 8004a64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a66:	07d9      	lsls	r1, r3, #31
 8004a68:	d405      	bmi.n	8004a76 <_vfiprintf_r+0x32>
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	059a      	lsls	r2, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_vfiprintf_r+0x32>
 8004a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a72:	f000 fd4b 	bl	800550c <__retarget_lock_acquire_recursive>
 8004a76:	89ab      	ldrh	r3, [r5, #12]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	d501      	bpl.n	8004a80 <_vfiprintf_r+0x3c>
 8004a7c:	692b      	ldr	r3, [r5, #16]
 8004a7e:	b9eb      	cbnz	r3, 8004abc <_vfiprintf_r+0x78>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 fb14 	bl	80050b0 <__swsetup_r>
 8004a88:	b1c0      	cbz	r0, 8004abc <_vfiprintf_r+0x78>
 8004a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a8c:	07dc      	lsls	r4, r3, #31
 8004a8e:	d50e      	bpl.n	8004aae <_vfiprintf_r+0x6a>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a94:	b01d      	add	sp, #116	; 0x74
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	4b7b      	ldr	r3, [pc, #492]	; (8004c88 <_vfiprintf_r+0x244>)
 8004a9c:	429d      	cmp	r5, r3
 8004a9e:	d101      	bne.n	8004aa4 <_vfiprintf_r+0x60>
 8004aa0:	68b5      	ldr	r5, [r6, #8]
 8004aa2:	e7df      	b.n	8004a64 <_vfiprintf_r+0x20>
 8004aa4:	4b79      	ldr	r3, [pc, #484]	; (8004c8c <_vfiprintf_r+0x248>)
 8004aa6:	429d      	cmp	r5, r3
 8004aa8:	bf08      	it	eq
 8004aaa:	68f5      	ldreq	r5, [r6, #12]
 8004aac:	e7da      	b.n	8004a64 <_vfiprintf_r+0x20>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	0598      	lsls	r0, r3, #22
 8004ab2:	d4ed      	bmi.n	8004a90 <_vfiprintf_r+0x4c>
 8004ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ab6:	f000 fd2a 	bl	800550e <__retarget_lock_release_recursive>
 8004aba:	e7e9      	b.n	8004a90 <_vfiprintf_r+0x4c>
 8004abc:	2300      	movs	r3, #0
 8004abe:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aca:	2330      	movs	r3, #48	; 0x30
 8004acc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c90 <_vfiprintf_r+0x24c>
 8004ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad4:	f04f 0901 	mov.w	r9, #1
 8004ad8:	4623      	mov	r3, r4
 8004ada:	469a      	mov	sl, r3
 8004adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae0:	b10a      	cbz	r2, 8004ae6 <_vfiprintf_r+0xa2>
 8004ae2:	2a25      	cmp	r2, #37	; 0x25
 8004ae4:	d1f9      	bne.n	8004ada <_vfiprintf_r+0x96>
 8004ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aea:	d00b      	beq.n	8004b04 <_vfiprintf_r+0xc0>
 8004aec:	465b      	mov	r3, fp
 8004aee:	4622      	mov	r2, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	4630      	mov	r0, r6
 8004af4:	f7ff ff93 	bl	8004a1e <__sfputs_r>
 8004af8:	3001      	adds	r0, #1
 8004afa:	f000 80aa 	beq.w	8004c52 <_vfiprintf_r+0x20e>
 8004afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b00:	445a      	add	r2, fp
 8004b02:	9209      	str	r2, [sp, #36]	; 0x24
 8004b04:	f89a 3000 	ldrb.w	r3, [sl]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a2 	beq.w	8004c52 <_vfiprintf_r+0x20e>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b18:	f10a 0a01 	add.w	sl, sl, #1
 8004b1c:	9304      	str	r3, [sp, #16]
 8004b1e:	9307      	str	r3, [sp, #28]
 8004b20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b24:	931a      	str	r3, [sp, #104]	; 0x68
 8004b26:	4654      	mov	r4, sl
 8004b28:	2205      	movs	r2, #5
 8004b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2e:	4858      	ldr	r0, [pc, #352]	; (8004c90 <_vfiprintf_r+0x24c>)
 8004b30:	f7fb fb4e 	bl	80001d0 <memchr>
 8004b34:	9a04      	ldr	r2, [sp, #16]
 8004b36:	b9d8      	cbnz	r0, 8004b70 <_vfiprintf_r+0x12c>
 8004b38:	06d1      	lsls	r1, r2, #27
 8004b3a:	bf44      	itt	mi
 8004b3c:	2320      	movmi	r3, #32
 8004b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b42:	0713      	lsls	r3, r2, #28
 8004b44:	bf44      	itt	mi
 8004b46:	232b      	movmi	r3, #43	; 0x2b
 8004b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d015      	beq.n	8004b80 <_vfiprintf_r+0x13c>
 8004b54:	9a07      	ldr	r2, [sp, #28]
 8004b56:	4654      	mov	r4, sl
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f04f 0c0a 	mov.w	ip, #10
 8004b5e:	4621      	mov	r1, r4
 8004b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b64:	3b30      	subs	r3, #48	; 0x30
 8004b66:	2b09      	cmp	r3, #9
 8004b68:	d94e      	bls.n	8004c08 <_vfiprintf_r+0x1c4>
 8004b6a:	b1b0      	cbz	r0, 8004b9a <_vfiprintf_r+0x156>
 8004b6c:	9207      	str	r2, [sp, #28]
 8004b6e:	e014      	b.n	8004b9a <_vfiprintf_r+0x156>
 8004b70:	eba0 0308 	sub.w	r3, r0, r8
 8004b74:	fa09 f303 	lsl.w	r3, r9, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	9304      	str	r3, [sp, #16]
 8004b7c:	46a2      	mov	sl, r4
 8004b7e:	e7d2      	b.n	8004b26 <_vfiprintf_r+0xe2>
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	1d19      	adds	r1, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	9103      	str	r1, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfbb      	ittet	lt
 8004b8c:	425b      	neglt	r3, r3
 8004b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b92:	9307      	strge	r3, [sp, #28]
 8004b94:	9307      	strlt	r3, [sp, #28]
 8004b96:	bfb8      	it	lt
 8004b98:	9204      	strlt	r2, [sp, #16]
 8004b9a:	7823      	ldrb	r3, [r4, #0]
 8004b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b9e:	d10c      	bne.n	8004bba <_vfiprintf_r+0x176>
 8004ba0:	7863      	ldrb	r3, [r4, #1]
 8004ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba4:	d135      	bne.n	8004c12 <_vfiprintf_r+0x1ce>
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	1d1a      	adds	r2, r3, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	9203      	str	r2, [sp, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bfb8      	it	lt
 8004bb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bb6:	3402      	adds	r4, #2
 8004bb8:	9305      	str	r3, [sp, #20]
 8004bba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ca0 <_vfiprintf_r+0x25c>
 8004bbe:	7821      	ldrb	r1, [r4, #0]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	f7fb fb04 	bl	80001d0 <memchr>
 8004bc8:	b140      	cbz	r0, 8004bdc <_vfiprintf_r+0x198>
 8004bca:	2340      	movs	r3, #64	; 0x40
 8004bcc:	eba0 000a 	sub.w	r0, r0, sl
 8004bd0:	fa03 f000 	lsl.w	r0, r3, r0
 8004bd4:	9b04      	ldr	r3, [sp, #16]
 8004bd6:	4303      	orrs	r3, r0
 8004bd8:	3401      	adds	r4, #1
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be0:	482c      	ldr	r0, [pc, #176]	; (8004c94 <_vfiprintf_r+0x250>)
 8004be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be6:	2206      	movs	r2, #6
 8004be8:	f7fb faf2 	bl	80001d0 <memchr>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d03f      	beq.n	8004c70 <_vfiprintf_r+0x22c>
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <_vfiprintf_r+0x254>)
 8004bf2:	bb1b      	cbnz	r3, 8004c3c <_vfiprintf_r+0x1f8>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	3307      	adds	r3, #7
 8004bf8:	f023 0307 	bic.w	r3, r3, #7
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	443b      	add	r3, r7
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	e767      	b.n	8004ad8 <_vfiprintf_r+0x94>
 8004c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	2001      	movs	r0, #1
 8004c10:	e7a5      	b.n	8004b5e <_vfiprintf_r+0x11a>
 8004c12:	2300      	movs	r3, #0
 8004c14:	3401      	adds	r4, #1
 8004c16:	9305      	str	r3, [sp, #20]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f04f 0c0a 	mov.w	ip, #10
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c24:	3a30      	subs	r2, #48	; 0x30
 8004c26:	2a09      	cmp	r2, #9
 8004c28:	d903      	bls.n	8004c32 <_vfiprintf_r+0x1ee>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0c5      	beq.n	8004bba <_vfiprintf_r+0x176>
 8004c2e:	9105      	str	r1, [sp, #20]
 8004c30:	e7c3      	b.n	8004bba <_vfiprintf_r+0x176>
 8004c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c36:	4604      	mov	r4, r0
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e7f0      	b.n	8004c1e <_vfiprintf_r+0x1da>
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	462a      	mov	r2, r5
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <_vfiprintf_r+0x258>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	4630      	mov	r0, r6
 8004c48:	f3af 8000 	nop.w
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	1c78      	adds	r0, r7, #1
 8004c50:	d1d6      	bne.n	8004c00 <_vfiprintf_r+0x1bc>
 8004c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c54:	07d9      	lsls	r1, r3, #31
 8004c56:	d405      	bmi.n	8004c64 <_vfiprintf_r+0x220>
 8004c58:	89ab      	ldrh	r3, [r5, #12]
 8004c5a:	059a      	lsls	r2, r3, #22
 8004c5c:	d402      	bmi.n	8004c64 <_vfiprintf_r+0x220>
 8004c5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c60:	f000 fc55 	bl	800550e <__retarget_lock_release_recursive>
 8004c64:	89ab      	ldrh	r3, [r5, #12]
 8004c66:	065b      	lsls	r3, r3, #25
 8004c68:	f53f af12 	bmi.w	8004a90 <_vfiprintf_r+0x4c>
 8004c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c6e:	e711      	b.n	8004a94 <_vfiprintf_r+0x50>
 8004c70:	ab03      	add	r3, sp, #12
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	462a      	mov	r2, r5
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <_vfiprintf_r+0x258>)
 8004c78:	a904      	add	r1, sp, #16
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f000 f880 	bl	8004d80 <_printf_i>
 8004c80:	e7e4      	b.n	8004c4c <_vfiprintf_r+0x208>
 8004c82:	bf00      	nop
 8004c84:	08005e48 	.word	0x08005e48
 8004c88:	08005e68 	.word	0x08005e68
 8004c8c:	08005e28 	.word	0x08005e28
 8004c90:	08005df4 	.word	0x08005df4
 8004c94:	08005dfe 	.word	0x08005dfe
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	08004a1f 	.word	0x08004a1f
 8004ca0:	08005dfa 	.word	0x08005dfa

08004ca4 <_printf_common>:
 8004ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca8:	4616      	mov	r6, r2
 8004caa:	4699      	mov	r9, r3
 8004cac:	688a      	ldr	r2, [r1, #8]
 8004cae:	690b      	ldr	r3, [r1, #16]
 8004cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bfb8      	it	lt
 8004cb8:	4613      	movlt	r3, r2
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	b10a      	cbz	r2, 8004cca <_printf_common+0x26>
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	6033      	str	r3, [r6, #0]
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	0699      	lsls	r1, r3, #26
 8004cce:	bf42      	ittt	mi
 8004cd0:	6833      	ldrmi	r3, [r6, #0]
 8004cd2:	3302      	addmi	r3, #2
 8004cd4:	6033      	strmi	r3, [r6, #0]
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	f015 0506 	ands.w	r5, r5, #6
 8004cdc:	d106      	bne.n	8004cec <_printf_common+0x48>
 8004cde:	f104 0a19 	add.w	sl, r4, #25
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	6832      	ldr	r2, [r6, #0]
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dc26      	bgt.n	8004d3a <_printf_common+0x96>
 8004cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cf0:	1e13      	subs	r3, r2, #0
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	bf18      	it	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	0692      	lsls	r2, r2, #26
 8004cfa:	d42b      	bmi.n	8004d54 <_printf_common+0xb0>
 8004cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d00:	4649      	mov	r1, r9
 8004d02:	4638      	mov	r0, r7
 8004d04:	47c0      	blx	r8
 8004d06:	3001      	adds	r0, #1
 8004d08:	d01e      	beq.n	8004d48 <_printf_common+0xa4>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	68e5      	ldr	r5, [r4, #12]
 8004d0e:	6832      	ldr	r2, [r6, #0]
 8004d10:	f003 0306 	and.w	r3, r3, #6
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	bf08      	it	eq
 8004d18:	1aad      	subeq	r5, r5, r2
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	6922      	ldr	r2, [r4, #16]
 8004d1e:	bf0c      	ite	eq
 8004d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d24:	2500      	movne	r5, #0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	bfc4      	itt	gt
 8004d2a:	1a9b      	subgt	r3, r3, r2
 8004d2c:	18ed      	addgt	r5, r5, r3
 8004d2e:	2600      	movs	r6, #0
 8004d30:	341a      	adds	r4, #26
 8004d32:	42b5      	cmp	r5, r6
 8004d34:	d11a      	bne.n	8004d6c <_printf_common+0xc8>
 8004d36:	2000      	movs	r0, #0
 8004d38:	e008      	b.n	8004d4c <_printf_common+0xa8>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4652      	mov	r2, sl
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4638      	mov	r0, r7
 8004d42:	47c0      	blx	r8
 8004d44:	3001      	adds	r0, #1
 8004d46:	d103      	bne.n	8004d50 <_printf_common+0xac>
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d50:	3501      	adds	r5, #1
 8004d52:	e7c6      	b.n	8004ce2 <_printf_common+0x3e>
 8004d54:	18e1      	adds	r1, r4, r3
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	2030      	movs	r0, #48	; 0x30
 8004d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d5e:	4422      	add	r2, r4
 8004d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d68:	3302      	adds	r3, #2
 8004d6a:	e7c7      	b.n	8004cfc <_printf_common+0x58>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4622      	mov	r2, r4
 8004d70:	4649      	mov	r1, r9
 8004d72:	4638      	mov	r0, r7
 8004d74:	47c0      	blx	r8
 8004d76:	3001      	adds	r0, #1
 8004d78:	d0e6      	beq.n	8004d48 <_printf_common+0xa4>
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	e7d9      	b.n	8004d32 <_printf_common+0x8e>
	...

08004d80 <_printf_i>:
 8004d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d84:	460c      	mov	r4, r1
 8004d86:	4691      	mov	r9, r2
 8004d88:	7e27      	ldrb	r7, [r4, #24]
 8004d8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d8c:	2f78      	cmp	r7, #120	; 0x78
 8004d8e:	4680      	mov	r8, r0
 8004d90:	469a      	mov	sl, r3
 8004d92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d96:	d807      	bhi.n	8004da8 <_printf_i+0x28>
 8004d98:	2f62      	cmp	r7, #98	; 0x62
 8004d9a:	d80a      	bhi.n	8004db2 <_printf_i+0x32>
 8004d9c:	2f00      	cmp	r7, #0
 8004d9e:	f000 80d8 	beq.w	8004f52 <_printf_i+0x1d2>
 8004da2:	2f58      	cmp	r7, #88	; 0x58
 8004da4:	f000 80a3 	beq.w	8004eee <_printf_i+0x16e>
 8004da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004db0:	e03a      	b.n	8004e28 <_printf_i+0xa8>
 8004db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004db6:	2b15      	cmp	r3, #21
 8004db8:	d8f6      	bhi.n	8004da8 <_printf_i+0x28>
 8004dba:	a001      	add	r0, pc, #4	; (adr r0, 8004dc0 <_printf_i+0x40>)
 8004dbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004da9 	.word	0x08004da9
 8004dcc:	08004da9 	.word	0x08004da9
 8004dd0:	08004da9 	.word	0x08004da9
 8004dd4:	08004da9 	.word	0x08004da9
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004da9 	.word	0x08004da9
 8004de0:	08004da9 	.word	0x08004da9
 8004de4:	08004da9 	.word	0x08004da9
 8004de8:	08004da9 	.word	0x08004da9
 8004dec:	08004f39 	.word	0x08004f39
 8004df0:	08004e5d 	.word	0x08004e5d
 8004df4:	08004f1b 	.word	0x08004f1b
 8004df8:	08004da9 	.word	0x08004da9
 8004dfc:	08004da9 	.word	0x08004da9
 8004e00:	08004f5b 	.word	0x08004f5b
 8004e04:	08004da9 	.word	0x08004da9
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004da9 	.word	0x08004da9
 8004e10:	08004da9 	.word	0x08004da9
 8004e14:	08004f23 	.word	0x08004f23
 8004e18:	680b      	ldr	r3, [r1, #0]
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	600a      	str	r2, [r1, #0]
 8004e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0a3      	b.n	8004f74 <_printf_i+0x1f4>
 8004e2c:	6825      	ldr	r5, [r4, #0]
 8004e2e:	6808      	ldr	r0, [r1, #0]
 8004e30:	062e      	lsls	r6, r5, #24
 8004e32:	f100 0304 	add.w	r3, r0, #4
 8004e36:	d50a      	bpl.n	8004e4e <_printf_i+0xce>
 8004e38:	6805      	ldr	r5, [r0, #0]
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	da03      	bge.n	8004e48 <_printf_i+0xc8>
 8004e40:	232d      	movs	r3, #45	; 0x2d
 8004e42:	426d      	negs	r5, r5
 8004e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e48:	485e      	ldr	r0, [pc, #376]	; (8004fc4 <_printf_i+0x244>)
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	e019      	b.n	8004e82 <_printf_i+0x102>
 8004e4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e52:	6805      	ldr	r5, [r0, #0]
 8004e54:	600b      	str	r3, [r1, #0]
 8004e56:	bf18      	it	ne
 8004e58:	b22d      	sxthne	r5, r5
 8004e5a:	e7ef      	b.n	8004e3c <_printf_i+0xbc>
 8004e5c:	680b      	ldr	r3, [r1, #0]
 8004e5e:	6825      	ldr	r5, [r4, #0]
 8004e60:	1d18      	adds	r0, r3, #4
 8004e62:	6008      	str	r0, [r1, #0]
 8004e64:	0628      	lsls	r0, r5, #24
 8004e66:	d501      	bpl.n	8004e6c <_printf_i+0xec>
 8004e68:	681d      	ldr	r5, [r3, #0]
 8004e6a:	e002      	b.n	8004e72 <_printf_i+0xf2>
 8004e6c:	0669      	lsls	r1, r5, #25
 8004e6e:	d5fb      	bpl.n	8004e68 <_printf_i+0xe8>
 8004e70:	881d      	ldrh	r5, [r3, #0]
 8004e72:	4854      	ldr	r0, [pc, #336]	; (8004fc4 <_printf_i+0x244>)
 8004e74:	2f6f      	cmp	r7, #111	; 0x6f
 8004e76:	bf0c      	ite	eq
 8004e78:	2308      	moveq	r3, #8
 8004e7a:	230a      	movne	r3, #10
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e82:	6866      	ldr	r6, [r4, #4]
 8004e84:	60a6      	str	r6, [r4, #8]
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	bfa2      	ittt	ge
 8004e8a:	6821      	ldrge	r1, [r4, #0]
 8004e8c:	f021 0104 	bicge.w	r1, r1, #4
 8004e90:	6021      	strge	r1, [r4, #0]
 8004e92:	b90d      	cbnz	r5, 8004e98 <_printf_i+0x118>
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	d04d      	beq.n	8004f34 <_printf_i+0x1b4>
 8004e98:	4616      	mov	r6, r2
 8004e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8004ea2:	5dc7      	ldrb	r7, [r0, r7]
 8004ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ea8:	462f      	mov	r7, r5
 8004eaa:	42bb      	cmp	r3, r7
 8004eac:	460d      	mov	r5, r1
 8004eae:	d9f4      	bls.n	8004e9a <_printf_i+0x11a>
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d10b      	bne.n	8004ecc <_printf_i+0x14c>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	07df      	lsls	r7, r3, #31
 8004eb8:	d508      	bpl.n	8004ecc <_printf_i+0x14c>
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	6861      	ldr	r1, [r4, #4]
 8004ebe:	4299      	cmp	r1, r3
 8004ec0:	bfde      	ittt	le
 8004ec2:	2330      	movle	r3, #48	; 0x30
 8004ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ec8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004ecc:	1b92      	subs	r2, r2, r6
 8004ece:	6122      	str	r2, [r4, #16]
 8004ed0:	f8cd a000 	str.w	sl, [sp]
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	aa03      	add	r2, sp, #12
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4640      	mov	r0, r8
 8004edc:	f7ff fee2 	bl	8004ca4 <_printf_common>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d14c      	bne.n	8004f7e <_printf_i+0x1fe>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee8:	b004      	add	sp, #16
 8004eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eee:	4835      	ldr	r0, [pc, #212]	; (8004fc4 <_printf_i+0x244>)
 8004ef0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	680e      	ldr	r6, [r1, #0]
 8004ef8:	061f      	lsls	r7, r3, #24
 8004efa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004efe:	600e      	str	r6, [r1, #0]
 8004f00:	d514      	bpl.n	8004f2c <_printf_i+0x1ac>
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	bf44      	itt	mi
 8004f06:	f043 0320 	orrmi.w	r3, r3, #32
 8004f0a:	6023      	strmi	r3, [r4, #0]
 8004f0c:	b91d      	cbnz	r5, 8004f16 <_printf_i+0x196>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f023 0320 	bic.w	r3, r3, #32
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	2310      	movs	r3, #16
 8004f18:	e7b0      	b.n	8004e7c <_printf_i+0xfc>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	2378      	movs	r3, #120	; 0x78
 8004f24:	4828      	ldr	r0, [pc, #160]	; (8004fc8 <_printf_i+0x248>)
 8004f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f2a:	e7e3      	b.n	8004ef4 <_printf_i+0x174>
 8004f2c:	065e      	lsls	r6, r3, #25
 8004f2e:	bf48      	it	mi
 8004f30:	b2ad      	uxthmi	r5, r5
 8004f32:	e7e6      	b.n	8004f02 <_printf_i+0x182>
 8004f34:	4616      	mov	r6, r2
 8004f36:	e7bb      	b.n	8004eb0 <_printf_i+0x130>
 8004f38:	680b      	ldr	r3, [r1, #0]
 8004f3a:	6826      	ldr	r6, [r4, #0]
 8004f3c:	6960      	ldr	r0, [r4, #20]
 8004f3e:	1d1d      	adds	r5, r3, #4
 8004f40:	600d      	str	r5, [r1, #0]
 8004f42:	0635      	lsls	r5, r6, #24
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	d501      	bpl.n	8004f4c <_printf_i+0x1cc>
 8004f48:	6018      	str	r0, [r3, #0]
 8004f4a:	e002      	b.n	8004f52 <_printf_i+0x1d2>
 8004f4c:	0671      	lsls	r1, r6, #25
 8004f4e:	d5fb      	bpl.n	8004f48 <_printf_i+0x1c8>
 8004f50:	8018      	strh	r0, [r3, #0]
 8004f52:	2300      	movs	r3, #0
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	4616      	mov	r6, r2
 8004f58:	e7ba      	b.n	8004ed0 <_printf_i+0x150>
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	1d1a      	adds	r2, r3, #4
 8004f5e:	600a      	str	r2, [r1, #0]
 8004f60:	681e      	ldr	r6, [r3, #0]
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4630      	mov	r0, r6
 8004f68:	f7fb f932 	bl	80001d0 <memchr>
 8004f6c:	b108      	cbz	r0, 8004f72 <_printf_i+0x1f2>
 8004f6e:	1b80      	subs	r0, r0, r6
 8004f70:	6060      	str	r0, [r4, #4]
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	6123      	str	r3, [r4, #16]
 8004f76:	2300      	movs	r3, #0
 8004f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7c:	e7a8      	b.n	8004ed0 <_printf_i+0x150>
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	4632      	mov	r2, r6
 8004f82:	4649      	mov	r1, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	47d0      	blx	sl
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d0ab      	beq.n	8004ee4 <_printf_i+0x164>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	079b      	lsls	r3, r3, #30
 8004f90:	d413      	bmi.n	8004fba <_printf_i+0x23a>
 8004f92:	68e0      	ldr	r0, [r4, #12]
 8004f94:	9b03      	ldr	r3, [sp, #12]
 8004f96:	4298      	cmp	r0, r3
 8004f98:	bfb8      	it	lt
 8004f9a:	4618      	movlt	r0, r3
 8004f9c:	e7a4      	b.n	8004ee8 <_printf_i+0x168>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	47d0      	blx	sl
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d09b      	beq.n	8004ee4 <_printf_i+0x164>
 8004fac:	3501      	adds	r5, #1
 8004fae:	68e3      	ldr	r3, [r4, #12]
 8004fb0:	9903      	ldr	r1, [sp, #12]
 8004fb2:	1a5b      	subs	r3, r3, r1
 8004fb4:	42ab      	cmp	r3, r5
 8004fb6:	dcf2      	bgt.n	8004f9e <_printf_i+0x21e>
 8004fb8:	e7eb      	b.n	8004f92 <_printf_i+0x212>
 8004fba:	2500      	movs	r5, #0
 8004fbc:	f104 0619 	add.w	r6, r4, #25
 8004fc0:	e7f5      	b.n	8004fae <_printf_i+0x22e>
 8004fc2:	bf00      	nop
 8004fc4:	08005e05 	.word	0x08005e05
 8004fc8:	08005e16 	.word	0x08005e16

08004fcc <siprintf>:
 8004fcc:	b40e      	push	{r1, r2, r3}
 8004fce:	b500      	push	{lr}
 8004fd0:	b09c      	sub	sp, #112	; 0x70
 8004fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	9006      	str	r0, [sp, #24]
 8004fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fdc:	4809      	ldr	r0, [pc, #36]	; (8005004 <siprintf+0x38>)
 8004fde:	9107      	str	r1, [sp, #28]
 8004fe0:	9104      	str	r1, [sp, #16]
 8004fe2:	4909      	ldr	r1, [pc, #36]	; (8005008 <siprintf+0x3c>)
 8004fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe8:	9105      	str	r1, [sp, #20]
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	a902      	add	r1, sp, #8
 8004ff0:	f000 fc46 	bl	8005880 <_svfiprintf_r>
 8004ff4:	9b02      	ldr	r3, [sp, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	b01c      	add	sp, #112	; 0x70
 8004ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005000:	b003      	add	sp, #12
 8005002:	4770      	bx	lr
 8005004:	2000000c 	.word	0x2000000c
 8005008:	ffff0208 	.word	0xffff0208

0800500c <__swbuf_r>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	460e      	mov	r6, r1
 8005010:	4614      	mov	r4, r2
 8005012:	4605      	mov	r5, r0
 8005014:	b118      	cbz	r0, 800501e <__swbuf_r+0x12>
 8005016:	6983      	ldr	r3, [r0, #24]
 8005018:	b90b      	cbnz	r3, 800501e <__swbuf_r+0x12>
 800501a:	f000 f9d9 	bl	80053d0 <__sinit>
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <__swbuf_r+0x98>)
 8005020:	429c      	cmp	r4, r3
 8005022:	d12b      	bne.n	800507c <__swbuf_r+0x70>
 8005024:	686c      	ldr	r4, [r5, #4]
 8005026:	69a3      	ldr	r3, [r4, #24]
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	071a      	lsls	r2, r3, #28
 800502e:	d52f      	bpl.n	8005090 <__swbuf_r+0x84>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	b36b      	cbz	r3, 8005090 <__swbuf_r+0x84>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6820      	ldr	r0, [r4, #0]
 8005038:	1ac0      	subs	r0, r0, r3
 800503a:	6963      	ldr	r3, [r4, #20]
 800503c:	b2f6      	uxtb	r6, r6
 800503e:	4283      	cmp	r3, r0
 8005040:	4637      	mov	r7, r6
 8005042:	dc04      	bgt.n	800504e <__swbuf_r+0x42>
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f92e 	bl	80052a8 <_fflush_r>
 800504c:	bb30      	cbnz	r0, 800509c <__swbuf_r+0x90>
 800504e:	68a3      	ldr	r3, [r4, #8]
 8005050:	3b01      	subs	r3, #1
 8005052:	60a3      	str	r3, [r4, #8]
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	701e      	strb	r6, [r3, #0]
 800505c:	6963      	ldr	r3, [r4, #20]
 800505e:	3001      	adds	r0, #1
 8005060:	4283      	cmp	r3, r0
 8005062:	d004      	beq.n	800506e <__swbuf_r+0x62>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	07db      	lsls	r3, r3, #31
 8005068:	d506      	bpl.n	8005078 <__swbuf_r+0x6c>
 800506a:	2e0a      	cmp	r6, #10
 800506c:	d104      	bne.n	8005078 <__swbuf_r+0x6c>
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f919 	bl	80052a8 <_fflush_r>
 8005076:	b988      	cbnz	r0, 800509c <__swbuf_r+0x90>
 8005078:	4638      	mov	r0, r7
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <__swbuf_r+0x9c>)
 800507e:	429c      	cmp	r4, r3
 8005080:	d101      	bne.n	8005086 <__swbuf_r+0x7a>
 8005082:	68ac      	ldr	r4, [r5, #8]
 8005084:	e7cf      	b.n	8005026 <__swbuf_r+0x1a>
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <__swbuf_r+0xa0>)
 8005088:	429c      	cmp	r4, r3
 800508a:	bf08      	it	eq
 800508c:	68ec      	ldreq	r4, [r5, #12]
 800508e:	e7ca      	b.n	8005026 <__swbuf_r+0x1a>
 8005090:	4621      	mov	r1, r4
 8005092:	4628      	mov	r0, r5
 8005094:	f000 f80c 	bl	80050b0 <__swsetup_r>
 8005098:	2800      	cmp	r0, #0
 800509a:	d0cb      	beq.n	8005034 <__swbuf_r+0x28>
 800509c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80050a0:	e7ea      	b.n	8005078 <__swbuf_r+0x6c>
 80050a2:	bf00      	nop
 80050a4:	08005e48 	.word	0x08005e48
 80050a8:	08005e68 	.word	0x08005e68
 80050ac:	08005e28 	.word	0x08005e28

080050b0 <__swsetup_r>:
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <__swsetup_r+0xcc>)
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	4606      	mov	r6, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	b125      	cbz	r5, 80050c6 <__swsetup_r+0x16>
 80050bc:	69ab      	ldr	r3, [r5, #24]
 80050be:	b913      	cbnz	r3, 80050c6 <__swsetup_r+0x16>
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 f985 	bl	80053d0 <__sinit>
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <__swsetup_r+0xd0>)
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d10f      	bne.n	80050ec <__swsetup_r+0x3c>
 80050cc:	686c      	ldr	r4, [r5, #4]
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d4:	0719      	lsls	r1, r3, #28
 80050d6:	d42c      	bmi.n	8005132 <__swsetup_r+0x82>
 80050d8:	06dd      	lsls	r5, r3, #27
 80050da:	d411      	bmi.n	8005100 <__swsetup_r+0x50>
 80050dc:	2309      	movs	r3, #9
 80050de:	6033      	str	r3, [r6, #0]
 80050e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ea:	e03e      	b.n	800516a <__swsetup_r+0xba>
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <__swsetup_r+0xd4>)
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d101      	bne.n	80050f6 <__swsetup_r+0x46>
 80050f2:	68ac      	ldr	r4, [r5, #8]
 80050f4:	e7eb      	b.n	80050ce <__swsetup_r+0x1e>
 80050f6:	4b24      	ldr	r3, [pc, #144]	; (8005188 <__swsetup_r+0xd8>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	bf08      	it	eq
 80050fc:	68ec      	ldreq	r4, [r5, #12]
 80050fe:	e7e6      	b.n	80050ce <__swsetup_r+0x1e>
 8005100:	0758      	lsls	r0, r3, #29
 8005102:	d512      	bpl.n	800512a <__swsetup_r+0x7a>
 8005104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005106:	b141      	cbz	r1, 800511a <__swsetup_r+0x6a>
 8005108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__swsetup_r+0x66>
 8005110:	4630      	mov	r0, r6
 8005112:	f000 fa89 	bl	8005628 <_free_r>
 8005116:	2300      	movs	r3, #0
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	b94b      	cbnz	r3, 800514a <__swsetup_r+0x9a>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d003      	beq.n	800514a <__swsetup_r+0x9a>
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f000 fa07 	bl	8005558 <__smakebuf_r>
 800514a:	89a0      	ldrh	r0, [r4, #12]
 800514c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005150:	f010 0301 	ands.w	r3, r0, #1
 8005154:	d00a      	beq.n	800516c <__swsetup_r+0xbc>
 8005156:	2300      	movs	r3, #0
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6963      	ldr	r3, [r4, #20]
 800515c:	425b      	negs	r3, r3
 800515e:	61a3      	str	r3, [r4, #24]
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	b943      	cbnz	r3, 8005176 <__swsetup_r+0xc6>
 8005164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005168:	d1ba      	bne.n	80050e0 <__swsetup_r+0x30>
 800516a:	bd70      	pop	{r4, r5, r6, pc}
 800516c:	0781      	lsls	r1, r0, #30
 800516e:	bf58      	it	pl
 8005170:	6963      	ldrpl	r3, [r4, #20]
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	e7f4      	b.n	8005160 <__swsetup_r+0xb0>
 8005176:	2000      	movs	r0, #0
 8005178:	e7f7      	b.n	800516a <__swsetup_r+0xba>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	08005e48 	.word	0x08005e48
 8005184:	08005e68 	.word	0x08005e68
 8005188:	08005e28 	.word	0x08005e28

0800518c <abort>:
 800518c:	b508      	push	{r3, lr}
 800518e:	2006      	movs	r0, #6
 8005190:	f000 fcae 	bl	8005af0 <raise>
 8005194:	2001      	movs	r0, #1
 8005196:	f7fb fee3 	bl	8000f60 <_exit>
	...

0800519c <__sflush_r>:
 800519c:	898a      	ldrh	r2, [r1, #12]
 800519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	0710      	lsls	r0, r2, #28
 80051a6:	460c      	mov	r4, r1
 80051a8:	d458      	bmi.n	800525c <__sflush_r+0xc0>
 80051aa:	684b      	ldr	r3, [r1, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dc05      	bgt.n	80051bc <__sflush_r+0x20>
 80051b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc02      	bgt.n	80051bc <__sflush_r+0x20>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d0f9      	beq.n	80051b6 <__sflush_r+0x1a>
 80051c2:	2300      	movs	r3, #0
 80051c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051c8:	682f      	ldr	r7, [r5, #0]
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	d032      	beq.n	8005234 <__sflush_r+0x98>
 80051ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	075a      	lsls	r2, r3, #29
 80051d4:	d505      	bpl.n	80051e2 <__sflush_r+0x46>
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	1ac0      	subs	r0, r0, r3
 80051da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051dc:	b10b      	cbz	r3, 80051e2 <__sflush_r+0x46>
 80051de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e0:	1ac0      	subs	r0, r0, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	4602      	mov	r2, r0
 80051e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051e8:	6a21      	ldr	r1, [r4, #32]
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b0      	blx	r6
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	d106      	bne.n	8005202 <__sflush_r+0x66>
 80051f4:	6829      	ldr	r1, [r5, #0]
 80051f6:	291d      	cmp	r1, #29
 80051f8:	d82c      	bhi.n	8005254 <__sflush_r+0xb8>
 80051fa:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <__sflush_r+0x108>)
 80051fc:	40ca      	lsrs	r2, r1
 80051fe:	07d6      	lsls	r6, r2, #31
 8005200:	d528      	bpl.n	8005254 <__sflush_r+0xb8>
 8005202:	2200      	movs	r2, #0
 8005204:	6062      	str	r2, [r4, #4]
 8005206:	04d9      	lsls	r1, r3, #19
 8005208:	6922      	ldr	r2, [r4, #16]
 800520a:	6022      	str	r2, [r4, #0]
 800520c:	d504      	bpl.n	8005218 <__sflush_r+0x7c>
 800520e:	1c42      	adds	r2, r0, #1
 8005210:	d101      	bne.n	8005216 <__sflush_r+0x7a>
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	b903      	cbnz	r3, 8005218 <__sflush_r+0x7c>
 8005216:	6560      	str	r0, [r4, #84]	; 0x54
 8005218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521a:	602f      	str	r7, [r5, #0]
 800521c:	2900      	cmp	r1, #0
 800521e:	d0ca      	beq.n	80051b6 <__sflush_r+0x1a>
 8005220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005224:	4299      	cmp	r1, r3
 8005226:	d002      	beq.n	800522e <__sflush_r+0x92>
 8005228:	4628      	mov	r0, r5
 800522a:	f000 f9fd 	bl	8005628 <_free_r>
 800522e:	2000      	movs	r0, #0
 8005230:	6360      	str	r0, [r4, #52]	; 0x34
 8005232:	e7c1      	b.n	80051b8 <__sflush_r+0x1c>
 8005234:	6a21      	ldr	r1, [r4, #32]
 8005236:	2301      	movs	r3, #1
 8005238:	4628      	mov	r0, r5
 800523a:	47b0      	blx	r6
 800523c:	1c41      	adds	r1, r0, #1
 800523e:	d1c7      	bne.n	80051d0 <__sflush_r+0x34>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0c4      	beq.n	80051d0 <__sflush_r+0x34>
 8005246:	2b1d      	cmp	r3, #29
 8005248:	d001      	beq.n	800524e <__sflush_r+0xb2>
 800524a:	2b16      	cmp	r3, #22
 800524c:	d101      	bne.n	8005252 <__sflush_r+0xb6>
 800524e:	602f      	str	r7, [r5, #0]
 8005250:	e7b1      	b.n	80051b6 <__sflush_r+0x1a>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7ad      	b.n	80051b8 <__sflush_r+0x1c>
 800525c:	690f      	ldr	r7, [r1, #16]
 800525e:	2f00      	cmp	r7, #0
 8005260:	d0a9      	beq.n	80051b6 <__sflush_r+0x1a>
 8005262:	0793      	lsls	r3, r2, #30
 8005264:	680e      	ldr	r6, [r1, #0]
 8005266:	bf08      	it	eq
 8005268:	694b      	ldreq	r3, [r1, #20]
 800526a:	600f      	str	r7, [r1, #0]
 800526c:	bf18      	it	ne
 800526e:	2300      	movne	r3, #0
 8005270:	eba6 0807 	sub.w	r8, r6, r7
 8005274:	608b      	str	r3, [r1, #8]
 8005276:	f1b8 0f00 	cmp.w	r8, #0
 800527a:	dd9c      	ble.n	80051b6 <__sflush_r+0x1a>
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005280:	4643      	mov	r3, r8
 8005282:	463a      	mov	r2, r7
 8005284:	4628      	mov	r0, r5
 8005286:	47b0      	blx	r6
 8005288:	2800      	cmp	r0, #0
 800528a:	dc06      	bgt.n	800529a <__sflush_r+0xfe>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	e78e      	b.n	80051b8 <__sflush_r+0x1c>
 800529a:	4407      	add	r7, r0
 800529c:	eba8 0800 	sub.w	r8, r8, r0
 80052a0:	e7e9      	b.n	8005276 <__sflush_r+0xda>
 80052a2:	bf00      	nop
 80052a4:	20400001 	.word	0x20400001

080052a8 <_fflush_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	4605      	mov	r5, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b913      	cbnz	r3, 80052b8 <_fflush_r+0x10>
 80052b2:	2500      	movs	r5, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	b118      	cbz	r0, 80052c2 <_fflush_r+0x1a>
 80052ba:	6983      	ldr	r3, [r0, #24]
 80052bc:	b90b      	cbnz	r3, 80052c2 <_fflush_r+0x1a>
 80052be:	f000 f887 	bl	80053d0 <__sinit>
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <_fflush_r+0x6c>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	d11b      	bne.n	8005300 <_fflush_r+0x58>
 80052c8:	686c      	ldr	r4, [r5, #4]
 80052ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <_fflush_r+0xa>
 80052d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	d404      	bmi.n	80052e2 <_fflush_r+0x3a>
 80052d8:	0599      	lsls	r1, r3, #22
 80052da:	d402      	bmi.n	80052e2 <_fflush_r+0x3a>
 80052dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052de:	f000 f915 	bl	800550c <__retarget_lock_acquire_recursive>
 80052e2:	4628      	mov	r0, r5
 80052e4:	4621      	mov	r1, r4
 80052e6:	f7ff ff59 	bl	800519c <__sflush_r>
 80052ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ec:	07da      	lsls	r2, r3, #31
 80052ee:	4605      	mov	r5, r0
 80052f0:	d4e0      	bmi.n	80052b4 <_fflush_r+0xc>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	059b      	lsls	r3, r3, #22
 80052f6:	d4dd      	bmi.n	80052b4 <_fflush_r+0xc>
 80052f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fa:	f000 f908 	bl	800550e <__retarget_lock_release_recursive>
 80052fe:	e7d9      	b.n	80052b4 <_fflush_r+0xc>
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_fflush_r+0x70>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d101      	bne.n	800530a <_fflush_r+0x62>
 8005306:	68ac      	ldr	r4, [r5, #8]
 8005308:	e7df      	b.n	80052ca <_fflush_r+0x22>
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <_fflush_r+0x74>)
 800530c:	429c      	cmp	r4, r3
 800530e:	bf08      	it	eq
 8005310:	68ec      	ldreq	r4, [r5, #12]
 8005312:	e7da      	b.n	80052ca <_fflush_r+0x22>
 8005314:	08005e48 	.word	0x08005e48
 8005318:	08005e68 	.word	0x08005e68
 800531c:	08005e28 	.word	0x08005e28

08005320 <std>:
 8005320:	2300      	movs	r3, #0
 8005322:	b510      	push	{r4, lr}
 8005324:	4604      	mov	r4, r0
 8005326:	e9c0 3300 	strd	r3, r3, [r0]
 800532a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800532e:	6083      	str	r3, [r0, #8]
 8005330:	8181      	strh	r1, [r0, #12]
 8005332:	6643      	str	r3, [r0, #100]	; 0x64
 8005334:	81c2      	strh	r2, [r0, #14]
 8005336:	6183      	str	r3, [r0, #24]
 8005338:	4619      	mov	r1, r3
 800533a:	2208      	movs	r2, #8
 800533c:	305c      	adds	r0, #92	; 0x5c
 800533e:	f7ff fb4f 	bl	80049e0 <memset>
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <std+0x38>)
 8005344:	6263      	str	r3, [r4, #36]	; 0x24
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <std+0x3c>)
 8005348:	62a3      	str	r3, [r4, #40]	; 0x28
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <std+0x40>)
 800534c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <std+0x44>)
 8005350:	6224      	str	r4, [r4, #32]
 8005352:	6323      	str	r3, [r4, #48]	; 0x30
 8005354:	bd10      	pop	{r4, pc}
 8005356:	bf00      	nop
 8005358:	08005b29 	.word	0x08005b29
 800535c:	08005b4b 	.word	0x08005b4b
 8005360:	08005b83 	.word	0x08005b83
 8005364:	08005ba7 	.word	0x08005ba7

08005368 <_cleanup_r>:
 8005368:	4901      	ldr	r1, [pc, #4]	; (8005370 <_cleanup_r+0x8>)
 800536a:	f000 b8af 	b.w	80054cc <_fwalk_reent>
 800536e:	bf00      	nop
 8005370:	080052a9 	.word	0x080052a9

08005374 <__sfmoreglue>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	1e4a      	subs	r2, r1, #1
 8005378:	2568      	movs	r5, #104	; 0x68
 800537a:	4355      	muls	r5, r2
 800537c:	460e      	mov	r6, r1
 800537e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005382:	f000 f9a1 	bl	80056c8 <_malloc_r>
 8005386:	4604      	mov	r4, r0
 8005388:	b140      	cbz	r0, 800539c <__sfmoreglue+0x28>
 800538a:	2100      	movs	r1, #0
 800538c:	e9c0 1600 	strd	r1, r6, [r0]
 8005390:	300c      	adds	r0, #12
 8005392:	60a0      	str	r0, [r4, #8]
 8005394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005398:	f7ff fb22 	bl	80049e0 <memset>
 800539c:	4620      	mov	r0, r4
 800539e:	bd70      	pop	{r4, r5, r6, pc}

080053a0 <__sfp_lock_acquire>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__sfp_lock_acquire+0x8>)
 80053a2:	f000 b8b3 	b.w	800550c <__retarget_lock_acquire_recursive>
 80053a6:	bf00      	nop
 80053a8:	20000174 	.word	0x20000174

080053ac <__sfp_lock_release>:
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <__sfp_lock_release+0x8>)
 80053ae:	f000 b8ae 	b.w	800550e <__retarget_lock_release_recursive>
 80053b2:	bf00      	nop
 80053b4:	20000174 	.word	0x20000174

080053b8 <__sinit_lock_acquire>:
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__sinit_lock_acquire+0x8>)
 80053ba:	f000 b8a7 	b.w	800550c <__retarget_lock_acquire_recursive>
 80053be:	bf00      	nop
 80053c0:	2000016f 	.word	0x2000016f

080053c4 <__sinit_lock_release>:
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <__sinit_lock_release+0x8>)
 80053c6:	f000 b8a2 	b.w	800550e <__retarget_lock_release_recursive>
 80053ca:	bf00      	nop
 80053cc:	2000016f 	.word	0x2000016f

080053d0 <__sinit>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	4604      	mov	r4, r0
 80053d4:	f7ff fff0 	bl	80053b8 <__sinit_lock_acquire>
 80053d8:	69a3      	ldr	r3, [r4, #24]
 80053da:	b11b      	cbz	r3, 80053e4 <__sinit+0x14>
 80053dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e0:	f7ff bff0 	b.w	80053c4 <__sinit_lock_release>
 80053e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053e8:	6523      	str	r3, [r4, #80]	; 0x50
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <__sinit+0x68>)
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <__sinit+0x6c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	bf04      	itt	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	61a3      	streq	r3, [r4, #24]
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f820 	bl	8005440 <__sfp>
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	4620      	mov	r0, r4
 8005404:	f000 f81c 	bl	8005440 <__sfp>
 8005408:	60a0      	str	r0, [r4, #8]
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f818 	bl	8005440 <__sfp>
 8005410:	2200      	movs	r2, #0
 8005412:	60e0      	str	r0, [r4, #12]
 8005414:	2104      	movs	r1, #4
 8005416:	6860      	ldr	r0, [r4, #4]
 8005418:	f7ff ff82 	bl	8005320 <std>
 800541c:	68a0      	ldr	r0, [r4, #8]
 800541e:	2201      	movs	r2, #1
 8005420:	2109      	movs	r1, #9
 8005422:	f7ff ff7d 	bl	8005320 <std>
 8005426:	68e0      	ldr	r0, [r4, #12]
 8005428:	2202      	movs	r2, #2
 800542a:	2112      	movs	r1, #18
 800542c:	f7ff ff78 	bl	8005320 <std>
 8005430:	2301      	movs	r3, #1
 8005432:	61a3      	str	r3, [r4, #24]
 8005434:	e7d2      	b.n	80053dc <__sinit+0xc>
 8005436:	bf00      	nop
 8005438:	08005df0 	.word	0x08005df0
 800543c:	08005369 	.word	0x08005369

08005440 <__sfp>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	4607      	mov	r7, r0
 8005444:	f7ff ffac 	bl	80053a0 <__sfp_lock_acquire>
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <__sfp+0x84>)
 800544a:	681e      	ldr	r6, [r3, #0]
 800544c:	69b3      	ldr	r3, [r6, #24]
 800544e:	b913      	cbnz	r3, 8005456 <__sfp+0x16>
 8005450:	4630      	mov	r0, r6
 8005452:	f7ff ffbd 	bl	80053d0 <__sinit>
 8005456:	3648      	adds	r6, #72	; 0x48
 8005458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800545c:	3b01      	subs	r3, #1
 800545e:	d503      	bpl.n	8005468 <__sfp+0x28>
 8005460:	6833      	ldr	r3, [r6, #0]
 8005462:	b30b      	cbz	r3, 80054a8 <__sfp+0x68>
 8005464:	6836      	ldr	r6, [r6, #0]
 8005466:	e7f7      	b.n	8005458 <__sfp+0x18>
 8005468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800546c:	b9d5      	cbnz	r5, 80054a4 <__sfp+0x64>
 800546e:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <__sfp+0x88>)
 8005470:	60e3      	str	r3, [r4, #12]
 8005472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005476:	6665      	str	r5, [r4, #100]	; 0x64
 8005478:	f000 f847 	bl	800550a <__retarget_lock_init_recursive>
 800547c:	f7ff ff96 	bl	80053ac <__sfp_lock_release>
 8005480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005488:	6025      	str	r5, [r4, #0]
 800548a:	61a5      	str	r5, [r4, #24]
 800548c:	2208      	movs	r2, #8
 800548e:	4629      	mov	r1, r5
 8005490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005494:	f7ff faa4 	bl	80049e0 <memset>
 8005498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800549c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054a0:	4620      	mov	r0, r4
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	3468      	adds	r4, #104	; 0x68
 80054a6:	e7d9      	b.n	800545c <__sfp+0x1c>
 80054a8:	2104      	movs	r1, #4
 80054aa:	4638      	mov	r0, r7
 80054ac:	f7ff ff62 	bl	8005374 <__sfmoreglue>
 80054b0:	4604      	mov	r4, r0
 80054b2:	6030      	str	r0, [r6, #0]
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1d5      	bne.n	8005464 <__sfp+0x24>
 80054b8:	f7ff ff78 	bl	80053ac <__sfp_lock_release>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	e7ee      	b.n	80054a0 <__sfp+0x60>
 80054c2:	bf00      	nop
 80054c4:	08005df0 	.word	0x08005df0
 80054c8:	ffff0001 	.word	0xffff0001

080054cc <_fwalk_reent>:
 80054cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	4688      	mov	r8, r1
 80054d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054d8:	2700      	movs	r7, #0
 80054da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054de:	f1b9 0901 	subs.w	r9, r9, #1
 80054e2:	d505      	bpl.n	80054f0 <_fwalk_reent+0x24>
 80054e4:	6824      	ldr	r4, [r4, #0]
 80054e6:	2c00      	cmp	r4, #0
 80054e8:	d1f7      	bne.n	80054da <_fwalk_reent+0xe>
 80054ea:	4638      	mov	r0, r7
 80054ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f0:	89ab      	ldrh	r3, [r5, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d907      	bls.n	8005506 <_fwalk_reent+0x3a>
 80054f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054fa:	3301      	adds	r3, #1
 80054fc:	d003      	beq.n	8005506 <_fwalk_reent+0x3a>
 80054fe:	4629      	mov	r1, r5
 8005500:	4630      	mov	r0, r6
 8005502:	47c0      	blx	r8
 8005504:	4307      	orrs	r7, r0
 8005506:	3568      	adds	r5, #104	; 0x68
 8005508:	e7e9      	b.n	80054de <_fwalk_reent+0x12>

0800550a <__retarget_lock_init_recursive>:
 800550a:	4770      	bx	lr

0800550c <__retarget_lock_acquire_recursive>:
 800550c:	4770      	bx	lr

0800550e <__retarget_lock_release_recursive>:
 800550e:	4770      	bx	lr

08005510 <__swhatbuf_r>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	460e      	mov	r6, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	2900      	cmp	r1, #0
 800551a:	b096      	sub	sp, #88	; 0x58
 800551c:	4614      	mov	r4, r2
 800551e:	461d      	mov	r5, r3
 8005520:	da07      	bge.n	8005532 <__swhatbuf_r+0x22>
 8005522:	2300      	movs	r3, #0
 8005524:	602b      	str	r3, [r5, #0]
 8005526:	89b3      	ldrh	r3, [r6, #12]
 8005528:	061a      	lsls	r2, r3, #24
 800552a:	d410      	bmi.n	800554e <__swhatbuf_r+0x3e>
 800552c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005530:	e00e      	b.n	8005550 <__swhatbuf_r+0x40>
 8005532:	466a      	mov	r2, sp
 8005534:	f000 fb5e 	bl	8005bf4 <_fstat_r>
 8005538:	2800      	cmp	r0, #0
 800553a:	dbf2      	blt.n	8005522 <__swhatbuf_r+0x12>
 800553c:	9a01      	ldr	r2, [sp, #4]
 800553e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005546:	425a      	negs	r2, r3
 8005548:	415a      	adcs	r2, r3
 800554a:	602a      	str	r2, [r5, #0]
 800554c:	e7ee      	b.n	800552c <__swhatbuf_r+0x1c>
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	2000      	movs	r0, #0
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	b016      	add	sp, #88	; 0x58
 8005556:	bd70      	pop	{r4, r5, r6, pc}

08005558 <__smakebuf_r>:
 8005558:	898b      	ldrh	r3, [r1, #12]
 800555a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800555c:	079d      	lsls	r5, r3, #30
 800555e:	4606      	mov	r6, r0
 8005560:	460c      	mov	r4, r1
 8005562:	d507      	bpl.n	8005574 <__smakebuf_r+0x1c>
 8005564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2301      	movs	r3, #1
 800556e:	6163      	str	r3, [r4, #20]
 8005570:	b002      	add	sp, #8
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	ab01      	add	r3, sp, #4
 8005576:	466a      	mov	r2, sp
 8005578:	f7ff ffca 	bl	8005510 <__swhatbuf_r>
 800557c:	9900      	ldr	r1, [sp, #0]
 800557e:	4605      	mov	r5, r0
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f8a1 	bl	80056c8 <_malloc_r>
 8005586:	b948      	cbnz	r0, 800559c <__smakebuf_r+0x44>
 8005588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558c:	059a      	lsls	r2, r3, #22
 800558e:	d4ef      	bmi.n	8005570 <__smakebuf_r+0x18>
 8005590:	f023 0303 	bic.w	r3, r3, #3
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	e7e3      	b.n	8005564 <__smakebuf_r+0xc>
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <__smakebuf_r+0x7c>)
 800559e:	62b3      	str	r3, [r6, #40]	; 0x28
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	6020      	str	r0, [r4, #0]
 80055a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	6163      	str	r3, [r4, #20]
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	6120      	str	r0, [r4, #16]
 80055b2:	b15b      	cbz	r3, 80055cc <__smakebuf_r+0x74>
 80055b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 fb2d 	bl	8005c18 <_isatty_r>
 80055be:	b128      	cbz	r0, 80055cc <__smakebuf_r+0x74>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	89a0      	ldrh	r0, [r4, #12]
 80055ce:	4305      	orrs	r5, r0
 80055d0:	81a5      	strh	r5, [r4, #12]
 80055d2:	e7cd      	b.n	8005570 <__smakebuf_r+0x18>
 80055d4:	08005369 	.word	0x08005369

080055d8 <memcpy>:
 80055d8:	440a      	add	r2, r1
 80055da:	4291      	cmp	r1, r2
 80055dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055e0:	d100      	bne.n	80055e4 <memcpy+0xc>
 80055e2:	4770      	bx	lr
 80055e4:	b510      	push	{r4, lr}
 80055e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ee:	4291      	cmp	r1, r2
 80055f0:	d1f9      	bne.n	80055e6 <memcpy+0xe>
 80055f2:	bd10      	pop	{r4, pc}

080055f4 <memmove>:
 80055f4:	4288      	cmp	r0, r1
 80055f6:	b510      	push	{r4, lr}
 80055f8:	eb01 0402 	add.w	r4, r1, r2
 80055fc:	d902      	bls.n	8005604 <memmove+0x10>
 80055fe:	4284      	cmp	r4, r0
 8005600:	4623      	mov	r3, r4
 8005602:	d807      	bhi.n	8005614 <memmove+0x20>
 8005604:	1e43      	subs	r3, r0, #1
 8005606:	42a1      	cmp	r1, r4
 8005608:	d008      	beq.n	800561c <memmove+0x28>
 800560a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005612:	e7f8      	b.n	8005606 <memmove+0x12>
 8005614:	4402      	add	r2, r0
 8005616:	4601      	mov	r1, r0
 8005618:	428a      	cmp	r2, r1
 800561a:	d100      	bne.n	800561e <memmove+0x2a>
 800561c:	bd10      	pop	{r4, pc}
 800561e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005626:	e7f7      	b.n	8005618 <memmove+0x24>

08005628 <_free_r>:
 8005628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800562a:	2900      	cmp	r1, #0
 800562c:	d048      	beq.n	80056c0 <_free_r+0x98>
 800562e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005632:	9001      	str	r0, [sp, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f1a1 0404 	sub.w	r4, r1, #4
 800563a:	bfb8      	it	lt
 800563c:	18e4      	addlt	r4, r4, r3
 800563e:	f000 fb0d 	bl	8005c5c <__malloc_lock>
 8005642:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <_free_r+0x9c>)
 8005644:	9801      	ldr	r0, [sp, #4]
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	4615      	mov	r5, r2
 800564a:	b933      	cbnz	r3, 800565a <_free_r+0x32>
 800564c:	6063      	str	r3, [r4, #4]
 800564e:	6014      	str	r4, [r2, #0]
 8005650:	b003      	add	sp, #12
 8005652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005656:	f000 bb07 	b.w	8005c68 <__malloc_unlock>
 800565a:	42a3      	cmp	r3, r4
 800565c:	d90b      	bls.n	8005676 <_free_r+0x4e>
 800565e:	6821      	ldr	r1, [r4, #0]
 8005660:	1862      	adds	r2, r4, r1
 8005662:	4293      	cmp	r3, r2
 8005664:	bf04      	itt	eq
 8005666:	681a      	ldreq	r2, [r3, #0]
 8005668:	685b      	ldreq	r3, [r3, #4]
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	bf04      	itt	eq
 800566e:	1852      	addeq	r2, r2, r1
 8005670:	6022      	streq	r2, [r4, #0]
 8005672:	602c      	str	r4, [r5, #0]
 8005674:	e7ec      	b.n	8005650 <_free_r+0x28>
 8005676:	461a      	mov	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	b10b      	cbz	r3, 8005680 <_free_r+0x58>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d9fa      	bls.n	8005676 <_free_r+0x4e>
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	1855      	adds	r5, r2, r1
 8005684:	42a5      	cmp	r5, r4
 8005686:	d10b      	bne.n	80056a0 <_free_r+0x78>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	4421      	add	r1, r4
 800568c:	1854      	adds	r4, r2, r1
 800568e:	42a3      	cmp	r3, r4
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	d1dd      	bne.n	8005650 <_free_r+0x28>
 8005694:	681c      	ldr	r4, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	4421      	add	r1, r4
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	e7d7      	b.n	8005650 <_free_r+0x28>
 80056a0:	d902      	bls.n	80056a8 <_free_r+0x80>
 80056a2:	230c      	movs	r3, #12
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	e7d3      	b.n	8005650 <_free_r+0x28>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	1961      	adds	r1, r4, r5
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf04      	itt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	bf04      	itt	eq
 80056b8:	1949      	addeq	r1, r1, r5
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	6054      	str	r4, [r2, #4]
 80056be:	e7c7      	b.n	8005650 <_free_r+0x28>
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	20000090 	.word	0x20000090

080056c8 <_malloc_r>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	1ccd      	adds	r5, r1, #3
 80056cc:	f025 0503 	bic.w	r5, r5, #3
 80056d0:	3508      	adds	r5, #8
 80056d2:	2d0c      	cmp	r5, #12
 80056d4:	bf38      	it	cc
 80056d6:	250c      	movcc	r5, #12
 80056d8:	2d00      	cmp	r5, #0
 80056da:	4606      	mov	r6, r0
 80056dc:	db01      	blt.n	80056e2 <_malloc_r+0x1a>
 80056de:	42a9      	cmp	r1, r5
 80056e0:	d903      	bls.n	80056ea <_malloc_r+0x22>
 80056e2:	230c      	movs	r3, #12
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	2000      	movs	r0, #0
 80056e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ea:	f000 fab7 	bl	8005c5c <__malloc_lock>
 80056ee:	4921      	ldr	r1, [pc, #132]	; (8005774 <_malloc_r+0xac>)
 80056f0:	680a      	ldr	r2, [r1, #0]
 80056f2:	4614      	mov	r4, r2
 80056f4:	b99c      	cbnz	r4, 800571e <_malloc_r+0x56>
 80056f6:	4f20      	ldr	r7, [pc, #128]	; (8005778 <_malloc_r+0xb0>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b923      	cbnz	r3, 8005706 <_malloc_r+0x3e>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 f9be 	bl	8005a80 <_sbrk_r>
 8005704:	6038      	str	r0, [r7, #0]
 8005706:	4629      	mov	r1, r5
 8005708:	4630      	mov	r0, r6
 800570a:	f000 f9b9 	bl	8005a80 <_sbrk_r>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	d123      	bne.n	800575a <_malloc_r+0x92>
 8005712:	230c      	movs	r3, #12
 8005714:	6033      	str	r3, [r6, #0]
 8005716:	4630      	mov	r0, r6
 8005718:	f000 faa6 	bl	8005c68 <__malloc_unlock>
 800571c:	e7e3      	b.n	80056e6 <_malloc_r+0x1e>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	1b5b      	subs	r3, r3, r5
 8005722:	d417      	bmi.n	8005754 <_malloc_r+0x8c>
 8005724:	2b0b      	cmp	r3, #11
 8005726:	d903      	bls.n	8005730 <_malloc_r+0x68>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	441c      	add	r4, r3
 800572c:	6025      	str	r5, [r4, #0]
 800572e:	e004      	b.n	800573a <_malloc_r+0x72>
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	42a2      	cmp	r2, r4
 8005734:	bf0c      	ite	eq
 8005736:	600b      	streq	r3, [r1, #0]
 8005738:	6053      	strne	r3, [r2, #4]
 800573a:	4630      	mov	r0, r6
 800573c:	f000 fa94 	bl	8005c68 <__malloc_unlock>
 8005740:	f104 000b 	add.w	r0, r4, #11
 8005744:	1d23      	adds	r3, r4, #4
 8005746:	f020 0007 	bic.w	r0, r0, #7
 800574a:	1ac2      	subs	r2, r0, r3
 800574c:	d0cc      	beq.n	80056e8 <_malloc_r+0x20>
 800574e:	1a1b      	subs	r3, r3, r0
 8005750:	50a3      	str	r3, [r4, r2]
 8005752:	e7c9      	b.n	80056e8 <_malloc_r+0x20>
 8005754:	4622      	mov	r2, r4
 8005756:	6864      	ldr	r4, [r4, #4]
 8005758:	e7cc      	b.n	80056f4 <_malloc_r+0x2c>
 800575a:	1cc4      	adds	r4, r0, #3
 800575c:	f024 0403 	bic.w	r4, r4, #3
 8005760:	42a0      	cmp	r0, r4
 8005762:	d0e3      	beq.n	800572c <_malloc_r+0x64>
 8005764:	1a21      	subs	r1, r4, r0
 8005766:	4630      	mov	r0, r6
 8005768:	f000 f98a 	bl	8005a80 <_sbrk_r>
 800576c:	3001      	adds	r0, #1
 800576e:	d1dd      	bne.n	800572c <_malloc_r+0x64>
 8005770:	e7cf      	b.n	8005712 <_malloc_r+0x4a>
 8005772:	bf00      	nop
 8005774:	20000090 	.word	0x20000090
 8005778:	20000094 	.word	0x20000094

0800577c <_realloc_r>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	4607      	mov	r7, r0
 8005780:	4614      	mov	r4, r2
 8005782:	460e      	mov	r6, r1
 8005784:	b921      	cbnz	r1, 8005790 <_realloc_r+0x14>
 8005786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800578a:	4611      	mov	r1, r2
 800578c:	f7ff bf9c 	b.w	80056c8 <_malloc_r>
 8005790:	b922      	cbnz	r2, 800579c <_realloc_r+0x20>
 8005792:	f7ff ff49 	bl	8005628 <_free_r>
 8005796:	4625      	mov	r5, r4
 8005798:	4628      	mov	r0, r5
 800579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579c:	f000 fa6a 	bl	8005c74 <_malloc_usable_size_r>
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d20f      	bcs.n	80057c4 <_realloc_r+0x48>
 80057a4:	4621      	mov	r1, r4
 80057a6:	4638      	mov	r0, r7
 80057a8:	f7ff ff8e 	bl	80056c8 <_malloc_r>
 80057ac:	4605      	mov	r5, r0
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d0f2      	beq.n	8005798 <_realloc_r+0x1c>
 80057b2:	4631      	mov	r1, r6
 80057b4:	4622      	mov	r2, r4
 80057b6:	f7ff ff0f 	bl	80055d8 <memcpy>
 80057ba:	4631      	mov	r1, r6
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ff33 	bl	8005628 <_free_r>
 80057c2:	e7e9      	b.n	8005798 <_realloc_r+0x1c>
 80057c4:	4635      	mov	r5, r6
 80057c6:	e7e7      	b.n	8005798 <_realloc_r+0x1c>

080057c8 <__ssputs_r>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	688e      	ldr	r6, [r1, #8]
 80057ce:	429e      	cmp	r6, r3
 80057d0:	4682      	mov	sl, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4690      	mov	r8, r2
 80057d6:	461f      	mov	r7, r3
 80057d8:	d838      	bhi.n	800584c <__ssputs_r+0x84>
 80057da:	898a      	ldrh	r2, [r1, #12]
 80057dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057e0:	d032      	beq.n	8005848 <__ssputs_r+0x80>
 80057e2:	6825      	ldr	r5, [r4, #0]
 80057e4:	6909      	ldr	r1, [r1, #16]
 80057e6:	eba5 0901 	sub.w	r9, r5, r1
 80057ea:	6965      	ldr	r5, [r4, #20]
 80057ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f4:	3301      	adds	r3, #1
 80057f6:	444b      	add	r3, r9
 80057f8:	106d      	asrs	r5, r5, #1
 80057fa:	429d      	cmp	r5, r3
 80057fc:	bf38      	it	cc
 80057fe:	461d      	movcc	r5, r3
 8005800:	0553      	lsls	r3, r2, #21
 8005802:	d531      	bpl.n	8005868 <__ssputs_r+0xa0>
 8005804:	4629      	mov	r1, r5
 8005806:	f7ff ff5f 	bl	80056c8 <_malloc_r>
 800580a:	4606      	mov	r6, r0
 800580c:	b950      	cbnz	r0, 8005824 <__ssputs_r+0x5c>
 800580e:	230c      	movs	r3, #12
 8005810:	f8ca 3000 	str.w	r3, [sl]
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005824:	6921      	ldr	r1, [r4, #16]
 8005826:	464a      	mov	r2, r9
 8005828:	f7ff fed6 	bl	80055d8 <memcpy>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	6126      	str	r6, [r4, #16]
 800583a:	6165      	str	r5, [r4, #20]
 800583c:	444e      	add	r6, r9
 800583e:	eba5 0509 	sub.w	r5, r5, r9
 8005842:	6026      	str	r6, [r4, #0]
 8005844:	60a5      	str	r5, [r4, #8]
 8005846:	463e      	mov	r6, r7
 8005848:	42be      	cmp	r6, r7
 800584a:	d900      	bls.n	800584e <__ssputs_r+0x86>
 800584c:	463e      	mov	r6, r7
 800584e:	4632      	mov	r2, r6
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	4641      	mov	r1, r8
 8005854:	f7ff fece 	bl	80055f4 <memmove>
 8005858:	68a3      	ldr	r3, [r4, #8]
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	1b9b      	subs	r3, r3, r6
 800585e:	4432      	add	r2, r6
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	2000      	movs	r0, #0
 8005866:	e7db      	b.n	8005820 <__ssputs_r+0x58>
 8005868:	462a      	mov	r2, r5
 800586a:	f7ff ff87 	bl	800577c <_realloc_r>
 800586e:	4606      	mov	r6, r0
 8005870:	2800      	cmp	r0, #0
 8005872:	d1e1      	bne.n	8005838 <__ssputs_r+0x70>
 8005874:	6921      	ldr	r1, [r4, #16]
 8005876:	4650      	mov	r0, sl
 8005878:	f7ff fed6 	bl	8005628 <_free_r>
 800587c:	e7c7      	b.n	800580e <__ssputs_r+0x46>
	...

08005880 <_svfiprintf_r>:
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	4698      	mov	r8, r3
 8005886:	898b      	ldrh	r3, [r1, #12]
 8005888:	061b      	lsls	r3, r3, #24
 800588a:	b09d      	sub	sp, #116	; 0x74
 800588c:	4607      	mov	r7, r0
 800588e:	460d      	mov	r5, r1
 8005890:	4614      	mov	r4, r2
 8005892:	d50e      	bpl.n	80058b2 <_svfiprintf_r+0x32>
 8005894:	690b      	ldr	r3, [r1, #16]
 8005896:	b963      	cbnz	r3, 80058b2 <_svfiprintf_r+0x32>
 8005898:	2140      	movs	r1, #64	; 0x40
 800589a:	f7ff ff15 	bl	80056c8 <_malloc_r>
 800589e:	6028      	str	r0, [r5, #0]
 80058a0:	6128      	str	r0, [r5, #16]
 80058a2:	b920      	cbnz	r0, 80058ae <_svfiprintf_r+0x2e>
 80058a4:	230c      	movs	r3, #12
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ac:	e0d1      	b.n	8005a52 <_svfiprintf_r+0x1d2>
 80058ae:	2340      	movs	r3, #64	; 0x40
 80058b0:	616b      	str	r3, [r5, #20]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9309      	str	r3, [sp, #36]	; 0x24
 80058b6:	2320      	movs	r3, #32
 80058b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c0:	2330      	movs	r3, #48	; 0x30
 80058c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a6c <_svfiprintf_r+0x1ec>
 80058c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058ca:	f04f 0901 	mov.w	r9, #1
 80058ce:	4623      	mov	r3, r4
 80058d0:	469a      	mov	sl, r3
 80058d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d6:	b10a      	cbz	r2, 80058dc <_svfiprintf_r+0x5c>
 80058d8:	2a25      	cmp	r2, #37	; 0x25
 80058da:	d1f9      	bne.n	80058d0 <_svfiprintf_r+0x50>
 80058dc:	ebba 0b04 	subs.w	fp, sl, r4
 80058e0:	d00b      	beq.n	80058fa <_svfiprintf_r+0x7a>
 80058e2:	465b      	mov	r3, fp
 80058e4:	4622      	mov	r2, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	4638      	mov	r0, r7
 80058ea:	f7ff ff6d 	bl	80057c8 <__ssputs_r>
 80058ee:	3001      	adds	r0, #1
 80058f0:	f000 80aa 	beq.w	8005a48 <_svfiprintf_r+0x1c8>
 80058f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f6:	445a      	add	r2, fp
 80058f8:	9209      	str	r2, [sp, #36]	; 0x24
 80058fa:	f89a 3000 	ldrb.w	r3, [sl]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80a2 	beq.w	8005a48 <_svfiprintf_r+0x1c8>
 8005904:	2300      	movs	r3, #0
 8005906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800590a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800590e:	f10a 0a01 	add.w	sl, sl, #1
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800591a:	931a      	str	r3, [sp, #104]	; 0x68
 800591c:	4654      	mov	r4, sl
 800591e:	2205      	movs	r2, #5
 8005920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005924:	4851      	ldr	r0, [pc, #324]	; (8005a6c <_svfiprintf_r+0x1ec>)
 8005926:	f7fa fc53 	bl	80001d0 <memchr>
 800592a:	9a04      	ldr	r2, [sp, #16]
 800592c:	b9d8      	cbnz	r0, 8005966 <_svfiprintf_r+0xe6>
 800592e:	06d0      	lsls	r0, r2, #27
 8005930:	bf44      	itt	mi
 8005932:	2320      	movmi	r3, #32
 8005934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005938:	0711      	lsls	r1, r2, #28
 800593a:	bf44      	itt	mi
 800593c:	232b      	movmi	r3, #43	; 0x2b
 800593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005942:	f89a 3000 	ldrb.w	r3, [sl]
 8005946:	2b2a      	cmp	r3, #42	; 0x2a
 8005948:	d015      	beq.n	8005976 <_svfiprintf_r+0xf6>
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	4654      	mov	r4, sl
 800594e:	2000      	movs	r0, #0
 8005950:	f04f 0c0a 	mov.w	ip, #10
 8005954:	4621      	mov	r1, r4
 8005956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800595a:	3b30      	subs	r3, #48	; 0x30
 800595c:	2b09      	cmp	r3, #9
 800595e:	d94e      	bls.n	80059fe <_svfiprintf_r+0x17e>
 8005960:	b1b0      	cbz	r0, 8005990 <_svfiprintf_r+0x110>
 8005962:	9207      	str	r2, [sp, #28]
 8005964:	e014      	b.n	8005990 <_svfiprintf_r+0x110>
 8005966:	eba0 0308 	sub.w	r3, r0, r8
 800596a:	fa09 f303 	lsl.w	r3, r9, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	46a2      	mov	sl, r4
 8005974:	e7d2      	b.n	800591c <_svfiprintf_r+0x9c>
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	1d19      	adds	r1, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9103      	str	r1, [sp, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfbb      	ittet	lt
 8005982:	425b      	neglt	r3, r3
 8005984:	f042 0202 	orrlt.w	r2, r2, #2
 8005988:	9307      	strge	r3, [sp, #28]
 800598a:	9307      	strlt	r3, [sp, #28]
 800598c:	bfb8      	it	lt
 800598e:	9204      	strlt	r2, [sp, #16]
 8005990:	7823      	ldrb	r3, [r4, #0]
 8005992:	2b2e      	cmp	r3, #46	; 0x2e
 8005994:	d10c      	bne.n	80059b0 <_svfiprintf_r+0x130>
 8005996:	7863      	ldrb	r3, [r4, #1]
 8005998:	2b2a      	cmp	r3, #42	; 0x2a
 800599a:	d135      	bne.n	8005a08 <_svfiprintf_r+0x188>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	1d1a      	adds	r2, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	9203      	str	r2, [sp, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb8      	it	lt
 80059a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059ac:	3402      	adds	r4, #2
 80059ae:	9305      	str	r3, [sp, #20]
 80059b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a7c <_svfiprintf_r+0x1fc>
 80059b4:	7821      	ldrb	r1, [r4, #0]
 80059b6:	2203      	movs	r2, #3
 80059b8:	4650      	mov	r0, sl
 80059ba:	f7fa fc09 	bl	80001d0 <memchr>
 80059be:	b140      	cbz	r0, 80059d2 <_svfiprintf_r+0x152>
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	eba0 000a 	sub.w	r0, r0, sl
 80059c6:	fa03 f000 	lsl.w	r0, r3, r0
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	4303      	orrs	r3, r0
 80059ce:	3401      	adds	r4, #1
 80059d0:	9304      	str	r3, [sp, #16]
 80059d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d6:	4826      	ldr	r0, [pc, #152]	; (8005a70 <_svfiprintf_r+0x1f0>)
 80059d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059dc:	2206      	movs	r2, #6
 80059de:	f7fa fbf7 	bl	80001d0 <memchr>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d038      	beq.n	8005a58 <_svfiprintf_r+0x1d8>
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <_svfiprintf_r+0x1f4>)
 80059e8:	bb1b      	cbnz	r3, 8005a32 <_svfiprintf_r+0x1b2>
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	3307      	adds	r3, #7
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	3308      	adds	r3, #8
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f8:	4433      	add	r3, r6
 80059fa:	9309      	str	r3, [sp, #36]	; 0x24
 80059fc:	e767      	b.n	80058ce <_svfiprintf_r+0x4e>
 80059fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a02:	460c      	mov	r4, r1
 8005a04:	2001      	movs	r0, #1
 8005a06:	e7a5      	b.n	8005954 <_svfiprintf_r+0xd4>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	3401      	adds	r4, #1
 8005a0c:	9305      	str	r3, [sp, #20]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	f04f 0c0a 	mov.w	ip, #10
 8005a14:	4620      	mov	r0, r4
 8005a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a1a:	3a30      	subs	r2, #48	; 0x30
 8005a1c:	2a09      	cmp	r2, #9
 8005a1e:	d903      	bls.n	8005a28 <_svfiprintf_r+0x1a8>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0c5      	beq.n	80059b0 <_svfiprintf_r+0x130>
 8005a24:	9105      	str	r1, [sp, #20]
 8005a26:	e7c3      	b.n	80059b0 <_svfiprintf_r+0x130>
 8005a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e7f0      	b.n	8005a14 <_svfiprintf_r+0x194>
 8005a32:	ab03      	add	r3, sp, #12
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	462a      	mov	r2, r5
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <_svfiprintf_r+0x1f8>)
 8005a3a:	a904      	add	r1, sp, #16
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f3af 8000 	nop.w
 8005a42:	1c42      	adds	r2, r0, #1
 8005a44:	4606      	mov	r6, r0
 8005a46:	d1d6      	bne.n	80059f6 <_svfiprintf_r+0x176>
 8005a48:	89ab      	ldrh	r3, [r5, #12]
 8005a4a:	065b      	lsls	r3, r3, #25
 8005a4c:	f53f af2c 	bmi.w	80058a8 <_svfiprintf_r+0x28>
 8005a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a52:	b01d      	add	sp, #116	; 0x74
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	ab03      	add	r3, sp, #12
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <_svfiprintf_r+0x1f8>)
 8005a60:	a904      	add	r1, sp, #16
 8005a62:	4638      	mov	r0, r7
 8005a64:	f7ff f98c 	bl	8004d80 <_printf_i>
 8005a68:	e7eb      	b.n	8005a42 <_svfiprintf_r+0x1c2>
 8005a6a:	bf00      	nop
 8005a6c:	08005df4 	.word	0x08005df4
 8005a70:	08005dfe 	.word	0x08005dfe
 8005a74:	00000000 	.word	0x00000000
 8005a78:	080057c9 	.word	0x080057c9
 8005a7c:	08005dfa 	.word	0x08005dfa

08005a80 <_sbrk_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	; (8005a9c <_sbrk_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fb fae0 	bl	8001050 <_sbrk>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_sbrk_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_sbrk_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000178 	.word	0x20000178

08005aa0 <_raise_r>:
 8005aa0:	291f      	cmp	r1, #31
 8005aa2:	b538      	push	{r3, r4, r5, lr}
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	d904      	bls.n	8005ab4 <_raise_r+0x14>
 8005aaa:	2316      	movs	r3, #22
 8005aac:	6003      	str	r3, [r0, #0]
 8005aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ab6:	b112      	cbz	r2, 8005abe <_raise_r+0x1e>
 8005ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005abc:	b94b      	cbnz	r3, 8005ad2 <_raise_r+0x32>
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 f830 	bl	8005b24 <_getpid_r>
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4620      	mov	r0, r4
 8005aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ace:	f000 b817 	b.w	8005b00 <_kill_r>
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d00a      	beq.n	8005aec <_raise_r+0x4c>
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	d103      	bne.n	8005ae2 <_raise_r+0x42>
 8005ada:	2316      	movs	r3, #22
 8005adc:	6003      	str	r3, [r0, #0]
 8005ade:	2001      	movs	r0, #1
 8005ae0:	e7e7      	b.n	8005ab2 <_raise_r+0x12>
 8005ae2:	2400      	movs	r4, #0
 8005ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ae8:	4628      	mov	r0, r5
 8005aea:	4798      	blx	r3
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7e0      	b.n	8005ab2 <_raise_r+0x12>

08005af0 <raise>:
 8005af0:	4b02      	ldr	r3, [pc, #8]	; (8005afc <raise+0xc>)
 8005af2:	4601      	mov	r1, r0
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f7ff bfd3 	b.w	8005aa0 <_raise_r>
 8005afa:	bf00      	nop
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <_kill_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	; (8005b20 <_kill_r+0x20>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	f7fb fa17 	bl	8000f40 <_kill>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d102      	bne.n	8005b1c <_kill_r+0x1c>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	b103      	cbz	r3, 8005b1c <_kill_r+0x1c>
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000178 	.word	0x20000178

08005b24 <_getpid_r>:
 8005b24:	f7fb ba04 	b.w	8000f30 <_getpid>

08005b28 <__sread>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b30:	f000 f8a8 	bl	8005c84 <_read_r>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	bfab      	itete	ge
 8005b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b3c:	181b      	addge	r3, r3, r0
 8005b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b42:	bfac      	ite	ge
 8005b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b46:	81a3      	strhlt	r3, [r4, #12]
 8005b48:	bd10      	pop	{r4, pc}

08005b4a <__swrite>:
 8005b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4e:	461f      	mov	r7, r3
 8005b50:	898b      	ldrh	r3, [r1, #12]
 8005b52:	05db      	lsls	r3, r3, #23
 8005b54:	4605      	mov	r5, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	4616      	mov	r6, r2
 8005b5a:	d505      	bpl.n	8005b68 <__swrite+0x1e>
 8005b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b60:	2302      	movs	r3, #2
 8005b62:	2200      	movs	r2, #0
 8005b64:	f000 f868 	bl	8005c38 <_lseek_r>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	4632      	mov	r2, r6
 8005b76:	463b      	mov	r3, r7
 8005b78:	4628      	mov	r0, r5
 8005b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7e:	f000 b817 	b.w	8005bb0 <_write_r>

08005b82 <__sseek>:
 8005b82:	b510      	push	{r4, lr}
 8005b84:	460c      	mov	r4, r1
 8005b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8a:	f000 f855 	bl	8005c38 <_lseek_r>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	bf15      	itete	ne
 8005b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b9e:	81a3      	strheq	r3, [r4, #12]
 8005ba0:	bf18      	it	ne
 8005ba2:	81a3      	strhne	r3, [r4, #12]
 8005ba4:	bd10      	pop	{r4, pc}

08005ba6 <__sclose>:
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 b813 	b.w	8005bd4 <_close_r>
	...

08005bb0 <_write_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	; (8005bd0 <_write_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fb f9f5 	bl	8000fae <_write>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_write_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_write_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000178 	.word	0x20000178

08005bd4 <_close_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	; (8005bf0 <_close_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fb fa01 	bl	8000fe6 <_close>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_close_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_close_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000178 	.word	0x20000178

08005bf4 <_fstat_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	; (8005c14 <_fstat_r+0x20>)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4608      	mov	r0, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	f7fb f9fc 	bl	8000ffe <_fstat>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d102      	bne.n	8005c10 <_fstat_r+0x1c>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b103      	cbz	r3, 8005c10 <_fstat_r+0x1c>
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	20000178 	.word	0x20000178

08005c18 <_isatty_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d06      	ldr	r5, [pc, #24]	; (8005c34 <_isatty_r+0x1c>)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	f7fb f9fb 	bl	800101e <_isatty>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_isatty_r+0x1a>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_isatty_r+0x1a>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	20000178 	.word	0x20000178

08005c38 <_lseek_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d07      	ldr	r5, [pc, #28]	; (8005c58 <_lseek_r+0x20>)
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	4608      	mov	r0, r1
 8005c40:	4611      	mov	r1, r2
 8005c42:	2200      	movs	r2, #0
 8005c44:	602a      	str	r2, [r5, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7fb f9f4 	bl	8001034 <_lseek>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_lseek_r+0x1e>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_lseek_r+0x1e>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	20000178 	.word	0x20000178

08005c5c <__malloc_lock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_lock+0x8>)
 8005c5e:	f7ff bc55 	b.w	800550c <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000170 	.word	0x20000170

08005c68 <__malloc_unlock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__malloc_unlock+0x8>)
 8005c6a:	f7ff bc50 	b.w	800550e <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	20000170 	.word	0x20000170

08005c74 <_malloc_usable_size_r>:
 8005c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c78:	1f18      	subs	r0, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfbc      	itt	lt
 8005c7e:	580b      	ldrlt	r3, [r1, r0]
 8005c80:	18c0      	addlt	r0, r0, r3
 8005c82:	4770      	bx	lr

08005c84 <_read_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d07      	ldr	r5, [pc, #28]	; (8005ca4 <_read_r+0x20>)
 8005c88:	4604      	mov	r4, r0
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f7fb f96e 	bl	8000f74 <_read>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_read_r+0x1e>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_read_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	20000178 	.word	0x20000178

08005ca8 <_init>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr

08005cb4 <_fini>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	bf00      	nop
 8005cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cba:	bc08      	pop	{r3}
 8005cbc:	469e      	mov	lr, r3
 8005cbe:	4770      	bx	lr

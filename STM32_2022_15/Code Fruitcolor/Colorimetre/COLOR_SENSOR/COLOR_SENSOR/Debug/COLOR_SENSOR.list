
COLOR_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008008  08008008  00018008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008484  08008484  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800848c  0800848c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001dc  08008670  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08008670  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013655  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f1  00000000  00000000  00033861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00036b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c2b  00000000  00000000  00037730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd5  00000000  00000000  0005f35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec898  00000000  00000000  00070130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c9c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  0015ca1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fec 	.word	0x08007fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007fec 	.word	0x08007fec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a24      	ldr	r2, [pc, #144]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 fa7b 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_GPIO_Init+0xc8>)
 8000fda:	f001 f8c3 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f001 f8b4 	bl	8002164 <HAL_GPIO_Init>

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	48000800 	.word	0x48000800

0800100c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_I2C1_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <MX_I2C1_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_I2C1_Init+0x74>)
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <MX_I2C1_Init+0x7c>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_I2C1_Init+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_I2C1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_I2C1_Init+0x74>)
 8001048:	f001 fa4e 	bl	80024e8 <HAL_I2C_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 fd20 	bl	8001a96 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <MX_I2C1_Init+0x74>)
 800105a:	f002 f83f 	bl	80030dc <HAL_I2CEx_ConfigAnalogFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 fd17 	bl	8001a96 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_I2C1_Init+0x74>)
 800106c:	f002 f881 	bl	8003172 <HAL_I2CEx_ConfigDigitalFilter>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fd0e 	bl	8001a96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000208 	.word	0x20000208
 8001084:	40005400 	.word	0x40005400
 8001088:	10909cec 	.word	0x10909cec

0800108c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_I2C2_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_I2C2_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_I2C2_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_I2C2_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_I2C2_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_I2C2_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_I2C2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_I2C2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_I2C2_Init+0x74>)
 80010c8:	f001 fa0e 	bl	80024e8 <HAL_I2C_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fce0 	bl	8001a96 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_I2C2_Init+0x74>)
 80010da:	f001 ffff 	bl	80030dc <HAL_I2CEx_ConfigAnalogFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 fcd7 	bl	8001a96 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_I2C2_Init+0x74>)
 80010ec:	f002 f841 	bl	8003172 <HAL_I2CEx_ConfigDigitalFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 fcce 	bl	8001a96 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000254 	.word	0x20000254
 8001104:	40005800 	.word	0x40005800
 8001108:	10909cec 	.word	0x10909cec

0800110c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ae      	sub	sp, #184	; 0xb8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f8bf 	bl	80052b0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <HAL_I2C_MspInit+0x134>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d13c      	bne.n	80011b6 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001140:	2300      	movs	r3, #0
 8001142:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4618      	mov	r0, r3
 800114a:	f002 feaf 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001154:	f000 fc9f 	bl	8001a96 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_I2C_MspInit+0x138>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	4a39      	ldr	r2, [pc, #228]	; (8001244 <HAL_I2C_MspInit+0x138>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001164:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_I2C_MspInit+0x138>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	2304      	movs	r3, #4
 800118c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001194:	4619      	mov	r1, r3
 8001196:	482c      	ldr	r0, [pc, #176]	; (8001248 <HAL_I2C_MspInit+0x13c>)
 8001198:	f000 ffe4 	bl	8002164 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_I2C_MspInit+0x138>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <HAL_I2C_MspInit+0x138>)
 80011a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a6:	6593      	str	r3, [r2, #88]	; 0x58
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_I2C_MspInit+0x138>)
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011b4:	e040      	b.n	8001238 <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a24      	ldr	r2, [pc, #144]	; (800124c <HAL_I2C_MspInit+0x140>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d13b      	bne.n	8001238 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fe6d 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011d8:	f000 fc5d 	bl	8001a96 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_I2C_MspInit+0x138>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a18      	ldr	r2, [pc, #96]	; (8001244 <HAL_I2C_MspInit+0x138>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_I2C_MspInit+0x138>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800120e:	2304      	movs	r3, #4
 8001210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_I2C_MspInit+0x13c>)
 800121c:	f000 ffa2 	bl	8002164 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0x138>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_I2C_MspInit+0x138>)
 8001226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122a:	6593      	str	r3, [r2, #88]	; 0x58
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_I2C_MspInit+0x138>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	bf00      	nop
 800123a:	37b8      	adds	r7, #184	; 0xb8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	40005800 	.word	0x40005800

08001250 <lcd_init>:
I2C_HandleTypeDef hi2c2;

UART_HandleTypeDef huart2;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f043 030c 	orr.w	r3, r3, #12
 8001266:	b2da      	uxtb	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	b2db      	uxtb	r3, r3
 800127a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800127c:	f107 0118 	add.w	r1, r7, #24
 8001280:	230a      	movs	r3, #10
 8001282:	2202      	movs	r2, #2
 8001284:	486c      	ldr	r0, [pc, #432]	; (8001438 <lcd_init+0x1e8>)
 8001286:	f003 fb1b 	bl	80048c0 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800128a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800128e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001290:	f107 0114 	add.w	r1, r7, #20
 8001294:	230a      	movs	r3, #10
 8001296:	2202      	movs	r2, #2
 8001298:	4867      	ldr	r0, [pc, #412]	; (8001438 <lcd_init+0x1e8>)
 800129a:	f003 fb11 	bl	80048c0 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	2205      	movs	r2, #5
 80012a2:	217c      	movs	r1, #124	; 0x7c
 80012a4:	69f8      	ldr	r0, [r7, #28]
 80012a6:	f001 fb99 	bl	80029dc <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80012ae:	f107 0113 	add.w	r1, r7, #19
 80012b2:	230a      	movs	r3, #10
 80012b4:	2201      	movs	r2, #1
 80012b6:	4860      	ldr	r0, [pc, #384]	; (8001438 <lcd_init+0x1e8>)
 80012b8:	f003 fb02 	bl	80048c0 <HAL_UART_Transmit>
	HAL_Delay(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fe47 	bl	8001f50 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80012c2:	f107 0218 	add.w	r2, r7, #24
 80012c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2302      	movs	r3, #2
 80012ce:	217c      	movs	r1, #124	; 0x7c
 80012d0:	69f8      	ldr	r0, [r7, #28]
 80012d2:	f001 f999 	bl	8002608 <HAL_I2C_Master_Transmit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80012da:	f107 0112 	add.w	r1, r7, #18
 80012de:	230a      	movs	r3, #10
 80012e0:	2201      	movs	r2, #1
 80012e2:	4855      	ldr	r0, [pc, #340]	; (8001438 <lcd_init+0x1e8>)
 80012e4:	f003 faec 	bl	80048c0 <HAL_UART_Transmit>
	HAL_Delay(50);
 80012e8:	2032      	movs	r0, #50	; 0x32
 80012ea:	f000 fe31 	bl	8001f50 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80012ee:	f107 0218 	add.w	r2, r7, #24
 80012f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2302      	movs	r3, #2
 80012fa:	217c      	movs	r1, #124	; 0x7c
 80012fc:	69f8      	ldr	r0, [r7, #28]
 80012fe:	f001 f983 	bl	8002608 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001302:	2005      	movs	r0, #5
 8001304:	f000 fe24 	bl	8001f50 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001308:	f107 0218 	add.w	r2, r7, #24
 800130c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	217c      	movs	r1, #124	; 0x7c
 8001316:	69f8      	ldr	r0, [r7, #28]
 8001318:	f001 f976 	bl	8002608 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800132e:	f107 0218 	add.w	r2, r7, #24
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2302      	movs	r3, #2
 800133a:	217c      	movs	r1, #124	; 0x7c
 800133c:	69f8      	ldr	r0, [r7, #28]
 800133e:	f001 f963 	bl	8002608 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001342:	2301      	movs	r3, #1
 8001344:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001346:	f107 0218 	add.w	r2, r7, #24
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	217c      	movs	r1, #124	; 0x7c
 8001354:	69f8      	ldr	r0, [r7, #28]
 8001356:	f001 f957 	bl	8002608 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800135a:	2002      	movs	r0, #2
 800135c:	f000 fdf8 	bl	8001f50 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2202      	movs	r2, #2
 8001364:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	789b      	ldrb	r3, [r3, #2]
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	b2db      	uxtb	r3, r3
 8001370:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001372:	f107 0218 	add.w	r2, r7, #24
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2302      	movs	r3, #2
 800137e:	217c      	movs	r1, #124	; 0x7c
 8001380:	69f8      	ldr	r0, [r7, #28]
 8001382:	f001 f941 	bl	8002608 <HAL_I2C_Master_Transmit>

	    // Initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001386:	2300      	movs	r3, #0
 8001388:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800138e:	f107 0210 	add.w	r2, r7, #16
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2302      	movs	r3, #2
 800139a:	21c4      	movs	r1, #196	; 0xc4
 800139c:	69f8      	ldr	r0, [r7, #28]
 800139e:	f001 f933 	bl	8002608 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80013a2:	2308      	movs	r3, #8
 80013a4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80013a6:	23ff      	movs	r3, #255	; 0xff
 80013a8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80013aa:	f107 0210 	add.w	r2, r7, #16
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2302      	movs	r3, #2
 80013b6:	21c4      	movs	r1, #196	; 0xc4
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	f001 f925 	bl	8002608 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80013be:	2301      	movs	r3, #1
 80013c0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80013c2:	2320      	movs	r3, #32
 80013c4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80013c6:	f107 0210 	add.w	r2, r7, #16
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2302      	movs	r3, #2
 80013d2:	21c4      	movs	r1, #196	; 0xc4
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f001 f917 	bl	8002608 <HAL_I2C_Master_Transmit>

		// Couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80013da:	2304      	movs	r3, #4
 80013dc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013de:	23ff      	movs	r3, #255	; 0xff
 80013e0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013e2:	f107 020c 	add.w	r2, r7, #12
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2302      	movs	r3, #2
 80013ee:	21c4      	movs	r1, #196	; 0xc4
 80013f0:	69f8      	ldr	r0, [r7, #28]
 80013f2:	f001 f909 	bl	8002608 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80013f6:	2303      	movs	r3, #3
 80013f8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013fa:	23ff      	movs	r3, #255	; 0xff
 80013fc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2302      	movs	r3, #2
 800140a:	21c4      	movs	r1, #196	; 0xc4
 800140c:	69f8      	ldr	r0, [r7, #28]
 800140e:	f001 f8fb 	bl	8002608 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001412:	2302      	movs	r3, #2
 8001414:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001416:	23ff      	movs	r3, #255	; 0xff
 8001418:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2302      	movs	r3, #2
 8001426:	21c4      	movs	r1, #196	; 0xc4
 8001428:	69f8      	ldr	r0, [r7, #28]
 800142a:	f001 f8ed 	bl	8002608 <HAL_I2C_Master_Transmit>


}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200002a0 	.word	0x200002a0

0800143c <clearlcd>:



void clearlcd(void) // Permet d'effacer tout ce qui s'affiche sur le lcd
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c2,0,0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <clearlcd+0x2c>)
 8001446:	f000 f83c 	bl	80014c2 <lcd_position>
	lcd_print(&hi2c2,"                  ");
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <clearlcd+0x30>)
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <clearlcd+0x2c>)
 800144e:	f000 f80f 	bl	8001470 <lcd_print>
	lcd_position(&hi2c2,0,1);
 8001452:	2201      	movs	r2, #1
 8001454:	2100      	movs	r1, #0
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <clearlcd+0x2c>)
 8001458:	f000 f833 	bl	80014c2 <lcd_position>
	lcd_print(&hi2c2,"                  ");
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <clearlcd+0x30>)
 800145e:	4802      	ldr	r0, [pc, #8]	; (8001468 <clearlcd+0x2c>)
 8001460:	f000 f806 	bl	8001470 <lcd_print>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000254 	.word	0x20000254
 800146c:	08008008 	.word	0x08008008

08001470 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001486:	e011      	b.n	80014ac <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001492:	f107 020c 	add.w	r2, r7, #12
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2302      	movs	r3, #2
 800149e:	217c      	movs	r1, #124	; 0x7c
 80014a0:	6938      	ldr	r0, [r7, #16]
 80014a2:	f001 f8b1 	bl	8002608 <HAL_I2C_Master_Transmit>
            i++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e7      	bne.n	8001488 <lcd_print+0x18>
   }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // Position du curseur sur le LCD
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
 80014ce:	4613      	mov	r3, r2
 80014d0:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80014d6:	78bb      	ldrb	r3, [r7, #2]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d104      	bne.n	80014e6 <lcd_position+0x24>
    {
        col = col | 0x80;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e2:	70fb      	strb	r3, [r7, #3]
 80014e4:	e003      	b.n	80014ee <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014ec:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80014f6:	f107 0208 	add.w	r2, r7, #8
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2302      	movs	r3, #2
 8001502:	217c      	movs	r1, #124	; 0x7c
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f001 f87f 	bl	8002608 <HAL_I2C_Master_Transmit>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	0000      	movs	r0, r0
 8001514:	0000      	movs	r0, r0
	...

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b0bc      	sub	sp, #240	; 0xf0
 800151c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 800151e:	f000 fc9b 	bl	8001e58 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 8001522:	f000 fa67 	bl	80019f4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8001526:	f7ff fd0b 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800152a:	f000 fbdf 	bl	8001cec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800152e:	f7ff fd6d 	bl	800100c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001532:	f7ff fdab 	bl	800108c <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */

  lcd_init(&hi2c1, &lcdData); // Initialise l'écran LCD
 8001536:	49de      	ldr	r1, [pc, #888]	; (80018b0 <main+0x398>)
 8001538:	48de      	ldr	r0, [pc, #888]	; (80018b4 <main+0x39c>)
 800153a:	f7ff fe89 	bl	8001250 <lcd_init>

  clearlcd();
 800153e:	f7ff ff7d 	bl	800143c <clearlcd>

  lcd_position(&hi2c1,0,0);   // Permet de positionner là où on va écrire sur le LCD
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	48db      	ldr	r0, [pc, #876]	; (80018b4 <main+0x39c>)
 8001548:	f7ff ffbb 	bl	80014c2 <lcd_position>

  lcd_print(&hi2c1,"-- FruitColor --");
 800154c:	49da      	ldr	r1, [pc, #872]	; (80018b8 <main+0x3a0>)
 800154e:	48d9      	ldr	r0, [pc, #868]	; (80018b4 <main+0x39c>)
 8001550:	f7ff ff8e 	bl	8001470 <lcd_print>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  tim_reg[0] = TIM_REG;
 8001554:	2381      	movs	r3, #129	; 0x81
 8001556:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
	  reg_ctl[0] = REG_CTL;
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
	  intsource[0] = INT_SOURCE; // 0x03
 8001560:	2303      	movs	r3, #3
 8001562:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
	  ch1_low[0] = CH1_LOWER;
 8001566:	23b0      	movs	r3, #176	; 0xb0
 8001568:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	  ch2_low[0] = CH2_LOWER;
 800156c:	23b2      	movs	r3, #178	; 0xb2
 800156e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  ch3_low[0] = CH3_LOWER;
 8001572:	23b4      	movs	r3, #180	; 0xb4
 8001574:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	  ch4_low[0] = CH4_LOWER;
 8001578:	23b8      	movs	r3, #184	; 0xb8
 800157a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	  data_t[0] = DATA_T;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

	  // Buffer pour récupérer les bits :

	  uint8_t data1l[8] = {0};
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  uint8_t data1h[8] = {0};
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
	  uint8_t data2l[8] = {0};
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint8_t data2h[8] = {0};
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
	  uint8_t data3l[8] = {0};
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
	  uint8_t data3h[8] = {0};
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
	  uint8_t data4l[8] = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
	  uint8_t data4h[8] = {0};
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
	  // Set up Timing Register

	  // HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, tim_reg, 1	, HAL_MAX_DELAY);
	  // HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, data_t, 1	, HAL_MAX_DELAY);

	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, reg_ctl, 1	, HAL_MAX_DELAY);
 80015c4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2172      	movs	r1, #114	; 0x72
 80015d2:	48b8      	ldr	r0, [pc, #736]	; (80018b4 <main+0x39c>)
 80015d4:	f001 f818 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, intsource, 1, HAL_MAX_DELAY); // Power Up and Enable ADC
 80015d8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2172      	movs	r1, #114	; 0x72
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <main+0x39c>)
 80015e8:	f001 f80e 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_Delay(12);                                                                   // Wait for integration conversion
 80015ec:	200c      	movs	r0, #12
 80015ee:	f000 fcaf 	bl	8001f50 <HAL_Delay>


	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, ch1_low, 1, HAL_MAX_DELAY);   //Set Command bit and Word transaction
 80015f2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	2172      	movs	r1, #114	; 0x72
 8001600:	48ac      	ldr	r0, [pc, #688]	; (80018b4 <main+0x39c>)
 8001602:	f001 f801 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_Delay(0.10);
 8001606:	2000      	movs	r0, #0
 8001608:	f000 fca2 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data1l, 1, HAL_MAX_DELAY);
 800160c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	2172      	movs	r1, #114	; 0x72
 800161a:	48a6      	ldr	r0, [pc, #664]	; (80018b4 <main+0x39c>)
 800161c:	f001 f8e8 	bl	80027f0 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data1h, 1, HAL_MAX_DELAY);
 8001620:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	2172      	movs	r1, #114	; 0x72
 800162e:	48a1      	ldr	r0, [pc, #644]	; (80018b4 <main+0x39c>)
 8001630:	f001 f8de 	bl	80027f0 <HAL_I2C_Master_Receive>
	  green = data1l[0] + data1h[0];
 8001634:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001638:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800163c:	4413      	add	r3, r2
 800163e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

	  HAL_Delay(0.30);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 fc84 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, ch2_low, 1, HAL_MAX_DELAY);   //Set Command bit and Word transaction
 8001648:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	2172      	movs	r1, #114	; 0x72
 8001656:	4897      	ldr	r0, [pc, #604]	; (80018b4 <main+0x39c>)
 8001658:	f000 ffd6 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_Delay(0.10);
 800165c:	2000      	movs	r0, #0
 800165e:	f000 fc77 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data2l, 1, HAL_MAX_DELAY);
 8001662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	2172      	movs	r1, #114	; 0x72
 8001670:	4890      	ldr	r0, [pc, #576]	; (80018b4 <main+0x39c>)
 8001672:	f001 f8bd 	bl	80027f0 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data2h, 1, HAL_MAX_DELAY);
 8001676:	f107 0220 	add.w	r2, r7, #32
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	2172      	movs	r1, #114	; 0x72
 8001684:	488b      	ldr	r0, [pc, #556]	; (80018b4 <main+0x39c>)
 8001686:	f001 f8b3 	bl	80027f0 <HAL_I2C_Master_Receive>
	  red = data2l[0] + data2h[0];
 800168a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001692:	4413      	add	r3, r2
 8001694:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6

	  HAL_Delay(0.30);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fc59 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, ch3_low, 1, HAL_MAX_DELAY);   //Set Command bit and Word transaction
 800169e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	2172      	movs	r1, #114	; 0x72
 80016ac:	4881      	ldr	r0, [pc, #516]	; (80018b4 <main+0x39c>)
 80016ae:	f000 ffab 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_Delay(0.10);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 fc4c 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data3l, 1, HAL_MAX_DELAY);
 80016b8:	f107 0218 	add.w	r2, r7, #24
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2172      	movs	r1, #114	; 0x72
 80016c6:	487b      	ldr	r0, [pc, #492]	; (80018b4 <main+0x39c>)
 80016c8:	f001 f892 	bl	80027f0 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data3h, 1, HAL_MAX_DELAY);
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	2172      	movs	r1, #114	; 0x72
 80016da:	4876      	ldr	r0, [pc, #472]	; (80018b4 <main+0x39c>)
 80016dc:	f001 f888 	bl	80027f0 <HAL_I2C_Master_Receive>
	  blue = data3l[0] + data3h[0];
 80016e0:	7e3a      	ldrb	r2, [r7, #24]
 80016e2:	7c3b      	ldrb	r3, [r7, #16]
 80016e4:	4413      	add	r3, r2
 80016e6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5

	  HAL_Delay(0.30);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 fc30 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Transmit(&hi2c1, COLOR_SENSOR_ADDR, ch4_low, 1, HAL_MAX_DELAY);   //Set Command bit and Word transaction
 80016f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	2172      	movs	r1, #114	; 0x72
 80016fe:	486d      	ldr	r0, [pc, #436]	; (80018b4 <main+0x39c>)
 8001700:	f000 ff82 	bl	8002608 <HAL_I2C_Master_Transmit>
	  HAL_Delay(0.10);
 8001704:	2000      	movs	r0, #0
 8001706:	f000 fc23 	bl	8001f50 <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data4l, 1, HAL_MAX_DELAY);
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2172      	movs	r1, #114	; 0x72
 8001718:	4866      	ldr	r0, [pc, #408]	; (80018b4 <main+0x39c>)
 800171a:	f001 f869 	bl	80027f0 <HAL_I2C_Master_Receive>
	  HAL_I2C_Master_Receive(&hi2c1, COLOR_SENSOR_ADDR, data4h, 1, HAL_MAX_DELAY);
 800171e:	463a      	mov	r2, r7
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2172      	movs	r1, #114	; 0x72
 800172a:	4862      	ldr	r0, [pc, #392]	; (80018b4 <main+0x39c>)
 800172c:	f001 f860 	bl	80027f0 <HAL_I2C_Master_Receive>
	  clear = data4l[0] + data4h[0];
 8001730:	7a3b      	ldrb	r3, [r7, #8]
 8001732:	461a      	mov	r2, r3
 8001734:	783b      	ldrb	r3, [r7, #0]
 8001736:	4413      	add	r3, r2
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

	  HAL_Delay(0.40);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fc03 	bl	8001f50 <HAL_Delay>

	  X = (-0.14282*red) + (1.54924*green) + (-0.95641*blue);
 800174a:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fee8 	bl	8000524 <__aeabi_i2d>
 8001754:	a346      	add	r3, pc, #280	; (adr r3, 8001870 <main+0x358>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4614      	mov	r4, r2
 8001764:	461d      	mov	r5, r3
 8001766:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feda 	bl	8000524 <__aeabi_i2d>
 8001770:	a341      	add	r3, pc, #260	; (adr r3, 8001878 <main+0x360>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff3f 	bl	80005f8 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fd83 	bl	800028c <__adddf3>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4614      	mov	r4, r2
 800178c:	461d      	mov	r5, r3
 800178e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fec6 	bl	8000524 <__aeabi_i2d>
 8001798:	a339      	add	r3, pc, #228	; (adr r3, 8001880 <main+0x368>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fd6f 	bl	800028c <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f9f7 	bl	8000ba8 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  Y = (-0.32466*red) + (1.57837*green) + (-0.73191*blue);
 80017c0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fead 	bl	8000524 <__aeabi_i2d>
 80017ca:	a32f      	add	r3, pc, #188	; (adr r3, 8001888 <main+0x370>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ff12 	bl	80005f8 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4614      	mov	r4, r2
 80017da:	461d      	mov	r5, r3
 80017dc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe9f 	bl	8000524 <__aeabi_i2d>
 80017e6:	a32a      	add	r3, pc, #168	; (adr r3, 8001890 <main+0x378>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe ff04 	bl	80005f8 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe fd48 	bl	800028c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe8b 	bl	8000524 <__aeabi_i2d>
 800180e:	a322      	add	r3, pc, #136	; (adr r3, 8001898 <main+0x380>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fef0 	bl	80005f8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fd34 	bl	800028c <__adddf3>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f9bc 	bl	8000ba8 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  Z = (-0.68202*red) + (0.77073*green) + (0.56332*blue);
 8001836:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe72 	bl	8000524 <__aeabi_i2d>
 8001840:	a317      	add	r3, pc, #92	; (adr r3, 80018a0 <main+0x388>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4614      	mov	r4, r2
 8001850:	461d      	mov	r5, r3
 8001852:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe64 	bl	8000524 <__aeabi_i2d>
 800185c:	a312      	add	r3, pc, #72	; (adr r3, 80018a8 <main+0x390>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	e026      	b.n	80018bc <main+0x3a4>
 800186e:	bf00      	nop
 8001870:	fe9b7bf2 	.word	0xfe9b7bf2
 8001874:	bfc247ec 	.word	0xbfc247ec
 8001878:	e1da7b0b 	.word	0xe1da7b0b
 800187c:	3ff8c9af 	.word	0x3ff8c9af
 8001880:	24f227d0 	.word	0x24f227d0
 8001884:	bfee9ae9 	.word	0xbfee9ae9
 8001888:	bc947065 	.word	0xbc947065
 800188c:	bfd4c73a 	.word	0xbfd4c73a
 8001890:	e6afcce2 	.word	0xe6afcce2
 8001894:	3ff94100 	.word	0x3ff94100
 8001898:	8533b107 	.word	0x8533b107
 800189c:	bfe76bce 	.word	0xbfe76bce
 80018a0:	9b66f933 	.word	0x9b66f933
 80018a4:	bfe5d31b 	.word	0xbfe5d31b
 80018a8:	f601797d 	.word	0xf601797d
 80018ac:	3fe8a9d1 	.word	0x3fe8a9d1
 80018b0:	200001f8 	.word	0x200001f8
 80018b4:	20000208 	.word	0x20000208
 80018b8:	0800801c 	.word	0x0800801c
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fce5 	bl	800028c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4614      	mov	r4, r2
 80018c8:	461d      	mov	r5, r3
 80018ca:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe28 	bl	8000524 <__aeabi_i2d>
 80018d4:	a345      	add	r3, pc, #276	; (adr r3, 80019ec <main+0x4d4>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4620      	mov	r0, r4
 80018e4:	4629      	mov	r1, r5
 80018e6:	f7fe fcd1 	bl	800028c <__adddf3>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f959 	bl	8000ba8 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	  x = X/(X+Y+Z);
 80018fc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001900:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001908:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800190c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001910:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
 8001914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001918:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	  y = Y/(X+Y+Z);
 800191c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001920:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001928:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800192c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001930:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 8001934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001938:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

	  lcd_position(&hi2c1,0,0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	4825      	ldr	r0, [pc, #148]	; (80019d8 <main+0x4c0>)
 8001942:	f7ff fdbe 	bl	80014c2 <lcd_position>
	  lcd_print(&hi2c1,"                  ");
 8001946:	4925      	ldr	r1, [pc, #148]	; (80019dc <main+0x4c4>)
 8001948:	4823      	ldr	r0, [pc, #140]	; (80019d8 <main+0x4c0>)
 800194a:	f7ff fd91 	bl	8001470 <lcd_print>
	  lcd_position(&hi2c1,0,1);
 800194e:	2201      	movs	r2, #1
 8001950:	2100      	movs	r1, #0
 8001952:	4821      	ldr	r0, [pc, #132]	; (80019d8 <main+0x4c0>)
 8001954:	f7ff fdb5 	bl	80014c2 <lcd_position>
	  lcd_print(&hi2c1,"                  ");
 8001958:	4920      	ldr	r1, [pc, #128]	; (80019dc <main+0x4c4>)
 800195a:	481f      	ldr	r0, [pc, #124]	; (80019d8 <main+0x4c0>)
 800195c:	f7ff fd88 	bl	8001470 <lcd_print>

	  sprintf(bufR, "R: %d", red);               // Rentre dans un buffer le pourcentage d'humidité
 8001960:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8001964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001968:	491d      	ldr	r1, [pc, #116]	; (80019e0 <main+0x4c8>)
 800196a:	4618      	mov	r0, r3
 800196c:	f004 f912 	bl	8005b94 <siprintf>
	  sprintf(bufG, "G: %d", green);
 8001970:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001978:	491a      	ldr	r1, [pc, #104]	; (80019e4 <main+0x4cc>)
 800197a:	4618      	mov	r0, r3
 800197c:	f004 f90a 	bl	8005b94 <siprintf>
	  sprintf(bufB, "B: %d", blue);
 8001980:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8001984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001988:	4917      	ldr	r1, [pc, #92]	; (80019e8 <main+0x4d0>)
 800198a:	4618      	mov	r0, r3
 800198c:	f004 f902 	bl	8005b94 <siprintf>



	  lcd_position(&hi2c1,0,0);   // Permet de positionner là où on va écrire sur le LCD
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <main+0x4c0>)
 8001996:	f7ff fd94 	bl	80014c2 <lcd_position>
	  lcd_print(&hi2c1, bufR);
 800199a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800199e:	4619      	mov	r1, r3
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <main+0x4c0>)
 80019a2:	f7ff fd65 	bl	8001470 <lcd_print>

	  lcd_position(&hi2c1,8,0);   // Permet de positionner là où on va écrire sur le LCD
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <main+0x4c0>)
 80019ac:	f7ff fd89 	bl	80014c2 <lcd_position>
	  lcd_print(&hi2c1, bufG);
 80019b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b4:	4619      	mov	r1, r3
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <main+0x4c0>)
 80019b8:	f7ff fd5a 	bl	8001470 <lcd_print>

	  lcd_position(&hi2c1,0,1);   // Permet de positionner là où on va écrire sur le LCD
 80019bc:	2201      	movs	r2, #1
 80019be:	2100      	movs	r1, #0
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <main+0x4c0>)
 80019c2:	f7ff fd7e 	bl	80014c2 <lcd_position>
	  lcd_print(&hi2c1, bufB);
 80019c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ca:	4619      	mov	r1, r3
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <main+0x4c0>)
 80019ce:	f7ff fd4f 	bl	8001470 <lcd_print>
  {
 80019d2:	e5bf      	b.n	8001554 <main+0x3c>
 80019d4:	f3af 8000 	nop.w
 80019d8:	20000208 	.word	0x20000208
 80019dc:	08008030 	.word	0x08008030
 80019e0:	08008044 	.word	0x08008044
 80019e4:	0800804c 	.word	0x0800804c
 80019e8:	08008054 	.word	0x08008054
 80019ec:	aa25d8d8 	.word	0xaa25d8d8
 80019f0:	3fe206b7 	.word	0x3fe206b7

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b096      	sub	sp, #88	; 0x58
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2244      	movs	r2, #68	; 0x44
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fc54 	bl	80052b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a1a:	f001 fc05 	bl	8003228 <HAL_PWREx_ControlVoltageScaling>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a24:	f000 f837 	bl	8001a96 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a32:	2310      	movs	r3, #16
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a42:	230a      	movs	r3, #10
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a46:	2307      	movs	r3, #7
 8001a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fc3c 	bl	80032d4 <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a62:	f000 f818 	bl	8001a96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 f80e 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a8a:	f000 f804 	bl	8001a96 <Error_Handler>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3758      	adds	r7, #88	; 0x58
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9a:	b672      	cpsid	i
}
 8001a9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f9ec 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_kill>:

int _kill(int pid, int sig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b56:	f003 fb81 	bl	800525c <__errno>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2216      	movs	r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_exit>:

void _exit (int status)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ffe7 	bl	8001b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b7e:	e7fe      	b.n	8001b7e <_exit+0x12>

08001b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b92:	f3af 8000 	nop.w
 8001b96:	4601      	mov	r1, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf0      	blt.n	8001b92 <_read+0x12>
	}

return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e009      	b.n	8001be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf1      	blt.n	8001bcc <_write+0x12>
	}
	return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_close>:

int _close(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f003 fae6 	bl	800525c <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20018000 	.word	0x20018000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	200001fc 	.word	0x200001fc
 8001cc4:	20000338 	.word	0x20000338

08001cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_USART2_UART_Init+0x5c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USART2_UART_Init+0x58>)
 8001d30:	f002 fd78 	bl	8004824 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f7ff feac 	bl	8001a96 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200002a0 	.word	0x200002a0
 8001d48:	40004400 	.word	0x40004400

08001d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0ac      	sub	sp, #176	; 0xb0
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2288      	movs	r2, #136	; 0x88
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fa9f 	bl	80052b0 <memset>
  if(uartHandle->Instance==USART2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_UART_MspInit+0xb0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d13b      	bne.n	8001df4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 f88f 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d94:	f7ff fe7f 	bl	8001a96 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	6593      	str	r3, [r2, #88]	; 0x58
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_UART_MspInit+0xb4>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dc8:	230c      	movs	r3, #12
 8001dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de0:	2307      	movs	r3, #7
 8001de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f000 f9b8 	bl	8002164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001df4:	bf00      	nop
 8001df6:	37b0      	adds	r7, #176	; 0xb0
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40021000 	.word	0x40021000

08001e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e08:	f7ff ff5e 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <LoopForever+0xe>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	; (8001e50 <LoopForever+0x16>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e32:	f003 fa19 	bl	8005268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e36:	f7ff fb6f 	bl	8001518 <main>

08001e3a <LoopForever>:

LoopForever:
    b LoopForever
 8001e3a:	e7fe      	b.n	8001e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e48:	08008494 	.word	0x08008494
  ldr r2, =_sbss
 8001e4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e50:	20000338 	.word	0x20000338

08001e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_Init+0x3c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <HAL_Init+0x3c>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f944 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f80f 	bl	8001e98 <HAL_InitTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	e001      	b.n	8001e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e86:	f7ff fe0b 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40022000 	.word	0x40022000

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_InitTick+0x6c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_InitTick+0x70>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_InitTick+0x6c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f941 	bl	800214a <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d809      	bhi.n	8001ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f919 	bl	8002112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_InitTick+0x74>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e007      	b.n	8001ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e004      	b.n	8001ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000324 	.word	0x20000324

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000324 	.word	0x20000324

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff47 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	e17f      	b.n	8002474 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8171 	beq.w	800246e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d005      	beq.n	80021a4 <HAL_GPIO_Init+0x40>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b03      	cmp	r3, #3
 8002210:	d118      	bne.n	8002244 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ac 	beq.w	800246e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	4a5e      	ldr	r2, [pc, #376]	; (8002494 <HAL_GPIO_Init+0x330>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6613      	str	r3, [r2, #96]	; 0x60
 8002322:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <HAL_GPIO_Init+0x330>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232e:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <HAL_GPIO_Init+0x334>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x242>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4f      	ldr	r2, [pc, #316]	; (800249c <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x23e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x23a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4d      	ldr	r2, [pc, #308]	; (80024a4 <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x236>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x232>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x34c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x22a>
 800238a:	2306      	movs	r3, #6
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800238e:	2307      	movs	r3, #7
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 80023a6:	2300      	movs	r3, #0
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <HAL_GPIO_Init+0x334>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_GPIO_Init+0x350>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ea:	4a32      	ldr	r2, [pc, #200]	; (80024b4 <HAL_GPIO_Init+0x350>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_GPIO_Init+0x350>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <HAL_GPIO_Init+0x350>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_GPIO_Init+0x350>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_GPIO_Init+0x350>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x350>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002468:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <HAL_GPIO_Init+0x350>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f ae78 	bne.w	8002174 <HAL_GPIO_Init+0x10>
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	48000400 	.word	0x48000400
 80024a0:	48000800 	.word	0x48000800
 80024a4:	48000c00 	.word	0x48000c00
 80024a8:	48001000 	.word	0x48001000
 80024ac:	48001400 	.word	0x48001400
 80024b0:	48001800 	.word	0x48001800
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e081      	b.n	80025fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fdfc 	bl	800110c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e006      	b.n	8002570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800256e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d104      	bne.n	8002582 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69d9      	ldr	r1, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	460b      	mov	r3, r1
 8002616:	817b      	strh	r3, [r7, #10]
 8002618:	4613      	mov	r3, r2
 800261a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	f040 80da 	bne.w	80027de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2C_Master_Transmit+0x30>
 8002634:	2302      	movs	r3, #2
 8002636:	e0d3      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002640:	f7ff fc7a 	bl	8001f38 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2319      	movs	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 faed 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0be      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2221      	movs	r2, #33	; 0x21
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2210      	movs	r2, #16
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	893a      	ldrh	r2, [r7, #8]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2bff      	cmp	r3, #255	; 0xff
 8002692:	d90e      	bls.n	80026b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fce4 	bl	8003078 <I2C_TransferConfig>
 80026b0:	e06c      	b.n	800278c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fcd3 	bl	8003078 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026d2:	e05b      	b.n	800278c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 faea 	bl	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e07b      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d034      	beq.n	800278c <HAL_I2C_Master_Transmit+0x184>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d130      	bne.n	800278c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fa7c 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e04d      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2bff      	cmp	r3, #255	; 0xff
 800274c:	d90e      	bls.n	800276c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	22ff      	movs	r2, #255	; 0xff
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	b2da      	uxtb	r2, r3
 800275a:	8979      	ldrh	r1, [r7, #10]
 800275c:	2300      	movs	r3, #0
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fc87 	bl	8003078 <I2C_TransferConfig>
 800276a:	e00f      	b.n	800278c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	b2da      	uxtb	r2, r3
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	2300      	movs	r3, #0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fc76 	bl	8003078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d19e      	bne.n	80026d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	6a39      	ldr	r1, [r7, #32]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fac9 	bl	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01a      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2220      	movs	r2, #32
 80027b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_I2C_Master_Transmit+0x1e4>)
 80027be:	400b      	ands	r3, r1
 80027c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	80002000 	.word	0x80002000
 80027ec:	fe00e800 	.word	0xfe00e800

080027f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	460b      	mov	r3, r1
 80027fe:	817b      	strh	r3, [r7, #10]
 8002800:	4613      	mov	r3, r2
 8002802:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b20      	cmp	r3, #32
 800280e:	f040 80db 	bne.w	80029c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_I2C_Master_Receive+0x30>
 800281c:	2302      	movs	r3, #2
 800281e:	e0d4      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002828:	f7ff fb86 	bl	8001f38 <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2319      	movs	r3, #25
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f9f9 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0bf      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2222      	movs	r2, #34	; 0x22
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2210      	movs	r2, #16
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	893a      	ldrh	r2, [r7, #8]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d90e      	bls.n	800289a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	4b52      	ldr	r3, [pc, #328]	; (80029d4 <HAL_I2C_Master_Receive+0x1e4>)
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fbf0 	bl	8003078 <I2C_TransferConfig>
 8002898:	e06d      	b.n	8002976 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_I2C_Master_Receive+0x1e4>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fbdf 	bl	8003078 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028ba:	e05c      	b.n	8002976 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fa73 	bl	8002dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e07c      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d034      	beq.n	8002976 <HAL_I2C_Master_Receive+0x186>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d130      	bne.n	8002976 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2200      	movs	r2, #0
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f987 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e04d      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	2bff      	cmp	r3, #255	; 0xff
 8002936:	d90e      	bls.n	8002956 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	22ff      	movs	r2, #255	; 0xff
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	b2da      	uxtb	r2, r3
 8002944:	8979      	ldrh	r1, [r7, #10]
 8002946:	2300      	movs	r3, #0
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fb92 	bl	8003078 <I2C_TransferConfig>
 8002954:	e00f      	b.n	8002976 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	b2da      	uxtb	r2, r3
 8002966:	8979      	ldrh	r1, [r7, #10]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fb81 	bl	8003078 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d19d      	bne.n	80028bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6a39      	ldr	r1, [r7, #32]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9d4 	bl	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e01a      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2220      	movs	r2, #32
 800299a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_I2C_Master_Receive+0x1e8>)
 80029a8:	400b      	ands	r3, r1
 80029aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	80002400 	.word	0x80002400
 80029d8:	fe00e800 	.word	0xfe00e800

080029dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 80f1 	bne.w	8002be0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0e7      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2C_IsDeviceReady+0x44>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0e0      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d107      	bne.n	8002a4e <HAL_I2C_IsDeviceReady+0x72>
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a4c:	e004      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x7c>
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a5e:	f7ff fa6b 	bl	8001f38 <HAL_GetTick>
 8002a62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a90:	e034      	b.n	8002afc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d01a      	beq.n	8002ad0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7ff fa4d 	bl	8001f38 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <HAL_I2C_IsDeviceReady+0xd4>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e088      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_I2C_IsDeviceReady+0x12c>
 8002b02:	7fbb      	ldrb	r3, [r7, #30]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0c4      	beq.n	8002a92 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d01a      	beq.n	8002b4c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2120      	movs	r1, #32
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f886 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e058      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e04a      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2120      	movs	r1, #32
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f86b 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e03d      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d118      	bne.n	8002bb0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2120      	movs	r1, #32
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f84a 	bl	8002c32 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e01c      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2220      	movs	r2, #32
 8002bae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f63f af3b 	bhi.w	8002a36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d103      	bne.n	8002c08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d007      	beq.n	8002c26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	619a      	str	r2, [r3, #24]
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c42:	e022      	b.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d01e      	beq.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7ff f974 	bl	8001f38 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d113      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00f      	b.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d0cd      	beq.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cbe:	e02c      	b.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f8eb 	bl	8002ea0 <I2C_IsErrorOccurred>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e02a      	b.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d01e      	beq.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cdc:	f7ff f92c 	bl	8001f38 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d302      	bcc.n	8002cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d113      	bne.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e007      	b.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d1cb      	bne.n	8002cc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3e:	e028      	b.n	8002d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f8ab 	bl	8002ea0 <I2C_IsErrorOccurred>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e026      	b.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7ff f8f0 	bl	8001f38 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d1cf      	bne.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db8:	e064      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f86e 	bl	8002ea0 <I2C_IsErrorOccurred>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e062      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d138      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d105      	bne.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e04e      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d107      	bne.n	8002e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2204      	movs	r2, #4
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
 8002e12:	e002      	b.n	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002e2e:	400b      	ands	r3, r1
 8002e30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e022      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7ff f873 	bl	8001f38 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10f      	bne.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d193      	bne.n	8002dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d075      	beq.n	8002fb8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ed4:	e056      	b.n	8002f84 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d052      	beq.n	8002f84 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff f82b 	bl	8001f38 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_IsErrorOccurred+0x54>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d147      	bne.n	8002f84 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f16:	d12e      	bne.n	8002f76 <I2C_IsErrorOccurred+0xd6>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f1e:	d02a      	beq.n	8002f76 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d027      	beq.n	8002f76 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f34:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f36:	f7fe ffff 	bl	8001f38 <HAL_GetTick>
 8002f3a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3c:	e01b      	b.n	8002f76 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f3e:	f7fe fffb 	bl	8001f38 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b19      	cmp	r3, #25
 8002f4a:	d914      	bls.n	8002f76 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d1dc      	bne.n	8002f3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d003      	beq.n	8002f9a <I2C_IsErrorOccurred+0xfa>
 8002f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d09d      	beq.n	8002ed6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ffc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fddb 	bl	8002bea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <I2C_IsErrorOccurred+0x1d4>)
 8003040:	400b      	ands	r3, r1
 8003042:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	4613      	mov	r3, r2
 8003088:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003090:	7a7b      	ldrb	r3, [r7, #9]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003098:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	0d5b      	lsrs	r3, r3, #21
 80030b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <I2C_TransferConfig+0x60>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	43db      	mvns	r3, r3
 80030bc:	ea02 0103 	and.w	r1, r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	03ff63ff 	.word	0x03ff63ff

080030dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d138      	bne.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e032      	b.n	8003166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800312e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	d139      	bne.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003192:	2302      	movs	r3, #2
 8003194:	e033      	b.n	80031fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2224      	movs	r2, #36	; 0x24
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <HAL_PWREx_GetVoltageRange+0x18>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40007000 	.word	0x40007000

08003228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d130      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d038      	beq.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003254:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2232      	movs	r2, #50	; 0x32
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326c:	e002      	b.n	8003274 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d102      	bne.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f2      	bne.n	800326e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d110      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e00f      	b.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d007      	beq.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40007000 	.word	0x40007000
 80032cc:	20000000 	.word	0x20000000
 80032d0:	431bde83 	.word	0x431bde83

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e3d4      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e6:	4ba1      	ldr	r3, [pc, #644]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f0:	4b9e      	ldr	r3, [pc, #632]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80e4 	beq.w	80034d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_RCC_OscConfig+0x4a>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	f040 808b 	bne.w	800342c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 8087 	bne.w	800342c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800331e:	4b93      	ldr	r3, [pc, #588]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x62>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e3ac      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1a      	ldr	r2, [r3, #32]
 800333a:	4b8c      	ldr	r3, [pc, #560]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_RCC_OscConfig+0x7c>
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800334e:	e005      	b.n	800335c <HAL_RCC_OscConfig+0x88>
 8003350:	4b86      	ldr	r3, [pc, #536]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335c:	4293      	cmp	r3, r2
 800335e:	d223      	bcs.n	80033a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fd41 	bl	8003dec <RCC_SetFlashLatencyFromMSIRange>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e38d      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003374:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800337a:	f043 0308 	orr.w	r3, r3, #8
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4977      	ldr	r1, [pc, #476]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	4972      	ldr	r1, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
 80033a6:	e025      	b.n	80033f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a8:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033ae:	f043 0308 	orr.w	r3, r3, #8
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	496a      	ldr	r1, [pc, #424]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c6:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4965      	ldr	r1, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fd01 	bl	8003dec <RCC_SetFlashLatencyFromMSIRange>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e34d      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f4:	f000 fc36 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	495a      	ldr	r1, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x29c>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x2a0>)
 8003412:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_RCC_OscConfig+0x2a4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe fd3d 	bl	8001e98 <HAL_InitTick>
 800341e:	4603      	mov	r3, r0
 8003420:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d052      	beq.n	80034ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	e331      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d032      	beq.n	800349a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4c      	ldr	r2, [pc, #304]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003440:	f7fe fd7a 	bl	8001f38 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003448:	f7fe fd76 	bl	8001f38 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e31a      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	493b      	ldr	r1, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	4936      	ldr	r1, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e01a      	b.n	80034d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a33      	ldr	r2, [pc, #204]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fd47 	bl	8001f38 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ae:	f7fe fd43 	bl	8001f38 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e2e7      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x1da>
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d074      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x21a>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d10e      	bne.n	8003506 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d10b      	bne.n	8003506 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_RCC_OscConfig+0x298>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d064      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d160      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e2c4      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x24a>
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e01d      	b.n	800355a <HAL_RCC_OscConfig+0x286>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x26e>
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0f      	ldr	r2, [pc, #60]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800352e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0c      	ldr	r2, [pc, #48]	; (800356c <HAL_RCC_OscConfig+0x298>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x286>
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x298>)
 8003554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01c      	beq.n	800359c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fce9 	bl	8001f38 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003568:	e011      	b.n	800358e <HAL_RCC_OscConfig+0x2ba>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	0800805c 	.word	0x0800805c
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7fe fcdc 	bl	8001f38 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e280      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358e:	4baf      	ldr	r3, [pc, #700]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x2a8>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fccc 	bl	8001f38 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fcc8 	bl	8001f38 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e26c      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b6:	4ba5      	ldr	r3, [pc, #660]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x2d0>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d060      	beq.n	8003694 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x310>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d119      	bne.n	8003612 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d116      	bne.n	8003612 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e4:	4b99      	ldr	r3, [pc, #612]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x328>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e249      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b93      	ldr	r3, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	4990      	ldr	r1, [pc, #576]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	e040      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d023      	beq.n	8003662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800361a:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8b      	ldr	r2, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fe fc87 	bl	8001f38 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe fc83 	bl	8001f38 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e227      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	4b82      	ldr	r3, [pc, #520]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b7f      	ldr	r3, [pc, #508]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	497c      	ldr	r1, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	e018      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b7a      	ldr	r3, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a79      	ldr	r2, [pc, #484]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fc63 	bl	8001f38 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe fc5f 	bl	8001f38 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e203      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003688:	4b70      	ldr	r3, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03c      	beq.n	800371a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a8:	4b68      	ldr	r3, [pc, #416]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	4a67      	ldr	r2, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fc3e 	bl	8001f38 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe fc3a 	bl	8001f38 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1de      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d2:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCC_OscConfig+0x3ec>
 80036e0:	e01b      	b.n	800371a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e2:	4b5a      	ldr	r3, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e8:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe fc21 	bl	8001f38 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe fc1d 	bl	8001f38 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1c1      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ef      	bne.n	80036fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80a6 	beq.w	8003874 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800372c:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b44      	ldr	r3, [pc, #272]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCC_OscConfig+0x578>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d118      	bne.n	8003792 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003760:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376c:	f7fe fbe4 	bl	8001f38 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe fbe0 	bl	8001f38 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e184      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_RCC_OscConfig+0x57c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d108      	bne.n	80037ac <HAL_RCC_OscConfig+0x4d8>
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037aa:	e024      	b.n	80037f6 <HAL_RCC_OscConfig+0x522>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d110      	bne.n	80037d6 <HAL_RCC_OscConfig+0x502>
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d4:	e00f      	b.n	80037f6 <HAL_RCC_OscConfig+0x522>
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_RCC_OscConfig+0x578>)
 80037ee:	f023 0304 	bic.w	r3, r3, #4
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe fb9b 	bl	8001f38 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe fb97 	bl	8001f38 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e139      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x578>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ed      	beq.n	8003806 <HAL_RCC_OscConfig+0x532>
 800382a:	e01a      	b.n	8003862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe fb84 	bl	8001f38 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003832:	e00f      	b.n	8003854 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe fb80 	bl	8001f38 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d906      	bls.n	8003854 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e122      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003854:	4b90      	ldr	r3, [pc, #576]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e8      	bne.n	8003834 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003862:	7ffb      	ldrb	r3, [r7, #31]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	4a8a      	ldr	r2, [pc, #552]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003872:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8108 	beq.w	8003a8e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	2b02      	cmp	r3, #2
 8003884:	f040 80d0 	bne.w	8003a28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003888:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0203 	and.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	429a      	cmp	r2, r3
 800389a:	d130      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	3b01      	subs	r3, #1
 80038a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d127      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d11f      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c8:	2a07      	cmp	r2, #7
 80038ca:	bf14      	ite	ne
 80038cc:	2201      	movne	r2, #1
 80038ce:	2200      	moveq	r2, #0
 80038d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d113      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d06e      	beq.n	80039dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d069      	beq.n	80039d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003904:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b7      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003920:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800392c:	f7fe fb04 	bl	8001f38 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fb00 	bl	8001f38 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0a4      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003946:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <HAL_RCC_OscConfig+0x7c8>)
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003962:	3a01      	subs	r2, #1
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	4311      	orrs	r1, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800396c:	0212      	lsls	r2, r2, #8
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003974:	0852      	lsrs	r2, r2, #1
 8003976:	3a01      	subs	r2, #1
 8003978:	0552      	lsls	r2, r2, #21
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003980:	0852      	lsrs	r2, r2, #1
 8003982:	3a01      	subs	r2, #1
 8003984:	0652      	lsls	r2, r2, #25
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800398c:	0912      	lsrs	r2, r2, #4
 800398e:	0452      	lsls	r2, r2, #17
 8003990:	430a      	orrs	r2, r1
 8003992:	4941      	ldr	r1, [pc, #260]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a3e      	ldr	r2, [pc, #248]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b0:	f7fe fac2 	bl	8001f38 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fabe 	bl	8001f38 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e062      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d6:	e05a      	b.n	8003a8e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e059      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d152      	bne.n	8003a8e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a00:	f7fe fa9a 	bl	8001f38 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fa96 	bl	8001f38 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e03a      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x734>
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d02d      	beq.n	8003a8a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a4c:	f023 0303 	bic.w	r3, r3, #3
 8003a50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa69 	bl	8001f38 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fa65 	bl	8001f38 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e009      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_OscConfig+0x7c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCC_OscConfig+0x796>
 8003a88:	e001      	b.n	8003a8e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	f99d808c 	.word	0xf99d808c

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0c8      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0207 	bic.w	r2, r3, #7
 8003aca:	4961      	ldr	r1, [pc, #388]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b5f      	ldr	r3, [pc, #380]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b0      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d04c      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d121      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e09e      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e092      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e086      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e07e      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 0203 	bic.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	493f      	ldr	r1, [pc, #252]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5a:	f7fe f9ed 	bl	8001f38 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b62:	f7fe f9e9 	bl	8001f38 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e066      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 020c 	and.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d1eb      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	492c      	ldr	r1, [pc, #176]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d210      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	4924      	ldr	r1, [pc, #144]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e036      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4918      	ldr	r1, [pc, #96]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4910      	ldr	r1, [pc, #64]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c16:	f000 f825 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_RCC_ClockConfig+0x1b4>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490c      	ldr	r1, [pc, #48]	; (8003c58 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe f92c 	bl	8001e98 <HAL_InitTick>
 8003c40:	4603      	mov	r3, r0
 8003c42:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40021000 	.word	0x40021000
 8003c58:	0800805c 	.word	0x0800805c
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d121      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d11e      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c98:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10d      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e004      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce8:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d134      	bne.n	8003d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d003      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xac>
 8003d08:	e005      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d0c:	617b      	str	r3, [r7, #20]
      break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d12:	617b      	str	r3, [r7, #20]
      break;
 8003d14:	e002      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	617b      	str	r3, [r7, #20]
      break;
 8003d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	3301      	adds	r3, #1
 8003d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	fb02 f203 	mul.w	r2, r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	0e5b      	lsrs	r3, r3, #25
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08008074 	.word	0x08008074
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200

08003d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4904      	ldr	r1, [pc, #16]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0800806c 	.word	0x0800806c

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dc4:	f7ff ffda 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0adb      	lsrs	r3, r3, #11
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4904      	ldr	r1, [pc, #16]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	0800806c 	.word	0x0800806c

08003dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e04:	f7ff fa02 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003e08:	6178      	str	r0, [r7, #20]
 8003e0a:	e014      	b.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e24:	f7ff f9f2 	bl	800320c <HAL_PWREx_GetVoltageRange>
 8003e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d10b      	bne.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d919      	bls.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2ba0      	cmp	r3, #160	; 0xa0
 8003e48:	d902      	bls.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e013      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e50:	2301      	movs	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e010      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d902      	bls.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e00a      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d102      	bne.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e68:	2302      	movs	r3, #2
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e004      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d101      	bne.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e74:	2301      	movs	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 0207 	bic.w	r2, r3, #7
 8003e80:	4909      	ldr	r1, [pc, #36]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40022000 	.word	0x40022000

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d041      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed0:	d02a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ed2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ed6:	d824      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ee2:	d81e      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eec:	d010      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eee:	e018      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ef0:	4b86      	ldr	r3, [pc, #536]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a85      	ldr	r2, [pc, #532]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003efc:	e015      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fabb 	bl	8004480 <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0e:	e00c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3320      	adds	r3, #32
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fba6 	bl	8004668 <RCCEx_PLLSAI2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	74fb      	strb	r3, [r7, #19]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f30:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3e:	4973      	ldr	r1, [pc, #460]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f46:	e001      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d041      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f60:	d02a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f66:	d824      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f72:	d81e      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f7c:	d010      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f7e:	e018      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4a61      	ldr	r2, [pc, #388]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f8c:	e015      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa73 	bl	8004480 <RCCEx_PLLSAI1_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f9e:	e00c      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fb5e 	bl	8004668 <RCCEx_PLLSAI2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fce:	494f      	ldr	r1, [pc, #316]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fd6:	e001      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a0 	beq.w	800412a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	4a40      	ldr	r2, [pc, #256]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6593      	str	r3, [r2, #88]	; 0x58
 8004010:	4b3e      	ldr	r3, [pc, #248]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401c:	2301      	movs	r3, #1
 800401e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3a      	ldr	r2, [pc, #232]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402c:	f7fd ff84 	bl	8001f38 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004032:	e009      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004034:	f7fd ff80 	bl	8001f38 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	74fb      	strb	r3, [r7, #19]
        break;
 8004046:	e005      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004048:	4b31      	ldr	r3, [pc, #196]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d15c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01f      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d019      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004078:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	4a20      	ldr	r2, [pc, #128]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a1c      	ldr	r2, [pc, #112]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040a4:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fd ff3f 	bl	8001f38 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040bc:	e00b      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040be:	f7fd ff3b 	bl	8001f38 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d902      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	74fb      	strb	r3, [r7, #19]
            break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ec      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fa:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004118:	7c7b      	ldrb	r3, [r7, #17]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411e:	4b9e      	ldr	r3, [pc, #632]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	4a9d      	ldr	r2, [pc, #628]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004136:	4b98      	ldr	r3, [pc, #608]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f023 0203 	bic.w	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	4994      	ldr	r1, [pc, #592]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004158:	4b8f      	ldr	r3, [pc, #572]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 020c 	bic.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	498c      	ldr	r1, [pc, #560]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800417a:	4b87      	ldr	r3, [pc, #540]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4983      	ldr	r1, [pc, #524]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	497b      	ldr	r1, [pc, #492]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041be:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	4972      	ldr	r1, [pc, #456]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e0:	4b6d      	ldr	r3, [pc, #436]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	496a      	ldr	r1, [pc, #424]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004202:	4b65      	ldr	r3, [pc, #404]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	4961      	ldr	r1, [pc, #388]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004224:	4b5c      	ldr	r3, [pc, #368]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	4959      	ldr	r1, [pc, #356]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004246:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	4950      	ldr	r1, [pc, #320]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	4948      	ldr	r1, [pc, #288]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428a:	4b43      	ldr	r3, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	493f      	ldr	r1, [pc, #252]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d028      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ac:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ba:	4937      	ldr	r1, [pc, #220]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ca:	d106      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a31      	ldr	r2, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
 80042d8:	e011      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042e2:	d10c      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f8c8 	bl	8004480 <RCCEx_PLLSAI1_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d028      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	491f      	ldr	r1, [pc, #124]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d106      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004334:	60d3      	str	r3, [r2, #12]
 8004336:	e011      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004340:	d10c      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f899 	bl	8004480 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004376:	4908      	ldr	r1, [pc, #32]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004386:	d109      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a02      	ldr	r2, [pc, #8]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004392:	60d3      	str	r3, [r2, #12]
 8004394:	e014      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f867 	bl	8004480 <RCCEx_PLLSAI1_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02f      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043cc:	4b2b      	ldr	r3, [pc, #172]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043da:	4928      	ldr	r1, [pc, #160]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ea:	d10d      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f844 	bl	8004480 <RCCEx_PLLSAI1_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d014      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	74bb      	strb	r3, [r7, #18]
 8004406:	e011      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3320      	adds	r3, #32
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f925 	bl	8004668 <RCCEx_PLLSAI2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004446:	490d      	ldr	r1, [pc, #52]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004472:	7cbb      	ldrb	r3, [r7, #18]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000

08004480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800448e:	4b75      	ldr	r3, [pc, #468]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800449a:	4b72      	ldr	r3, [pc, #456]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
       ||
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044b2:	4b6c      	ldr	r3, [pc, #432]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
       ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d047      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e044      	b.n	8004556 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d018      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0x86>
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d825      	bhi.n	8004524 <RCCEx_PLLSAI1_Config+0xa4>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d002      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0x62>
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d009      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x74>
 80044e0:	e020      	b.n	8004524 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e2:	4b60      	ldr	r3, [pc, #384]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f2:	e01a      	b.n	800452a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004504:	e013      	b.n	800452e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004506:	4b57      	ldr	r3, [pc, #348]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004522:	e006      	b.n	8004532 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      break;
 8004528:	e004      	b.n	8004534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004532:	bf00      	nop
    }

    if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800453a:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	430b      	orrs	r3, r1
 8004550:	4944      	ldr	r1, [pc, #272]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d17d      	bne.n	8004658 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800455c:	4b41      	ldr	r3, [pc, #260]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a40      	ldr	r2, [pc, #256]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fd fce6 	bl	8001f38 <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004570:	f7fd fce2 	bl	8001f38 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
        break;
 8004582:	e005      	b.n	8004590 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004584:	4b37      	ldr	r3, [pc, #220]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ef      	bne.n	8004570 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d160      	bne.n	8004658 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	0211      	lsls	r1, r2, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	0912      	lsrs	r2, r2, #4
 80045b4:	0452      	lsls	r2, r2, #17
 80045b6:	430a      	orrs	r2, r1
 80045b8:	492a      	ldr	r1, [pc, #168]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]
 80045be:	e027      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d112      	bne.n	80045ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	0211      	lsls	r1, r2, #8
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6912      	ldr	r2, [r2, #16]
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	3a01      	subs	r2, #1
 80045e0:	0552      	lsls	r2, r2, #21
 80045e2:	430a      	orrs	r2, r1
 80045e4:	491f      	ldr	r1, [pc, #124]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	610b      	str	r3, [r1, #16]
 80045ea:	e011      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ec:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6892      	ldr	r2, [r2, #8]
 80045fc:	0211      	lsls	r1, r2, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6952      	ldr	r2, [r2, #20]
 8004602:	0852      	lsrs	r2, r2, #1
 8004604:	3a01      	subs	r2, #1
 8004606:	0652      	lsls	r2, r2, #25
 8004608:	430a      	orrs	r2, r1
 800460a:	4916      	ldr	r1, [pc, #88]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fd fc8c 	bl	8001f38 <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004622:	e009      	b.n	8004638 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004624:	f7fd fc88 	bl	8001f38 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d902      	bls.n	8004638 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	73fb      	strb	r3, [r7, #15]
          break;
 8004636:	e005      	b.n	8004644 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ef      	beq.n	8004624 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	4904      	ldr	r1, [pc, #16]	; (8004664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000

08004668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004676:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004682:	4b67      	ldr	r3, [pc, #412]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0203 	and.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d10d      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
       ||
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800469a:	4b61      	ldr	r3, [pc, #388]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
       ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d047      	beq.n	800473e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	e044      	b.n	800473e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d018      	beq.n	80046ee <RCCEx_PLLSAI2_Config+0x86>
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d825      	bhi.n	800470c <RCCEx_PLLSAI2_Config+0xa4>
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d002      	beq.n	80046ca <RCCEx_PLLSAI2_Config+0x62>
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d009      	beq.n	80046dc <RCCEx_PLLSAI2_Config+0x74>
 80046c8:	e020      	b.n	800470c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ca:	4b55      	ldr	r3, [pc, #340]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11d      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046da:	e01a      	b.n	8004712 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d116      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ec:	e013      	b.n	8004716 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046fa:	4b49      	ldr	r3, [pc, #292]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800470a:	e006      	b.n	800471a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	e004      	b.n	800471c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004712:	bf00      	nop
 8004714:	e002      	b.n	800471c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800471a:	bf00      	nop
    }

    if(status == HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	430b      	orrs	r3, r1
 8004738:	4939      	ldr	r1, [pc, #228]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d167      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004744:	4b36      	ldr	r3, [pc, #216]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a35      	ldr	r2, [pc, #212]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004750:	f7fd fbf2 	bl	8001f38 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004756:	e009      	b.n	800476c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004758:	f7fd fbee 	bl	8001f38 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	73fb      	strb	r3, [r7, #15]
        break;
 800476a:	e005      	b.n	8004778 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800476c:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ef      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d14a      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d111      	bne.n	80047a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004784:	4b26      	ldr	r3, [pc, #152]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6892      	ldr	r2, [r2, #8]
 8004794:	0211      	lsls	r1, r2, #8
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68d2      	ldr	r2, [r2, #12]
 800479a:	0912      	lsrs	r2, r2, #4
 800479c:	0452      	lsls	r2, r2, #17
 800479e:	430a      	orrs	r2, r1
 80047a0:	491f      	ldr	r1, [pc, #124]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	614b      	str	r3, [r1, #20]
 80047a6:	e011      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	0211      	lsls	r1, r2, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6912      	ldr	r2, [r2, #16]
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0652      	lsls	r2, r2, #25
 80047c4:	430a      	orrs	r2, r1
 80047c6:	4916      	ldr	r1, [pc, #88]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a13      	ldr	r2, [pc, #76]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fd fbae 	bl	8001f38 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e0:	f7fd fbaa 	bl	8001f38 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
          break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	4313      	orrs	r3, r2
 8004812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e040      	b.n	80048b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd fa80 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8c0 	bl	80049e8 <UART_SetConfig>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fb3e 	bl	8004efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fbc5 	bl	8005040 <UART_CheckIdleState>
 80048b6:	4603      	mov	r3, r0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	f040 8082 	bne.w	80049de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_Transmit+0x26>
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07a      	b.n	80049e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit+0x38>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e073      	b.n	80049e0 <HAL_UART_Transmit+0x120>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2221      	movs	r2, #33	; 0x21
 800490c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fd fb13 	bl	8001f38 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d108      	bne.n	8004940 <HAL_UART_Transmit+0x80>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e003      	b.n	8004948 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004950:	e02d      	b.n	80049ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fbb8 	bl	80050d2 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e039      	b.n	80049e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	881a      	ldrh	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497e:	b292      	uxth	r2, r2
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3302      	adds	r3, #2
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	e008      	b.n	800499c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b292      	uxth	r2, r2
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1cb      	bne.n	8004952 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fb84 	bl	80050d2 <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e005      	b.n	80049e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b5b0      	push	{r4, r5, r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4bad      	ldr	r3, [pc, #692]	; (8004cc8 <UART_SetConfig+0x2e0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	69f9      	ldr	r1, [r7, #28]
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4aa2      	ldr	r2, [pc, #648]	; (8004ccc <UART_SetConfig+0x2e4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a99      	ldr	r2, [pc, #612]	; (8004cd0 <UART_SetConfig+0x2e8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d121      	bne.n	8004ab2 <UART_SetConfig+0xca>
 8004a6e:	4b99      	ldr	r3, [pc, #612]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d817      	bhi.n	8004aac <UART_SetConfig+0xc4>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0x9c>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004a9b 	.word	0x08004a9b
 8004a90:	08004aa7 	.word	0x08004aa7
 8004a94:	2301      	movs	r3, #1
 8004a96:	76fb      	strb	r3, [r7, #27]
 8004a98:	e0e7      	b.n	8004c6a <UART_SetConfig+0x282>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	76fb      	strb	r3, [r7, #27]
 8004a9e:	e0e4      	b.n	8004c6a <UART_SetConfig+0x282>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	76fb      	strb	r3, [r7, #27]
 8004aa4:	e0e1      	b.n	8004c6a <UART_SetConfig+0x282>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	76fb      	strb	r3, [r7, #27]
 8004aaa:	e0de      	b.n	8004c6a <UART_SetConfig+0x282>
 8004aac:	2310      	movs	r3, #16
 8004aae:	76fb      	strb	r3, [r7, #27]
 8004ab0:	e0db      	b.n	8004c6a <UART_SetConfig+0x282>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a88      	ldr	r2, [pc, #544]	; (8004cd8 <UART_SetConfig+0x2f0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d132      	bne.n	8004b22 <UART_SetConfig+0x13a>
 8004abc:	4b85      	ldr	r3, [pc, #532]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d828      	bhi.n	8004b1c <UART_SetConfig+0x134>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0xe8>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b05 	.word	0x08004b05
 8004ad4:	08004b1d 	.word	0x08004b1d
 8004ad8:	08004b1d 	.word	0x08004b1d
 8004adc:	08004b1d 	.word	0x08004b1d
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b1d 	.word	0x08004b1d
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b1d 	.word	0x08004b1d
 8004af0:	08004b0b 	.word	0x08004b0b
 8004af4:	08004b1d 	.word	0x08004b1d
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b1d 	.word	0x08004b1d
 8004b00:	08004b17 	.word	0x08004b17
 8004b04:	2300      	movs	r3, #0
 8004b06:	76fb      	strb	r3, [r7, #27]
 8004b08:	e0af      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	76fb      	strb	r3, [r7, #27]
 8004b0e:	e0ac      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b10:	2304      	movs	r3, #4
 8004b12:	76fb      	strb	r3, [r7, #27]
 8004b14:	e0a9      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b16:	2308      	movs	r3, #8
 8004b18:	76fb      	strb	r3, [r7, #27]
 8004b1a:	e0a6      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e0a3      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6d      	ldr	r2, [pc, #436]	; (8004cdc <UART_SetConfig+0x2f4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d120      	bne.n	8004b6e <UART_SetConfig+0x186>
 8004b2c:	4b69      	ldr	r3, [pc, #420]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b36:	2b30      	cmp	r3, #48	; 0x30
 8004b38:	d013      	beq.n	8004b62 <UART_SetConfig+0x17a>
 8004b3a:	2b30      	cmp	r3, #48	; 0x30
 8004b3c:	d814      	bhi.n	8004b68 <UART_SetConfig+0x180>
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d009      	beq.n	8004b56 <UART_SetConfig+0x16e>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d810      	bhi.n	8004b68 <UART_SetConfig+0x180>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <UART_SetConfig+0x168>
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d006      	beq.n	8004b5c <UART_SetConfig+0x174>
 8004b4e:	e00b      	b.n	8004b68 <UART_SetConfig+0x180>
 8004b50:	2300      	movs	r3, #0
 8004b52:	76fb      	strb	r3, [r7, #27]
 8004b54:	e089      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b56:	2302      	movs	r3, #2
 8004b58:	76fb      	strb	r3, [r7, #27]
 8004b5a:	e086      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	76fb      	strb	r3, [r7, #27]
 8004b60:	e083      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b62:	2308      	movs	r3, #8
 8004b64:	76fb      	strb	r3, [r7, #27]
 8004b66:	e080      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	76fb      	strb	r3, [r7, #27]
 8004b6c:	e07d      	b.n	8004c6a <UART_SetConfig+0x282>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a5b      	ldr	r2, [pc, #364]	; (8004ce0 <UART_SetConfig+0x2f8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d120      	bne.n	8004bba <UART_SetConfig+0x1d2>
 8004b78:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b82:	2bc0      	cmp	r3, #192	; 0xc0
 8004b84:	d013      	beq.n	8004bae <UART_SetConfig+0x1c6>
 8004b86:	2bc0      	cmp	r3, #192	; 0xc0
 8004b88:	d814      	bhi.n	8004bb4 <UART_SetConfig+0x1cc>
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d009      	beq.n	8004ba2 <UART_SetConfig+0x1ba>
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d810      	bhi.n	8004bb4 <UART_SetConfig+0x1cc>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <UART_SetConfig+0x1b4>
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d006      	beq.n	8004ba8 <UART_SetConfig+0x1c0>
 8004b9a:	e00b      	b.n	8004bb4 <UART_SetConfig+0x1cc>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	76fb      	strb	r3, [r7, #27]
 8004ba0:	e063      	b.n	8004c6a <UART_SetConfig+0x282>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	76fb      	strb	r3, [r7, #27]
 8004ba6:	e060      	b.n	8004c6a <UART_SetConfig+0x282>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	76fb      	strb	r3, [r7, #27]
 8004bac:	e05d      	b.n	8004c6a <UART_SetConfig+0x282>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	76fb      	strb	r3, [r7, #27]
 8004bb2:	e05a      	b.n	8004c6a <UART_SetConfig+0x282>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	76fb      	strb	r3, [r7, #27]
 8004bb8:	e057      	b.n	8004c6a <UART_SetConfig+0x282>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a49      	ldr	r2, [pc, #292]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d125      	bne.n	8004c10 <UART_SetConfig+0x228>
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd2:	d017      	beq.n	8004c04 <UART_SetConfig+0x21c>
 8004bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd8:	d817      	bhi.n	8004c0a <UART_SetConfig+0x222>
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bde:	d00b      	beq.n	8004bf8 <UART_SetConfig+0x210>
 8004be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be4:	d811      	bhi.n	8004c0a <UART_SetConfig+0x222>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <UART_SetConfig+0x20a>
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	d006      	beq.n	8004bfe <UART_SetConfig+0x216>
 8004bf0:	e00b      	b.n	8004c0a <UART_SetConfig+0x222>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	76fb      	strb	r3, [r7, #27]
 8004bf6:	e038      	b.n	8004c6a <UART_SetConfig+0x282>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	76fb      	strb	r3, [r7, #27]
 8004bfc:	e035      	b.n	8004c6a <UART_SetConfig+0x282>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	76fb      	strb	r3, [r7, #27]
 8004c02:	e032      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c04:	2308      	movs	r3, #8
 8004c06:	76fb      	strb	r3, [r7, #27]
 8004c08:	e02f      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	76fb      	strb	r3, [r7, #27]
 8004c0e:	e02c      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <UART_SetConfig+0x2e4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d125      	bne.n	8004c66 <UART_SetConfig+0x27e>
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <UART_SetConfig+0x2ec>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c28:	d017      	beq.n	8004c5a <UART_SetConfig+0x272>
 8004c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c2e:	d817      	bhi.n	8004c60 <UART_SetConfig+0x278>
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c34:	d00b      	beq.n	8004c4e <UART_SetConfig+0x266>
 8004c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3a:	d811      	bhi.n	8004c60 <UART_SetConfig+0x278>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <UART_SetConfig+0x260>
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c44:	d006      	beq.n	8004c54 <UART_SetConfig+0x26c>
 8004c46:	e00b      	b.n	8004c60 <UART_SetConfig+0x278>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	76fb      	strb	r3, [r7, #27]
 8004c4c:	e00d      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	76fb      	strb	r3, [r7, #27]
 8004c52:	e00a      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c54:	2304      	movs	r3, #4
 8004c56:	76fb      	strb	r3, [r7, #27]
 8004c58:	e007      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	76fb      	strb	r3, [r7, #27]
 8004c5e:	e004      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c60:	2310      	movs	r3, #16
 8004c62:	76fb      	strb	r3, [r7, #27]
 8004c64:	e001      	b.n	8004c6a <UART_SetConfig+0x282>
 8004c66:	2310      	movs	r3, #16
 8004c68:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <UART_SetConfig+0x2e4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	f040 8087 	bne.w	8004d84 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c76:	7efb      	ldrb	r3, [r7, #27]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d837      	bhi.n	8004cec <UART_SetConfig+0x304>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x29c>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004cb7 	.word	0x08004cb7
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004ced 	.word	0x08004ced
 8004ca4:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7ff f874 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004cac:	6178      	str	r0, [r7, #20]
        break;
 8004cae:	e022      	b.n	8004cf6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <UART_SetConfig+0x300>)
 8004cb2:	617b      	str	r3, [r7, #20]
        break;
 8004cb4:	e01f      	b.n	8004cf6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe ffd5 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8004cba:	6178      	str	r0, [r7, #20]
        break;
 8004cbc:	e01b      	b.n	8004cf6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	617b      	str	r3, [r7, #20]
        break;
 8004cc4:	e017      	b.n	8004cf6 <UART_SetConfig+0x30e>
 8004cc6:	bf00      	nop
 8004cc8:	efff69f3 	.word	0xefff69f3
 8004ccc:	40008000 	.word	0x40008000
 8004cd0:	40013800 	.word	0x40013800
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	40004800 	.word	0x40004800
 8004ce0:	40004c00 	.word	0x40004c00
 8004ce4:	40005000 	.word	0x40005000
 8004ce8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	76bb      	strb	r3, [r7, #26]
        break;
 8004cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80f1 	beq.w	8004ee0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d305      	bcc.n	8004d1a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d902      	bls.n	8004d20 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	76bb      	strb	r3, [r7, #26]
 8004d1e:	e0df      	b.n	8004ee0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	020b      	lsls	r3, r1, #8
 8004d32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d36:	0202      	lsls	r2, r0, #8
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	6849      	ldr	r1, [r1, #4]
 8004d3c:	0849      	lsrs	r1, r1, #1
 8004d3e:	4608      	mov	r0, r1
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	1814      	adds	r4, r2, r0
 8004d46:	eb43 0501 	adc.w	r5, r3, r1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb ff76 	bl	8000c48 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6a:	d308      	bcc.n	8004d7e <UART_SetConfig+0x396>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d72:	d204      	bcs.n	8004d7e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	60da      	str	r2, [r3, #12]
 8004d7c:	e0b0      	b.n	8004ee0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	76bb      	strb	r3, [r7, #26]
 8004d82:	e0ad      	b.n	8004ee0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8c:	d15b      	bne.n	8004e46 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004d8e:	7efb      	ldrb	r3, [r7, #27]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d828      	bhi.n	8004de6 <UART_SetConfig+0x3fe>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x3b4>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fe ffe8 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	6178      	str	r0, [r7, #20]
        break;
 8004dc6:	e013      	b.n	8004df0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe fffa 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	6178      	str	r0, [r7, #20]
        break;
 8004dce:	e00f      	b.n	8004df0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b49      	ldr	r3, [pc, #292]	; (8004ef8 <UART_SetConfig+0x510>)
 8004dd2:	617b      	str	r3, [r7, #20]
        break;
 8004dd4:	e00c      	b.n	8004df0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fe ff45 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8004dda:	6178      	str	r0, [r7, #20]
        break;
 8004ddc:	e008      	b.n	8004df0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	617b      	str	r3, [r7, #20]
        break;
 8004de4:	e004      	b.n	8004df0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	76bb      	strb	r3, [r7, #26]
        break;
 8004dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d074      	beq.n	8004ee0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005a      	lsls	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	441a      	add	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d916      	bls.n	8004e40 <UART_SetConfig+0x458>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d212      	bcs.n	8004e40 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f023 030f 	bic.w	r3, r3, #15
 8004e22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	89fb      	ldrh	r3, [r7, #14]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	89fa      	ldrh	r2, [r7, #14]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e04f      	b.n	8004ee0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	76bb      	strb	r3, [r7, #26]
 8004e44:	e04c      	b.n	8004ee0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e46:	7efb      	ldrb	r3, [r7, #27]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d828      	bhi.n	8004e9e <UART_SetConfig+0x4b6>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x46c>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e81 	.word	0x08004e81
 8004e5c:	08004e89 	.word	0x08004e89
 8004e60:	08004e9f 	.word	0x08004e9f
 8004e64:	08004e8f 	.word	0x08004e8f
 8004e68:	08004e9f 	.word	0x08004e9f
 8004e6c:	08004e9f 	.word	0x08004e9f
 8004e70:	08004e9f 	.word	0x08004e9f
 8004e74:	08004e97 	.word	0x08004e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7fe ff8c 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	6178      	str	r0, [r7, #20]
        break;
 8004e7e:	e013      	b.n	8004ea8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e80:	f7fe ff9e 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8004e84:	6178      	str	r0, [r7, #20]
        break;
 8004e86:	e00f      	b.n	8004ea8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <UART_SetConfig+0x510>)
 8004e8a:	617b      	str	r3, [r7, #20]
        break;
 8004e8c:	e00c      	b.n	8004ea8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8e:	f7fe fee9 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8004e92:	6178      	str	r0, [r7, #20]
        break;
 8004e94:	e008      	b.n	8004ea8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9a:	617b      	str	r3, [r7, #20]
        break;
 8004e9c:	e004      	b.n	8004ea8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	76bb      	strb	r3, [r7, #26]
        break;
 8004ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085a      	lsrs	r2, r3, #1
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d909      	bls.n	8004edc <UART_SetConfig+0x4f4>
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ece:	d205      	bcs.n	8004edc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	e001      	b.n	8004ee0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004eec:	7ebb      	ldrb	r3, [r7, #26]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01a      	beq.n	8005012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffa:	d10a      	bne.n	8005012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005050:	f7fc ff72 	bl	8001f38 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d10e      	bne.n	8005082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f82d 	bl	80050d2 <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e023      	b.n	80050ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d10e      	bne.n	80050ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f817 	bl	80050d2 <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e00d      	b.n	80050ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b09c      	sub	sp, #112	; 0x70
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e2:	e0a5      	b.n	8005230 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	f000 80a1 	beq.w	8005230 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ee:	f7fc ff23 	bl	8001f38 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d302      	bcc.n	8005104 <UART_WaitOnFlagUntilTimeout+0x32>
 80050fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005100:	2b00      	cmp	r3, #0
 8005102:	d13e      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005118:	667b      	str	r3, [r7, #100]	; 0x64
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005124:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e6      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	663b      	str	r3, [r7, #96]	; 0x60
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005156:	64ba      	str	r2, [r7, #72]	; 0x48
 8005158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800515c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e067      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d04f      	beq.n	8005230 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519e:	d147      	bne.n	8005230 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e6      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3308      	adds	r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	613b      	str	r3, [r7, #16]
   return(result);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051fc:	623a      	str	r2, [r7, #32]
 80051fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	61bb      	str	r3, [r7, #24]
   return(result);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e5      	bne.n	80051dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e010      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4013      	ands	r3, r2
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	bf0c      	ite	eq
 8005240:	2301      	moveq	r3, #1
 8005242:	2300      	movne	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	429a      	cmp	r2, r3
 800524c:	f43f af4a 	beq.w	80050e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3770      	adds	r7, #112	; 0x70
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <__errno>:
 800525c:	4b01      	ldr	r3, [pc, #4]	; (8005264 <__errno+0x8>)
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000c 	.word	0x2000000c

08005268 <__libc_init_array>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	4d0d      	ldr	r5, [pc, #52]	; (80052a0 <__libc_init_array+0x38>)
 800526c:	4c0d      	ldr	r4, [pc, #52]	; (80052a4 <__libc_init_array+0x3c>)
 800526e:	1b64      	subs	r4, r4, r5
 8005270:	10a4      	asrs	r4, r4, #2
 8005272:	2600      	movs	r6, #0
 8005274:	42a6      	cmp	r6, r4
 8005276:	d109      	bne.n	800528c <__libc_init_array+0x24>
 8005278:	4d0b      	ldr	r5, [pc, #44]	; (80052a8 <__libc_init_array+0x40>)
 800527a:	4c0c      	ldr	r4, [pc, #48]	; (80052ac <__libc_init_array+0x44>)
 800527c:	f002 feb6 	bl	8007fec <_init>
 8005280:	1b64      	subs	r4, r4, r5
 8005282:	10a4      	asrs	r4, r4, #2
 8005284:	2600      	movs	r6, #0
 8005286:	42a6      	cmp	r6, r4
 8005288:	d105      	bne.n	8005296 <__libc_init_array+0x2e>
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005290:	4798      	blx	r3
 8005292:	3601      	adds	r6, #1
 8005294:	e7ee      	b.n	8005274 <__libc_init_array+0xc>
 8005296:	f855 3b04 	ldr.w	r3, [r5], #4
 800529a:	4798      	blx	r3
 800529c:	3601      	adds	r6, #1
 800529e:	e7f2      	b.n	8005286 <__libc_init_array+0x1e>
 80052a0:	0800848c 	.word	0x0800848c
 80052a4:	0800848c 	.word	0x0800848c
 80052a8:	0800848c 	.word	0x0800848c
 80052ac:	08008490 	.word	0x08008490

080052b0 <memset>:
 80052b0:	4402      	add	r2, r0
 80052b2:	4603      	mov	r3, r0
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d100      	bne.n	80052ba <memset+0xa>
 80052b8:	4770      	bx	lr
 80052ba:	f803 1b01 	strb.w	r1, [r3], #1
 80052be:	e7f9      	b.n	80052b4 <memset+0x4>

080052c0 <__cvt>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	ec55 4b10 	vmov	r4, r5, d0
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	460e      	mov	r6, r1
 80052cc:	4619      	mov	r1, r3
 80052ce:	462b      	mov	r3, r5
 80052d0:	bfbb      	ittet	lt
 80052d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052d6:	461d      	movlt	r5, r3
 80052d8:	2300      	movge	r3, #0
 80052da:	232d      	movlt	r3, #45	; 0x2d
 80052dc:	700b      	strb	r3, [r1, #0]
 80052de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052e4:	4691      	mov	r9, r2
 80052e6:	f023 0820 	bic.w	r8, r3, #32
 80052ea:	bfbc      	itt	lt
 80052ec:	4622      	movlt	r2, r4
 80052ee:	4614      	movlt	r4, r2
 80052f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052f4:	d005      	beq.n	8005302 <__cvt+0x42>
 80052f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052fa:	d100      	bne.n	80052fe <__cvt+0x3e>
 80052fc:	3601      	adds	r6, #1
 80052fe:	2102      	movs	r1, #2
 8005300:	e000      	b.n	8005304 <__cvt+0x44>
 8005302:	2103      	movs	r1, #3
 8005304:	ab03      	add	r3, sp, #12
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	ab02      	add	r3, sp, #8
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	ec45 4b10 	vmov	d0, r4, r5
 8005310:	4653      	mov	r3, sl
 8005312:	4632      	mov	r2, r6
 8005314:	f000 fcec 	bl	8005cf0 <_dtoa_r>
 8005318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800531c:	4607      	mov	r7, r0
 800531e:	d102      	bne.n	8005326 <__cvt+0x66>
 8005320:	f019 0f01 	tst.w	r9, #1
 8005324:	d022      	beq.n	800536c <__cvt+0xac>
 8005326:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800532a:	eb07 0906 	add.w	r9, r7, r6
 800532e:	d110      	bne.n	8005352 <__cvt+0x92>
 8005330:	783b      	ldrb	r3, [r7, #0]
 8005332:	2b30      	cmp	r3, #48	; 0x30
 8005334:	d10a      	bne.n	800534c <__cvt+0x8c>
 8005336:	2200      	movs	r2, #0
 8005338:	2300      	movs	r3, #0
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fb fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005342:	b918      	cbnz	r0, 800534c <__cvt+0x8c>
 8005344:	f1c6 0601 	rsb	r6, r6, #1
 8005348:	f8ca 6000 	str.w	r6, [sl]
 800534c:	f8da 3000 	ldr.w	r3, [sl]
 8005350:	4499      	add	r9, r3
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800535e:	b108      	cbz	r0, 8005364 <__cvt+0xa4>
 8005360:	f8cd 900c 	str.w	r9, [sp, #12]
 8005364:	2230      	movs	r2, #48	; 0x30
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	454b      	cmp	r3, r9
 800536a:	d307      	bcc.n	800537c <__cvt+0xbc>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005370:	1bdb      	subs	r3, r3, r7
 8005372:	4638      	mov	r0, r7
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	b004      	add	sp, #16
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e7f0      	b.n	8005366 <__cvt+0xa6>

08005384 <__exponent>:
 8005384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005386:	4603      	mov	r3, r0
 8005388:	2900      	cmp	r1, #0
 800538a:	bfb8      	it	lt
 800538c:	4249      	neglt	r1, r1
 800538e:	f803 2b02 	strb.w	r2, [r3], #2
 8005392:	bfb4      	ite	lt
 8005394:	222d      	movlt	r2, #45	; 0x2d
 8005396:	222b      	movge	r2, #43	; 0x2b
 8005398:	2909      	cmp	r1, #9
 800539a:	7042      	strb	r2, [r0, #1]
 800539c:	dd2a      	ble.n	80053f4 <__exponent+0x70>
 800539e:	f10d 0407 	add.w	r4, sp, #7
 80053a2:	46a4      	mov	ip, r4
 80053a4:	270a      	movs	r7, #10
 80053a6:	46a6      	mov	lr, r4
 80053a8:	460a      	mov	r2, r1
 80053aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ae:	fb07 1516 	mls	r5, r7, r6, r1
 80053b2:	3530      	adds	r5, #48	; 0x30
 80053b4:	2a63      	cmp	r2, #99	; 0x63
 80053b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053be:	4631      	mov	r1, r6
 80053c0:	dcf1      	bgt.n	80053a6 <__exponent+0x22>
 80053c2:	3130      	adds	r1, #48	; 0x30
 80053c4:	f1ae 0502 	sub.w	r5, lr, #2
 80053c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053cc:	1c44      	adds	r4, r0, #1
 80053ce:	4629      	mov	r1, r5
 80053d0:	4561      	cmp	r1, ip
 80053d2:	d30a      	bcc.n	80053ea <__exponent+0x66>
 80053d4:	f10d 0209 	add.w	r2, sp, #9
 80053d8:	eba2 020e 	sub.w	r2, r2, lr
 80053dc:	4565      	cmp	r5, ip
 80053de:	bf88      	it	hi
 80053e0:	2200      	movhi	r2, #0
 80053e2:	4413      	add	r3, r2
 80053e4:	1a18      	subs	r0, r3, r0
 80053e6:	b003      	add	sp, #12
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053f2:	e7ed      	b.n	80053d0 <__exponent+0x4c>
 80053f4:	2330      	movs	r3, #48	; 0x30
 80053f6:	3130      	adds	r1, #48	; 0x30
 80053f8:	7083      	strb	r3, [r0, #2]
 80053fa:	70c1      	strb	r1, [r0, #3]
 80053fc:	1d03      	adds	r3, r0, #4
 80053fe:	e7f1      	b.n	80053e4 <__exponent+0x60>

08005400 <_printf_float>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	ed2d 8b02 	vpush	{d8}
 8005408:	b08d      	sub	sp, #52	; 0x34
 800540a:	460c      	mov	r4, r1
 800540c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005410:	4616      	mov	r6, r2
 8005412:	461f      	mov	r7, r3
 8005414:	4605      	mov	r5, r0
 8005416:	f001 fa57 	bl	80068c8 <_localeconv_r>
 800541a:	f8d0 a000 	ldr.w	sl, [r0]
 800541e:	4650      	mov	r0, sl
 8005420:	f7fa fed6 	bl	80001d0 <strlen>
 8005424:	2300      	movs	r3, #0
 8005426:	930a      	str	r3, [sp, #40]	; 0x28
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8d8 3000 	ldr.w	r3, [r8]
 8005430:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005434:	3307      	adds	r3, #7
 8005436:	f023 0307 	bic.w	r3, r3, #7
 800543a:	f103 0208 	add.w	r2, r3, #8
 800543e:	f8c8 2000 	str.w	r2, [r8]
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800544a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800544e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005452:	9307      	str	r3, [sp, #28]
 8005454:	f8cd 8018 	str.w	r8, [sp, #24]
 8005458:	ee08 0a10 	vmov	s16, r0
 800545c:	4b9f      	ldr	r3, [pc, #636]	; (80056dc <_printf_float+0x2dc>)
 800545e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	f7fb fb61 	bl	8000b2c <__aeabi_dcmpun>
 800546a:	bb88      	cbnz	r0, 80054d0 <_printf_float+0xd0>
 800546c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005470:	4b9a      	ldr	r3, [pc, #616]	; (80056dc <_printf_float+0x2dc>)
 8005472:	f04f 32ff 	mov.w	r2, #4294967295
 8005476:	f7fb fb3b 	bl	8000af0 <__aeabi_dcmple>
 800547a:	bb48      	cbnz	r0, 80054d0 <_printf_float+0xd0>
 800547c:	2200      	movs	r2, #0
 800547e:	2300      	movs	r3, #0
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb fb2a 	bl	8000adc <__aeabi_dcmplt>
 8005488:	b110      	cbz	r0, 8005490 <_printf_float+0x90>
 800548a:	232d      	movs	r3, #45	; 0x2d
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	4b93      	ldr	r3, [pc, #588]	; (80056e0 <_printf_float+0x2e0>)
 8005492:	4894      	ldr	r0, [pc, #592]	; (80056e4 <_printf_float+0x2e4>)
 8005494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005498:	bf94      	ite	ls
 800549a:	4698      	movls	r8, r3
 800549c:	4680      	movhi	r8, r0
 800549e:	2303      	movs	r3, #3
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	f023 0204 	bic.w	r2, r3, #4
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	f04f 0900 	mov.w	r9, #0
 80054ae:	9700      	str	r7, [sp, #0]
 80054b0:	4633      	mov	r3, r6
 80054b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f9d8 	bl	800586c <_printf_common>
 80054bc:	3001      	adds	r0, #1
 80054be:	f040 8090 	bne.w	80055e2 <_printf_float+0x1e2>
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	b00d      	add	sp, #52	; 0x34
 80054c8:	ecbd 8b02 	vpop	{d8}
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	4642      	mov	r2, r8
 80054d2:	464b      	mov	r3, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	4649      	mov	r1, r9
 80054d8:	f7fb fb28 	bl	8000b2c <__aeabi_dcmpun>
 80054dc:	b140      	cbz	r0, 80054f0 <_printf_float+0xf0>
 80054de:	464b      	mov	r3, r9
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bfbc      	itt	lt
 80054e4:	232d      	movlt	r3, #45	; 0x2d
 80054e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ea:	487f      	ldr	r0, [pc, #508]	; (80056e8 <_printf_float+0x2e8>)
 80054ec:	4b7f      	ldr	r3, [pc, #508]	; (80056ec <_printf_float+0x2ec>)
 80054ee:	e7d1      	b.n	8005494 <_printf_float+0x94>
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054f6:	9206      	str	r2, [sp, #24]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	d13f      	bne.n	800557c <_printf_float+0x17c>
 80054fc:	2306      	movs	r3, #6
 80054fe:	6063      	str	r3, [r4, #4]
 8005500:	9b05      	ldr	r3, [sp, #20]
 8005502:	6861      	ldr	r1, [r4, #4]
 8005504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005508:	2300      	movs	r3, #0
 800550a:	9303      	str	r3, [sp, #12]
 800550c:	ab0a      	add	r3, sp, #40	; 0x28
 800550e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005512:	ab09      	add	r3, sp, #36	; 0x24
 8005514:	ec49 8b10 	vmov	d0, r8, r9
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	6022      	str	r2, [r4, #0]
 800551c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005520:	4628      	mov	r0, r5
 8005522:	f7ff fecd 	bl	80052c0 <__cvt>
 8005526:	9b06      	ldr	r3, [sp, #24]
 8005528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800552a:	2b47      	cmp	r3, #71	; 0x47
 800552c:	4680      	mov	r8, r0
 800552e:	d108      	bne.n	8005542 <_printf_float+0x142>
 8005530:	1cc8      	adds	r0, r1, #3
 8005532:	db02      	blt.n	800553a <_printf_float+0x13a>
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	4299      	cmp	r1, r3
 8005538:	dd41      	ble.n	80055be <_printf_float+0x1be>
 800553a:	f1ab 0b02 	sub.w	fp, fp, #2
 800553e:	fa5f fb8b 	uxtb.w	fp, fp
 8005542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005546:	d820      	bhi.n	800558a <_printf_float+0x18a>
 8005548:	3901      	subs	r1, #1
 800554a:	465a      	mov	r2, fp
 800554c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005550:	9109      	str	r1, [sp, #36]	; 0x24
 8005552:	f7ff ff17 	bl	8005384 <__exponent>
 8005556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005558:	1813      	adds	r3, r2, r0
 800555a:	2a01      	cmp	r2, #1
 800555c:	4681      	mov	r9, r0
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	dc02      	bgt.n	8005568 <_printf_float+0x168>
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	07d2      	lsls	r2, r2, #31
 8005566:	d501      	bpl.n	800556c <_printf_float+0x16c>
 8005568:	3301      	adds	r3, #1
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005570:	2b00      	cmp	r3, #0
 8005572:	d09c      	beq.n	80054ae <_printf_float+0xae>
 8005574:	232d      	movs	r3, #45	; 0x2d
 8005576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557a:	e798      	b.n	80054ae <_printf_float+0xae>
 800557c:	9a06      	ldr	r2, [sp, #24]
 800557e:	2a47      	cmp	r2, #71	; 0x47
 8005580:	d1be      	bne.n	8005500 <_printf_float+0x100>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1bc      	bne.n	8005500 <_printf_float+0x100>
 8005586:	2301      	movs	r3, #1
 8005588:	e7b9      	b.n	80054fe <_printf_float+0xfe>
 800558a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800558e:	d118      	bne.n	80055c2 <_printf_float+0x1c2>
 8005590:	2900      	cmp	r1, #0
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	dd0b      	ble.n	80055ae <_printf_float+0x1ae>
 8005596:	6121      	str	r1, [r4, #16]
 8005598:	b913      	cbnz	r3, 80055a0 <_printf_float+0x1a0>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	07d0      	lsls	r0, r2, #31
 800559e:	d502      	bpl.n	80055a6 <_printf_float+0x1a6>
 80055a0:	3301      	adds	r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80055a8:	f04f 0900 	mov.w	r9, #0
 80055ac:	e7de      	b.n	800556c <_printf_float+0x16c>
 80055ae:	b913      	cbnz	r3, 80055b6 <_printf_float+0x1b6>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	07d2      	lsls	r2, r2, #31
 80055b4:	d501      	bpl.n	80055ba <_printf_float+0x1ba>
 80055b6:	3302      	adds	r3, #2
 80055b8:	e7f4      	b.n	80055a4 <_printf_float+0x1a4>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e7f2      	b.n	80055a4 <_printf_float+0x1a4>
 80055be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c4:	4299      	cmp	r1, r3
 80055c6:	db05      	blt.n	80055d4 <_printf_float+0x1d4>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	6121      	str	r1, [r4, #16]
 80055cc:	07d8      	lsls	r0, r3, #31
 80055ce:	d5ea      	bpl.n	80055a6 <_printf_float+0x1a6>
 80055d0:	1c4b      	adds	r3, r1, #1
 80055d2:	e7e7      	b.n	80055a4 <_printf_float+0x1a4>
 80055d4:	2900      	cmp	r1, #0
 80055d6:	bfd4      	ite	le
 80055d8:	f1c1 0202 	rsble	r2, r1, #2
 80055dc:	2201      	movgt	r2, #1
 80055de:	4413      	add	r3, r2
 80055e0:	e7e0      	b.n	80055a4 <_printf_float+0x1a4>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	055a      	lsls	r2, r3, #21
 80055e6:	d407      	bmi.n	80055f8 <_printf_float+0x1f8>
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	4642      	mov	r2, r8
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	d12c      	bne.n	8005650 <_printf_float+0x250>
 80055f6:	e764      	b.n	80054c2 <_printf_float+0xc2>
 80055f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055fc:	f240 80e0 	bls.w	80057c0 <_printf_float+0x3c0>
 8005600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	f7fb fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800560c:	2800      	cmp	r0, #0
 800560e:	d034      	beq.n	800567a <_printf_float+0x27a>
 8005610:	4a37      	ldr	r2, [pc, #220]	; (80056f0 <_printf_float+0x2f0>)
 8005612:	2301      	movs	r3, #1
 8005614:	4631      	mov	r1, r6
 8005616:	4628      	mov	r0, r5
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	f43f af51 	beq.w	80054c2 <_printf_float+0xc2>
 8005620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005624:	429a      	cmp	r2, r3
 8005626:	db02      	blt.n	800562e <_printf_float+0x22e>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	07d8      	lsls	r0, r3, #31
 800562c:	d510      	bpl.n	8005650 <_printf_float+0x250>
 800562e:	ee18 3a10 	vmov	r3, s16
 8005632:	4652      	mov	r2, sl
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f af41 	beq.w	80054c2 <_printf_float+0xc2>
 8005640:	f04f 0800 	mov.w	r8, #0
 8005644:	f104 091a 	add.w	r9, r4, #26
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	3b01      	subs	r3, #1
 800564c:	4543      	cmp	r3, r8
 800564e:	dc09      	bgt.n	8005664 <_printf_float+0x264>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	079b      	lsls	r3, r3, #30
 8005654:	f100 8105 	bmi.w	8005862 <_printf_float+0x462>
 8005658:	68e0      	ldr	r0, [r4, #12]
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	4298      	cmp	r0, r3
 800565e:	bfb8      	it	lt
 8005660:	4618      	movlt	r0, r3
 8005662:	e730      	b.n	80054c6 <_printf_float+0xc6>
 8005664:	2301      	movs	r3, #1
 8005666:	464a      	mov	r2, r9
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f af27 	beq.w	80054c2 <_printf_float+0xc2>
 8005674:	f108 0801 	add.w	r8, r8, #1
 8005678:	e7e6      	b.n	8005648 <_printf_float+0x248>
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	dc39      	bgt.n	80056f4 <_printf_float+0x2f4>
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <_printf_float+0x2f0>)
 8005682:	2301      	movs	r3, #1
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af19 	beq.w	80054c2 <_printf_float+0xc2>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	4313      	orrs	r3, r2
 8005696:	d102      	bne.n	800569e <_printf_float+0x29e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07d9      	lsls	r1, r3, #31
 800569c:	d5d8      	bpl.n	8005650 <_printf_float+0x250>
 800569e:	ee18 3a10 	vmov	r3, s16
 80056a2:	4652      	mov	r2, sl
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af09 	beq.w	80054c2 <_printf_float+0xc2>
 80056b0:	f04f 0900 	mov.w	r9, #0
 80056b4:	f104 0a1a 	add.w	sl, r4, #26
 80056b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ba:	425b      	negs	r3, r3
 80056bc:	454b      	cmp	r3, r9
 80056be:	dc01      	bgt.n	80056c4 <_printf_float+0x2c4>
 80056c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c2:	e792      	b.n	80055ea <_printf_float+0x1ea>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4652      	mov	r2, sl
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f aef7 	beq.w	80054c2 <_printf_float+0xc2>
 80056d4:	f109 0901 	add.w	r9, r9, #1
 80056d8:	e7ee      	b.n	80056b8 <_printf_float+0x2b8>
 80056da:	bf00      	nop
 80056dc:	7fefffff 	.word	0x7fefffff
 80056e0:	080080a8 	.word	0x080080a8
 80056e4:	080080ac 	.word	0x080080ac
 80056e8:	080080b4 	.word	0x080080b4
 80056ec:	080080b0 	.word	0x080080b0
 80056f0:	080080b8 	.word	0x080080b8
 80056f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f8:	429a      	cmp	r2, r3
 80056fa:	bfa8      	it	ge
 80056fc:	461a      	movge	r2, r3
 80056fe:	2a00      	cmp	r2, #0
 8005700:	4691      	mov	r9, r2
 8005702:	dc37      	bgt.n	8005774 <_printf_float+0x374>
 8005704:	f04f 0b00 	mov.w	fp, #0
 8005708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800570c:	f104 021a 	add.w	r2, r4, #26
 8005710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	eba3 0309 	sub.w	r3, r3, r9
 8005718:	455b      	cmp	r3, fp
 800571a:	dc33      	bgt.n	8005784 <_printf_float+0x384>
 800571c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005720:	429a      	cmp	r2, r3
 8005722:	db3b      	blt.n	800579c <_printf_float+0x39c>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	07da      	lsls	r2, r3, #31
 8005728:	d438      	bmi.n	800579c <_printf_float+0x39c>
 800572a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	eba2 0901 	sub.w	r9, r2, r1
 8005736:	4599      	cmp	r9, r3
 8005738:	bfa8      	it	ge
 800573a:	4699      	movge	r9, r3
 800573c:	f1b9 0f00 	cmp.w	r9, #0
 8005740:	dc35      	bgt.n	80057ae <_printf_float+0x3ae>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574a:	f104 0a1a 	add.w	sl, r4, #26
 800574e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	eba3 0309 	sub.w	r3, r3, r9
 8005758:	4543      	cmp	r3, r8
 800575a:	f77f af79 	ble.w	8005650 <_printf_float+0x250>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f aeaa 	beq.w	80054c2 <_printf_float+0xc2>
 800576e:	f108 0801 	add.w	r8, r8, #1
 8005772:	e7ec      	b.n	800574e <_printf_float+0x34e>
 8005774:	4613      	mov	r3, r2
 8005776:	4631      	mov	r1, r6
 8005778:	4642      	mov	r2, r8
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	d1c0      	bne.n	8005704 <_printf_float+0x304>
 8005782:	e69e      	b.n	80054c2 <_printf_float+0xc2>
 8005784:	2301      	movs	r3, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	9205      	str	r2, [sp, #20]
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f ae97 	beq.w	80054c2 <_printf_float+0xc2>
 8005794:	9a05      	ldr	r2, [sp, #20]
 8005796:	f10b 0b01 	add.w	fp, fp, #1
 800579a:	e7b9      	b.n	8005710 <_printf_float+0x310>
 800579c:	ee18 3a10 	vmov	r3, s16
 80057a0:	4652      	mov	r2, sl
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1be      	bne.n	800572a <_printf_float+0x32a>
 80057ac:	e689      	b.n	80054c2 <_printf_float+0xc2>
 80057ae:	9a05      	ldr	r2, [sp, #20]
 80057b0:	464b      	mov	r3, r9
 80057b2:	4442      	add	r2, r8
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	d1c1      	bne.n	8005742 <_printf_float+0x342>
 80057be:	e680      	b.n	80054c2 <_printf_float+0xc2>
 80057c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c2:	2a01      	cmp	r2, #1
 80057c4:	dc01      	bgt.n	80057ca <_printf_float+0x3ca>
 80057c6:	07db      	lsls	r3, r3, #31
 80057c8:	d538      	bpl.n	800583c <_printf_float+0x43c>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4642      	mov	r2, r8
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae74 	beq.w	80054c2 <_printf_float+0xc2>
 80057da:	ee18 3a10 	vmov	r3, s16
 80057de:	4652      	mov	r2, sl
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f ae6b 	beq.w	80054c2 <_printf_float+0xc2>
 80057ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80057f8:	b9d8      	cbnz	r0, 8005832 <_printf_float+0x432>
 80057fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fc:	f108 0201 	add.w	r2, r8, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	d10e      	bne.n	800582a <_printf_float+0x42a>
 800580c:	e659      	b.n	80054c2 <_printf_float+0xc2>
 800580e:	2301      	movs	r3, #1
 8005810:	4652      	mov	r2, sl
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	f43f ae52 	beq.w	80054c2 <_printf_float+0xc2>
 800581e:	f108 0801 	add.w	r8, r8, #1
 8005822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	4543      	cmp	r3, r8
 8005828:	dcf1      	bgt.n	800580e <_printf_float+0x40e>
 800582a:	464b      	mov	r3, r9
 800582c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005830:	e6dc      	b.n	80055ec <_printf_float+0x1ec>
 8005832:	f04f 0800 	mov.w	r8, #0
 8005836:	f104 0a1a 	add.w	sl, r4, #26
 800583a:	e7f2      	b.n	8005822 <_printf_float+0x422>
 800583c:	2301      	movs	r3, #1
 800583e:	4642      	mov	r2, r8
 8005840:	e7df      	b.n	8005802 <_printf_float+0x402>
 8005842:	2301      	movs	r3, #1
 8005844:	464a      	mov	r2, r9
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	f43f ae38 	beq.w	80054c2 <_printf_float+0xc2>
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	4543      	cmp	r3, r8
 800585e:	dcf0      	bgt.n	8005842 <_printf_float+0x442>
 8005860:	e6fa      	b.n	8005658 <_printf_float+0x258>
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	f104 0919 	add.w	r9, r4, #25
 800586a:	e7f4      	b.n	8005856 <_printf_float+0x456>

0800586c <_printf_common>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	4616      	mov	r6, r2
 8005872:	4699      	mov	r9, r3
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800587c:	4293      	cmp	r3, r2
 800587e:	bfb8      	it	lt
 8005880:	4613      	movlt	r3, r2
 8005882:	6033      	str	r3, [r6, #0]
 8005884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005888:	4607      	mov	r7, r0
 800588a:	460c      	mov	r4, r1
 800588c:	b10a      	cbz	r2, 8005892 <_printf_common+0x26>
 800588e:	3301      	adds	r3, #1
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	0699      	lsls	r1, r3, #26
 8005896:	bf42      	ittt	mi
 8005898:	6833      	ldrmi	r3, [r6, #0]
 800589a:	3302      	addmi	r3, #2
 800589c:	6033      	strmi	r3, [r6, #0]
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	f015 0506 	ands.w	r5, r5, #6
 80058a4:	d106      	bne.n	80058b4 <_printf_common+0x48>
 80058a6:	f104 0a19 	add.w	sl, r4, #25
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	6832      	ldr	r2, [r6, #0]
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dc26      	bgt.n	8005902 <_printf_common+0x96>
 80058b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b8:	1e13      	subs	r3, r2, #0
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	bf18      	it	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d42b      	bmi.n	800591c <_printf_common+0xb0>
 80058c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c8:	4649      	mov	r1, r9
 80058ca:	4638      	mov	r0, r7
 80058cc:	47c0      	blx	r8
 80058ce:	3001      	adds	r0, #1
 80058d0:	d01e      	beq.n	8005910 <_printf_common+0xa4>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	68e5      	ldr	r5, [r4, #12]
 80058d6:	6832      	ldr	r2, [r6, #0]
 80058d8:	f003 0306 	and.w	r3, r3, #6
 80058dc:	2b04      	cmp	r3, #4
 80058de:	bf08      	it	eq
 80058e0:	1aad      	subeq	r5, r5, r2
 80058e2:	68a3      	ldr	r3, [r4, #8]
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	bf0c      	ite	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	2500      	movne	r5, #0
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bfc4      	itt	gt
 80058f2:	1a9b      	subgt	r3, r3, r2
 80058f4:	18ed      	addgt	r5, r5, r3
 80058f6:	2600      	movs	r6, #0
 80058f8:	341a      	adds	r4, #26
 80058fa:	42b5      	cmp	r5, r6
 80058fc:	d11a      	bne.n	8005934 <_printf_common+0xc8>
 80058fe:	2000      	movs	r0, #0
 8005900:	e008      	b.n	8005914 <_printf_common+0xa8>
 8005902:	2301      	movs	r3, #1
 8005904:	4652      	mov	r2, sl
 8005906:	4649      	mov	r1, r9
 8005908:	4638      	mov	r0, r7
 800590a:	47c0      	blx	r8
 800590c:	3001      	adds	r0, #1
 800590e:	d103      	bne.n	8005918 <_printf_common+0xac>
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005918:	3501      	adds	r5, #1
 800591a:	e7c6      	b.n	80058aa <_printf_common+0x3e>
 800591c:	18e1      	adds	r1, r4, r3
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	2030      	movs	r0, #48	; 0x30
 8005922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005926:	4422      	add	r2, r4
 8005928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800592c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005930:	3302      	adds	r3, #2
 8005932:	e7c7      	b.n	80058c4 <_printf_common+0x58>
 8005934:	2301      	movs	r3, #1
 8005936:	4622      	mov	r2, r4
 8005938:	4649      	mov	r1, r9
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	3001      	adds	r0, #1
 8005940:	d0e6      	beq.n	8005910 <_printf_common+0xa4>
 8005942:	3601      	adds	r6, #1
 8005944:	e7d9      	b.n	80058fa <_printf_common+0x8e>
	...

08005948 <_printf_i>:
 8005948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	4691      	mov	r9, r2
 8005950:	7e27      	ldrb	r7, [r4, #24]
 8005952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005954:	2f78      	cmp	r7, #120	; 0x78
 8005956:	4680      	mov	r8, r0
 8005958:	469a      	mov	sl, r3
 800595a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800595e:	d807      	bhi.n	8005970 <_printf_i+0x28>
 8005960:	2f62      	cmp	r7, #98	; 0x62
 8005962:	d80a      	bhi.n	800597a <_printf_i+0x32>
 8005964:	2f00      	cmp	r7, #0
 8005966:	f000 80d8 	beq.w	8005b1a <_printf_i+0x1d2>
 800596a:	2f58      	cmp	r7, #88	; 0x58
 800596c:	f000 80a3 	beq.w	8005ab6 <_printf_i+0x16e>
 8005970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005978:	e03a      	b.n	80059f0 <_printf_i+0xa8>
 800597a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597e:	2b15      	cmp	r3, #21
 8005980:	d8f6      	bhi.n	8005970 <_printf_i+0x28>
 8005982:	a001      	add	r0, pc, #4	; (adr r0, 8005988 <_printf_i+0x40>)
 8005984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005988:	080059e1 	.word	0x080059e1
 800598c:	080059f5 	.word	0x080059f5
 8005990:	08005971 	.word	0x08005971
 8005994:	08005971 	.word	0x08005971
 8005998:	08005971 	.word	0x08005971
 800599c:	08005971 	.word	0x08005971
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	08005971 	.word	0x08005971
 80059a8:	08005971 	.word	0x08005971
 80059ac:	08005971 	.word	0x08005971
 80059b0:	08005971 	.word	0x08005971
 80059b4:	08005b01 	.word	0x08005b01
 80059b8:	08005a25 	.word	0x08005a25
 80059bc:	08005ae3 	.word	0x08005ae3
 80059c0:	08005971 	.word	0x08005971
 80059c4:	08005971 	.word	0x08005971
 80059c8:	08005b23 	.word	0x08005b23
 80059cc:	08005971 	.word	0x08005971
 80059d0:	08005a25 	.word	0x08005a25
 80059d4:	08005971 	.word	0x08005971
 80059d8:	08005971 	.word	0x08005971
 80059dc:	08005aeb 	.word	0x08005aeb
 80059e0:	680b      	ldr	r3, [r1, #0]
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	600a      	str	r2, [r1, #0]
 80059e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0a3      	b.n	8005b3c <_printf_i+0x1f4>
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	6808      	ldr	r0, [r1, #0]
 80059f8:	062e      	lsls	r6, r5, #24
 80059fa:	f100 0304 	add.w	r3, r0, #4
 80059fe:	d50a      	bpl.n	8005a16 <_printf_i+0xce>
 8005a00:	6805      	ldr	r5, [r0, #0]
 8005a02:	600b      	str	r3, [r1, #0]
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	da03      	bge.n	8005a10 <_printf_i+0xc8>
 8005a08:	232d      	movs	r3, #45	; 0x2d
 8005a0a:	426d      	negs	r5, r5
 8005a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a10:	485e      	ldr	r0, [pc, #376]	; (8005b8c <_printf_i+0x244>)
 8005a12:	230a      	movs	r3, #10
 8005a14:	e019      	b.n	8005a4a <_printf_i+0x102>
 8005a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a1a:	6805      	ldr	r5, [r0, #0]
 8005a1c:	600b      	str	r3, [r1, #0]
 8005a1e:	bf18      	it	ne
 8005a20:	b22d      	sxthne	r5, r5
 8005a22:	e7ef      	b.n	8005a04 <_printf_i+0xbc>
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	1d18      	adds	r0, r3, #4
 8005a2a:	6008      	str	r0, [r1, #0]
 8005a2c:	0628      	lsls	r0, r5, #24
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0xec>
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <_printf_i+0xf2>
 8005a34:	0669      	lsls	r1, r5, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0xe8>
 8005a38:	881d      	ldrh	r5, [r3, #0]
 8005a3a:	4854      	ldr	r0, [pc, #336]	; (8005b8c <_printf_i+0x244>)
 8005a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a3e:	bf0c      	ite	eq
 8005a40:	2308      	moveq	r3, #8
 8005a42:	230a      	movne	r3, #10
 8005a44:	2100      	movs	r1, #0
 8005a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a4a:	6866      	ldr	r6, [r4, #4]
 8005a4c:	60a6      	str	r6, [r4, #8]
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	bfa2      	ittt	ge
 8005a52:	6821      	ldrge	r1, [r4, #0]
 8005a54:	f021 0104 	bicge.w	r1, r1, #4
 8005a58:	6021      	strge	r1, [r4, #0]
 8005a5a:	b90d      	cbnz	r5, 8005a60 <_printf_i+0x118>
 8005a5c:	2e00      	cmp	r6, #0
 8005a5e:	d04d      	beq.n	8005afc <_printf_i+0x1b4>
 8005a60:	4616      	mov	r6, r2
 8005a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a66:	fb03 5711 	mls	r7, r3, r1, r5
 8005a6a:	5dc7      	ldrb	r7, [r0, r7]
 8005a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a70:	462f      	mov	r7, r5
 8005a72:	42bb      	cmp	r3, r7
 8005a74:	460d      	mov	r5, r1
 8005a76:	d9f4      	bls.n	8005a62 <_printf_i+0x11a>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d10b      	bne.n	8005a94 <_printf_i+0x14c>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	07df      	lsls	r7, r3, #31
 8005a80:	d508      	bpl.n	8005a94 <_printf_i+0x14c>
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	6861      	ldr	r1, [r4, #4]
 8005a86:	4299      	cmp	r1, r3
 8005a88:	bfde      	ittt	le
 8005a8a:	2330      	movle	r3, #48	; 0x30
 8005a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a94:	1b92      	subs	r2, r2, r6
 8005a96:	6122      	str	r2, [r4, #16]
 8005a98:	f8cd a000 	str.w	sl, [sp]
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	aa03      	add	r2, sp, #12
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f7ff fee2 	bl	800586c <_printf_common>
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d14c      	bne.n	8005b46 <_printf_i+0x1fe>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b004      	add	sp, #16
 8005ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab6:	4835      	ldr	r0, [pc, #212]	; (8005b8c <_printf_i+0x244>)
 8005ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	061f      	lsls	r7, r3, #24
 8005ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ac6:	600e      	str	r6, [r1, #0]
 8005ac8:	d514      	bpl.n	8005af4 <_printf_i+0x1ac>
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	bf44      	itt	mi
 8005ace:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad2:	6023      	strmi	r3, [r4, #0]
 8005ad4:	b91d      	cbnz	r5, 8005ade <_printf_i+0x196>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f023 0320 	bic.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2310      	movs	r3, #16
 8005ae0:	e7b0      	b.n	8005a44 <_printf_i+0xfc>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f043 0320 	orr.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2378      	movs	r3, #120	; 0x78
 8005aec:	4828      	ldr	r0, [pc, #160]	; (8005b90 <_printf_i+0x248>)
 8005aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af2:	e7e3      	b.n	8005abc <_printf_i+0x174>
 8005af4:	065e      	lsls	r6, r3, #25
 8005af6:	bf48      	it	mi
 8005af8:	b2ad      	uxthmi	r5, r5
 8005afa:	e7e6      	b.n	8005aca <_printf_i+0x182>
 8005afc:	4616      	mov	r6, r2
 8005afe:	e7bb      	b.n	8005a78 <_printf_i+0x130>
 8005b00:	680b      	ldr	r3, [r1, #0]
 8005b02:	6826      	ldr	r6, [r4, #0]
 8005b04:	6960      	ldr	r0, [r4, #20]
 8005b06:	1d1d      	adds	r5, r3, #4
 8005b08:	600d      	str	r5, [r1, #0]
 8005b0a:	0635      	lsls	r5, r6, #24
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	d501      	bpl.n	8005b14 <_printf_i+0x1cc>
 8005b10:	6018      	str	r0, [r3, #0]
 8005b12:	e002      	b.n	8005b1a <_printf_i+0x1d2>
 8005b14:	0671      	lsls	r1, r6, #25
 8005b16:	d5fb      	bpl.n	8005b10 <_printf_i+0x1c8>
 8005b18:	8018      	strh	r0, [r3, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	4616      	mov	r6, r2
 8005b20:	e7ba      	b.n	8005a98 <_printf_i+0x150>
 8005b22:	680b      	ldr	r3, [r1, #0]
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	600a      	str	r2, [r1, #0]
 8005b28:	681e      	ldr	r6, [r3, #0]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7fa fb56 	bl	80001e0 <memchr>
 8005b34:	b108      	cbz	r0, 8005b3a <_printf_i+0x1f2>
 8005b36:	1b80      	subs	r0, r0, r6
 8005b38:	6060      	str	r0, [r4, #4]
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b44:	e7a8      	b.n	8005a98 <_printf_i+0x150>
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d0ab      	beq.n	8005aac <_printf_i+0x164>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	d413      	bmi.n	8005b82 <_printf_i+0x23a>
 8005b5a:	68e0      	ldr	r0, [r4, #12]
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	4298      	cmp	r0, r3
 8005b60:	bfb8      	it	lt
 8005b62:	4618      	movlt	r0, r3
 8005b64:	e7a4      	b.n	8005ab0 <_printf_i+0x168>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d09b      	beq.n	8005aac <_printf_i+0x164>
 8005b74:	3501      	adds	r5, #1
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	9903      	ldr	r1, [sp, #12]
 8005b7a:	1a5b      	subs	r3, r3, r1
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dcf2      	bgt.n	8005b66 <_printf_i+0x21e>
 8005b80:	e7eb      	b.n	8005b5a <_printf_i+0x212>
 8005b82:	2500      	movs	r5, #0
 8005b84:	f104 0619 	add.w	r6, r4, #25
 8005b88:	e7f5      	b.n	8005b76 <_printf_i+0x22e>
 8005b8a:	bf00      	nop
 8005b8c:	080080ba 	.word	0x080080ba
 8005b90:	080080cb 	.word	0x080080cb

08005b94 <siprintf>:
 8005b94:	b40e      	push	{r1, r2, r3}
 8005b96:	b500      	push	{lr}
 8005b98:	b09c      	sub	sp, #112	; 0x70
 8005b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	9006      	str	r0, [sp, #24]
 8005ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ba4:	4809      	ldr	r0, [pc, #36]	; (8005bcc <siprintf+0x38>)
 8005ba6:	9107      	str	r1, [sp, #28]
 8005ba8:	9104      	str	r1, [sp, #16]
 8005baa:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <siprintf+0x3c>)
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	9105      	str	r1, [sp, #20]
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	a902      	add	r1, sp, #8
 8005bb8:	f001 fb34 	bl	8007224 <_svfiprintf_r>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	b01c      	add	sp, #112	; 0x70
 8005bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc8:	b003      	add	sp, #12
 8005bca:	4770      	bx	lr
 8005bcc:	2000000c 	.word	0x2000000c
 8005bd0:	ffff0208 	.word	0xffff0208

08005bd4 <quorem>:
 8005bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	6903      	ldr	r3, [r0, #16]
 8005bda:	690c      	ldr	r4, [r1, #16]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	4607      	mov	r7, r0
 8005be0:	f2c0 8081 	blt.w	8005ce6 <quorem+0x112>
 8005be4:	3c01      	subs	r4, #1
 8005be6:	f101 0814 	add.w	r8, r1, #20
 8005bea:	f100 0514 	add.w	r5, r0, #20
 8005bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c0c:	d331      	bcc.n	8005c72 <quorem+0x9e>
 8005c0e:	f04f 0e00 	mov.w	lr, #0
 8005c12:	4640      	mov	r0, r8
 8005c14:	46ac      	mov	ip, r5
 8005c16:	46f2      	mov	sl, lr
 8005c18:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c1c:	b293      	uxth	r3, r2
 8005c1e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ebaa 0303 	sub.w	r3, sl, r3
 8005c2c:	0c12      	lsrs	r2, r2, #16
 8005c2e:	f8dc a000 	ldr.w	sl, [ip]
 8005c32:	fb06 e202 	mla	r2, r6, r2, lr
 8005c36:	fa13 f38a 	uxtah	r3, r3, sl
 8005c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3e:	fa1f fa82 	uxth.w	sl, r2
 8005c42:	f8dc 2000 	ldr.w	r2, [ip]
 8005c46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c54:	4581      	cmp	r9, r0
 8005c56:	f84c 3b04 	str.w	r3, [ip], #4
 8005c5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c5e:	d2db      	bcs.n	8005c18 <quorem+0x44>
 8005c60:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c64:	b92b      	cbnz	r3, 8005c72 <quorem+0x9e>
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	d32e      	bcc.n	8005cce <quorem+0xfa>
 8005c70:	613c      	str	r4, [r7, #16]
 8005c72:	4638      	mov	r0, r7
 8005c74:	f001 f8c0 	bl	8006df8 <__mcmp>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	db24      	blt.n	8005cc6 <quorem+0xf2>
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f04f 0c00 	mov.w	ip, #0
 8005c84:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c88:	f8d0 e000 	ldr.w	lr, [r0]
 8005c8c:	b293      	uxth	r3, r2
 8005c8e:	ebac 0303 	sub.w	r3, ip, r3
 8005c92:	0c12      	lsrs	r2, r2, #16
 8005c94:	fa13 f38e 	uxtah	r3, r3, lr
 8005c98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ca6:	45c1      	cmp	r9, r8
 8005ca8:	f840 3b04 	str.w	r3, [r0], #4
 8005cac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cb0:	d2e8      	bcs.n	8005c84 <quorem+0xb0>
 8005cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	b922      	cbnz	r2, 8005cc6 <quorem+0xf2>
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	d30a      	bcc.n	8005cda <quorem+0x106>
 8005cc4:	613c      	str	r4, [r7, #16]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	b003      	add	sp, #12
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	d1cc      	bne.n	8005c70 <quorem+0x9c>
 8005cd6:	3c01      	subs	r4, #1
 8005cd8:	e7c7      	b.n	8005c6a <quorem+0x96>
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <quorem+0xf0>
 8005ce2:	3c01      	subs	r4, #1
 8005ce4:	e7eb      	b.n	8005cbe <quorem+0xea>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e7ee      	b.n	8005cc8 <quorem+0xf4>
 8005cea:	0000      	movs	r0, r0
 8005cec:	0000      	movs	r0, r0
	...

08005cf0 <_dtoa_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	ed2d 8b02 	vpush	{d8}
 8005cf8:	ec57 6b10 	vmov	r6, r7, d0
 8005cfc:	b095      	sub	sp, #84	; 0x54
 8005cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d04:	9105      	str	r1, [sp, #20]
 8005d06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d10:	b975      	cbnz	r5, 8005d30 <_dtoa_r+0x40>
 8005d12:	2010      	movs	r0, #16
 8005d14:	f000 fddc 	bl	80068d0 <malloc>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d1c:	b920      	cbnz	r0, 8005d28 <_dtoa_r+0x38>
 8005d1e:	4bb2      	ldr	r3, [pc, #712]	; (8005fe8 <_dtoa_r+0x2f8>)
 8005d20:	21ea      	movs	r1, #234	; 0xea
 8005d22:	48b2      	ldr	r0, [pc, #712]	; (8005fec <_dtoa_r+0x2fc>)
 8005d24:	f001 fb8e 	bl	8007444 <__assert_func>
 8005d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d2c:	6005      	str	r5, [r0, #0]
 8005d2e:	60c5      	str	r5, [r0, #12]
 8005d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	b151      	cbz	r1, 8005d4c <_dtoa_r+0x5c>
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	604a      	str	r2, [r1, #4]
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4093      	lsls	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe1b 	bl	800697c <_Bfree>
 8005d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	1e3b      	subs	r3, r7, #0
 8005d4e:	bfb9      	ittee	lt
 8005d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	9303      	strlt	r3, [sp, #12]
 8005d56:	2300      	movge	r3, #0
 8005d58:	f8c8 3000 	strge.w	r3, [r8]
 8005d5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d60:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <_dtoa_r+0x300>)
 8005d62:	bfbc      	itt	lt
 8005d64:	2201      	movlt	r2, #1
 8005d66:	f8c8 2000 	strlt.w	r2, [r8]
 8005d6a:	ea33 0309 	bics.w	r3, r3, r9
 8005d6e:	d11b      	bne.n	8005da8 <_dtoa_r+0xb8>
 8005d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d7c:	4333      	orrs	r3, r6
 8005d7e:	f000 857a 	beq.w	8006876 <_dtoa_r+0xb86>
 8005d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d84:	b963      	cbnz	r3, 8005da0 <_dtoa_r+0xb0>
 8005d86:	4b9b      	ldr	r3, [pc, #620]	; (8005ff4 <_dtoa_r+0x304>)
 8005d88:	e024      	b.n	8005dd4 <_dtoa_r+0xe4>
 8005d8a:	4b9b      	ldr	r3, [pc, #620]	; (8005ff8 <_dtoa_r+0x308>)
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	9800      	ldr	r0, [sp, #0]
 8005d96:	b015      	add	sp, #84	; 0x54
 8005d98:	ecbd 8b02 	vpop	{d8}
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	4b94      	ldr	r3, [pc, #592]	; (8005ff4 <_dtoa_r+0x304>)
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	3303      	adds	r3, #3
 8005da6:	e7f3      	b.n	8005d90 <_dtoa_r+0xa0>
 8005da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	ec51 0b17 	vmov	r0, r1, d7
 8005db2:	2300      	movs	r3, #0
 8005db4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005db8:	f7fa fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	b158      	cbz	r0, 8005dd8 <_dtoa_r+0xe8>
 8005dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8551 	beq.w	8006870 <_dtoa_r+0xb80>
 8005dce:	488b      	ldr	r0, [pc, #556]	; (8005ffc <_dtoa_r+0x30c>)
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	1e43      	subs	r3, r0, #1
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	e7dd      	b.n	8005d94 <_dtoa_r+0xa4>
 8005dd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ddc:	aa12      	add	r2, sp, #72	; 0x48
 8005dde:	a913      	add	r1, sp, #76	; 0x4c
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 f8ad 	bl	8006f40 <__d2b>
 8005de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005dea:	4683      	mov	fp, r0
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d07c      	beq.n	8005eea <_dtoa_r+0x1fa>
 8005df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005dfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e0a:	4b7d      	ldr	r3, [pc, #500]	; (8006000 <_dtoa_r+0x310>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fa39 	bl	8000288 <__aeabi_dsub>
 8005e16:	a36e      	add	r3, pc, #440	; (adr r3, 8005fd0 <_dtoa_r+0x2e0>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fbec 	bl	80005f8 <__aeabi_dmul>
 8005e20:	a36d      	add	r3, pc, #436	; (adr r3, 8005fd8 <_dtoa_r+0x2e8>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fa31 	bl	800028c <__adddf3>
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	460f      	mov	r7, r1
 8005e30:	f7fa fb78 	bl	8000524 <__aeabi_i2d>
 8005e34:	a36a      	add	r3, pc, #424	; (adr r3, 8005fe0 <_dtoa_r+0x2f0>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fbdd 	bl	80005f8 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa fa21 	bl	800028c <__adddf3>
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	f7fa fe83 	bl	8000b58 <__aeabi_d2iz>
 8005e52:	2200      	movs	r2, #0
 8005e54:	4682      	mov	sl, r0
 8005e56:	2300      	movs	r3, #0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fe3e 	bl	8000adc <__aeabi_dcmplt>
 8005e60:	b148      	cbz	r0, 8005e76 <_dtoa_r+0x186>
 8005e62:	4650      	mov	r0, sl
 8005e64:	f7fa fb5e 	bl	8000524 <__aeabi_i2d>
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	f7fa fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e70:	b908      	cbnz	r0, 8005e76 <_dtoa_r+0x186>
 8005e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e76:	f1ba 0f16 	cmp.w	sl, #22
 8005e7a:	d854      	bhi.n	8005f26 <_dtoa_r+0x236>
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <_dtoa_r+0x314>)
 8005e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e8a:	f7fa fe27 	bl	8000adc <__aeabi_dcmplt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d04b      	beq.n	8005f2a <_dtoa_r+0x23a>
 8005e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e96:	2300      	movs	r3, #0
 8005e98:	930e      	str	r3, [sp, #56]	; 0x38
 8005e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e9c:	1b5d      	subs	r5, r3, r5
 8005e9e:	1e6b      	subs	r3, r5, #1
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	bf43      	ittte	mi
 8005ea4:	2300      	movmi	r3, #0
 8005ea6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005eaa:	9304      	strmi	r3, [sp, #16]
 8005eac:	f04f 0800 	movpl.w	r8, #0
 8005eb0:	f1ba 0f00 	cmp.w	sl, #0
 8005eb4:	db3b      	blt.n	8005f2e <_dtoa_r+0x23e>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ebc:	4453      	add	r3, sl
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d869      	bhi.n	8005f9e <_dtoa_r+0x2ae>
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	bfc4      	itt	gt
 8005ece:	3b04      	subgt	r3, #4
 8005ed0:	9305      	strgt	r3, [sp, #20]
 8005ed2:	9b05      	ldr	r3, [sp, #20]
 8005ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed8:	bfcc      	ite	gt
 8005eda:	2500      	movgt	r5, #0
 8005edc:	2501      	movle	r5, #1
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d869      	bhi.n	8005fb6 <_dtoa_r+0x2c6>
 8005ee2:	e8df f003 	tbb	[pc, r3]
 8005ee6:	4e2c      	.short	0x4e2c
 8005ee8:	5a4c      	.short	0x5a4c
 8005eea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005eee:	441d      	add	r5, r3
 8005ef0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	bfc1      	itttt	gt
 8005ef8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005efc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f00:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f08:	bfda      	itte	le
 8005f0a:	f1c3 0320 	rsble	r3, r3, #32
 8005f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f12:	4318      	orrgt	r0, r3
 8005f14:	f7fa faf6 	bl	8000504 <__aeabi_ui2d>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f20:	3d01      	subs	r5, #1
 8005f22:	9310      	str	r3, [sp, #64]	; 0x40
 8005f24:	e771      	b.n	8005e0a <_dtoa_r+0x11a>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7b6      	b.n	8005e98 <_dtoa_r+0x1a8>
 8005f2a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f2c:	e7b5      	b.n	8005e9a <_dtoa_r+0x1aa>
 8005f2e:	f1ca 0300 	rsb	r3, sl, #0
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	2300      	movs	r3, #0
 8005f36:	eba8 080a 	sub.w	r8, r8, sl
 8005f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8005f3c:	e7c2      	b.n	8005ec4 <_dtoa_r+0x1d4>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9308      	str	r3, [sp, #32]
 8005f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dc39      	bgt.n	8005fbc <_dtoa_r+0x2cc>
 8005f48:	f04f 0901 	mov.w	r9, #1
 8005f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f50:	464b      	mov	r3, r9
 8005f52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f58:	2200      	movs	r2, #0
 8005f5a:	6042      	str	r2, [r0, #4]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	f102 0614 	add.w	r6, r2, #20
 8005f62:	429e      	cmp	r6, r3
 8005f64:	6841      	ldr	r1, [r0, #4]
 8005f66:	d92f      	bls.n	8005fc8 <_dtoa_r+0x2d8>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 fcc7 	bl	80068fc <_Balloc>
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d14b      	bne.n	800600c <_dtoa_r+0x31c>
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <_dtoa_r+0x318>)
 8005f76:	4602      	mov	r2, r0
 8005f78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f7c:	e6d1      	b.n	8005d22 <_dtoa_r+0x32>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7de      	b.n	8005f40 <_dtoa_r+0x250>
 8005f82:	2300      	movs	r3, #0
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	eb0a 0903 	add.w	r9, sl, r3
 8005f8c:	f109 0301 	add.w	r3, r9, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	bfb8      	it	lt
 8005f96:	2301      	movlt	r3, #1
 8005f98:	e7dd      	b.n	8005f56 <_dtoa_r+0x266>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e7f2      	b.n	8005f84 <_dtoa_r+0x294>
 8005f9e:	2501      	movs	r5, #1
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	9508      	str	r5, [sp, #32]
 8005fa6:	f04f 39ff 	mov.w	r9, #4294967295
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fb0:	2312      	movs	r3, #18
 8005fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb4:	e7cf      	b.n	8005f56 <_dtoa_r+0x266>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	e7f4      	b.n	8005fa6 <_dtoa_r+0x2b6>
 8005fbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	e7c6      	b.n	8005f56 <_dtoa_r+0x266>
 8005fc8:	3101      	adds	r1, #1
 8005fca:	6041      	str	r1, [r0, #4]
 8005fcc:	0052      	lsls	r2, r2, #1
 8005fce:	e7c6      	b.n	8005f5e <_dtoa_r+0x26e>
 8005fd0:	636f4361 	.word	0x636f4361
 8005fd4:	3fd287a7 	.word	0x3fd287a7
 8005fd8:	8b60c8b3 	.word	0x8b60c8b3
 8005fdc:	3fc68a28 	.word	0x3fc68a28
 8005fe0:	509f79fb 	.word	0x509f79fb
 8005fe4:	3fd34413 	.word	0x3fd34413
 8005fe8:	080080e9 	.word	0x080080e9
 8005fec:	08008100 	.word	0x08008100
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	080080e5 	.word	0x080080e5
 8005ff8:	080080dc 	.word	0x080080dc
 8005ffc:	080080b9 	.word	0x080080b9
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	080081f8 	.word	0x080081f8
 8006008:	0800815f 	.word	0x0800815f
 800600c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600e:	9a00      	ldr	r2, [sp, #0]
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	2b0e      	cmp	r3, #14
 8006016:	f200 80ad 	bhi.w	8006174 <_dtoa_r+0x484>
 800601a:	2d00      	cmp	r5, #0
 800601c:	f000 80aa 	beq.w	8006174 <_dtoa_r+0x484>
 8006020:	f1ba 0f00 	cmp.w	sl, #0
 8006024:	dd36      	ble.n	8006094 <_dtoa_r+0x3a4>
 8006026:	4ac3      	ldr	r2, [pc, #780]	; (8006334 <_dtoa_r+0x644>)
 8006028:	f00a 030f 	and.w	r3, sl, #15
 800602c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006030:	ed93 7b00 	vldr	d7, [r3]
 8006034:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006038:	ea4f 172a 	mov.w	r7, sl, asr #4
 800603c:	eeb0 8a47 	vmov.f32	s16, s14
 8006040:	eef0 8a67 	vmov.f32	s17, s15
 8006044:	d016      	beq.n	8006074 <_dtoa_r+0x384>
 8006046:	4bbc      	ldr	r3, [pc, #752]	; (8006338 <_dtoa_r+0x648>)
 8006048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800604c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006050:	f7fa fbfc 	bl	800084c <__aeabi_ddiv>
 8006054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006058:	f007 070f 	and.w	r7, r7, #15
 800605c:	2503      	movs	r5, #3
 800605e:	4eb6      	ldr	r6, [pc, #728]	; (8006338 <_dtoa_r+0x648>)
 8006060:	b957      	cbnz	r7, 8006078 <_dtoa_r+0x388>
 8006062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006066:	ec53 2b18 	vmov	r2, r3, d8
 800606a:	f7fa fbef 	bl	800084c <__aeabi_ddiv>
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	e029      	b.n	80060c8 <_dtoa_r+0x3d8>
 8006074:	2502      	movs	r5, #2
 8006076:	e7f2      	b.n	800605e <_dtoa_r+0x36e>
 8006078:	07f9      	lsls	r1, r7, #31
 800607a:	d508      	bpl.n	800608e <_dtoa_r+0x39e>
 800607c:	ec51 0b18 	vmov	r0, r1, d8
 8006080:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006084:	f7fa fab8 	bl	80005f8 <__aeabi_dmul>
 8006088:	ec41 0b18 	vmov	d8, r0, r1
 800608c:	3501      	adds	r5, #1
 800608e:	107f      	asrs	r7, r7, #1
 8006090:	3608      	adds	r6, #8
 8006092:	e7e5      	b.n	8006060 <_dtoa_r+0x370>
 8006094:	f000 80a6 	beq.w	80061e4 <_dtoa_r+0x4f4>
 8006098:	f1ca 0600 	rsb	r6, sl, #0
 800609c:	4ba5      	ldr	r3, [pc, #660]	; (8006334 <_dtoa_r+0x644>)
 800609e:	4fa6      	ldr	r7, [pc, #664]	; (8006338 <_dtoa_r+0x648>)
 80060a0:	f006 020f 	and.w	r2, r6, #15
 80060a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060b0:	f7fa faa2 	bl	80005f8 <__aeabi_dmul>
 80060b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b8:	1136      	asrs	r6, r6, #4
 80060ba:	2300      	movs	r3, #0
 80060bc:	2502      	movs	r5, #2
 80060be:	2e00      	cmp	r6, #0
 80060c0:	f040 8085 	bne.w	80061ce <_dtoa_r+0x4de>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1d2      	bne.n	800606e <_dtoa_r+0x37e>
 80060c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 808c 	beq.w	80061e8 <_dtoa_r+0x4f8>
 80060d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060d4:	4b99      	ldr	r3, [pc, #612]	; (800633c <_dtoa_r+0x64c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fcfe 	bl	8000adc <__aeabi_dcmplt>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f000 8081 	beq.w	80061e8 <_dtoa_r+0x4f8>
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d07d      	beq.n	80061e8 <_dtoa_r+0x4f8>
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dd3c      	ble.n	800616c <_dtoa_r+0x47c>
 80060f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	2200      	movs	r2, #0
 80060fa:	4b91      	ldr	r3, [pc, #580]	; (8006340 <_dtoa_r+0x650>)
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f7fa fa7a 	bl	80005f8 <__aeabi_dmul>
 8006104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006108:	3501      	adds	r5, #1
 800610a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800610e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006112:	4628      	mov	r0, r5
 8006114:	f7fa fa06 	bl	8000524 <__aeabi_i2d>
 8006118:	4632      	mov	r2, r6
 800611a:	463b      	mov	r3, r7
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <_dtoa_r+0x654>)
 8006122:	2200      	movs	r2, #0
 8006124:	f7fa f8b2 	bl	800028c <__adddf3>
 8006128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	9303      	str	r3, [sp, #12]
 8006132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d15c      	bne.n	80061f2 <_dtoa_r+0x502>
 8006138:	4b83      	ldr	r3, [pc, #524]	; (8006348 <_dtoa_r+0x658>)
 800613a:	2200      	movs	r2, #0
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa f8a2 	bl	8000288 <__aeabi_dsub>
 8006144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006148:	4606      	mov	r6, r0
 800614a:	460f      	mov	r7, r1
 800614c:	f7fa fce4 	bl	8000b18 <__aeabi_dcmpgt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 8296 	bne.w	8006682 <_dtoa_r+0x992>
 8006156:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800615a:	4630      	mov	r0, r6
 800615c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	f040 8288 	bne.w	800667c <_dtoa_r+0x98c>
 800616c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006176:	2b00      	cmp	r3, #0
 8006178:	f2c0 8158 	blt.w	800642c <_dtoa_r+0x73c>
 800617c:	f1ba 0f0e 	cmp.w	sl, #14
 8006180:	f300 8154 	bgt.w	800642c <_dtoa_r+0x73c>
 8006184:	4b6b      	ldr	r3, [pc, #428]	; (8006334 <_dtoa_r+0x644>)
 8006186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800618a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	f280 80e3 	bge.w	800635c <_dtoa_r+0x66c>
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f300 80df 	bgt.w	800635c <_dtoa_r+0x66c>
 800619e:	f040 826d 	bne.w	800667c <_dtoa_r+0x98c>
 80061a2:	4b69      	ldr	r3, [pc, #420]	; (8006348 <_dtoa_r+0x658>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	4640      	mov	r0, r8
 80061a8:	4649      	mov	r1, r9
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b2:	f7fa fca7 	bl	8000b04 <__aeabi_dcmpge>
 80061b6:	9e01      	ldr	r6, [sp, #4]
 80061b8:	4637      	mov	r7, r6
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f040 8243 	bne.w	8006646 <_dtoa_r+0x956>
 80061c0:	9d00      	ldr	r5, [sp, #0]
 80061c2:	2331      	movs	r3, #49	; 0x31
 80061c4:	f805 3b01 	strb.w	r3, [r5], #1
 80061c8:	f10a 0a01 	add.w	sl, sl, #1
 80061cc:	e23f      	b.n	800664e <_dtoa_r+0x95e>
 80061ce:	07f2      	lsls	r2, r6, #31
 80061d0:	d505      	bpl.n	80061de <_dtoa_r+0x4ee>
 80061d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d6:	f7fa fa0f 	bl	80005f8 <__aeabi_dmul>
 80061da:	3501      	adds	r5, #1
 80061dc:	2301      	movs	r3, #1
 80061de:	1076      	asrs	r6, r6, #1
 80061e0:	3708      	adds	r7, #8
 80061e2:	e76c      	b.n	80060be <_dtoa_r+0x3ce>
 80061e4:	2502      	movs	r5, #2
 80061e6:	e76f      	b.n	80060c8 <_dtoa_r+0x3d8>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80061ee:	930c      	str	r3, [sp, #48]	; 0x30
 80061f0:	e78d      	b.n	800610e <_dtoa_r+0x41e>
 80061f2:	9900      	ldr	r1, [sp, #0]
 80061f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80061f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f8:	4b4e      	ldr	r3, [pc, #312]	; (8006334 <_dtoa_r+0x644>)
 80061fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061fe:	4401      	add	r1, r0
 8006200:	9102      	str	r1, [sp, #8]
 8006202:	9908      	ldr	r1, [sp, #32]
 8006204:	eeb0 8a47 	vmov.f32	s16, s14
 8006208:	eef0 8a67 	vmov.f32	s17, s15
 800620c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006214:	2900      	cmp	r1, #0
 8006216:	d045      	beq.n	80062a4 <_dtoa_r+0x5b4>
 8006218:	494c      	ldr	r1, [pc, #304]	; (800634c <_dtoa_r+0x65c>)
 800621a:	2000      	movs	r0, #0
 800621c:	f7fa fb16 	bl	800084c <__aeabi_ddiv>
 8006220:	ec53 2b18 	vmov	r2, r3, d8
 8006224:	f7fa f830 	bl	8000288 <__aeabi_dsub>
 8006228:	9d00      	ldr	r5, [sp, #0]
 800622a:	ec41 0b18 	vmov	d8, r0, r1
 800622e:	4639      	mov	r1, r7
 8006230:	4630      	mov	r0, r6
 8006232:	f7fa fc91 	bl	8000b58 <__aeabi_d2iz>
 8006236:	900c      	str	r0, [sp, #48]	; 0x30
 8006238:	f7fa f974 	bl	8000524 <__aeabi_i2d>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa f820 	bl	8000288 <__aeabi_dsub>
 8006248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800624a:	3330      	adds	r3, #48	; 0x30
 800624c:	f805 3b01 	strb.w	r3, [r5], #1
 8006250:	ec53 2b18 	vmov	r2, r3, d8
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	f7fa fc40 	bl	8000adc <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d165      	bne.n	800632c <_dtoa_r+0x63c>
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	4935      	ldr	r1, [pc, #212]	; (800633c <_dtoa_r+0x64c>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f80e 	bl	8000288 <__aeabi_dsub>
 800626c:	ec53 2b18 	vmov	r2, r3, d8
 8006270:	f7fa fc34 	bl	8000adc <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80b9 	bne.w	80063ec <_dtoa_r+0x6fc>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	429d      	cmp	r5, r3
 800627e:	f43f af75 	beq.w	800616c <_dtoa_r+0x47c>
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <_dtoa_r+0x650>)
 8006284:	ec51 0b18 	vmov	r0, r1, d8
 8006288:	2200      	movs	r2, #0
 800628a:	f7fa f9b5 	bl	80005f8 <__aeabi_dmul>
 800628e:	4b2c      	ldr	r3, [pc, #176]	; (8006340 <_dtoa_r+0x650>)
 8006290:	ec41 0b18 	vmov	d8, r0, r1
 8006294:	2200      	movs	r2, #0
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa f9ad 	bl	80005f8 <__aeabi_dmul>
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	e7c4      	b.n	800622e <_dtoa_r+0x53e>
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	f7fa f9a6 	bl	80005f8 <__aeabi_dmul>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	9d00      	ldr	r5, [sp, #0]
 80062b0:	930c      	str	r3, [sp, #48]	; 0x30
 80062b2:	ec41 0b18 	vmov	d8, r0, r1
 80062b6:	4639      	mov	r1, r7
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7fa fc4d 	bl	8000b58 <__aeabi_d2iz>
 80062be:	9011      	str	r0, [sp, #68]	; 0x44
 80062c0:	f7fa f930 	bl	8000524 <__aeabi_i2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7f9 ffdc 	bl	8000288 <__aeabi_dsub>
 80062d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d2:	3330      	adds	r3, #48	; 0x30
 80062d4:	f805 3b01 	strb.w	r3, [r5], #1
 80062d8:	9b02      	ldr	r3, [sp, #8]
 80062da:	429d      	cmp	r5, r3
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	d134      	bne.n	8006350 <_dtoa_r+0x660>
 80062e6:	4b19      	ldr	r3, [pc, #100]	; (800634c <_dtoa_r+0x65c>)
 80062e8:	ec51 0b18 	vmov	r0, r1, d8
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7fa fc0e 	bl	8000b18 <__aeabi_dcmpgt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d175      	bne.n	80063ec <_dtoa_r+0x6fc>
 8006300:	ec53 2b18 	vmov	r2, r3, d8
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <_dtoa_r+0x65c>)
 8006306:	2000      	movs	r0, #0
 8006308:	f7f9 ffbe 	bl	8000288 <__aeabi_dsub>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fbe2 	bl	8000adc <__aeabi_dcmplt>
 8006318:	2800      	cmp	r0, #0
 800631a:	f43f af27 	beq.w	800616c <_dtoa_r+0x47c>
 800631e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006320:	1e6b      	subs	r3, r5, #1
 8006322:	930c      	str	r3, [sp, #48]	; 0x30
 8006324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006328:	2b30      	cmp	r3, #48	; 0x30
 800632a:	d0f8      	beq.n	800631e <_dtoa_r+0x62e>
 800632c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006330:	e04a      	b.n	80063c8 <_dtoa_r+0x6d8>
 8006332:	bf00      	nop
 8006334:	080081f8 	.word	0x080081f8
 8006338:	080081d0 	.word	0x080081d0
 800633c:	3ff00000 	.word	0x3ff00000
 8006340:	40240000 	.word	0x40240000
 8006344:	401c0000 	.word	0x401c0000
 8006348:	40140000 	.word	0x40140000
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	4baf      	ldr	r3, [pc, #700]	; (8006610 <_dtoa_r+0x920>)
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	e7ac      	b.n	80062b6 <_dtoa_r+0x5c6>
 800635c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006360:	9d00      	ldr	r5, [sp, #0]
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7fa fa6f 	bl	800084c <__aeabi_ddiv>
 800636e:	f7fa fbf3 	bl	8000b58 <__aeabi_d2iz>
 8006372:	9002      	str	r0, [sp, #8]
 8006374:	f7fa f8d6 	bl	8000524 <__aeabi_i2d>
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	f7fa f93c 	bl	80005f8 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	f7f9 ff7e 	bl	8000288 <__aeabi_dsub>
 800638c:	9e02      	ldr	r6, [sp, #8]
 800638e:	9f01      	ldr	r7, [sp, #4]
 8006390:	3630      	adds	r6, #48	; 0x30
 8006392:	f805 6b01 	strb.w	r6, [r5], #1
 8006396:	9e00      	ldr	r6, [sp, #0]
 8006398:	1bae      	subs	r6, r5, r6
 800639a:	42b7      	cmp	r7, r6
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	d137      	bne.n	8006412 <_dtoa_r+0x722>
 80063a2:	f7f9 ff73 	bl	800028c <__adddf3>
 80063a6:	4642      	mov	r2, r8
 80063a8:	464b      	mov	r3, r9
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	f7fa fbb3 	bl	8000b18 <__aeabi_dcmpgt>
 80063b2:	b9c8      	cbnz	r0, 80063e8 <_dtoa_r+0x6f8>
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	f7fa fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80063c0:	b110      	cbz	r0, 80063c8 <_dtoa_r+0x6d8>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	07d9      	lsls	r1, r3, #31
 80063c6:	d40f      	bmi.n	80063e8 <_dtoa_r+0x6f8>
 80063c8:	4620      	mov	r0, r4
 80063ca:	4659      	mov	r1, fp
 80063cc:	f000 fad6 	bl	800697c <_Bfree>
 80063d0:	2300      	movs	r3, #0
 80063d2:	702b      	strb	r3, [r5, #0]
 80063d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d6:	f10a 0001 	add.w	r0, sl, #1
 80063da:	6018      	str	r0, [r3, #0]
 80063dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f acd8 	beq.w	8005d94 <_dtoa_r+0xa4>
 80063e4:	601d      	str	r5, [r3, #0]
 80063e6:	e4d5      	b.n	8005d94 <_dtoa_r+0xa4>
 80063e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80063ec:	462b      	mov	r3, r5
 80063ee:	461d      	mov	r5, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a39      	cmp	r2, #57	; 0x39
 80063f6:	d108      	bne.n	800640a <_dtoa_r+0x71a>
 80063f8:	9a00      	ldr	r2, [sp, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1f7      	bne.n	80063ee <_dtoa_r+0x6fe>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	9900      	ldr	r1, [sp, #0]
 8006402:	3201      	adds	r2, #1
 8006404:	9207      	str	r2, [sp, #28]
 8006406:	2230      	movs	r2, #48	; 0x30
 8006408:	700a      	strb	r2, [r1, #0]
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	3201      	adds	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e78c      	b.n	800632c <_dtoa_r+0x63c>
 8006412:	4b7f      	ldr	r3, [pc, #508]	; (8006610 <_dtoa_r+0x920>)
 8006414:	2200      	movs	r2, #0
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_dmul>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4606      	mov	r6, r0
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8006426:	2800      	cmp	r0, #0
 8006428:	d09b      	beq.n	8006362 <_dtoa_r+0x672>
 800642a:	e7cd      	b.n	80063c8 <_dtoa_r+0x6d8>
 800642c:	9a08      	ldr	r2, [sp, #32]
 800642e:	2a00      	cmp	r2, #0
 8006430:	f000 80c4 	beq.w	80065bc <_dtoa_r+0x8cc>
 8006434:	9a05      	ldr	r2, [sp, #20]
 8006436:	2a01      	cmp	r2, #1
 8006438:	f300 80a8 	bgt.w	800658c <_dtoa_r+0x89c>
 800643c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800643e:	2a00      	cmp	r2, #0
 8006440:	f000 80a0 	beq.w	8006584 <_dtoa_r+0x894>
 8006444:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006448:	9e06      	ldr	r6, [sp, #24]
 800644a:	4645      	mov	r5, r8
 800644c:	9a04      	ldr	r2, [sp, #16]
 800644e:	2101      	movs	r1, #1
 8006450:	441a      	add	r2, r3
 8006452:	4620      	mov	r0, r4
 8006454:	4498      	add	r8, r3
 8006456:	9204      	str	r2, [sp, #16]
 8006458:	f000 fb4c 	bl	8006af4 <__i2b>
 800645c:	4607      	mov	r7, r0
 800645e:	2d00      	cmp	r5, #0
 8006460:	dd0b      	ble.n	800647a <_dtoa_r+0x78a>
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd08      	ble.n	800647a <_dtoa_r+0x78a>
 8006468:	42ab      	cmp	r3, r5
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	bfa8      	it	ge
 800646e:	462b      	movge	r3, r5
 8006470:	eba8 0803 	sub.w	r8, r8, r3
 8006474:	1aed      	subs	r5, r5, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	b1fb      	cbz	r3, 80064be <_dtoa_r+0x7ce>
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 809f 	beq.w	80065c4 <_dtoa_r+0x8d4>
 8006486:	2e00      	cmp	r6, #0
 8006488:	dd11      	ble.n	80064ae <_dtoa_r+0x7be>
 800648a:	4639      	mov	r1, r7
 800648c:	4632      	mov	r2, r6
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fbec 	bl	8006c6c <__pow5mult>
 8006494:	465a      	mov	r2, fp
 8006496:	4601      	mov	r1, r0
 8006498:	4607      	mov	r7, r0
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fb40 	bl	8006b20 <__multiply>
 80064a0:	4659      	mov	r1, fp
 80064a2:	9007      	str	r0, [sp, #28]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fa69 	bl	800697c <_Bfree>
 80064aa:	9b07      	ldr	r3, [sp, #28]
 80064ac:	469b      	mov	fp, r3
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	1b9a      	subs	r2, r3, r6
 80064b2:	d004      	beq.n	80064be <_dtoa_r+0x7ce>
 80064b4:	4659      	mov	r1, fp
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fbd8 	bl	8006c6c <__pow5mult>
 80064bc:	4683      	mov	fp, r0
 80064be:	2101      	movs	r1, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fb17 	bl	8006af4 <__i2b>
 80064c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	4606      	mov	r6, r0
 80064cc:	dd7c      	ble.n	80065c8 <_dtoa_r+0x8d8>
 80064ce:	461a      	mov	r2, r3
 80064d0:	4601      	mov	r1, r0
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fbca 	bl	8006c6c <__pow5mult>
 80064d8:	9b05      	ldr	r3, [sp, #20]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	4606      	mov	r6, r0
 80064de:	dd76      	ble.n	80065ce <_dtoa_r+0x8de>
 80064e0:	2300      	movs	r3, #0
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	6933      	ldr	r3, [r6, #16]
 80064e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064ea:	6918      	ldr	r0, [r3, #16]
 80064ec:	f000 fab2 	bl	8006a54 <__hi0bits>
 80064f0:	f1c0 0020 	rsb	r0, r0, #32
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	4418      	add	r0, r3
 80064f8:	f010 001f 	ands.w	r0, r0, #31
 80064fc:	f000 8086 	beq.w	800660c <_dtoa_r+0x91c>
 8006500:	f1c0 0320 	rsb	r3, r0, #32
 8006504:	2b04      	cmp	r3, #4
 8006506:	dd7f      	ble.n	8006608 <_dtoa_r+0x918>
 8006508:	f1c0 001c 	rsb	r0, r0, #28
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	4403      	add	r3, r0
 8006510:	4480      	add	r8, r0
 8006512:	4405      	add	r5, r0
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x838>
 800651c:	4659      	mov	r1, fp
 800651e:	4642      	mov	r2, r8
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fbfd 	bl	8006d20 <__lshift>
 8006526:	4683      	mov	fp, r0
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd05      	ble.n	800653a <_dtoa_r+0x84a>
 800652e:	4631      	mov	r1, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fbf4 	bl	8006d20 <__lshift>
 8006538:	4606      	mov	r6, r0
 800653a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d069      	beq.n	8006614 <_dtoa_r+0x924>
 8006540:	4631      	mov	r1, r6
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fc58 	bl	8006df8 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	da63      	bge.n	8006614 <_dtoa_r+0x924>
 800654c:	2300      	movs	r3, #0
 800654e:	4659      	mov	r1, fp
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fa34 	bl	80069c0 <__multadd>
 8006558:	9b08      	ldr	r3, [sp, #32]
 800655a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800655e:	4683      	mov	fp, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 818f 	beq.w	8006884 <_dtoa_r+0xb94>
 8006566:	4639      	mov	r1, r7
 8006568:	2300      	movs	r3, #0
 800656a:	220a      	movs	r2, #10
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fa27 	bl	80069c0 <__multadd>
 8006572:	f1b9 0f00 	cmp.w	r9, #0
 8006576:	4607      	mov	r7, r0
 8006578:	f300 808e 	bgt.w	8006698 <_dtoa_r+0x9a8>
 800657c:	9b05      	ldr	r3, [sp, #20]
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc50      	bgt.n	8006624 <_dtoa_r+0x934>
 8006582:	e089      	b.n	8006698 <_dtoa_r+0x9a8>
 8006584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800658a:	e75d      	b.n	8006448 <_dtoa_r+0x758>
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	1e5e      	subs	r6, r3, #1
 8006590:	9b06      	ldr	r3, [sp, #24]
 8006592:	42b3      	cmp	r3, r6
 8006594:	bfbf      	itttt	lt
 8006596:	9b06      	ldrlt	r3, [sp, #24]
 8006598:	9606      	strlt	r6, [sp, #24]
 800659a:	1af2      	sublt	r2, r6, r3
 800659c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800659e:	bfb6      	itet	lt
 80065a0:	189b      	addlt	r3, r3, r2
 80065a2:	1b9e      	subge	r6, r3, r6
 80065a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	bfb8      	it	lt
 80065aa:	2600      	movlt	r6, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb5      	itete	lt
 80065b0:	eba8 0503 	sublt.w	r5, r8, r3
 80065b4:	9b01      	ldrge	r3, [sp, #4]
 80065b6:	2300      	movlt	r3, #0
 80065b8:	4645      	movge	r5, r8
 80065ba:	e747      	b.n	800644c <_dtoa_r+0x75c>
 80065bc:	9e06      	ldr	r6, [sp, #24]
 80065be:	9f08      	ldr	r7, [sp, #32]
 80065c0:	4645      	mov	r5, r8
 80065c2:	e74c      	b.n	800645e <_dtoa_r+0x76e>
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	e775      	b.n	80064b4 <_dtoa_r+0x7c4>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	dc18      	bgt.n	8006600 <_dtoa_r+0x910>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	b9b3      	cbnz	r3, 8006600 <_dtoa_r+0x910>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d8:	b9a3      	cbnz	r3, 8006604 <_dtoa_r+0x914>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e0:	0d1b      	lsrs	r3, r3, #20
 80065e2:	051b      	lsls	r3, r3, #20
 80065e4:	b12b      	cbz	r3, 80065f2 <_dtoa_r+0x902>
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	f108 0801 	add.w	r8, r8, #1
 80065f0:	2301      	movs	r3, #1
 80065f2:	9306      	str	r3, [sp, #24]
 80065f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f47f af74 	bne.w	80064e4 <_dtoa_r+0x7f4>
 80065fc:	2001      	movs	r0, #1
 80065fe:	e779      	b.n	80064f4 <_dtoa_r+0x804>
 8006600:	2300      	movs	r3, #0
 8006602:	e7f6      	b.n	80065f2 <_dtoa_r+0x902>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	e7f4      	b.n	80065f2 <_dtoa_r+0x902>
 8006608:	d085      	beq.n	8006516 <_dtoa_r+0x826>
 800660a:	4618      	mov	r0, r3
 800660c:	301c      	adds	r0, #28
 800660e:	e77d      	b.n	800650c <_dtoa_r+0x81c>
 8006610:	40240000 	.word	0x40240000
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dc38      	bgt.n	800668c <_dtoa_r+0x99c>
 800661a:	9b05      	ldr	r3, [sp, #20]
 800661c:	2b02      	cmp	r3, #2
 800661e:	dd35      	ble.n	800668c <_dtoa_r+0x99c>
 8006620:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006624:	f1b9 0f00 	cmp.w	r9, #0
 8006628:	d10d      	bne.n	8006646 <_dtoa_r+0x956>
 800662a:	4631      	mov	r1, r6
 800662c:	464b      	mov	r3, r9
 800662e:	2205      	movs	r2, #5
 8006630:	4620      	mov	r0, r4
 8006632:	f000 f9c5 	bl	80069c0 <__multadd>
 8006636:	4601      	mov	r1, r0
 8006638:	4606      	mov	r6, r0
 800663a:	4658      	mov	r0, fp
 800663c:	f000 fbdc 	bl	8006df8 <__mcmp>
 8006640:	2800      	cmp	r0, #0
 8006642:	f73f adbd 	bgt.w	80061c0 <_dtoa_r+0x4d0>
 8006646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	ea6f 0a03 	mvn.w	sl, r3
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	4631      	mov	r1, r6
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f991 	bl	800697c <_Bfree>
 800665a:	2f00      	cmp	r7, #0
 800665c:	f43f aeb4 	beq.w	80063c8 <_dtoa_r+0x6d8>
 8006660:	f1b8 0f00 	cmp.w	r8, #0
 8006664:	d005      	beq.n	8006672 <_dtoa_r+0x982>
 8006666:	45b8      	cmp	r8, r7
 8006668:	d003      	beq.n	8006672 <_dtoa_r+0x982>
 800666a:	4641      	mov	r1, r8
 800666c:	4620      	mov	r0, r4
 800666e:	f000 f985 	bl	800697c <_Bfree>
 8006672:	4639      	mov	r1, r7
 8006674:	4620      	mov	r0, r4
 8006676:	f000 f981 	bl	800697c <_Bfree>
 800667a:	e6a5      	b.n	80063c8 <_dtoa_r+0x6d8>
 800667c:	2600      	movs	r6, #0
 800667e:	4637      	mov	r7, r6
 8006680:	e7e1      	b.n	8006646 <_dtoa_r+0x956>
 8006682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006688:	4637      	mov	r7, r6
 800668a:	e599      	b.n	80061c0 <_dtoa_r+0x4d0>
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80fd 	beq.w	8006892 <_dtoa_r+0xba2>
 8006698:	2d00      	cmp	r5, #0
 800669a:	dd05      	ble.n	80066a8 <_dtoa_r+0x9b8>
 800669c:	4639      	mov	r1, r7
 800669e:	462a      	mov	r2, r5
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fb3d 	bl	8006d20 <__lshift>
 80066a6:	4607      	mov	r7, r0
 80066a8:	9b06      	ldr	r3, [sp, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d05c      	beq.n	8006768 <_dtoa_r+0xa78>
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f923 	bl	80068fc <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b928      	cbnz	r0, 80066c6 <_dtoa_r+0x9d6>
 80066ba:	4b80      	ldr	r3, [pc, #512]	; (80068bc <_dtoa_r+0xbcc>)
 80066bc:	4602      	mov	r2, r0
 80066be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066c2:	f7ff bb2e 	b.w	8005d22 <_dtoa_r+0x32>
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	3202      	adds	r2, #2
 80066ca:	0092      	lsls	r2, r2, #2
 80066cc:	f107 010c 	add.w	r1, r7, #12
 80066d0:	300c      	adds	r0, #12
 80066d2:	f000 f905 	bl	80068e0 <memcpy>
 80066d6:	2201      	movs	r2, #1
 80066d8:	4629      	mov	r1, r5
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fb20 	bl	8006d20 <__lshift>
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	444b      	add	r3, r9
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	9b02      	ldr	r3, [sp, #8]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	46b8      	mov	r8, r7
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	4607      	mov	r7, r0
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	4631      	mov	r1, r6
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4658      	mov	r0, fp
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	f7ff fa67 	bl	8005bd4 <quorem>
 8006706:	4603      	mov	r3, r0
 8006708:	3330      	adds	r3, #48	; 0x30
 800670a:	9004      	str	r0, [sp, #16]
 800670c:	4641      	mov	r1, r8
 800670e:	4658      	mov	r0, fp
 8006710:	9308      	str	r3, [sp, #32]
 8006712:	f000 fb71 	bl	8006df8 <__mcmp>
 8006716:	463a      	mov	r2, r7
 8006718:	4681      	mov	r9, r0
 800671a:	4631      	mov	r1, r6
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fb87 	bl	8006e30 <__mdiff>
 8006722:	68c2      	ldr	r2, [r0, #12]
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	4605      	mov	r5, r0
 8006728:	bb02      	cbnz	r2, 800676c <_dtoa_r+0xa7c>
 800672a:	4601      	mov	r1, r0
 800672c:	4658      	mov	r0, fp
 800672e:	f000 fb63 	bl	8006df8 <__mcmp>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	4602      	mov	r2, r0
 8006736:	4629      	mov	r1, r5
 8006738:	4620      	mov	r0, r4
 800673a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800673e:	f000 f91d 	bl	800697c <_Bfree>
 8006742:	9b05      	ldr	r3, [sp, #20]
 8006744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006746:	9d01      	ldr	r5, [sp, #4]
 8006748:	ea43 0102 	orr.w	r1, r3, r2
 800674c:	9b06      	ldr	r3, [sp, #24]
 800674e:	430b      	orrs	r3, r1
 8006750:	9b08      	ldr	r3, [sp, #32]
 8006752:	d10d      	bne.n	8006770 <_dtoa_r+0xa80>
 8006754:	2b39      	cmp	r3, #57	; 0x39
 8006756:	d029      	beq.n	80067ac <_dtoa_r+0xabc>
 8006758:	f1b9 0f00 	cmp.w	r9, #0
 800675c:	dd01      	ble.n	8006762 <_dtoa_r+0xa72>
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	3331      	adds	r3, #49	; 0x31
 8006762:	9a02      	ldr	r2, [sp, #8]
 8006764:	7013      	strb	r3, [r2, #0]
 8006766:	e774      	b.n	8006652 <_dtoa_r+0x962>
 8006768:	4638      	mov	r0, r7
 800676a:	e7b9      	b.n	80066e0 <_dtoa_r+0x9f0>
 800676c:	2201      	movs	r2, #1
 800676e:	e7e2      	b.n	8006736 <_dtoa_r+0xa46>
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	db06      	blt.n	8006784 <_dtoa_r+0xa94>
 8006776:	9905      	ldr	r1, [sp, #20]
 8006778:	ea41 0909 	orr.w	r9, r1, r9
 800677c:	9906      	ldr	r1, [sp, #24]
 800677e:	ea59 0101 	orrs.w	r1, r9, r1
 8006782:	d120      	bne.n	80067c6 <_dtoa_r+0xad6>
 8006784:	2a00      	cmp	r2, #0
 8006786:	ddec      	ble.n	8006762 <_dtoa_r+0xa72>
 8006788:	4659      	mov	r1, fp
 800678a:	2201      	movs	r2, #1
 800678c:	4620      	mov	r0, r4
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f000 fac6 	bl	8006d20 <__lshift>
 8006794:	4631      	mov	r1, r6
 8006796:	4683      	mov	fp, r0
 8006798:	f000 fb2e 	bl	8006df8 <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	dc02      	bgt.n	80067a8 <_dtoa_r+0xab8>
 80067a2:	d1de      	bne.n	8006762 <_dtoa_r+0xa72>
 80067a4:	07da      	lsls	r2, r3, #31
 80067a6:	d5dc      	bpl.n	8006762 <_dtoa_r+0xa72>
 80067a8:	2b39      	cmp	r3, #57	; 0x39
 80067aa:	d1d8      	bne.n	800675e <_dtoa_r+0xa6e>
 80067ac:	9a02      	ldr	r2, [sp, #8]
 80067ae:	2339      	movs	r3, #57	; 0x39
 80067b0:	7013      	strb	r3, [r2, #0]
 80067b2:	462b      	mov	r3, r5
 80067b4:	461d      	mov	r5, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067bc:	2a39      	cmp	r2, #57	; 0x39
 80067be:	d050      	beq.n	8006862 <_dtoa_r+0xb72>
 80067c0:	3201      	adds	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e745      	b.n	8006652 <_dtoa_r+0x962>
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	dd03      	ble.n	80067d2 <_dtoa_r+0xae2>
 80067ca:	2b39      	cmp	r3, #57	; 0x39
 80067cc:	d0ee      	beq.n	80067ac <_dtoa_r+0xabc>
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7c7      	b.n	8006762 <_dtoa_r+0xa72>
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	9907      	ldr	r1, [sp, #28]
 80067d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067da:	428a      	cmp	r2, r1
 80067dc:	d02a      	beq.n	8006834 <_dtoa_r+0xb44>
 80067de:	4659      	mov	r1, fp
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 f8eb 	bl	80069c0 <__multadd>
 80067ea:	45b8      	cmp	r8, r7
 80067ec:	4683      	mov	fp, r0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 020a 	mov.w	r2, #10
 80067f6:	4641      	mov	r1, r8
 80067f8:	4620      	mov	r0, r4
 80067fa:	d107      	bne.n	800680c <_dtoa_r+0xb1c>
 80067fc:	f000 f8e0 	bl	80069c0 <__multadd>
 8006800:	4680      	mov	r8, r0
 8006802:	4607      	mov	r7, r0
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	e775      	b.n	80066f8 <_dtoa_r+0xa08>
 800680c:	f000 f8d8 	bl	80069c0 <__multadd>
 8006810:	4639      	mov	r1, r7
 8006812:	4680      	mov	r8, r0
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f8d1 	bl	80069c0 <__multadd>
 800681e:	4607      	mov	r7, r0
 8006820:	e7f0      	b.n	8006804 <_dtoa_r+0xb14>
 8006822:	f1b9 0f00 	cmp.w	r9, #0
 8006826:	9a00      	ldr	r2, [sp, #0]
 8006828:	bfcc      	ite	gt
 800682a:	464d      	movgt	r5, r9
 800682c:	2501      	movle	r5, #1
 800682e:	4415      	add	r5, r2
 8006830:	f04f 0800 	mov.w	r8, #0
 8006834:	4659      	mov	r1, fp
 8006836:	2201      	movs	r2, #1
 8006838:	4620      	mov	r0, r4
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	f000 fa70 	bl	8006d20 <__lshift>
 8006840:	4631      	mov	r1, r6
 8006842:	4683      	mov	fp, r0
 8006844:	f000 fad8 	bl	8006df8 <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	dcb2      	bgt.n	80067b2 <_dtoa_r+0xac2>
 800684c:	d102      	bne.n	8006854 <_dtoa_r+0xb64>
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	07db      	lsls	r3, r3, #31
 8006852:	d4ae      	bmi.n	80067b2 <_dtoa_r+0xac2>
 8006854:	462b      	mov	r3, r5
 8006856:	461d      	mov	r5, r3
 8006858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800685c:	2a30      	cmp	r2, #48	; 0x30
 800685e:	d0fa      	beq.n	8006856 <_dtoa_r+0xb66>
 8006860:	e6f7      	b.n	8006652 <_dtoa_r+0x962>
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d1a5      	bne.n	80067b4 <_dtoa_r+0xac4>
 8006868:	f10a 0a01 	add.w	sl, sl, #1
 800686c:	2331      	movs	r3, #49	; 0x31
 800686e:	e779      	b.n	8006764 <_dtoa_r+0xa74>
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <_dtoa_r+0xbd0>)
 8006872:	f7ff baaf 	b.w	8005dd4 <_dtoa_r+0xe4>
 8006876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f aa86 	bne.w	8005d8a <_dtoa_r+0x9a>
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <_dtoa_r+0xbd4>)
 8006880:	f7ff baa8 	b.w	8005dd4 <_dtoa_r+0xe4>
 8006884:	f1b9 0f00 	cmp.w	r9, #0
 8006888:	dc03      	bgt.n	8006892 <_dtoa_r+0xba2>
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	2b02      	cmp	r3, #2
 800688e:	f73f aec9 	bgt.w	8006624 <_dtoa_r+0x934>
 8006892:	9d00      	ldr	r5, [sp, #0]
 8006894:	4631      	mov	r1, r6
 8006896:	4658      	mov	r0, fp
 8006898:	f7ff f99c 	bl	8005bd4 <quorem>
 800689c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068a0:	f805 3b01 	strb.w	r3, [r5], #1
 80068a4:	9a00      	ldr	r2, [sp, #0]
 80068a6:	1aaa      	subs	r2, r5, r2
 80068a8:	4591      	cmp	r9, r2
 80068aa:	ddba      	ble.n	8006822 <_dtoa_r+0xb32>
 80068ac:	4659      	mov	r1, fp
 80068ae:	2300      	movs	r3, #0
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 f884 	bl	80069c0 <__multadd>
 80068b8:	4683      	mov	fp, r0
 80068ba:	e7eb      	b.n	8006894 <_dtoa_r+0xba4>
 80068bc:	0800815f 	.word	0x0800815f
 80068c0:	080080b8 	.word	0x080080b8
 80068c4:	080080dc 	.word	0x080080dc

080068c8 <_localeconv_r>:
 80068c8:	4800      	ldr	r0, [pc, #0]	; (80068cc <_localeconv_r+0x4>)
 80068ca:	4770      	bx	lr
 80068cc:	20000160 	.word	0x20000160

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 bbef 	b.w	80070b8 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <memcpy>:
 80068e0:	440a      	add	r2, r1
 80068e2:	4291      	cmp	r1, r2
 80068e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	4770      	bx	lr
 80068ec:	b510      	push	{r4, lr}
 80068ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d1f9      	bne.n	80068ee <memcpy+0xe>
 80068fa:	bd10      	pop	{r4, pc}

080068fc <_Balloc>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	b976      	cbnz	r6, 8006924 <_Balloc+0x28>
 8006906:	2010      	movs	r0, #16
 8006908:	f7ff ffe2 	bl	80068d0 <malloc>
 800690c:	4602      	mov	r2, r0
 800690e:	6260      	str	r0, [r4, #36]	; 0x24
 8006910:	b920      	cbnz	r0, 800691c <_Balloc+0x20>
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <_Balloc+0x78>)
 8006914:	4818      	ldr	r0, [pc, #96]	; (8006978 <_Balloc+0x7c>)
 8006916:	2166      	movs	r1, #102	; 0x66
 8006918:	f000 fd94 	bl	8007444 <__assert_func>
 800691c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006920:	6006      	str	r6, [r0, #0]
 8006922:	60c6      	str	r6, [r0, #12]
 8006924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006926:	68f3      	ldr	r3, [r6, #12]
 8006928:	b183      	cbz	r3, 800694c <_Balloc+0x50>
 800692a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006932:	b9b8      	cbnz	r0, 8006964 <_Balloc+0x68>
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f605 	lsl.w	r6, r1, r5
 800693a:	1d72      	adds	r2, r6, #5
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fb5a 	bl	8006ff8 <_calloc_r>
 8006944:	b160      	cbz	r0, 8006960 <_Balloc+0x64>
 8006946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800694a:	e00e      	b.n	800696a <_Balloc+0x6e>
 800694c:	2221      	movs	r2, #33	; 0x21
 800694e:	2104      	movs	r1, #4
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fb51 	bl	8006ff8 <_calloc_r>
 8006956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006958:	60f0      	str	r0, [r6, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e4      	bne.n	800692a <_Balloc+0x2e>
 8006960:	2000      	movs	r0, #0
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	6802      	ldr	r2, [r0, #0]
 8006966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800696a:	2300      	movs	r3, #0
 800696c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006970:	e7f7      	b.n	8006962 <_Balloc+0x66>
 8006972:	bf00      	nop
 8006974:	080080e9 	.word	0x080080e9
 8006978:	08008170 	.word	0x08008170

0800697c <_Bfree>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b976      	cbnz	r6, 80069a4 <_Bfree+0x28>
 8006986:	2010      	movs	r0, #16
 8006988:	f7ff ffa2 	bl	80068d0 <malloc>
 800698c:	4602      	mov	r2, r0
 800698e:	6268      	str	r0, [r5, #36]	; 0x24
 8006990:	b920      	cbnz	r0, 800699c <_Bfree+0x20>
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <_Bfree+0x3c>)
 8006994:	4809      	ldr	r0, [pc, #36]	; (80069bc <_Bfree+0x40>)
 8006996:	218a      	movs	r1, #138	; 0x8a
 8006998:	f000 fd54 	bl	8007444 <__assert_func>
 800699c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069a0:	6006      	str	r6, [r0, #0]
 80069a2:	60c6      	str	r6, [r0, #12]
 80069a4:	b13c      	cbz	r4, 80069b6 <_Bfree+0x3a>
 80069a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069b0:	6021      	str	r1, [r4, #0]
 80069b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	080080e9 	.word	0x080080e9
 80069bc:	08008170 	.word	0x08008170

080069c0 <__multadd>:
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	690e      	ldr	r6, [r1, #16]
 80069c6:	4607      	mov	r7, r0
 80069c8:	4698      	mov	r8, r3
 80069ca:	460c      	mov	r4, r1
 80069cc:	f101 0014 	add.w	r0, r1, #20
 80069d0:	2300      	movs	r3, #0
 80069d2:	6805      	ldr	r5, [r0, #0]
 80069d4:	b2a9      	uxth	r1, r5
 80069d6:	fb02 8101 	mla	r1, r2, r1, r8
 80069da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069de:	0c2d      	lsrs	r5, r5, #16
 80069e0:	fb02 c505 	mla	r5, r2, r5, ip
 80069e4:	b289      	uxth	r1, r1
 80069e6:	3301      	adds	r3, #1
 80069e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069ec:	429e      	cmp	r6, r3
 80069ee:	f840 1b04 	str.w	r1, [r0], #4
 80069f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069f6:	dcec      	bgt.n	80069d2 <__multadd+0x12>
 80069f8:	f1b8 0f00 	cmp.w	r8, #0
 80069fc:	d022      	beq.n	8006a44 <__multadd+0x84>
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	42b3      	cmp	r3, r6
 8006a02:	dc19      	bgt.n	8006a38 <__multadd+0x78>
 8006a04:	6861      	ldr	r1, [r4, #4]
 8006a06:	4638      	mov	r0, r7
 8006a08:	3101      	adds	r1, #1
 8006a0a:	f7ff ff77 	bl	80068fc <_Balloc>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	b928      	cbnz	r0, 8006a1e <__multadd+0x5e>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <__multadd+0x8c>)
 8006a16:	480e      	ldr	r0, [pc, #56]	; (8006a50 <__multadd+0x90>)
 8006a18:	21b5      	movs	r1, #181	; 0xb5
 8006a1a:	f000 fd13 	bl	8007444 <__assert_func>
 8006a1e:	6922      	ldr	r2, [r4, #16]
 8006a20:	3202      	adds	r2, #2
 8006a22:	f104 010c 	add.w	r1, r4, #12
 8006a26:	0092      	lsls	r2, r2, #2
 8006a28:	300c      	adds	r0, #12
 8006a2a:	f7ff ff59 	bl	80068e0 <memcpy>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ffa3 	bl	800697c <_Bfree>
 8006a36:	462c      	mov	r4, r5
 8006a38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a42:	6126      	str	r6, [r4, #16]
 8006a44:	4620      	mov	r0, r4
 8006a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800815f 	.word	0x0800815f
 8006a50:	08008170 	.word	0x08008170

08006a54 <__hi0bits>:
 8006a54:	0c03      	lsrs	r3, r0, #16
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	b9d3      	cbnz	r3, 8006a90 <__hi0bits+0x3c>
 8006a5a:	0400      	lsls	r0, r0, #16
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a62:	bf04      	itt	eq
 8006a64:	0200      	lsleq	r0, r0, #8
 8006a66:	3308      	addeq	r3, #8
 8006a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a6c:	bf04      	itt	eq
 8006a6e:	0100      	lsleq	r0, r0, #4
 8006a70:	3304      	addeq	r3, #4
 8006a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a76:	bf04      	itt	eq
 8006a78:	0080      	lsleq	r0, r0, #2
 8006a7a:	3302      	addeq	r3, #2
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	db05      	blt.n	8006a8c <__hi0bits+0x38>
 8006a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a84:	f103 0301 	add.w	r3, r3, #1
 8006a88:	bf08      	it	eq
 8006a8a:	2320      	moveq	r3, #32
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4770      	bx	lr
 8006a90:	2300      	movs	r3, #0
 8006a92:	e7e4      	b.n	8006a5e <__hi0bits+0xa>

08006a94 <__lo0bits>:
 8006a94:	6803      	ldr	r3, [r0, #0]
 8006a96:	f013 0207 	ands.w	r2, r3, #7
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	d00b      	beq.n	8006ab6 <__lo0bits+0x22>
 8006a9e:	07da      	lsls	r2, r3, #31
 8006aa0:	d424      	bmi.n	8006aec <__lo0bits+0x58>
 8006aa2:	0798      	lsls	r0, r3, #30
 8006aa4:	bf49      	itett	mi
 8006aa6:	085b      	lsrmi	r3, r3, #1
 8006aa8:	089b      	lsrpl	r3, r3, #2
 8006aaa:	2001      	movmi	r0, #1
 8006aac:	600b      	strmi	r3, [r1, #0]
 8006aae:	bf5c      	itt	pl
 8006ab0:	600b      	strpl	r3, [r1, #0]
 8006ab2:	2002      	movpl	r0, #2
 8006ab4:	4770      	bx	lr
 8006ab6:	b298      	uxth	r0, r3
 8006ab8:	b9b0      	cbnz	r0, 8006ae8 <__lo0bits+0x54>
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	2010      	movs	r0, #16
 8006abe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ac2:	bf04      	itt	eq
 8006ac4:	0a1b      	lsreq	r3, r3, #8
 8006ac6:	3008      	addeq	r0, #8
 8006ac8:	071a      	lsls	r2, r3, #28
 8006aca:	bf04      	itt	eq
 8006acc:	091b      	lsreq	r3, r3, #4
 8006ace:	3004      	addeq	r0, #4
 8006ad0:	079a      	lsls	r2, r3, #30
 8006ad2:	bf04      	itt	eq
 8006ad4:	089b      	lsreq	r3, r3, #2
 8006ad6:	3002      	addeq	r0, #2
 8006ad8:	07da      	lsls	r2, r3, #31
 8006ada:	d403      	bmi.n	8006ae4 <__lo0bits+0x50>
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	f100 0001 	add.w	r0, r0, #1
 8006ae2:	d005      	beq.n	8006af0 <__lo0bits+0x5c>
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	4770      	bx	lr
 8006ae8:	4610      	mov	r0, r2
 8006aea:	e7e8      	b.n	8006abe <__lo0bits+0x2a>
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr
 8006af0:	2020      	movs	r0, #32
 8006af2:	4770      	bx	lr

08006af4 <__i2b>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	2101      	movs	r1, #1
 8006afa:	f7ff feff 	bl	80068fc <_Balloc>
 8006afe:	4602      	mov	r2, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <__i2b+0x1a>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <__i2b+0x24>)
 8006b04:	4805      	ldr	r0, [pc, #20]	; (8006b1c <__i2b+0x28>)
 8006b06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b0a:	f000 fc9b 	bl	8007444 <__assert_func>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6144      	str	r4, [r0, #20]
 8006b12:	6103      	str	r3, [r0, #16]
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	bf00      	nop
 8006b18:	0800815f 	.word	0x0800815f
 8006b1c:	08008170 	.word	0x08008170

08006b20 <__multiply>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4614      	mov	r4, r2
 8006b26:	690a      	ldr	r2, [r1, #16]
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	bfb8      	it	lt
 8006b2e:	460b      	movlt	r3, r1
 8006b30:	460d      	mov	r5, r1
 8006b32:	bfbc      	itt	lt
 8006b34:	4625      	movlt	r5, r4
 8006b36:	461c      	movlt	r4, r3
 8006b38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b40:	68ab      	ldr	r3, [r5, #8]
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	eb0a 0709 	add.w	r7, sl, r9
 8006b48:	42bb      	cmp	r3, r7
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	bfb8      	it	lt
 8006b4e:	3101      	addlt	r1, #1
 8006b50:	f7ff fed4 	bl	80068fc <_Balloc>
 8006b54:	b930      	cbnz	r0, 8006b64 <__multiply+0x44>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <__multiply+0x144>)
 8006b5a:	4843      	ldr	r0, [pc, #268]	; (8006c68 <__multiply+0x148>)
 8006b5c:	f240 115d 	movw	r1, #349	; 0x15d
 8006b60:	f000 fc70 	bl	8007444 <__assert_func>
 8006b64:	f100 0614 	add.w	r6, r0, #20
 8006b68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b6c:	4633      	mov	r3, r6
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4543      	cmp	r3, r8
 8006b72:	d31e      	bcc.n	8006bb2 <__multiply+0x92>
 8006b74:	f105 0c14 	add.w	ip, r5, #20
 8006b78:	f104 0314 	add.w	r3, r4, #20
 8006b7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	ebac 0205 	sub.w	r2, ip, r5
 8006b8a:	3a15      	subs	r2, #21
 8006b8c:	f022 0203 	bic.w	r2, r2, #3
 8006b90:	3204      	adds	r2, #4
 8006b92:	f105 0115 	add.w	r1, r5, #21
 8006b96:	458c      	cmp	ip, r1
 8006b98:	bf38      	it	cc
 8006b9a:	2204      	movcc	r2, #4
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d808      	bhi.n	8006bb8 <__multiply+0x98>
 8006ba6:	2f00      	cmp	r7, #0
 8006ba8:	dc55      	bgt.n	8006c56 <__multiply+0x136>
 8006baa:	6107      	str	r7, [r0, #16]
 8006bac:	b005      	add	sp, #20
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb2:	f843 2b04 	str.w	r2, [r3], #4
 8006bb6:	e7db      	b.n	8006b70 <__multiply+0x50>
 8006bb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bbc:	f1ba 0f00 	cmp.w	sl, #0
 8006bc0:	d020      	beq.n	8006c04 <__multiply+0xe4>
 8006bc2:	f105 0e14 	add.w	lr, r5, #20
 8006bc6:	46b1      	mov	r9, r6
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006bce:	f8d9 b000 	ldr.w	fp, [r9]
 8006bd2:	b2a1      	uxth	r1, r4
 8006bd4:	fa1f fb8b 	uxth.w	fp, fp
 8006bd8:	fb0a b101 	mla	r1, sl, r1, fp
 8006bdc:	4411      	add	r1, r2
 8006bde:	f8d9 2000 	ldr.w	r2, [r9]
 8006be2:	0c24      	lsrs	r4, r4, #16
 8006be4:	0c12      	lsrs	r2, r2, #16
 8006be6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006bea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006bee:	b289      	uxth	r1, r1
 8006bf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006bf4:	45f4      	cmp	ip, lr
 8006bf6:	f849 1b04 	str.w	r1, [r9], #4
 8006bfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006bfe:	d8e4      	bhi.n	8006bca <__multiply+0xaa>
 8006c00:	9901      	ldr	r1, [sp, #4]
 8006c02:	5072      	str	r2, [r6, r1]
 8006c04:	9a03      	ldr	r2, [sp, #12]
 8006c06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	d01f      	beq.n	8006c52 <__multiply+0x132>
 8006c12:	6834      	ldr	r4, [r6, #0]
 8006c14:	f105 0114 	add.w	r1, r5, #20
 8006c18:	46b6      	mov	lr, r6
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	880a      	ldrh	r2, [r1, #0]
 8006c20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c24:	fb09 b202 	mla	r2, r9, r2, fp
 8006c28:	4492      	add	sl, r2
 8006c2a:	b2a4      	uxth	r4, r4
 8006c2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c30:	f84e 4b04 	str.w	r4, [lr], #4
 8006c34:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c38:	f8be 2000 	ldrh.w	r2, [lr]
 8006c3c:	0c24      	lsrs	r4, r4, #16
 8006c3e:	fb09 2404 	mla	r4, r9, r4, r2
 8006c42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c46:	458c      	cmp	ip, r1
 8006c48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c4c:	d8e7      	bhi.n	8006c1e <__multiply+0xfe>
 8006c4e:	9a01      	ldr	r2, [sp, #4]
 8006c50:	50b4      	str	r4, [r6, r2]
 8006c52:	3604      	adds	r6, #4
 8006c54:	e7a3      	b.n	8006b9e <__multiply+0x7e>
 8006c56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a5      	bne.n	8006baa <__multiply+0x8a>
 8006c5e:	3f01      	subs	r7, #1
 8006c60:	e7a1      	b.n	8006ba6 <__multiply+0x86>
 8006c62:	bf00      	nop
 8006c64:	0800815f 	.word	0x0800815f
 8006c68:	08008170 	.word	0x08008170

08006c6c <__pow5mult>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	4615      	mov	r5, r2
 8006c72:	f012 0203 	ands.w	r2, r2, #3
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	d007      	beq.n	8006c8c <__pow5mult+0x20>
 8006c7c:	4c25      	ldr	r4, [pc, #148]	; (8006d14 <__pow5mult+0xa8>)
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	2300      	movs	r3, #0
 8006c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c86:	f7ff fe9b 	bl	80069c0 <__multadd>
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	10ad      	asrs	r5, r5, #2
 8006c8e:	d03d      	beq.n	8006d0c <__pow5mult+0xa0>
 8006c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c92:	b97c      	cbnz	r4, 8006cb4 <__pow5mult+0x48>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f7ff fe1b 	bl	80068d0 <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c9e:	b928      	cbnz	r0, 8006cac <__pow5mult+0x40>
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <__pow5mult+0xac>)
 8006ca2:	481e      	ldr	r0, [pc, #120]	; (8006d1c <__pow5mult+0xb0>)
 8006ca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ca8:	f000 fbcc 	bl	8007444 <__assert_func>
 8006cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb0:	6004      	str	r4, [r0, #0]
 8006cb2:	60c4      	str	r4, [r0, #12]
 8006cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cbc:	b94c      	cbnz	r4, 8006cd2 <__pow5mult+0x66>
 8006cbe:	f240 2171 	movw	r1, #625	; 0x271
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ff16 	bl	8006af4 <__i2b>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	f04f 0900 	mov.w	r9, #0
 8006cd6:	07eb      	lsls	r3, r5, #31
 8006cd8:	d50a      	bpl.n	8006cf0 <__pow5mult+0x84>
 8006cda:	4639      	mov	r1, r7
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f7ff ff1e 	bl	8006b20 <__multiply>
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fe47 	bl	800697c <_Bfree>
 8006cee:	4647      	mov	r7, r8
 8006cf0:	106d      	asrs	r5, r5, #1
 8006cf2:	d00b      	beq.n	8006d0c <__pow5mult+0xa0>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	b938      	cbnz	r0, 8006d08 <__pow5mult+0x9c>
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff ff0f 	bl	8006b20 <__multiply>
 8006d02:	6020      	str	r0, [r4, #0]
 8006d04:	f8c0 9000 	str.w	r9, [r0]
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e7e4      	b.n	8006cd6 <__pow5mult+0x6a>
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d12:	bf00      	nop
 8006d14:	080082c0 	.word	0x080082c0
 8006d18:	080080e9 	.word	0x080080e9
 8006d1c:	08008170 	.word	0x08008170

08006d20 <__lshift>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	460c      	mov	r4, r1
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	4607      	mov	r7, r0
 8006d32:	4691      	mov	r9, r2
 8006d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d38:	f108 0601 	add.w	r6, r8, #1
 8006d3c:	42b3      	cmp	r3, r6
 8006d3e:	db0b      	blt.n	8006d58 <__lshift+0x38>
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff fddb 	bl	80068fc <_Balloc>
 8006d46:	4605      	mov	r5, r0
 8006d48:	b948      	cbnz	r0, 8006d5e <__lshift+0x3e>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <__lshift+0xd0>)
 8006d4e:	4829      	ldr	r0, [pc, #164]	; (8006df4 <__lshift+0xd4>)
 8006d50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d54:	f000 fb76 	bl	8007444 <__assert_func>
 8006d58:	3101      	adds	r1, #1
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	e7ee      	b.n	8006d3c <__lshift+0x1c>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f100 0114 	add.w	r1, r0, #20
 8006d64:	f100 0210 	add.w	r2, r0, #16
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4553      	cmp	r3, sl
 8006d6c:	db33      	blt.n	8006dd6 <__lshift+0xb6>
 8006d6e:	6920      	ldr	r0, [r4, #16]
 8006d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d74:	f104 0314 	add.w	r3, r4, #20
 8006d78:	f019 091f 	ands.w	r9, r9, #31
 8006d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d84:	d02b      	beq.n	8006dde <__lshift+0xbe>
 8006d86:	f1c9 0e20 	rsb	lr, r9, #32
 8006d8a:	468a      	mov	sl, r1
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	fa00 f009 	lsl.w	r0, r0, r9
 8006d94:	4302      	orrs	r2, r0
 8006d96:	f84a 2b04 	str.w	r2, [sl], #4
 8006d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9e:	459c      	cmp	ip, r3
 8006da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006da4:	d8f3      	bhi.n	8006d8e <__lshift+0x6e>
 8006da6:	ebac 0304 	sub.w	r3, ip, r4
 8006daa:	3b15      	subs	r3, #21
 8006dac:	f023 0303 	bic.w	r3, r3, #3
 8006db0:	3304      	adds	r3, #4
 8006db2:	f104 0015 	add.w	r0, r4, #21
 8006db6:	4584      	cmp	ip, r0
 8006db8:	bf38      	it	cc
 8006dba:	2304      	movcc	r3, #4
 8006dbc:	50ca      	str	r2, [r1, r3]
 8006dbe:	b10a      	cbz	r2, 8006dc4 <__lshift+0xa4>
 8006dc0:	f108 0602 	add.w	r6, r8, #2
 8006dc4:	3e01      	subs	r6, #1
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	612e      	str	r6, [r5, #16]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	f7ff fdd6 	bl	800697c <_Bfree>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dda:	3301      	adds	r3, #1
 8006ddc:	e7c5      	b.n	8006d6a <__lshift+0x4a>
 8006dde:	3904      	subs	r1, #4
 8006de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de8:	459c      	cmp	ip, r3
 8006dea:	d8f9      	bhi.n	8006de0 <__lshift+0xc0>
 8006dec:	e7ea      	b.n	8006dc4 <__lshift+0xa4>
 8006dee:	bf00      	nop
 8006df0:	0800815f 	.word	0x0800815f
 8006df4:	08008170 	.word	0x08008170

08006df8 <__mcmp>:
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	6902      	ldr	r2, [r0, #16]
 8006dfc:	690c      	ldr	r4, [r1, #16]
 8006dfe:	1b12      	subs	r2, r2, r4
 8006e00:	d10e      	bne.n	8006e20 <__mcmp+0x28>
 8006e02:	f100 0314 	add.w	r3, r0, #20
 8006e06:	3114      	adds	r1, #20
 8006e08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d003      	beq.n	8006e24 <__mcmp+0x2c>
 8006e1c:	d305      	bcc.n	8006e2a <__mcmp+0x32>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4610      	mov	r0, r2
 8006e22:	bd30      	pop	{r4, r5, pc}
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d3f3      	bcc.n	8006e10 <__mcmp+0x18>
 8006e28:	e7fa      	b.n	8006e20 <__mcmp+0x28>
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	e7f7      	b.n	8006e20 <__mcmp+0x28>

08006e30 <__mdiff>:
 8006e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	460c      	mov	r4, r1
 8006e36:	4606      	mov	r6, r0
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4617      	mov	r7, r2
 8006e3e:	f7ff ffdb 	bl	8006df8 <__mcmp>
 8006e42:	1e05      	subs	r5, r0, #0
 8006e44:	d110      	bne.n	8006e68 <__mdiff+0x38>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff fd57 	bl	80068fc <_Balloc>
 8006e4e:	b930      	cbnz	r0, 8006e5e <__mdiff+0x2e>
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <__mdiff+0x108>)
 8006e52:	4602      	mov	r2, r0
 8006e54:	f240 2132 	movw	r1, #562	; 0x232
 8006e58:	4838      	ldr	r0, [pc, #224]	; (8006f3c <__mdiff+0x10c>)
 8006e5a:	f000 faf3 	bl	8007444 <__assert_func>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	bfa4      	itt	ge
 8006e6a:	463b      	movge	r3, r7
 8006e6c:	4627      	movge	r7, r4
 8006e6e:	4630      	mov	r0, r6
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	bfa6      	itte	ge
 8006e74:	461c      	movge	r4, r3
 8006e76:	2500      	movge	r5, #0
 8006e78:	2501      	movlt	r5, #1
 8006e7a:	f7ff fd3f 	bl	80068fc <_Balloc>
 8006e7e:	b920      	cbnz	r0, 8006e8a <__mdiff+0x5a>
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <__mdiff+0x108>)
 8006e82:	4602      	mov	r2, r0
 8006e84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e88:	e7e6      	b.n	8006e58 <__mdiff+0x28>
 8006e8a:	693e      	ldr	r6, [r7, #16]
 8006e8c:	60c5      	str	r5, [r0, #12]
 8006e8e:	6925      	ldr	r5, [r4, #16]
 8006e90:	f107 0114 	add.w	r1, r7, #20
 8006e94:	f104 0914 	add.w	r9, r4, #20
 8006e98:	f100 0e14 	add.w	lr, r0, #20
 8006e9c:	f107 0210 	add.w	r2, r7, #16
 8006ea0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ea4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ea8:	46f2      	mov	sl, lr
 8006eaa:	2700      	movs	r7, #0
 8006eac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eb4:	fa1f f883 	uxth.w	r8, r3
 8006eb8:	fa17 f78b 	uxtah	r7, r7, fp
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	eba7 0808 	sub.w	r8, r7, r8
 8006ec2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006eca:	fa1f f888 	uxth.w	r8, r8
 8006ece:	141f      	asrs	r7, r3, #16
 8006ed0:	454d      	cmp	r5, r9
 8006ed2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ed6:	f84a 3b04 	str.w	r3, [sl], #4
 8006eda:	d8e7      	bhi.n	8006eac <__mdiff+0x7c>
 8006edc:	1b2b      	subs	r3, r5, r4
 8006ede:	3b15      	subs	r3, #21
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	3415      	adds	r4, #21
 8006ee8:	42a5      	cmp	r5, r4
 8006eea:	bf38      	it	cc
 8006eec:	2304      	movcc	r3, #4
 8006eee:	4419      	add	r1, r3
 8006ef0:	4473      	add	r3, lr
 8006ef2:	469e      	mov	lr, r3
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	4565      	cmp	r5, ip
 8006ef8:	d30e      	bcc.n	8006f18 <__mdiff+0xe8>
 8006efa:	f10c 0203 	add.w	r2, ip, #3
 8006efe:	1a52      	subs	r2, r2, r1
 8006f00:	f022 0203 	bic.w	r2, r2, #3
 8006f04:	3903      	subs	r1, #3
 8006f06:	458c      	cmp	ip, r1
 8006f08:	bf38      	it	cc
 8006f0a:	2200      	movcc	r2, #0
 8006f0c:	441a      	add	r2, r3
 8006f0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f12:	b17b      	cbz	r3, 8006f34 <__mdiff+0x104>
 8006f14:	6106      	str	r6, [r0, #16]
 8006f16:	e7a5      	b.n	8006e64 <__mdiff+0x34>
 8006f18:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f1c:	fa17 f488 	uxtah	r4, r7, r8
 8006f20:	1422      	asrs	r2, r4, #16
 8006f22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f26:	b2a4      	uxth	r4, r4
 8006f28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f2c:	f84e 4b04 	str.w	r4, [lr], #4
 8006f30:	1417      	asrs	r7, r2, #16
 8006f32:	e7e0      	b.n	8006ef6 <__mdiff+0xc6>
 8006f34:	3e01      	subs	r6, #1
 8006f36:	e7ea      	b.n	8006f0e <__mdiff+0xde>
 8006f38:	0800815f 	.word	0x0800815f
 8006f3c:	08008170 	.word	0x08008170

08006f40 <__d2b>:
 8006f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4689      	mov	r9, r1
 8006f46:	2101      	movs	r1, #1
 8006f48:	ec57 6b10 	vmov	r6, r7, d0
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	f7ff fcd5 	bl	80068fc <_Balloc>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b930      	cbnz	r0, 8006f64 <__d2b+0x24>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <__d2b+0xb0>)
 8006f5a:	4826      	ldr	r0, [pc, #152]	; (8006ff4 <__d2b+0xb4>)
 8006f5c:	f240 310a 	movw	r1, #778	; 0x30a
 8006f60:	f000 fa70 	bl	8007444 <__assert_func>
 8006f64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f6c:	bb35      	cbnz	r5, 8006fbc <__d2b+0x7c>
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	d028      	beq.n	8006fc6 <__d2b+0x86>
 8006f74:	4668      	mov	r0, sp
 8006f76:	9600      	str	r6, [sp, #0]
 8006f78:	f7ff fd8c 	bl	8006a94 <__lo0bits>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	b300      	cbz	r0, 8006fc2 <__d2b+0x82>
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	f1c0 0320 	rsb	r3, r0, #32
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	40c2      	lsrs	r2, r0
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	61a3      	str	r3, [r4, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2202      	movne	r2, #2
 8006f9c:	2201      	moveq	r2, #1
 8006f9e:	6122      	str	r2, [r4, #16]
 8006fa0:	b1d5      	cbz	r5, 8006fd8 <__d2b+0x98>
 8006fa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa6:	4405      	add	r5, r0
 8006fa8:	f8c9 5000 	str.w	r5, [r9]
 8006fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fb0:	f8c8 0000 	str.w	r0, [r8]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc0:	e7d5      	b.n	8006f6e <__d2b+0x2e>
 8006fc2:	6161      	str	r1, [r4, #20]
 8006fc4:	e7e5      	b.n	8006f92 <__d2b+0x52>
 8006fc6:	a801      	add	r0, sp, #4
 8006fc8:	f7ff fd64 	bl	8006a94 <__lo0bits>
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	6163      	str	r3, [r4, #20]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	6122      	str	r2, [r4, #16]
 8006fd4:	3020      	adds	r0, #32
 8006fd6:	e7e3      	b.n	8006fa0 <__d2b+0x60>
 8006fd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fe0:	f8c9 0000 	str.w	r0, [r9]
 8006fe4:	6918      	ldr	r0, [r3, #16]
 8006fe6:	f7ff fd35 	bl	8006a54 <__hi0bits>
 8006fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fee:	e7df      	b.n	8006fb0 <__d2b+0x70>
 8006ff0:	0800815f 	.word	0x0800815f
 8006ff4:	08008170 	.word	0x08008170

08006ff8 <_calloc_r>:
 8006ff8:	b513      	push	{r0, r1, r4, lr}
 8006ffa:	434a      	muls	r2, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	f000 f85a 	bl	80070b8 <_malloc_r>
 8007004:	4604      	mov	r4, r0
 8007006:	b118      	cbz	r0, 8007010 <_calloc_r+0x18>
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	2100      	movs	r1, #0
 800700c:	f7fe f950 	bl	80052b0 <memset>
 8007010:	4620      	mov	r0, r4
 8007012:	b002      	add	sp, #8
 8007014:	bd10      	pop	{r4, pc}
	...

08007018 <_free_r>:
 8007018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800701a:	2900      	cmp	r1, #0
 800701c:	d048      	beq.n	80070b0 <_free_r+0x98>
 800701e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007022:	9001      	str	r0, [sp, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f1a1 0404 	sub.w	r4, r1, #4
 800702a:	bfb8      	it	lt
 800702c:	18e4      	addlt	r4, r4, r3
 800702e:	f000 fa65 	bl	80074fc <__malloc_lock>
 8007032:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <_free_r+0x9c>)
 8007034:	9801      	ldr	r0, [sp, #4]
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	4615      	mov	r5, r2
 800703a:	b933      	cbnz	r3, 800704a <_free_r+0x32>
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	6014      	str	r4, [r2, #0]
 8007040:	b003      	add	sp, #12
 8007042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007046:	f000 ba5f 	b.w	8007508 <__malloc_unlock>
 800704a:	42a3      	cmp	r3, r4
 800704c:	d90b      	bls.n	8007066 <_free_r+0x4e>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1862      	adds	r2, r4, r1
 8007052:	4293      	cmp	r3, r2
 8007054:	bf04      	itt	eq
 8007056:	681a      	ldreq	r2, [r3, #0]
 8007058:	685b      	ldreq	r3, [r3, #4]
 800705a:	6063      	str	r3, [r4, #4]
 800705c:	bf04      	itt	eq
 800705e:	1852      	addeq	r2, r2, r1
 8007060:	6022      	streq	r2, [r4, #0]
 8007062:	602c      	str	r4, [r5, #0]
 8007064:	e7ec      	b.n	8007040 <_free_r+0x28>
 8007066:	461a      	mov	r2, r3
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b10b      	cbz	r3, 8007070 <_free_r+0x58>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x4e>
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	1855      	adds	r5, r2, r1
 8007074:	42a5      	cmp	r5, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x78>
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	4421      	add	r1, r4
 800707c:	1854      	adds	r4, r2, r1
 800707e:	42a3      	cmp	r3, r4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	d1dd      	bne.n	8007040 <_free_r+0x28>
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	4421      	add	r1, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	e7d7      	b.n	8007040 <_free_r+0x28>
 8007090:	d902      	bls.n	8007098 <_free_r+0x80>
 8007092:	230c      	movs	r3, #12
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	e7d3      	b.n	8007040 <_free_r+0x28>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf04      	itt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6054      	str	r4, [r2, #4]
 80070ae:	e7c7      	b.n	8007040 <_free_r+0x28>
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	20000200 	.word	0x20000200

080070b8 <_malloc_r>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	1ccd      	adds	r5, r1, #3
 80070bc:	f025 0503 	bic.w	r5, r5, #3
 80070c0:	3508      	adds	r5, #8
 80070c2:	2d0c      	cmp	r5, #12
 80070c4:	bf38      	it	cc
 80070c6:	250c      	movcc	r5, #12
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	db01      	blt.n	80070d2 <_malloc_r+0x1a>
 80070ce:	42a9      	cmp	r1, r5
 80070d0:	d903      	bls.n	80070da <_malloc_r+0x22>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070da:	f000 fa0f 	bl	80074fc <__malloc_lock>
 80070de:	4921      	ldr	r1, [pc, #132]	; (8007164 <_malloc_r+0xac>)
 80070e0:	680a      	ldr	r2, [r1, #0]
 80070e2:	4614      	mov	r4, r2
 80070e4:	b99c      	cbnz	r4, 800710e <_malloc_r+0x56>
 80070e6:	4f20      	ldr	r7, [pc, #128]	; (8007168 <_malloc_r+0xb0>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b923      	cbnz	r3, 80070f6 <_malloc_r+0x3e>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f998 	bl	8007424 <_sbrk_r>
 80070f4:	6038      	str	r0, [r7, #0]
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f993 	bl	8007424 <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d123      	bne.n	800714a <_malloc_r+0x92>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f9fe 	bl	8007508 <__malloc_unlock>
 800710c:	e7e3      	b.n	80070d6 <_malloc_r+0x1e>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	1b5b      	subs	r3, r3, r5
 8007112:	d417      	bmi.n	8007144 <_malloc_r+0x8c>
 8007114:	2b0b      	cmp	r3, #11
 8007116:	d903      	bls.n	8007120 <_malloc_r+0x68>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	441c      	add	r4, r3
 800711c:	6025      	str	r5, [r4, #0]
 800711e:	e004      	b.n	800712a <_malloc_r+0x72>
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	42a2      	cmp	r2, r4
 8007124:	bf0c      	ite	eq
 8007126:	600b      	streq	r3, [r1, #0]
 8007128:	6053      	strne	r3, [r2, #4]
 800712a:	4630      	mov	r0, r6
 800712c:	f000 f9ec 	bl	8007508 <__malloc_unlock>
 8007130:	f104 000b 	add.w	r0, r4, #11
 8007134:	1d23      	adds	r3, r4, #4
 8007136:	f020 0007 	bic.w	r0, r0, #7
 800713a:	1ac2      	subs	r2, r0, r3
 800713c:	d0cc      	beq.n	80070d8 <_malloc_r+0x20>
 800713e:	1a1b      	subs	r3, r3, r0
 8007140:	50a3      	str	r3, [r4, r2]
 8007142:	e7c9      	b.n	80070d8 <_malloc_r+0x20>
 8007144:	4622      	mov	r2, r4
 8007146:	6864      	ldr	r4, [r4, #4]
 8007148:	e7cc      	b.n	80070e4 <_malloc_r+0x2c>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d0e3      	beq.n	800711c <_malloc_r+0x64>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f964 	bl	8007424 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d1dd      	bne.n	800711c <_malloc_r+0x64>
 8007160:	e7cf      	b.n	8007102 <_malloc_r+0x4a>
 8007162:	bf00      	nop
 8007164:	20000200 	.word	0x20000200
 8007168:	20000204 	.word	0x20000204

0800716c <__ssputs_r>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	688e      	ldr	r6, [r1, #8]
 8007172:	429e      	cmp	r6, r3
 8007174:	4682      	mov	sl, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4690      	mov	r8, r2
 800717a:	461f      	mov	r7, r3
 800717c:	d838      	bhi.n	80071f0 <__ssputs_r+0x84>
 800717e:	898a      	ldrh	r2, [r1, #12]
 8007180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007184:	d032      	beq.n	80071ec <__ssputs_r+0x80>
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	6909      	ldr	r1, [r1, #16]
 800718a:	eba5 0901 	sub.w	r9, r5, r1
 800718e:	6965      	ldr	r5, [r4, #20]
 8007190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007198:	3301      	adds	r3, #1
 800719a:	444b      	add	r3, r9
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	429d      	cmp	r5, r3
 80071a0:	bf38      	it	cc
 80071a2:	461d      	movcc	r5, r3
 80071a4:	0553      	lsls	r3, r2, #21
 80071a6:	d531      	bpl.n	800720c <__ssputs_r+0xa0>
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7ff ff85 	bl	80070b8 <_malloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	b950      	cbnz	r0, 80071c8 <__ssputs_r+0x5c>
 80071b2:	230c      	movs	r3, #12
 80071b4:	f8ca 3000 	str.w	r3, [sl]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	6921      	ldr	r1, [r4, #16]
 80071ca:	464a      	mov	r2, r9
 80071cc:	f7ff fb88 	bl	80068e0 <memcpy>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	6126      	str	r6, [r4, #16]
 80071de:	6165      	str	r5, [r4, #20]
 80071e0:	444e      	add	r6, r9
 80071e2:	eba5 0509 	sub.w	r5, r5, r9
 80071e6:	6026      	str	r6, [r4, #0]
 80071e8:	60a5      	str	r5, [r4, #8]
 80071ea:	463e      	mov	r6, r7
 80071ec:	42be      	cmp	r6, r7
 80071ee:	d900      	bls.n	80071f2 <__ssputs_r+0x86>
 80071f0:	463e      	mov	r6, r7
 80071f2:	4632      	mov	r2, r6
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	4641      	mov	r1, r8
 80071f8:	f000 f966 	bl	80074c8 <memmove>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	4432      	add	r2, r6
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	6022      	str	r2, [r4, #0]
 8007208:	2000      	movs	r0, #0
 800720a:	e7db      	b.n	80071c4 <__ssputs_r+0x58>
 800720c:	462a      	mov	r2, r5
 800720e:	f000 f981 	bl	8007514 <_realloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d1e1      	bne.n	80071dc <__ssputs_r+0x70>
 8007218:	6921      	ldr	r1, [r4, #16]
 800721a:	4650      	mov	r0, sl
 800721c:	f7ff fefc 	bl	8007018 <_free_r>
 8007220:	e7c7      	b.n	80071b2 <__ssputs_r+0x46>
	...

08007224 <_svfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4698      	mov	r8, r3
 800722a:	898b      	ldrh	r3, [r1, #12]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	b09d      	sub	sp, #116	; 0x74
 8007230:	4607      	mov	r7, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4614      	mov	r4, r2
 8007236:	d50e      	bpl.n	8007256 <_svfiprintf_r+0x32>
 8007238:	690b      	ldr	r3, [r1, #16]
 800723a:	b963      	cbnz	r3, 8007256 <_svfiprintf_r+0x32>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	f7ff ff3b 	bl	80070b8 <_malloc_r>
 8007242:	6028      	str	r0, [r5, #0]
 8007244:	6128      	str	r0, [r5, #16]
 8007246:	b920      	cbnz	r0, 8007252 <_svfiprintf_r+0x2e>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e0d1      	b.n	80073f6 <_svfiprintf_r+0x1d2>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9309      	str	r3, [sp, #36]	; 0x24
 800725a:	2320      	movs	r3, #32
 800725c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007410 <_svfiprintf_r+0x1ec>
 800726a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726e:	f04f 0901 	mov.w	r9, #1
 8007272:	4623      	mov	r3, r4
 8007274:	469a      	mov	sl, r3
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	b10a      	cbz	r2, 8007280 <_svfiprintf_r+0x5c>
 800727c:	2a25      	cmp	r2, #37	; 0x25
 800727e:	d1f9      	bne.n	8007274 <_svfiprintf_r+0x50>
 8007280:	ebba 0b04 	subs.w	fp, sl, r4
 8007284:	d00b      	beq.n	800729e <_svfiprintf_r+0x7a>
 8007286:	465b      	mov	r3, fp
 8007288:	4622      	mov	r2, r4
 800728a:	4629      	mov	r1, r5
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff6d 	bl	800716c <__ssputs_r>
 8007292:	3001      	adds	r0, #1
 8007294:	f000 80aa 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 8007298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800729a:	445a      	add	r2, fp
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a2 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	f10a 0a01 	add.w	sl, sl, #1
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072be:	931a      	str	r3, [sp, #104]	; 0x68
 80072c0:	4654      	mov	r4, sl
 80072c2:	2205      	movs	r2, #5
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4851      	ldr	r0, [pc, #324]	; (8007410 <_svfiprintf_r+0x1ec>)
 80072ca:	f7f8 ff89 	bl	80001e0 <memchr>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	b9d8      	cbnz	r0, 800730a <_svfiprintf_r+0xe6>
 80072d2:	06d0      	lsls	r0, r2, #27
 80072d4:	bf44      	itt	mi
 80072d6:	2320      	movmi	r3, #32
 80072d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072dc:	0711      	lsls	r1, r2, #28
 80072de:	bf44      	itt	mi
 80072e0:	232b      	movmi	r3, #43	; 0x2b
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d015      	beq.n	800731a <_svfiprintf_r+0xf6>
 80072ee:	9a07      	ldr	r2, [sp, #28]
 80072f0:	4654      	mov	r4, sl
 80072f2:	2000      	movs	r0, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4621      	mov	r1, r4
 80072fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fe:	3b30      	subs	r3, #48	; 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d94e      	bls.n	80073a2 <_svfiprintf_r+0x17e>
 8007304:	b1b0      	cbz	r0, 8007334 <_svfiprintf_r+0x110>
 8007306:	9207      	str	r2, [sp, #28]
 8007308:	e014      	b.n	8007334 <_svfiprintf_r+0x110>
 800730a:	eba0 0308 	sub.w	r3, r0, r8
 800730e:	fa09 f303 	lsl.w	r3, r9, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	46a2      	mov	sl, r4
 8007318:	e7d2      	b.n	80072c0 <_svfiprintf_r+0x9c>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9103      	str	r1, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbb      	ittet	lt
 8007326:	425b      	neglt	r3, r3
 8007328:	f042 0202 	orrlt.w	r2, r2, #2
 800732c:	9307      	strge	r3, [sp, #28]
 800732e:	9307      	strlt	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	9204      	strlt	r2, [sp, #16]
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	2b2e      	cmp	r3, #46	; 0x2e
 8007338:	d10c      	bne.n	8007354 <_svfiprintf_r+0x130>
 800733a:	7863      	ldrb	r3, [r4, #1]
 800733c:	2b2a      	cmp	r3, #42	; 0x2a
 800733e:	d135      	bne.n	80073ac <_svfiprintf_r+0x188>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb8      	it	lt
 800734c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007350:	3402      	adds	r4, #2
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007420 <_svfiprintf_r+0x1fc>
 8007358:	7821      	ldrb	r1, [r4, #0]
 800735a:	2203      	movs	r2, #3
 800735c:	4650      	mov	r0, sl
 800735e:	f7f8 ff3f 	bl	80001e0 <memchr>
 8007362:	b140      	cbz	r0, 8007376 <_svfiprintf_r+0x152>
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	eba0 000a 	sub.w	r0, r0, sl
 800736a:	fa03 f000 	lsl.w	r0, r3, r0
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	4303      	orrs	r3, r0
 8007372:	3401      	adds	r4, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	4826      	ldr	r0, [pc, #152]	; (8007414 <_svfiprintf_r+0x1f0>)
 800737c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007380:	2206      	movs	r2, #6
 8007382:	f7f8 ff2d 	bl	80001e0 <memchr>
 8007386:	2800      	cmp	r0, #0
 8007388:	d038      	beq.n	80073fc <_svfiprintf_r+0x1d8>
 800738a:	4b23      	ldr	r3, [pc, #140]	; (8007418 <_svfiprintf_r+0x1f4>)
 800738c:	bb1b      	cbnz	r3, 80073d6 <_svfiprintf_r+0x1b2>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	3307      	adds	r3, #7
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	3308      	adds	r3, #8
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739c:	4433      	add	r3, r6
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	e767      	b.n	8007272 <_svfiprintf_r+0x4e>
 80073a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a6:	460c      	mov	r4, r1
 80073a8:	2001      	movs	r0, #1
 80073aa:	e7a5      	b.n	80072f8 <_svfiprintf_r+0xd4>
 80073ac:	2300      	movs	r3, #0
 80073ae:	3401      	adds	r4, #1
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	4619      	mov	r1, r3
 80073b4:	f04f 0c0a 	mov.w	ip, #10
 80073b8:	4620      	mov	r0, r4
 80073ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073be:	3a30      	subs	r2, #48	; 0x30
 80073c0:	2a09      	cmp	r2, #9
 80073c2:	d903      	bls.n	80073cc <_svfiprintf_r+0x1a8>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0c5      	beq.n	8007354 <_svfiprintf_r+0x130>
 80073c8:	9105      	str	r1, [sp, #20]
 80073ca:	e7c3      	b.n	8007354 <_svfiprintf_r+0x130>
 80073cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d0:	4604      	mov	r4, r0
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7f0      	b.n	80073b8 <_svfiprintf_r+0x194>
 80073d6:	ab03      	add	r3, sp, #12
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	462a      	mov	r2, r5
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <_svfiprintf_r+0x1f8>)
 80073de:	a904      	add	r1, sp, #16
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7fe f80d 	bl	8005400 <_printf_float>
 80073e6:	1c42      	adds	r2, r0, #1
 80073e8:	4606      	mov	r6, r0
 80073ea:	d1d6      	bne.n	800739a <_svfiprintf_r+0x176>
 80073ec:	89ab      	ldrh	r3, [r5, #12]
 80073ee:	065b      	lsls	r3, r3, #25
 80073f0:	f53f af2c 	bmi.w	800724c <_svfiprintf_r+0x28>
 80073f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f6:	b01d      	add	sp, #116	; 0x74
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	462a      	mov	r2, r5
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <_svfiprintf_r+0x1f8>)
 8007404:	a904      	add	r1, sp, #16
 8007406:	4638      	mov	r0, r7
 8007408:	f7fe fa9e 	bl	8005948 <_printf_i>
 800740c:	e7eb      	b.n	80073e6 <_svfiprintf_r+0x1c2>
 800740e:	bf00      	nop
 8007410:	080082cc 	.word	0x080082cc
 8007414:	080082d6 	.word	0x080082d6
 8007418:	08005401 	.word	0x08005401
 800741c:	0800716d 	.word	0x0800716d
 8007420:	080082d2 	.word	0x080082d2

08007424 <_sbrk_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	; (8007440 <_sbrk_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7fa fc14 	bl	8001c5c <_sbrk>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_sbrk_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_sbrk_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20000328 	.word	0x20000328

08007444 <__assert_func>:
 8007444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007446:	4614      	mov	r4, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <__assert_func+0x2c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4605      	mov	r5, r0
 8007450:	68d8      	ldr	r0, [r3, #12]
 8007452:	b14c      	cbz	r4, 8007468 <__assert_func+0x24>
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <__assert_func+0x30>)
 8007456:	9100      	str	r1, [sp, #0]
 8007458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800745c:	4906      	ldr	r1, [pc, #24]	; (8007478 <__assert_func+0x34>)
 800745e:	462b      	mov	r3, r5
 8007460:	f000 f80e 	bl	8007480 <fiprintf>
 8007464:	f000 faa4 	bl	80079b0 <abort>
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <__assert_func+0x38>)
 800746a:	461c      	mov	r4, r3
 800746c:	e7f3      	b.n	8007456 <__assert_func+0x12>
 800746e:	bf00      	nop
 8007470:	2000000c 	.word	0x2000000c
 8007474:	080082dd 	.word	0x080082dd
 8007478:	080082ea 	.word	0x080082ea
 800747c:	08008318 	.word	0x08008318

08007480 <fiprintf>:
 8007480:	b40e      	push	{r1, r2, r3}
 8007482:	b503      	push	{r0, r1, lr}
 8007484:	4601      	mov	r1, r0
 8007486:	ab03      	add	r3, sp, #12
 8007488:	4805      	ldr	r0, [pc, #20]	; (80074a0 <fiprintf+0x20>)
 800748a:	f853 2b04 	ldr.w	r2, [r3], #4
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	f000 f88f 	bl	80075b4 <_vfiprintf_r>
 8007496:	b002      	add	sp, #8
 8007498:	f85d eb04 	ldr.w	lr, [sp], #4
 800749c:	b003      	add	sp, #12
 800749e:	4770      	bx	lr
 80074a0:	2000000c 	.word	0x2000000c

080074a4 <__ascii_mbtowc>:
 80074a4:	b082      	sub	sp, #8
 80074a6:	b901      	cbnz	r1, 80074aa <__ascii_mbtowc+0x6>
 80074a8:	a901      	add	r1, sp, #4
 80074aa:	b142      	cbz	r2, 80074be <__ascii_mbtowc+0x1a>
 80074ac:	b14b      	cbz	r3, 80074c2 <__ascii_mbtowc+0x1e>
 80074ae:	7813      	ldrb	r3, [r2, #0]
 80074b0:	600b      	str	r3, [r1, #0]
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	1e10      	subs	r0, r2, #0
 80074b6:	bf18      	it	ne
 80074b8:	2001      	movne	r0, #1
 80074ba:	b002      	add	sp, #8
 80074bc:	4770      	bx	lr
 80074be:	4610      	mov	r0, r2
 80074c0:	e7fb      	b.n	80074ba <__ascii_mbtowc+0x16>
 80074c2:	f06f 0001 	mvn.w	r0, #1
 80074c6:	e7f8      	b.n	80074ba <__ascii_mbtowc+0x16>

080074c8 <memmove>:
 80074c8:	4288      	cmp	r0, r1
 80074ca:	b510      	push	{r4, lr}
 80074cc:	eb01 0402 	add.w	r4, r1, r2
 80074d0:	d902      	bls.n	80074d8 <memmove+0x10>
 80074d2:	4284      	cmp	r4, r0
 80074d4:	4623      	mov	r3, r4
 80074d6:	d807      	bhi.n	80074e8 <memmove+0x20>
 80074d8:	1e43      	subs	r3, r0, #1
 80074da:	42a1      	cmp	r1, r4
 80074dc:	d008      	beq.n	80074f0 <memmove+0x28>
 80074de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e6:	e7f8      	b.n	80074da <memmove+0x12>
 80074e8:	4402      	add	r2, r0
 80074ea:	4601      	mov	r1, r0
 80074ec:	428a      	cmp	r2, r1
 80074ee:	d100      	bne.n	80074f2 <memmove+0x2a>
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074fa:	e7f7      	b.n	80074ec <memmove+0x24>

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_lock+0x8>)
 80074fe:	f000 bc17 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	20000330 	.word	0x20000330

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_unlock+0x8>)
 800750a:	f000 bc12 	b.w	8007d32 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	20000330 	.word	0x20000330

08007514 <_realloc_r>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	4607      	mov	r7, r0
 8007518:	4614      	mov	r4, r2
 800751a:	460e      	mov	r6, r1
 800751c:	b921      	cbnz	r1, 8007528 <_realloc_r+0x14>
 800751e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007522:	4611      	mov	r1, r2
 8007524:	f7ff bdc8 	b.w	80070b8 <_malloc_r>
 8007528:	b922      	cbnz	r2, 8007534 <_realloc_r+0x20>
 800752a:	f7ff fd75 	bl	8007018 <_free_r>
 800752e:	4625      	mov	r5, r4
 8007530:	4628      	mov	r0, r5
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	f000 fc62 	bl	8007dfc <_malloc_usable_size_r>
 8007538:	42a0      	cmp	r0, r4
 800753a:	d20f      	bcs.n	800755c <_realloc_r+0x48>
 800753c:	4621      	mov	r1, r4
 800753e:	4638      	mov	r0, r7
 8007540:	f7ff fdba 	bl	80070b8 <_malloc_r>
 8007544:	4605      	mov	r5, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d0f2      	beq.n	8007530 <_realloc_r+0x1c>
 800754a:	4631      	mov	r1, r6
 800754c:	4622      	mov	r2, r4
 800754e:	f7ff f9c7 	bl	80068e0 <memcpy>
 8007552:	4631      	mov	r1, r6
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff fd5f 	bl	8007018 <_free_r>
 800755a:	e7e9      	b.n	8007530 <_realloc_r+0x1c>
 800755c:	4635      	mov	r5, r6
 800755e:	e7e7      	b.n	8007530 <_realloc_r+0x1c>

08007560 <__sfputc_r>:
 8007560:	6893      	ldr	r3, [r2, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	b410      	push	{r4}
 8007568:	6093      	str	r3, [r2, #8]
 800756a:	da08      	bge.n	800757e <__sfputc_r+0x1e>
 800756c:	6994      	ldr	r4, [r2, #24]
 800756e:	42a3      	cmp	r3, r4
 8007570:	db01      	blt.n	8007576 <__sfputc_r+0x16>
 8007572:	290a      	cmp	r1, #10
 8007574:	d103      	bne.n	800757e <__sfputc_r+0x1e>
 8007576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757a:	f000 b94b 	b.w	8007814 <__swbuf_r>
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	1c58      	adds	r0, r3, #1
 8007582:	6010      	str	r0, [r2, #0]
 8007584:	7019      	strb	r1, [r3, #0]
 8007586:	4608      	mov	r0, r1
 8007588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758c:	4770      	bx	lr

0800758e <__sfputs_r>:
 800758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007590:	4606      	mov	r6, r0
 8007592:	460f      	mov	r7, r1
 8007594:	4614      	mov	r4, r2
 8007596:	18d5      	adds	r5, r2, r3
 8007598:	42ac      	cmp	r4, r5
 800759a:	d101      	bne.n	80075a0 <__sfputs_r+0x12>
 800759c:	2000      	movs	r0, #0
 800759e:	e007      	b.n	80075b0 <__sfputs_r+0x22>
 80075a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a4:	463a      	mov	r2, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ffda 	bl	8007560 <__sfputc_r>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d1f3      	bne.n	8007598 <__sfputs_r+0xa>
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075b4 <_vfiprintf_r>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	b09d      	sub	sp, #116	; 0x74
 80075bc:	4614      	mov	r4, r2
 80075be:	4698      	mov	r8, r3
 80075c0:	4606      	mov	r6, r0
 80075c2:	b118      	cbz	r0, 80075cc <_vfiprintf_r+0x18>
 80075c4:	6983      	ldr	r3, [r0, #24]
 80075c6:	b90b      	cbnz	r3, 80075cc <_vfiprintf_r+0x18>
 80075c8:	f000 fb14 	bl	8007bf4 <__sinit>
 80075cc:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <_vfiprintf_r+0x240>)
 80075ce:	429d      	cmp	r5, r3
 80075d0:	d11b      	bne.n	800760a <_vfiprintf_r+0x56>
 80075d2:	6875      	ldr	r5, [r6, #4]
 80075d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e2:	f000 fba5 	bl	8007d30 <__retarget_lock_acquire_recursive>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d501      	bpl.n	80075f0 <_vfiprintf_r+0x3c>
 80075ec:	692b      	ldr	r3, [r5, #16]
 80075ee:	b9eb      	cbnz	r3, 800762c <_vfiprintf_r+0x78>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f96e 	bl	80078d4 <__swsetup_r>
 80075f8:	b1c0      	cbz	r0, 800762c <_vfiprintf_r+0x78>
 80075fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fc:	07dc      	lsls	r4, r3, #31
 80075fe:	d50e      	bpl.n	800761e <_vfiprintf_r+0x6a>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	b01d      	add	sp, #116	; 0x74
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <_vfiprintf_r+0x244>)
 800760c:	429d      	cmp	r5, r3
 800760e:	d101      	bne.n	8007614 <_vfiprintf_r+0x60>
 8007610:	68b5      	ldr	r5, [r6, #8]
 8007612:	e7df      	b.n	80075d4 <_vfiprintf_r+0x20>
 8007614:	4b79      	ldr	r3, [pc, #484]	; (80077fc <_vfiprintf_r+0x248>)
 8007616:	429d      	cmp	r5, r3
 8007618:	bf08      	it	eq
 800761a:	68f5      	ldreq	r5, [r6, #12]
 800761c:	e7da      	b.n	80075d4 <_vfiprintf_r+0x20>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	0598      	lsls	r0, r3, #22
 8007622:	d4ed      	bmi.n	8007600 <_vfiprintf_r+0x4c>
 8007624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007626:	f000 fb84 	bl	8007d32 <__retarget_lock_release_recursive>
 800762a:	e7e9      	b.n	8007600 <_vfiprintf_r+0x4c>
 800762c:	2300      	movs	r3, #0
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	2320      	movs	r3, #32
 8007632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007636:	f8cd 800c 	str.w	r8, [sp, #12]
 800763a:	2330      	movs	r3, #48	; 0x30
 800763c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007800 <_vfiprintf_r+0x24c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	4623      	mov	r3, r4
 800764a:	469a      	mov	sl, r3
 800764c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007650:	b10a      	cbz	r2, 8007656 <_vfiprintf_r+0xa2>
 8007652:	2a25      	cmp	r2, #37	; 0x25
 8007654:	d1f9      	bne.n	800764a <_vfiprintf_r+0x96>
 8007656:	ebba 0b04 	subs.w	fp, sl, r4
 800765a:	d00b      	beq.n	8007674 <_vfiprintf_r+0xc0>
 800765c:	465b      	mov	r3, fp
 800765e:	4622      	mov	r2, r4
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff93 	bl	800758e <__sfputs_r>
 8007668:	3001      	adds	r0, #1
 800766a:	f000 80aa 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	445a      	add	r2, fp
 8007672:	9209      	str	r2, [sp, #36]	; 0x24
 8007674:	f89a 3000 	ldrb.w	r3, [sl]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a2 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800767e:	2300      	movs	r3, #0
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007694:	931a      	str	r3, [sp, #104]	; 0x68
 8007696:	4654      	mov	r4, sl
 8007698:	2205      	movs	r2, #5
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4858      	ldr	r0, [pc, #352]	; (8007800 <_vfiprintf_r+0x24c>)
 80076a0:	f7f8 fd9e 	bl	80001e0 <memchr>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	b9d8      	cbnz	r0, 80076e0 <_vfiprintf_r+0x12c>
 80076a8:	06d1      	lsls	r1, r2, #27
 80076aa:	bf44      	itt	mi
 80076ac:	2320      	movmi	r3, #32
 80076ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	bf44      	itt	mi
 80076b6:	232b      	movmi	r3, #43	; 0x2b
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b2a      	cmp	r3, #42	; 0x2a
 80076c2:	d015      	beq.n	80076f0 <_vfiprintf_r+0x13c>
 80076c4:	9a07      	ldr	r2, [sp, #28]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2000      	movs	r0, #0
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4621      	mov	r1, r4
 80076d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d4:	3b30      	subs	r3, #48	; 0x30
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d94e      	bls.n	8007778 <_vfiprintf_r+0x1c4>
 80076da:	b1b0      	cbz	r0, 800770a <_vfiprintf_r+0x156>
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	e014      	b.n	800770a <_vfiprintf_r+0x156>
 80076e0:	eba0 0308 	sub.w	r3, r0, r8
 80076e4:	fa09 f303 	lsl.w	r3, r9, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	46a2      	mov	sl, r4
 80076ee:	e7d2      	b.n	8007696 <_vfiprintf_r+0xe2>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d19      	adds	r1, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfbb      	ittet	lt
 80076fc:	425b      	neglt	r3, r3
 80076fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007702:	9307      	strge	r3, [sp, #28]
 8007704:	9307      	strlt	r3, [sp, #28]
 8007706:	bfb8      	it	lt
 8007708:	9204      	strlt	r2, [sp, #16]
 800770a:	7823      	ldrb	r3, [r4, #0]
 800770c:	2b2e      	cmp	r3, #46	; 0x2e
 800770e:	d10c      	bne.n	800772a <_vfiprintf_r+0x176>
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	2b2a      	cmp	r3, #42	; 0x2a
 8007714:	d135      	bne.n	8007782 <_vfiprintf_r+0x1ce>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	9203      	str	r2, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	f04f 33ff 	movlt.w	r3, #4294967295
 8007726:	3402      	adds	r4, #2
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007810 <_vfiprintf_r+0x25c>
 800772e:	7821      	ldrb	r1, [r4, #0]
 8007730:	2203      	movs	r2, #3
 8007732:	4650      	mov	r0, sl
 8007734:	f7f8 fd54 	bl	80001e0 <memchr>
 8007738:	b140      	cbz	r0, 800774c <_vfiprintf_r+0x198>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	eba0 000a 	sub.w	r0, r0, sl
 8007740:	fa03 f000 	lsl.w	r0, r3, r0
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	4303      	orrs	r3, r0
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	482c      	ldr	r0, [pc, #176]	; (8007804 <_vfiprintf_r+0x250>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fd42 	bl	80001e0 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d03f      	beq.n	80077e0 <_vfiprintf_r+0x22c>
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <_vfiprintf_r+0x254>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_vfiprintf_r+0x1f8>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	443b      	add	r3, r7
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	e767      	b.n	8007648 <_vfiprintf_r+0x94>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a5      	b.n	80076ce <_vfiprintf_r+0x11a>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_vfiprintf_r+0x1ee>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c5      	beq.n	800772a <_vfiprintf_r+0x176>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c3      	b.n	800772a <_vfiprintf_r+0x176>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_vfiprintf_r+0x1da>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <_vfiprintf_r+0x258>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7fd fe22 	bl	8005400 <_printf_float>
 80077bc:	4607      	mov	r7, r0
 80077be:	1c78      	adds	r0, r7, #1
 80077c0:	d1d6      	bne.n	8007770 <_vfiprintf_r+0x1bc>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	d405      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	059a      	lsls	r2, r3, #22
 80077cc:	d402      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d0:	f000 faaf 	bl	8007d32 <__retarget_lock_release_recursive>
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	065b      	lsls	r3, r3, #25
 80077d8:	f53f af12 	bmi.w	8007600 <_vfiprintf_r+0x4c>
 80077dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077de:	e711      	b.n	8007604 <_vfiprintf_r+0x50>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <_vfiprintf_r+0x258>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7fe f8ac 	bl	8005948 <_printf_i>
 80077f0:	e7e4      	b.n	80077bc <_vfiprintf_r+0x208>
 80077f2:	bf00      	nop
 80077f4:	08008444 	.word	0x08008444
 80077f8:	08008464 	.word	0x08008464
 80077fc:	08008424 	.word	0x08008424
 8007800:	080082cc 	.word	0x080082cc
 8007804:	080082d6 	.word	0x080082d6
 8007808:	08005401 	.word	0x08005401
 800780c:	0800758f 	.word	0x0800758f
 8007810:	080082d2 	.word	0x080082d2

08007814 <__swbuf_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	4614      	mov	r4, r2
 800781a:	4605      	mov	r5, r0
 800781c:	b118      	cbz	r0, 8007826 <__swbuf_r+0x12>
 800781e:	6983      	ldr	r3, [r0, #24]
 8007820:	b90b      	cbnz	r3, 8007826 <__swbuf_r+0x12>
 8007822:	f000 f9e7 	bl	8007bf4 <__sinit>
 8007826:	4b21      	ldr	r3, [pc, #132]	; (80078ac <__swbuf_r+0x98>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d12b      	bne.n	8007884 <__swbuf_r+0x70>
 800782c:	686c      	ldr	r4, [r5, #4]
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	60a3      	str	r3, [r4, #8]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	071a      	lsls	r2, r3, #28
 8007836:	d52f      	bpl.n	8007898 <__swbuf_r+0x84>
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	b36b      	cbz	r3, 8007898 <__swbuf_r+0x84>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	6963      	ldr	r3, [r4, #20]
 8007844:	b2f6      	uxtb	r6, r6
 8007846:	4283      	cmp	r3, r0
 8007848:	4637      	mov	r7, r6
 800784a:	dc04      	bgt.n	8007856 <__swbuf_r+0x42>
 800784c:	4621      	mov	r1, r4
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f93c 	bl	8007acc <_fflush_r>
 8007854:	bb30      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3b01      	subs	r3, #1
 800785a:	60a3      	str	r3, [r4, #8]
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	701e      	strb	r6, [r3, #0]
 8007864:	6963      	ldr	r3, [r4, #20]
 8007866:	3001      	adds	r0, #1
 8007868:	4283      	cmp	r3, r0
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x62>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d506      	bpl.n	8007880 <__swbuf_r+0x6c>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d104      	bne.n	8007880 <__swbuf_r+0x6c>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f927 	bl	8007acc <_fflush_r>
 800787e:	b988      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007880:	4638      	mov	r0, r7
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <__swbuf_r+0x9c>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <__swbuf_r+0x7a>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7cf      	b.n	800782e <__swbuf_r+0x1a>
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <__swbuf_r+0xa0>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7ca      	b.n	800782e <__swbuf_r+0x1a>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f81a 	bl	80078d4 <__swsetup_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0cb      	beq.n	800783c <__swbuf_r+0x28>
 80078a4:	f04f 37ff 	mov.w	r7, #4294967295
 80078a8:	e7ea      	b.n	8007880 <__swbuf_r+0x6c>
 80078aa:	bf00      	nop
 80078ac:	08008444 	.word	0x08008444
 80078b0:	08008464 	.word	0x08008464
 80078b4:	08008424 	.word	0x08008424

080078b8 <__ascii_wctomb>:
 80078b8:	b149      	cbz	r1, 80078ce <__ascii_wctomb+0x16>
 80078ba:	2aff      	cmp	r2, #255	; 0xff
 80078bc:	bf85      	ittet	hi
 80078be:	238a      	movhi	r3, #138	; 0x8a
 80078c0:	6003      	strhi	r3, [r0, #0]
 80078c2:	700a      	strbls	r2, [r1, #0]
 80078c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80078c8:	bf98      	it	ls
 80078ca:	2001      	movls	r0, #1
 80078cc:	4770      	bx	lr
 80078ce:	4608      	mov	r0, r1
 80078d0:	4770      	bx	lr
	...

080078d4 <__swsetup_r>:
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <__swsetup_r+0xcc>)
 80078d6:	b570      	push	{r4, r5, r6, lr}
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	4606      	mov	r6, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	b125      	cbz	r5, 80078ea <__swsetup_r+0x16>
 80078e0:	69ab      	ldr	r3, [r5, #24]
 80078e2:	b913      	cbnz	r3, 80078ea <__swsetup_r+0x16>
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 f985 	bl	8007bf4 <__sinit>
 80078ea:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <__swsetup_r+0xd0>)
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d10f      	bne.n	8007910 <__swsetup_r+0x3c>
 80078f0:	686c      	ldr	r4, [r5, #4]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	d42c      	bmi.n	8007956 <__swsetup_r+0x82>
 80078fc:	06dd      	lsls	r5, r3, #27
 80078fe:	d411      	bmi.n	8007924 <__swsetup_r+0x50>
 8007900:	2309      	movs	r3, #9
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	e03e      	b.n	800798e <__swsetup_r+0xba>
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <__swsetup_r+0xd4>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <__swsetup_r+0x46>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7eb      	b.n	80078f2 <__swsetup_r+0x1e>
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <__swsetup_r+0xd8>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7e6      	b.n	80078f2 <__swsetup_r+0x1e>
 8007924:	0758      	lsls	r0, r3, #29
 8007926:	d512      	bpl.n	800794e <__swsetup_r+0x7a>
 8007928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800792a:	b141      	cbz	r1, 800793e <__swsetup_r+0x6a>
 800792c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d002      	beq.n	800793a <__swsetup_r+0x66>
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fb6f 	bl	8007018 <_free_r>
 800793a:	2300      	movs	r3, #0
 800793c:	6363      	str	r3, [r4, #52]	; 0x34
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b94b      	cbnz	r3, 800796e <__swsetup_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d003      	beq.n	800796e <__swsetup_r+0x9a>
 8007966:	4621      	mov	r1, r4
 8007968:	4630      	mov	r0, r6
 800796a:	f000 fa07 	bl	8007d7c <__smakebuf_r>
 800796e:	89a0      	ldrh	r0, [r4, #12]
 8007970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007974:	f010 0301 	ands.w	r3, r0, #1
 8007978:	d00a      	beq.n	8007990 <__swsetup_r+0xbc>
 800797a:	2300      	movs	r3, #0
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	425b      	negs	r3, r3
 8007982:	61a3      	str	r3, [r4, #24]
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b943      	cbnz	r3, 800799a <__swsetup_r+0xc6>
 8007988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800798c:	d1ba      	bne.n	8007904 <__swsetup_r+0x30>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	0781      	lsls	r1, r0, #30
 8007992:	bf58      	it	pl
 8007994:	6963      	ldrpl	r3, [r4, #20]
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	e7f4      	b.n	8007984 <__swsetup_r+0xb0>
 800799a:	2000      	movs	r0, #0
 800799c:	e7f7      	b.n	800798e <__swsetup_r+0xba>
 800799e:	bf00      	nop
 80079a0:	2000000c 	.word	0x2000000c
 80079a4:	08008444 	.word	0x08008444
 80079a8:	08008464 	.word	0x08008464
 80079ac:	08008424 	.word	0x08008424

080079b0 <abort>:
 80079b0:	b508      	push	{r3, lr}
 80079b2:	2006      	movs	r0, #6
 80079b4:	f000 fa52 	bl	8007e5c <raise>
 80079b8:	2001      	movs	r0, #1
 80079ba:	f7fa f8d7 	bl	8001b6c <_exit>
	...

080079c0 <__sflush_r>:
 80079c0:	898a      	ldrh	r2, [r1, #12]
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	4605      	mov	r5, r0
 80079c8:	0710      	lsls	r0, r2, #28
 80079ca:	460c      	mov	r4, r1
 80079cc:	d458      	bmi.n	8007a80 <__sflush_r+0xc0>
 80079ce:	684b      	ldr	r3, [r1, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc05      	bgt.n	80079e0 <__sflush_r+0x20>
 80079d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dc02      	bgt.n	80079e0 <__sflush_r+0x20>
 80079da:	2000      	movs	r0, #0
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	d0f9      	beq.n	80079da <__sflush_r+0x1a>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079ec:	682f      	ldr	r7, [r5, #0]
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	d032      	beq.n	8007a58 <__sflush_r+0x98>
 80079f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	075a      	lsls	r2, r3, #29
 80079f8:	d505      	bpl.n	8007a06 <__sflush_r+0x46>
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	1ac0      	subs	r0, r0, r3
 80079fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a00:	b10b      	cbz	r3, 8007a06 <__sflush_r+0x46>
 8007a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b0      	blx	r6
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	d106      	bne.n	8007a26 <__sflush_r+0x66>
 8007a18:	6829      	ldr	r1, [r5, #0]
 8007a1a:	291d      	cmp	r1, #29
 8007a1c:	d82c      	bhi.n	8007a78 <__sflush_r+0xb8>
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <__sflush_r+0x108>)
 8007a20:	40ca      	lsrs	r2, r1
 8007a22:	07d6      	lsls	r6, r2, #31
 8007a24:	d528      	bpl.n	8007a78 <__sflush_r+0xb8>
 8007a26:	2200      	movs	r2, #0
 8007a28:	6062      	str	r2, [r4, #4]
 8007a2a:	04d9      	lsls	r1, r3, #19
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	d504      	bpl.n	8007a3c <__sflush_r+0x7c>
 8007a32:	1c42      	adds	r2, r0, #1
 8007a34:	d101      	bne.n	8007a3a <__sflush_r+0x7a>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	b903      	cbnz	r3, 8007a3c <__sflush_r+0x7c>
 8007a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	d0ca      	beq.n	80079da <__sflush_r+0x1a>
 8007a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	d002      	beq.n	8007a52 <__sflush_r+0x92>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f7ff fae3 	bl	8007018 <_free_r>
 8007a52:	2000      	movs	r0, #0
 8007a54:	6360      	str	r0, [r4, #52]	; 0x34
 8007a56:	e7c1      	b.n	80079dc <__sflush_r+0x1c>
 8007a58:	6a21      	ldr	r1, [r4, #32]
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	1c41      	adds	r1, r0, #1
 8007a62:	d1c7      	bne.n	80079f4 <__sflush_r+0x34>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0c4      	beq.n	80079f4 <__sflush_r+0x34>
 8007a6a:	2b1d      	cmp	r3, #29
 8007a6c:	d001      	beq.n	8007a72 <__sflush_r+0xb2>
 8007a6e:	2b16      	cmp	r3, #22
 8007a70:	d101      	bne.n	8007a76 <__sflush_r+0xb6>
 8007a72:	602f      	str	r7, [r5, #0]
 8007a74:	e7b1      	b.n	80079da <__sflush_r+0x1a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	e7ad      	b.n	80079dc <__sflush_r+0x1c>
 8007a80:	690f      	ldr	r7, [r1, #16]
 8007a82:	2f00      	cmp	r7, #0
 8007a84:	d0a9      	beq.n	80079da <__sflush_r+0x1a>
 8007a86:	0793      	lsls	r3, r2, #30
 8007a88:	680e      	ldr	r6, [r1, #0]
 8007a8a:	bf08      	it	eq
 8007a8c:	694b      	ldreq	r3, [r1, #20]
 8007a8e:	600f      	str	r7, [r1, #0]
 8007a90:	bf18      	it	ne
 8007a92:	2300      	movne	r3, #0
 8007a94:	eba6 0807 	sub.w	r8, r6, r7
 8007a98:	608b      	str	r3, [r1, #8]
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd9c      	ble.n	80079da <__sflush_r+0x1a>
 8007aa0:	6a21      	ldr	r1, [r4, #32]
 8007aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b0      	blx	r6
 8007aac:	2800      	cmp	r0, #0
 8007aae:	dc06      	bgt.n	8007abe <__sflush_r+0xfe>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e78e      	b.n	80079dc <__sflush_r+0x1c>
 8007abe:	4407      	add	r7, r0
 8007ac0:	eba8 0800 	sub.w	r8, r8, r0
 8007ac4:	e7e9      	b.n	8007a9a <__sflush_r+0xda>
 8007ac6:	bf00      	nop
 8007ac8:	20400001 	.word	0x20400001

08007acc <_fflush_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b913      	cbnz	r3, 8007adc <_fflush_r+0x10>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	4628      	mov	r0, r5
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	b118      	cbz	r0, 8007ae6 <_fflush_r+0x1a>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <_fflush_r+0x1a>
 8007ae2:	f000 f887 	bl	8007bf4 <__sinit>
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <_fflush_r+0x6c>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d11b      	bne.n	8007b24 <_fflush_r+0x58>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0ef      	beq.n	8007ad6 <_fflush_r+0xa>
 8007af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af8:	07d0      	lsls	r0, r2, #31
 8007afa:	d404      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007afc:	0599      	lsls	r1, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b02:	f000 f915 	bl	8007d30 <__retarget_lock_acquire_recursive>
 8007b06:	4628      	mov	r0, r5
 8007b08:	4621      	mov	r1, r4
 8007b0a:	f7ff ff59 	bl	80079c0 <__sflush_r>
 8007b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b10:	07da      	lsls	r2, r3, #31
 8007b12:	4605      	mov	r5, r0
 8007b14:	d4e0      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d4dd      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f908 	bl	8007d32 <__retarget_lock_release_recursive>
 8007b22:	e7d9      	b.n	8007ad8 <_fflush_r+0xc>
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <_fflush_r+0x70>)
 8007b26:	429c      	cmp	r4, r3
 8007b28:	d101      	bne.n	8007b2e <_fflush_r+0x62>
 8007b2a:	68ac      	ldr	r4, [r5, #8]
 8007b2c:	e7df      	b.n	8007aee <_fflush_r+0x22>
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <_fflush_r+0x74>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	bf08      	it	eq
 8007b34:	68ec      	ldreq	r4, [r5, #12]
 8007b36:	e7da      	b.n	8007aee <_fflush_r+0x22>
 8007b38:	08008444 	.word	0x08008444
 8007b3c:	08008464 	.word	0x08008464
 8007b40:	08008424 	.word	0x08008424

08007b44 <std>:
 8007b44:	2300      	movs	r3, #0
 8007b46:	b510      	push	{r4, lr}
 8007b48:	4604      	mov	r4, r0
 8007b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b52:	6083      	str	r3, [r0, #8]
 8007b54:	8181      	strh	r1, [r0, #12]
 8007b56:	6643      	str	r3, [r0, #100]	; 0x64
 8007b58:	81c2      	strh	r2, [r0, #14]
 8007b5a:	6183      	str	r3, [r0, #24]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	2208      	movs	r2, #8
 8007b60:	305c      	adds	r0, #92	; 0x5c
 8007b62:	f7fd fba5 	bl	80052b0 <memset>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x38>)
 8007b68:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x3c>)
 8007b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x40>)
 8007b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x44>)
 8007b74:	6224      	str	r4, [r4, #32]
 8007b76:	6323      	str	r3, [r4, #48]	; 0x30
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08007e95 	.word	0x08007e95
 8007b80:	08007eb7 	.word	0x08007eb7
 8007b84:	08007eef 	.word	0x08007eef
 8007b88:	08007f13 	.word	0x08007f13

08007b8c <_cleanup_r>:
 8007b8c:	4901      	ldr	r1, [pc, #4]	; (8007b94 <_cleanup_r+0x8>)
 8007b8e:	f000 b8af 	b.w	8007cf0 <_fwalk_reent>
 8007b92:	bf00      	nop
 8007b94:	08007acd 	.word	0x08007acd

08007b98 <__sfmoreglue>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	1e4a      	subs	r2, r1, #1
 8007b9c:	2568      	movs	r5, #104	; 0x68
 8007b9e:	4355      	muls	r5, r2
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ba6:	f7ff fa87 	bl	80070b8 <_malloc_r>
 8007baa:	4604      	mov	r4, r0
 8007bac:	b140      	cbz	r0, 8007bc0 <__sfmoreglue+0x28>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	60a0      	str	r0, [r4, #8]
 8007bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bbc:	f7fd fb78 	bl	80052b0 <memset>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}

08007bc4 <__sfp_lock_acquire>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__sfp_lock_acquire+0x8>)
 8007bc6:	f000 b8b3 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000334 	.word	0x20000334

08007bd0 <__sfp_lock_release>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__sfp_lock_release+0x8>)
 8007bd2:	f000 b8ae 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	20000334 	.word	0x20000334

08007bdc <__sinit_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sinit_lock_acquire+0x8>)
 8007bde:	f000 b8a7 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	2000032f 	.word	0x2000032f

08007be8 <__sinit_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sinit_lock_release+0x8>)
 8007bea:	f000 b8a2 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	2000032f 	.word	0x2000032f

08007bf4 <__sinit>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	f7ff fff0 	bl	8007bdc <__sinit_lock_acquire>
 8007bfc:	69a3      	ldr	r3, [r4, #24]
 8007bfe:	b11b      	cbz	r3, 8007c08 <__sinit+0x14>
 8007c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c04:	f7ff bff0 	b.w	8007be8 <__sinit_lock_release>
 8007c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <__sinit+0x68>)
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <__sinit+0x6c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	bf04      	itt	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	61a3      	streq	r3, [r4, #24]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f820 	bl	8007c64 <__sfp>
 8007c24:	6060      	str	r0, [r4, #4]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f81c 	bl	8007c64 <__sfp>
 8007c2c:	60a0      	str	r0, [r4, #8]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f818 	bl	8007c64 <__sfp>
 8007c34:	2200      	movs	r2, #0
 8007c36:	60e0      	str	r0, [r4, #12]
 8007c38:	2104      	movs	r1, #4
 8007c3a:	6860      	ldr	r0, [r4, #4]
 8007c3c:	f7ff ff82 	bl	8007b44 <std>
 8007c40:	68a0      	ldr	r0, [r4, #8]
 8007c42:	2201      	movs	r2, #1
 8007c44:	2109      	movs	r1, #9
 8007c46:	f7ff ff7d 	bl	8007b44 <std>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff ff78 	bl	8007b44 <std>
 8007c54:	2301      	movs	r3, #1
 8007c56:	61a3      	str	r3, [r4, #24]
 8007c58:	e7d2      	b.n	8007c00 <__sinit+0xc>
 8007c5a:	bf00      	nop
 8007c5c:	080080a4 	.word	0x080080a4
 8007c60:	08007b8d 	.word	0x08007b8d

08007c64 <__sfp>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	4607      	mov	r7, r0
 8007c68:	f7ff ffac 	bl	8007bc4 <__sfp_lock_acquire>
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <__sfp+0x84>)
 8007c6e:	681e      	ldr	r6, [r3, #0]
 8007c70:	69b3      	ldr	r3, [r6, #24]
 8007c72:	b913      	cbnz	r3, 8007c7a <__sfp+0x16>
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7ff ffbd 	bl	8007bf4 <__sinit>
 8007c7a:	3648      	adds	r6, #72	; 0x48
 8007c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	d503      	bpl.n	8007c8c <__sfp+0x28>
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	b30b      	cbz	r3, 8007ccc <__sfp+0x68>
 8007c88:	6836      	ldr	r6, [r6, #0]
 8007c8a:	e7f7      	b.n	8007c7c <__sfp+0x18>
 8007c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c90:	b9d5      	cbnz	r5, 8007cc8 <__sfp+0x64>
 8007c92:	4b16      	ldr	r3, [pc, #88]	; (8007cec <__sfp+0x88>)
 8007c94:	60e3      	str	r3, [r4, #12]
 8007c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8007c9c:	f000 f847 	bl	8007d2e <__retarget_lock_init_recursive>
 8007ca0:	f7ff ff96 	bl	8007bd0 <__sfp_lock_release>
 8007ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cac:	6025      	str	r5, [r4, #0]
 8007cae:	61a5      	str	r5, [r4, #24]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cb8:	f7fd fafa 	bl	80052b0 <memset>
 8007cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	3468      	adds	r4, #104	; 0x68
 8007cca:	e7d9      	b.n	8007c80 <__sfp+0x1c>
 8007ccc:	2104      	movs	r1, #4
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff ff62 	bl	8007b98 <__sfmoreglue>
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	6030      	str	r0, [r6, #0]
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d1d5      	bne.n	8007c88 <__sfp+0x24>
 8007cdc:	f7ff ff78 	bl	8007bd0 <__sfp_lock_release>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	e7ee      	b.n	8007cc4 <__sfp+0x60>
 8007ce6:	bf00      	nop
 8007ce8:	080080a4 	.word	0x080080a4
 8007cec:	ffff0001 	.word	0xffff0001

08007cf0 <_fwalk_reent>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d02:	f1b9 0901 	subs.w	r9, r9, #1
 8007d06:	d505      	bpl.n	8007d14 <_fwalk_reent+0x24>
 8007d08:	6824      	ldr	r4, [r4, #0]
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d1f7      	bne.n	8007cfe <_fwalk_reent+0xe>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d907      	bls.n	8007d2a <_fwalk_reent+0x3a>
 8007d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	d003      	beq.n	8007d2a <_fwalk_reent+0x3a>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	47c0      	blx	r8
 8007d28:	4307      	orrs	r7, r0
 8007d2a:	3568      	adds	r5, #104	; 0x68
 8007d2c:	e7e9      	b.n	8007d02 <_fwalk_reent+0x12>

08007d2e <__retarget_lock_init_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <__retarget_lock_acquire_recursive>:
 8007d30:	4770      	bx	lr

08007d32 <__retarget_lock_release_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	; 0x58
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
 8007d44:	da07      	bge.n	8007d56 <__swhatbuf_r+0x22>
 8007d46:	2300      	movs	r3, #0
 8007d48:	602b      	str	r3, [r5, #0]
 8007d4a:	89b3      	ldrh	r3, [r6, #12]
 8007d4c:	061a      	lsls	r2, r3, #24
 8007d4e:	d410      	bmi.n	8007d72 <__swhatbuf_r+0x3e>
 8007d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d54:	e00e      	b.n	8007d74 <__swhatbuf_r+0x40>
 8007d56:	466a      	mov	r2, sp
 8007d58:	f000 f902 	bl	8007f60 <_fstat_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dbf2      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d6a:	425a      	negs	r2, r3
 8007d6c:	415a      	adcs	r2, r3
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	e7ee      	b.n	8007d50 <__swhatbuf_r+0x1c>
 8007d72:	2340      	movs	r3, #64	; 0x40
 8007d74:	2000      	movs	r0, #0
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	b016      	add	sp, #88	; 0x58
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}

08007d7c <__smakebuf_r>:
 8007d7c:	898b      	ldrh	r3, [r1, #12]
 8007d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d80:	079d      	lsls	r5, r3, #30
 8007d82:	4606      	mov	r6, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	d507      	bpl.n	8007d98 <__smakebuf_r+0x1c>
 8007d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	2301      	movs	r3, #1
 8007d92:	6163      	str	r3, [r4, #20]
 8007d94:	b002      	add	sp, #8
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	ab01      	add	r3, sp, #4
 8007d9a:	466a      	mov	r2, sp
 8007d9c:	f7ff ffca 	bl	8007d34 <__swhatbuf_r>
 8007da0:	9900      	ldr	r1, [sp, #0]
 8007da2:	4605      	mov	r5, r0
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff f987 	bl	80070b8 <_malloc_r>
 8007daa:	b948      	cbnz	r0, 8007dc0 <__smakebuf_r+0x44>
 8007dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d4ef      	bmi.n	8007d94 <__smakebuf_r+0x18>
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	f043 0302 	orr.w	r3, r3, #2
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	e7e3      	b.n	8007d88 <__smakebuf_r+0xc>
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <__smakebuf_r+0x7c>)
 8007dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	9b00      	ldr	r3, [sp, #0]
 8007dd0:	6163      	str	r3, [r4, #20]
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	6120      	str	r0, [r4, #16]
 8007dd6:	b15b      	cbz	r3, 8007df0 <__smakebuf_r+0x74>
 8007dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f8d1 	bl	8007f84 <_isatty_r>
 8007de2:	b128      	cbz	r0, 8007df0 <__smakebuf_r+0x74>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	89a0      	ldrh	r0, [r4, #12]
 8007df2:	4305      	orrs	r5, r0
 8007df4:	81a5      	strh	r5, [r4, #12]
 8007df6:	e7cd      	b.n	8007d94 <__smakebuf_r+0x18>
 8007df8:	08007b8d 	.word	0x08007b8d

08007dfc <_malloc_usable_size_r>:
 8007dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e00:	1f18      	subs	r0, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfbc      	itt	lt
 8007e06:	580b      	ldrlt	r3, [r1, r0]
 8007e08:	18c0      	addlt	r0, r0, r3
 8007e0a:	4770      	bx	lr

08007e0c <_raise_r>:
 8007e0c:	291f      	cmp	r1, #31
 8007e0e:	b538      	push	{r3, r4, r5, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	d904      	bls.n	8007e20 <_raise_r+0x14>
 8007e16:	2316      	movs	r3, #22
 8007e18:	6003      	str	r3, [r0, #0]
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e22:	b112      	cbz	r2, 8007e2a <_raise_r+0x1e>
 8007e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e28:	b94b      	cbnz	r3, 8007e3e <_raise_r+0x32>
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f830 	bl	8007e90 <_getpid_r>
 8007e30:	462a      	mov	r2, r5
 8007e32:	4601      	mov	r1, r0
 8007e34:	4620      	mov	r0, r4
 8007e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3a:	f000 b817 	b.w	8007e6c <_kill_r>
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d00a      	beq.n	8007e58 <_raise_r+0x4c>
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	d103      	bne.n	8007e4e <_raise_r+0x42>
 8007e46:	2316      	movs	r3, #22
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7e7      	b.n	8007e1e <_raise_r+0x12>
 8007e4e:	2400      	movs	r4, #0
 8007e50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e54:	4628      	mov	r0, r5
 8007e56:	4798      	blx	r3
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e7e0      	b.n	8007e1e <_raise_r+0x12>

08007e5c <raise>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	; (8007e68 <raise+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f7ff bfd3 	b.w	8007e0c <_raise_r>
 8007e66:	bf00      	nop
 8007e68:	2000000c 	.word	0x2000000c

08007e6c <_kill_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	; (8007e8c <_kill_r+0x20>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f7f9 fe67 	bl	8001b4c <_kill>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d102      	bne.n	8007e88 <_kill_r+0x1c>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	b103      	cbz	r3, 8007e88 <_kill_r+0x1c>
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	bd38      	pop	{r3, r4, r5, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000328 	.word	0x20000328

08007e90 <_getpid_r>:
 8007e90:	f7f9 be54 	b.w	8001b3c <_getpid>

08007e94 <__sread>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	f000 f894 	bl	8007fc8 <_read_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	bfab      	itete	ge
 8007ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea8:	181b      	addge	r3, r3, r0
 8007eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eae:	bfac      	ite	ge
 8007eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb2:	81a3      	strhlt	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__swrite>:
 8007eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	461f      	mov	r7, r3
 8007ebc:	898b      	ldrh	r3, [r1, #12]
 8007ebe:	05db      	lsls	r3, r3, #23
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	d505      	bpl.n	8007ed4 <__swrite+0x1e>
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f000 f868 	bl	8007fa4 <_lseek_r>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	f000 b817 	b.w	8007f1c <_write_r>

08007eee <__sseek>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef6:	f000 f855 	bl	8007fa4 <_lseek_r>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	bf15      	itete	ne
 8007f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strheq	r3, [r4, #12]
 8007f0c:	bf18      	it	ne
 8007f0e:	81a3      	strhne	r3, [r4, #12]
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <__sclose>:
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 b813 	b.w	8007f40 <_close_r>
	...

08007f1c <_write_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d07      	ldr	r5, [pc, #28]	; (8007f3c <_write_r+0x20>)
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7f9 fe45 	bl	8001bba <_write>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_write_r+0x1e>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_write_r+0x1e>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000328 	.word	0x20000328

08007f40 <_close_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	; (8007f5c <_close_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f9 fe51 	bl	8001bf2 <_close>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_close_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_close_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20000328 	.word	0x20000328

08007f60 <_fstat_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_fstat_r+0x20>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	f7f9 fe4c 	bl	8001c0a <_fstat>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	d102      	bne.n	8007f7c <_fstat_r+0x1c>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	b103      	cbz	r3, 8007f7c <_fstat_r+0x1c>
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000328 	.word	0x20000328

08007f84 <_isatty_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	; (8007fa0 <_isatty_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 fe4b 	bl	8001c2a <_isatty>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_isatty_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_isatty_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20000328 	.word	0x20000328

08007fa4 <_lseek_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	; (8007fc4 <_lseek_r+0x20>)
 8007fa8:	4604      	mov	r4, r0
 8007faa:	4608      	mov	r0, r1
 8007fac:	4611      	mov	r1, r2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7f9 fe44 	bl	8001c40 <_lseek>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_lseek_r+0x1e>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_lseek_r+0x1e>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	20000328 	.word	0x20000328

08007fc8 <_read_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_read_r+0x20>)
 8007fcc:	4604      	mov	r4, r0
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7f9 fdd2 	bl	8001b80 <_read>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_read_r+0x1e>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_read_r+0x1e>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20000328 	.word	0x20000328

08007fec <_init>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_fini>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

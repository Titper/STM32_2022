
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008ef0  08008ef0  00018ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800936c  0800936c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009374  08009374  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800937c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001dc  08009558  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08009558  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa9b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c1  00000000  00000000  0003aca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002944e  00000000  00000000  000403d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b91  00000000  00000000  0006981e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7431  00000000  00000000  000823af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001797e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f4  00000000  00000000  00179834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ed4 	.word	0x08008ed4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008ed4 	.word	0x08008ed4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <DWT_Delay_us+0x48>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f4e:	f003 fbad 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <DWT_Delay_us+0x4c>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000f68:	bf00      	nop
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <DWT_Delay_us+0x48>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1acb      	subs	r3, r1, r3
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3f6      	bcc.n	8000f6a <DWT_Delay_us+0x2a>
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e0001000 	.word	0xe0001000
 8000f8c:	431bde83 	.word	0x431bde83

08000f90 <Data_Output>:
#include "HT.h"
#include "timer.h"
#include "stm32l4xx_hal.h"

void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN) // Transmission du microcontrôleur vers le capteur
  {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Pin en Pushpull
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 f94e 	bl	800225c <HAL_GPIO_Init>
  }
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN) // Transmission du capteur vers le microcontrôleur
  {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f001 f932 	bl	800225c <HAL_GPIO_Init>
  }
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Read_data>:

void Read_data (uint8_t *data) // Permet de récupérer les bits de la trame de données du DHT22
  {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0; i<8; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e057      	b.n	80010be <Read_data+0xbe>
  	{
  		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 800100e:	2102      	movs	r1, #2
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f001 facc 	bl	80025b0 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d11d      	bne.n	800105a <Read_data+0x5a>
  		{
  			(*data)&= ~(1<<(7-i)); // Si le bit est un '0'
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25a      	sxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	b25b      	sxtb	r3, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8001040:	bf00      	nop
 8001042:	2102      	movs	r1, #2
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fab2 	bl	80025b0 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f7      	beq.n	8001042 <Read_data+0x42>
  			DWT_Delay_us(40);
 8001052:	2028      	movs	r0, #40	; 0x28
 8001054:	f7ff ff74 	bl	8000f40 <DWT_Delay_us>
 8001058:	e02e      	b.n	80010b8 <Read_data+0xb8>
  		}
  		else                       // Si le bit est un '1'
  		{
  			(*data)|= (1<<(7-i));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b25a      	sxtb	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	701a      	strb	r2, [r3, #0]
  			for (k=0; k<1000; k++)
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	e00a      	b.n	8001094 <Read_data+0x94>
  			{
  				if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 800107e:	2102      	movs	r1, #2
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fa94 	bl	80025b0 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <Read_data+0x9e>
  			for (k=0; k<1000; k++)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800109a:	dbf0      	blt.n	800107e <Read_data+0x7e>
 800109c:	e000      	b.n	80010a0 <Read_data+0xa0>
  				  {
  				  	break;
 800109e:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 80010a0:	bf00      	nop
 80010a2:	2102      	movs	r1, #2
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f001 fa82 	bl	80025b0 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f7      	beq.n	80010a2 <Read_data+0xa2>
  			DWT_Delay_us(40);
 80010b2:	2028      	movs	r0, #40	; 0x28
 80010b4:	f7ff ff44 	bl	8000f40 <DWT_Delay_us>
  	for (i=0; i<8; i++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	dda4      	ble.n	800100e <Read_data+0xe>
  		}
  	 }
  }
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a2a      	ldr	r2, [pc, #168]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <MX_GPIO_Init+0xc4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a24      	ldr	r2, [pc, #144]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <MX_GPIO_Init+0xc4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <MX_GPIO_Init+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f001 fa47 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001158:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0xc8>)
 800116a:	f001 f877 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f001 f868 	bl	800225c <HAL_GPIO_Init>

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800

0800119c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */

  hi2c1.Instance = I2C1;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_I2C1_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <MX_I2C1_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_I2C1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d8:	f001 fa1a 	bl	8002610 <HAL_I2C_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e2:	f000 fb8a 	bl	80018fa <Error_Handler>
  }
  /** Configure Analogue filter **/

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ea:	f002 fc0f 	bl	8003a0c <HAL_I2CEx_ConfigAnalogFilter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f000 fb81 	bl	80018fa <Error_Handler>
  }
  /** Configure Digital filter **/

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_I2C1_Init+0x74>)
 80011fc:	f002 fc51 	bl	8003aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 fb78 	bl	80018fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000214 	.word	0x20000214
 8001214:	40005400 	.word	0x40005400
 8001218:	10909cec 	.word	0x10909cec

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ac      	sub	sp, #176	; 0xb0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2288      	movs	r2, #136	; 0x88
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f004 ffab 	bl	8006198 <memset>
  if(i2cHandle->Instance==I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_I2C_MspInit+0xd0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d14b      	bne.n	80012e4 <HAL_I2C_MspInit+0xc8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fabf 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001264:	f000 fb49 	bl	80018fa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129a:	2304      	movs	r3, #4
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <HAL_I2C_MspInit+0xd8>)
 80012a8:	f000 ffd8 	bl	800225c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b6:	6593      	str	r3, [r2, #88]	; 0x58
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	201f      	movs	r0, #31
 80012ca:	f000 ff42 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012ce:	201f      	movs	r0, #31
 80012d0:	f000 ff5b 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2020      	movs	r0, #32
 80012da:	f000 ff3a 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012de:	2020      	movs	r0, #32
 80012e0:	f000 ff53 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e4:	bf00      	nop
 80012e6:	37b0      	adds	r7, #176	; 0xb0
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400

080012f8 <lcd_init>:
I2C_HandleTypeDef hi2c3;

UART_HandleTypeDef huart2;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f043 030c 	orr.w	r3, r3, #12
 800130e:	b2da      	uxtb	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	b2db      	uxtb	r3, r3
 8001322:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	230a      	movs	r3, #10
 800132a:	2202      	movs	r2, #2
 800132c:	486c      	ldr	r0, [pc, #432]	; (80014e0 <lcd_init+0x1e8>)
 800132e:	f004 fa3b 	bl	80057a8 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001332:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001336:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001338:	f107 0114 	add.w	r1, r7, #20
 800133c:	230a      	movs	r3, #10
 800133e:	2202      	movs	r2, #2
 8001340:	4867      	ldr	r0, [pc, #412]	; (80014e0 <lcd_init+0x1e8>)
 8001342:	f004 fa31 	bl	80057a8 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001346:	2364      	movs	r3, #100	; 0x64
 8001348:	2205      	movs	r2, #5
 800134a:	217c      	movs	r1, #124	; 0x7c
 800134c:	69f8      	ldr	r0, [r7, #28]
 800134e:	f001 fae3 	bl	8002918 <HAL_I2C_IsDeviceReady>
 8001352:	4603      	mov	r3, r0
 8001354:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001356:	f107 0113 	add.w	r1, r7, #19
 800135a:	230a      	movs	r3, #10
 800135c:	2201      	movs	r2, #1
 800135e:	4860      	ldr	r0, [pc, #384]	; (80014e0 <lcd_init+0x1e8>)
 8001360:	f004 fa22 	bl	80057a8 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001364:	2032      	movs	r0, #50	; 0x32
 8001366:	f000 fdf5 	bl	8001f54 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800136a:	f107 0218 	add.w	r2, r7, #24
 800136e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2302      	movs	r3, #2
 8001376:	217c      	movs	r1, #124	; 0x7c
 8001378:	69f8      	ldr	r0, [r7, #28]
 800137a:	f001 f9d9 	bl	8002730 <HAL_I2C_Master_Transmit>
 800137e:	4603      	mov	r3, r0
 8001380:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001382:	f107 0112 	add.w	r1, r7, #18
 8001386:	230a      	movs	r3, #10
 8001388:	2201      	movs	r2, #1
 800138a:	4855      	ldr	r0, [pc, #340]	; (80014e0 <lcd_init+0x1e8>)
 800138c:	f004 fa0c 	bl	80057a8 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001390:	2032      	movs	r0, #50	; 0x32
 8001392:	f000 fddf 	bl	8001f54 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001396:	f107 0218 	add.w	r2, r7, #24
 800139a:	f241 3388 	movw	r3, #5000	; 0x1388
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2302      	movs	r3, #2
 80013a2:	217c      	movs	r1, #124	; 0x7c
 80013a4:	69f8      	ldr	r0, [r7, #28]
 80013a6:	f001 f9c3 	bl	8002730 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f000 fdd2 	bl	8001f54 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80013b0:	f107 0218 	add.w	r2, r7, #24
 80013b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2302      	movs	r3, #2
 80013bc:	217c      	movs	r1, #124	; 0x7c
 80013be:	69f8      	ldr	r0, [r7, #28]
 80013c0:	f001 f9b6 	bl	8002730 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80013d6:	f107 0218 	add.w	r2, r7, #24
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2302      	movs	r3, #2
 80013e2:	217c      	movs	r1, #124	; 0x7c
 80013e4:	69f8      	ldr	r0, [r7, #28]
 80013e6:	f001 f9a3 	bl	8002730 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80013ea:	2301      	movs	r3, #1
 80013ec:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80013ee:	f107 0218 	add.w	r2, r7, #24
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2302      	movs	r3, #2
 80013fa:	217c      	movs	r1, #124	; 0x7c
 80013fc:	69f8      	ldr	r0, [r7, #28]
 80013fe:	f001 f997 	bl	8002730 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001402:	2002      	movs	r0, #2
 8001404:	f000 fda6 	bl	8001f54 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	b2db      	uxtb	r3, r3
 8001418:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800141a:	f107 0218 	add.w	r2, r7, #24
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2302      	movs	r3, #2
 8001426:	217c      	movs	r1, #124	; 0x7c
 8001428:	69f8      	ldr	r0, [r7, #28]
 800142a:	f001 f981 	bl	8002730 <HAL_I2C_Master_Transmit>

	    // Initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800142e:	2300      	movs	r3, #0
 8001430:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001436:	f107 0210 	add.w	r2, r7, #16
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2302      	movs	r3, #2
 8001442:	21c4      	movs	r1, #196	; 0xc4
 8001444:	69f8      	ldr	r0, [r7, #28]
 8001446:	f001 f973 	bl	8002730 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800144a:	2308      	movs	r3, #8
 800144c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800144e:	23ff      	movs	r3, #255	; 0xff
 8001450:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001452:	f107 0210 	add.w	r2, r7, #16
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2302      	movs	r3, #2
 800145e:	21c4      	movs	r1, #196	; 0xc4
 8001460:	69f8      	ldr	r0, [r7, #28]
 8001462:	f001 f965 	bl	8002730 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001466:	2301      	movs	r3, #1
 8001468:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800146a:	2320      	movs	r3, #32
 800146c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800146e:	f107 0210 	add.w	r2, r7, #16
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2302      	movs	r3, #2
 800147a:	21c4      	movs	r1, #196	; 0xc4
 800147c:	69f8      	ldr	r0, [r7, #28]
 800147e:	f001 f957 	bl	8002730 <HAL_I2C_Master_Transmit>

		// Couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001482:	2304      	movs	r3, #4
 8001484:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001486:	23ff      	movs	r3, #255	; 0xff
 8001488:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800148a:	f107 020c 	add.w	r2, r7, #12
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2302      	movs	r3, #2
 8001496:	21c4      	movs	r1, #196	; 0xc4
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f001 f949 	bl	8002730 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800149e:	2303      	movs	r3, #3
 80014a0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80014a6:	f107 020c 	add.w	r2, r7, #12
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2302      	movs	r3, #2
 80014b2:	21c4      	movs	r1, #196	; 0xc4
 80014b4:	69f8      	ldr	r0, [r7, #28]
 80014b6:	f001 f93b 	bl	8002730 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80014ba:	2302      	movs	r3, #2
 80014bc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80014be:	23ff      	movs	r3, #255	; 0xff
 80014c0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	21c4      	movs	r1, #196	; 0xc4
 80014d0:	69f8      	ldr	r0, [r7, #28]
 80014d2:	f001 f92d 	bl	8002730 <HAL_I2C_Master_Transmit>


}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002ac 	.word	0x200002ac

080014e4 <clearlcd>:



void clearlcd(void) // Permet d'effacer tout ce qui s'affiche sur le lcd
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	lcd_position(&hi2c3,0,0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <clearlcd+0x2c>)
 80014ee:	f000 f83c 	bl	800156a <lcd_position>
	lcd_print(&hi2c3,"                  ");
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <clearlcd+0x30>)
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <clearlcd+0x2c>)
 80014f6:	f000 f80f 	bl	8001518 <lcd_print>
	lcd_position(&hi2c3,0,1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2100      	movs	r1, #0
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <clearlcd+0x2c>)
 8001500:	f000 f833 	bl	800156a <lcd_position>
	lcd_print(&hi2c3,"                  ");
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <clearlcd+0x30>)
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <clearlcd+0x2c>)
 8001508:	f000 f806 	bl	8001518 <lcd_print>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000260 	.word	0x20000260
 8001514:	08008ef0 	.word	0x08008ef0

08001518 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	733b      	strb	r3, [r7, #12]
    int i=0;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800152e:	e011      	b.n	8001554 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800153a:	f107 020c 	add.w	r2, r7, #12
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2302      	movs	r3, #2
 8001546:	217c      	movs	r1, #124	; 0x7c
 8001548:	6938      	ldr	r0, [r7, #16]
 800154a:	f001 f8f1 	bl	8002730 <HAL_I2C_Master_Transmit>
            i++;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e7      	bne.n	8001530 <lcd_print+0x18>
   }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // Position du curseur sur le LCD
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af02      	add	r7, sp, #8
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
 8001576:	4613      	mov	r3, r2
 8001578:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800157e:	78bb      	ldrb	r3, [r7, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <lcd_position+0x24>
    {
        col = col | 0x80;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800158a:	70fb      	strb	r3, [r7, #3]
 800158c:	e003      	b.n	8001596 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001594:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800159e:	f107 0208 	add.w	r2, r7, #8
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	217c      	movs	r1, #124	; 0x7c
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f001 f8bf 	bl	8002730 <HAL_I2C_Master_Transmit>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <DWT_Delay_us>:
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <DWT_Delay_us+0x48>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80015ca:	f003 f86f 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <DWT_Delay_us+0x4c>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80015e4:	bf00      	nop
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <DWT_Delay_us+0x48>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad2      	subs	r2, r2, r3
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3f6      	bcc.n	80015e6 <DWT_Delay_us+0x2a>
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e0001000 	.word	0xe0001000
 8001608:	431bde83 	.word	0x431bde83

0800160c <main>:
  * @brief  The application entry point.
  * @retval int
  **/

int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int k = 0; // Variable pour les boucles "while"
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001616:	f000 fc21 	bl	8001e5c <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 800161a:	f000 f91d 	bl	8001858 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 800161e:	f7ff fd57 	bl	80010d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001622:	f000 fb65 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001626:	f7ff fdb9 	bl	800119c <MX_I2C1_Init>
  MX_TIM2_Init();
 800162a:	f000 fac5 	bl	8001bb8 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  DWT_Delay_Init();
 800162e:	f000 fb2f 	bl	8001c90 <DWT_Delay_Init>
  lcd_init(&hi2c1, &lcdData); // Initialise l'écran LCD
 8001632:	4976      	ldr	r1, [pc, #472]	; (800180c <main+0x200>)
 8001634:	4876      	ldr	r0, [pc, #472]	; (8001810 <main+0x204>)
 8001636:	f7ff fe5f 	bl	80012f8 <lcd_init>

  lcd_position(&hi2c1,0,0);   // Permet de positionner là où on va écrire sur le LCD
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	4874      	ldr	r0, [pc, #464]	; (8001810 <main+0x204>)
 8001640:	f7ff ff93 	bl	800156a <lcd_position>

  lcd_print(&hi2c1,"-- FruitColor --");
 8001644:	4973      	ldr	r1, [pc, #460]	; (8001814 <main+0x208>)
 8001646:	4872      	ldr	r0, [pc, #456]	; (8001810 <main+0x204>)
 8001648:	f7ff ff66 	bl	8001518 <lcd_print>

  HAL_Delay(2000);
 800164c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001650:	f000 fc80 	bl	8001f54 <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /** -------------------------------------------- Début de la communication avec le DHT22 -------------------------------------------- **/

	  HAL_Delay(2000);
 8001654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001658:	f000 fc7c 	bl	8001f54 <HAL_Delay>
	  Data_Output(GPIOA, GPIO_PIN_1);                          // Configure la broche en mode "sortie" pour communiquer avec le capteur
 800165c:	2102      	movs	r1, #2
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f7ff fc95 	bl	8000f90 <Data_Output>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);    // Envoie un premier signal de commande vers le capteur (signal logique bas)
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 ffb7 	bl	80025e0 <HAL_GPIO_WritePin>
	  DWT_Delay_us(1200);                                      // D'une durée de 1200 us
 8001672:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001676:	f7ff ffa1 	bl	80015bc <DWT_Delay_us>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);      // Envoie le second signal de commande vers le capteur (signal logique haut)
 800167a:	2201      	movs	r2, #1
 800167c:	2102      	movs	r1, #2
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 ffad 	bl	80025e0 <HAL_GPIO_WritePin>
	  DWT_Delay_us(30);                                        // D'une durée de 30 us
 8001686:	201e      	movs	r0, #30
 8001688:	f7ff ff98 	bl	80015bc <DWT_Delay_us>

	  Data_Input(GPIOA, GPIO_PIN_1);                           // Configure la broche en mode "entrée" pour que le capteur communique avec la STM32
 800168c:	2102      	movs	r1, #2
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f7ff fc99 	bl	8000fc8 <Data_Input>

	  /** ------------------------------------------------- Réception des données du DHT22 ------------------------------------------------ **/

	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8001696:	bf00      	nop
 8001698:	2102      	movs	r1, #2
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 ff87 	bl	80025b0 <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f7      	beq.n	8001698 <main+0x8c>

	  for (k=0; k < 1000; k++)                                 // Permet de récupérer tous les bits de la trames de données provenant du DHT22
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	e00a      	b.n	80016c4 <main+0xb8>
	  {
		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80016ae:	2102      	movs	r1, #2
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f000 ff7c 	bl	80025b0 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <main+0xc2>
	  for (k=0; k < 1000; k++)                                 // Permet de récupérer tous les bits de la trames de données provenant du DHT22
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	dbf0      	blt.n	80016ae <main+0xa2>
 80016cc:	e000      	b.n	80016d0 <main+0xc4>
		  {
	  	  	break;
 80016ce:	bf00      	nop
	  	  }
	  }

	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 80016d0:	bf00      	nop
 80016d2:	2102      	movs	r1, #2
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f000 ff6a 	bl	80025b0 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f7      	beq.n	80016d2 <main+0xc6>
	  DWT_Delay_us(40);
 80016e2:	2028      	movs	r0, #40	; 0x28
 80016e4:	f7ff ff6a 	bl	80015bc <DWT_Delay_us>

	  Read_data(&dataH1);                                      // Récupère les 8 premiers bits de l'humidité
 80016e8:	484b      	ldr	r0, [pc, #300]	; (8001818 <main+0x20c>)
 80016ea:	f7ff fc89 	bl	8001000 <Read_data>
	  Read_data(&dataH2);                                      // Récupère les 8 derniers bits de l'humidité
 80016ee:	484b      	ldr	r0, [pc, #300]	; (800181c <main+0x210>)
 80016f0:	f7ff fc86 	bl	8001000 <Read_data>
	  Read_data(&dataT1);                                      // Récupère les 8 premiers bits de la température
 80016f4:	484a      	ldr	r0, [pc, #296]	; (8001820 <main+0x214>)
 80016f6:	f7ff fc83 	bl	8001000 <Read_data>
	  Read_data(&dataT2);                                      // Récupère les 8 derniers bits de l'humidité
 80016fa:	484a      	ldr	r0, [pc, #296]	; (8001824 <main+0x218>)
 80016fc:	f7ff fc80 	bl	8001000 <Read_data>
	  Read_data(&SUM);                                         // Récupère les bits du "Checksum" qui vérifie la bonne transmission de la trame
 8001700:	4849      	ldr	r0, [pc, #292]	; (8001828 <main+0x21c>)
 8001702:	f7ff fc7d 	bl	8001000 <Read_data>

	  check = dataH1 + dataH2 + dataT1 + dataT2;               // Permet de vérifier si nous avons l'intégralité des bits
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <main+0x20c>)
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <main+0x210>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <main+0x214>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <main+0x218>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <main+0x220>)
 8001724:	701a      	strb	r2, [r3, #0]

	  RH = (dataH1<<8) | dataH2;                               // On assemble ensuite tous les bits, en n'oubliant pas d'effectuer un décalage de 8
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <main+0x20c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <main+0x210>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <main+0x224>)
 800173c:	801a      	strh	r2, [r3, #0]
	  TEMP = (dataT1<<8) | dataT2;                             // sur la gauche pour le premier octet
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <main+0x214>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <main+0x218>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b38      	ldr	r3, [pc, #224]	; (8001834 <main+0x228>)
 8001754:	801a      	strh	r2, [r3, #0]

	  Humidite = RH / 10.0;                                    // On divise par 10.0 les valeurs pour obtenir un nombre décimal
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <main+0x224>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fee2 	bl	8000524 <__aeabi_i2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <main+0x22c>)
 8001766:	f7ff f871 	bl	800084c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff fa19 	bl	8000ba8 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	4a30      	ldr	r2, [pc, #192]	; (800183c <main+0x230>)
 800177a:	6013      	str	r3, [r2, #0]
	  Temperature = TEMP / 10.0;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <main+0x228>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_i2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <main+0x22c>)
 800178c:	f7ff f85e 	bl	800084c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa06 	bl	8000ba8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <main+0x234>)
 80017a0:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);      // Recommence une lecture
 80017a2:	2201      	movs	r2, #1
 80017a4:	2102      	movs	r1, #2
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f000 ff19 	bl	80025e0 <HAL_GPIO_WritePin>

	  /** ---------------------------------------------------- Transmission vers le LCD --------------------------------------------------- **/

	  clearlcd();                                              // Clear l'écran LCD
 80017ae:	f7ff fe99 	bl	80014e4 <clearlcd>

	  sprintf(bufRH,"Humidite: %.1f ", Humidite);               // Rentre dans un buffer le pourcentage d'humidité
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <main+0x230>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fec6 	bl	8000548 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4920      	ldr	r1, [pc, #128]	; (8001844 <main+0x238>)
 80017c2:	4821      	ldr	r0, [pc, #132]	; (8001848 <main+0x23c>)
 80017c4:	f005 f95a 	bl	8006a7c <siprintf>
	  sprintf(bufT, "Temp.: %.1f C    ", Temperature);          // Rentre dans un buffer la température
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <main+0x234>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe febb 	bl	8000548 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	491d      	ldr	r1, [pc, #116]	; (800184c <main+0x240>)
 80017d8:	481d      	ldr	r0, [pc, #116]	; (8001850 <main+0x244>)
 80017da:	f005 f94f 	bl	8006a7c <siprintf>

	  lcd_position(&hi2c1,0,0);                                // Affichage du taux d'humidité
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <main+0x204>)
 80017e4:	f7ff fec1 	bl	800156a <lcd_position>
	  lcd_print(&hi2c1,bufRH);                                 //
 80017e8:	4917      	ldr	r1, [pc, #92]	; (8001848 <main+0x23c>)
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <main+0x204>)
 80017ec:	f7ff fe94 	bl	8001518 <lcd_print>
	  lcd_print(&hi2c1,"%  ");                                 //
 80017f0:	4918      	ldr	r1, [pc, #96]	; (8001854 <main+0x248>)
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <main+0x204>)
 80017f4:	f7ff fe90 	bl	8001518 <lcd_print>

	  lcd_position(&hi2c1,0,1);                                // Affichage de la température
 80017f8:	2201      	movs	r2, #1
 80017fa:	2100      	movs	r1, #0
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <main+0x204>)
 80017fe:	f7ff feb4 	bl	800156a <lcd_position>
	  lcd_print(&hi2c1,bufT);                                  //
 8001802:	4913      	ldr	r1, [pc, #76]	; (8001850 <main+0x244>)
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <main+0x204>)
 8001806:	f7ff fe87 	bl	8001518 <lcd_print>
	  HAL_Delay(2000);
 800180a:	e723      	b.n	8001654 <main+0x48>
 800180c:	200001f8 	.word	0x200001f8
 8001810:	20000214 	.word	0x20000214
 8001814:	08008f04 	.word	0x08008f04
 8001818:	20000331 	.word	0x20000331
 800181c:	20000361 	.word	0x20000361
 8001820:	20000349 	.word	0x20000349
 8001824:	20000330 	.word	0x20000330
 8001828:	20000360 	.word	0x20000360
 800182c:	20000348 	.word	0x20000348
 8001830:	20000204 	.word	0x20000204
 8001834:	20000206 	.word	0x20000206
 8001838:	40240000 	.word	0x40240000
 800183c:	20000200 	.word	0x20000200
 8001840:	200001fc 	.word	0x200001fc
 8001844:	08008f18 	.word	0x08008f18
 8001848:	2000034c 	.word	0x2000034c
 800184c:	08008f28 	.word	0x08008f28
 8001850:	20000334 	.word	0x20000334
 8001854:	08008f3c 	.word	0x08008f3c

08001858 <SystemClock_Config>:
  /**
  * @brief System Clock Configuration
  * @retval None
  **/
void SystemClock_Config(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b096      	sub	sp, #88	; 0x58
 800185c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2244      	movs	r2, #68	; 0x44
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fc96 	bl	8006198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage **/

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800187a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800187e:	f002 f96b 	bl	8003b58 <HAL_PWREx_ControlVoltageScaling>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001888:	f000 f837 	bl	80018fa <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure. **/

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188c:	2302      	movs	r3, #2
 800188e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001894:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001896:	2310      	movs	r3, #16
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800189e:	2302      	movs	r3, #2
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018a6:	230a      	movs	r3, #10
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018aa:	2307      	movs	r3, #7
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 f9a2 	bl	8003c04 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018c6:	f000 f818 	bl	80018fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks **/

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2303      	movs	r3, #3
 80018d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2104      	movs	r1, #4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fd74 	bl	80043d0 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018ee:	f000 f804 	bl	80018fa <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	3758      	adds	r7, #88	; 0x58
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  **/

void Error_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fe:	b672      	cpsid	i
}
 8001900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001902:	e7fe      	b.n	8001902 <Error_Handler+0x8>

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_MspInit+0x44>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_MspInit+0x44>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6613      	str	r3, [r2, #96]	; 0x60
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_MspInit+0x44>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x44>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x44>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 fabc 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <I2C1_EV_IRQHandler+0x10>)
 80019a6:	f001 f8be 	bl	8002b26 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000214 	.word	0x20000214

080019b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <I2C1_ER_IRQHandler+0x10>)
 80019ba:	f001 f8ce 	bl	8002b5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000214 	.word	0x20000214

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019e2:	f004 fbaf 	bl	8006144 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
	return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a0a:	e7fe      	b.n	8001a0a <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
	}
	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f004 fb14 	bl	8006144 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20018000 	.word	0x20018000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000208 	.word	0x20000208
 8001b50:	200003c8 	.word	0x200003c8

08001b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <SystemInit+0x5c>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <SystemInit+0x5c>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <SystemInit+0x60>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <SystemInit+0x60>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <SystemInit+0x60>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <SystemInit+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <SystemInit+0x60>)
 8001b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <SystemInit+0x60>)
 8001b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SystemInit+0x60>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x60>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SystemInit+0x60>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001be0:	224f      	movs	r2, #79	; 0x4f
 8001be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfe:	4814      	ldr	r0, [pc, #80]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001c00:	f003 faa8 	bl	8005154 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c0a:	f7ff fe76 	bl	80018fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001c1c:	f003 faf1 	bl	8005202 <HAL_TIM_ConfigClockSource>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c26:	f7ff fe68 	bl	80018fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_TIM2_Init+0x98>)
 8001c38:	f003 fce0 	bl	80055fc <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c42:	f7ff fe5a 	bl	80018fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000364 	.word	0x20000364

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d10b      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_TIM_Base_MspInit+0x38>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l4xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <DWT_Delay_Init+0x58>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <DWT_Delay_Init+0x58>)
 8001c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <DWT_Delay_Init+0x58>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <DWT_Delay_Init+0x58>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001caa:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001cca:	bf00      	nop
    __ASM volatile ("NOP");
 8001ccc:	bf00      	nop
    __ASM volatile ("NOP");
 8001cce:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <DWT_Delay_Init+0x5c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001cdc:	2301      	movs	r3, #1
    }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000edf0 	.word	0xe000edf0
 8001cec:	e0001000 	.word	0xe0001000

08001cf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_USART2_UART_Init+0x5c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d34:	f003 fcea 	bl	800570c <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f7ff fddc 	bl	80018fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200002ac 	.word	0x200002ac
 8001d4c:	40004400 	.word	0x40004400

08001d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ac      	sub	sp, #176	; 0xb0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2288      	movs	r2, #136	; 0x88
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fa11 	bl	8006198 <memset>
  if(uartHandle->Instance==USART2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_UART_MspInit+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d13b      	bne.n	8001df8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 fd25 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d98:	f7ff fdaf 	bl	80018fa <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da6:	6593      	str	r3, [r2, #88]	; 0x58
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_UART_MspInit+0xb4>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dcc:	230c      	movs	r3, #12
 8001dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de4:	2307      	movs	r3, #7
 8001de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df4:	f000 fa32 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001df8:	bf00      	nop
 8001dfa:	37b0      	adds	r7, #176	; 0xb0
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40021000 	.word	0x40021000

08001e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e0c:	f7ff fea2 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e12:	490d      	ldr	r1, [pc, #52]	; (8001e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <LoopForever+0xe>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e28:	4c0a      	ldr	r4, [pc, #40]	; (8001e54 <LoopForever+0x16>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e36:	f004 f98b 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e3a:	f7ff fbe7 	bl	800160c <main>

08001e3e <LoopForever>:

LoopForever:
    b LoopForever
 8001e3e:	e7fe      	b.n	8001e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e4c:	0800937c 	.word	0x0800937c
  ldr r2, =_sbss
 8001e50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e54:	200003c4 	.word	0x200003c4

08001e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC1_2_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_Init+0x3c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <HAL_Init+0x3c>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e72:	2003      	movs	r0, #3
 8001e74:	f000 f962 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 f80f 	bl	8001e9c <HAL_InitTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	e001      	b.n	8001e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e8a:	f7ff fd3b 	bl	8001904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_InitTick+0x6c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_InitTick+0x70>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_InitTick+0x6c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f96d 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d809      	bhi.n	8001eec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f937 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_InitTick+0x74>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e007      	b.n	8001efc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e004      	b.n	8001efc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e001      	b.n	8001efc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	200003b0 	.word	0x200003b0

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200003b0 	.word	0x200003b0

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d005      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2204      	movs	r2, #4
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e029      	b.n	8002236 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 020e 	bic.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f003 021c 	and.w	r2, r3, #28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
    }
  }
  return status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800224e:	b2db      	uxtb	r3, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	e17f      	b.n	800256c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8171 	beq.w	8002566 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d005      	beq.n	800229c <HAL_GPIO_Init+0x40>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d130      	bne.n	80022fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d2:	2201      	movs	r2, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0201 	and.w	r2, r3, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b03      	cmp	r3, #3
 8002308:	d118      	bne.n	800233c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	6939      	ldr	r1, [r7, #16]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ac 	beq.w	8002566 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_GPIO_Init+0x330>)
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	4a5e      	ldr	r2, [pc, #376]	; (800258c <HAL_GPIO_Init+0x330>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6613      	str	r3, [r2, #96]	; 0x60
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_GPIO_Init+0x330>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002426:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_GPIO_Init+0x334>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x242>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_GPIO_Init+0x338>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x23e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_GPIO_Init+0x33c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x23a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_GPIO_Init+0x340>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x236>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_GPIO_Init+0x344>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x232>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_GPIO_Init+0x348>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x22e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x34c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x22a>
 8002482:	2306      	movs	r3, #6
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002486:	2307      	movs	r3, #7
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x244>
 800249e:	2300      	movs	r3, #0
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024b0:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x334>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_GPIO_Init+0x350>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_GPIO_Init+0x350>)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_GPIO_Init+0x350>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_GPIO_Init+0x350>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f ae78 	bne.w	800226c <HAL_GPIO_Init+0x10>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	48000400 	.word	0x48000400
 8002598:	48000800 	.word	0x48000800
 800259c:	48000c00 	.word	0x48000c00
 80025a0:	48001000 	.word	0x48001000
 80025a4:	48001400 	.word	0x48001400
 80025a8:	48001800 	.word	0x48001800
 80025ac:	40010400 	.word	0x40010400

080025b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e001      	b.n	80025d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e081      	b.n	8002726 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fdf0 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	; 0x24
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002660:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002670:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e006      	b.n	8002698 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002696:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d104      	bne.n	80026aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69d9      	ldr	r1, [r3, #28]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1a      	ldr	r2, [r3, #32]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	f040 80da 	bne.w	8002906 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2C_Master_Transmit+0x30>
 800275c:	2302      	movs	r3, #2
 800275e:	e0d3      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002768:	f7ff fbe8 	bl	8001f3c <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2319      	movs	r3, #25
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 ff0d 	bl	800359a <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0be      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2221      	movs	r2, #33	; 0x21
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2210      	movs	r2, #16
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d90e      	bls.n	80027da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_I2C_Master_Transmit+0x1e0>)
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f001 f88a 	bl	80038ec <I2C_TransferConfig>
 80027d8:	e06c      	b.n	80028b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_I2C_Master_Transmit+0x1e0>)
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f001 f879 	bl	80038ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027fa:	e05b      	b.n	80028b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 ff0a 	bl	800361a <I2C_WaitOnTXISFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e07b      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d034      	beq.n	80028b4 <HAL_I2C_Master_Transmit+0x184>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	d130      	bne.n	80028b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fe9c 	bl	800359a <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e04d      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d90e      	bls.n	8002894 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	2300      	movs	r3, #0
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f001 f82d 	bl	80038ec <I2C_TransferConfig>
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	2300      	movs	r3, #0
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 f81c 	bl	80038ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d19e      	bne.n	80027fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fee9 	bl	800369a <I2C_WaitOnSTOPFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e01a      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2220      	movs	r2, #32
 80028d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_I2C_Master_Transmit+0x1e4>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80002000 	.word	0x80002000
 8002914:	fe00e800 	.word	0xfe00e800

08002918 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 80f1 	bne.w	8002b1c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002948:	d101      	bne.n	800294e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	e0e7      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_I2C_IsDeviceReady+0x44>
 8002958:	2302      	movs	r3, #2
 800295a:	e0e0      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_I2C_IsDeviceReady+0x72>
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002988:	e004      	b.n	8002994 <HAL_I2C_IsDeviceReady+0x7c>
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800299a:	f7ff facf 	bl	8001f3c <HAL_GetTick>
 800299e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029cc:	e034      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d01a      	beq.n	8002a0c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7ff fab1 	bl	8001f3c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <HAL_I2C_IsDeviceReady+0xd4>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10f      	bne.n	8002a0c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e088      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a38:	7ffb      	ldrb	r3, [r7, #31]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_I2C_IsDeviceReady+0x12c>
 8002a3e:	7fbb      	ldrb	r3, [r7, #30]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0c4      	beq.n	80029ce <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d01a      	beq.n	8002a88 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fd9c 	bl	800359a <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e058      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2220      	movs	r2, #32
 8002a72:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e04a      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2120      	movs	r1, #32
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fd81 	bl	800359a <I2C_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e03d      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d118      	bne.n	8002aec <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fd60 	bl	800359a <I2C_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e01c      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	f63f af3b 	bhi.w	8002972 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
  }
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	09db      	lsrs	r3, r3, #7
 8002b82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	09db      	lsrs	r3, r3, #7
 8002bb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f043 0208 	orr.w	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bcc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0a5b      	lsrs	r3, r3, #9
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	09db      	lsrs	r3, r3, #7
 8002bde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 030b 	and.w	r3, r3, #11
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fb8a 	bl	8003328 <I2C_ITError>
  }
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
 8002c50:	4613      	mov	r3, r2
 8002c52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <I2C_Slave_ISR_IT+0x24>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0ec      	b.n	8002e9a <I2C_Slave_ISR_IT+0x1fe>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9c0 	bl	8003068 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d04d      	beq.n	8002d90 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d047      	beq.n	8002d90 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d128      	bne.n	8002d5c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b28      	cmp	r3, #40	; 0x28
 8002d14:	d108      	bne.n	8002d28 <I2C_Slave_ISR_IT+0x8c>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d1c:	d104      	bne.n	8002d28 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d1e:	6939      	ldr	r1, [r7, #16]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 faab 	bl	800327c <I2C_ITListenCplt>
 8002d26:	e032      	b.n	8002d8e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b29      	cmp	r3, #41	; 0x29
 8002d32:	d10e      	bne.n	8002d52 <I2C_Slave_ISR_IT+0xb6>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3a:	d00a      	beq.n	8002d52 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2210      	movs	r2, #16
 8002d42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fbe6 	bl	8003516 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f92d 	bl	8002faa <I2C_ITSlaveSeqCplt>
 8002d50:	e01d      	b.n	8002d8e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002d5a:	e096      	b.n	8002e8a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2210      	movs	r2, #16
 8002d62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <I2C_Slave_ISR_IT+0xe4>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	f040 8085 	bne.w	8002e8a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	4619      	mov	r1, r3
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 face 	bl	8003328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d8c:	e07d      	b.n	8002e8a <I2C_Slave_ISR_IT+0x1ee>
 8002d8e:	e07c      	b.n	8002e8a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d030      	beq.n	8002dfe <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02a      	beq.n	8002dfe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d14f      	bne.n	8002e8e <I2C_Slave_ISR_IT+0x1f2>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d04b      	beq.n	8002e8e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8d7 	bl	8002faa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002dfc:	e047      	b.n	8002e8e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	08db      	lsrs	r3, r3, #3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e16:	6939      	ldr	r1, [r7, #16]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f842 	bl	8002ea2 <I2C_ITAddrCplt>
 8002e1e:	e037      	b.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d031      	beq.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02b      	beq.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e72:	e00d      	b.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e7a:	d002      	beq.n	8002e82 <I2C_Slave_ISR_IT+0x1e6>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f891 	bl	8002faa <I2C_ITSlaveSeqCplt>
 8002e88:	e002      	b.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002e8e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eb8:	2b28      	cmp	r3, #40	; 0x28
 8002eba:	d16a      	bne.n	8002f92 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002eda:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ef6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d138      	bne.n	8002f72 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	09db      	lsrs	r3, r3, #7
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	89bb      	ldrh	r3, [r7, #12]
 8002f08:	4053      	eors	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f003 0306 	and.w	r3, r3, #6
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11c      	bne.n	8002f4e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d13b      	bne.n	8002fa2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f40:	89ba      	ldrh	r2, [r7, #12]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fe7c 	bl	8002c44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f4c:	e029      	b.n	8002fa2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fcfa 	bl	8003950 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f64:	89ba      	ldrh	r2, [r7, #12]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fe6a 	bl	8002c44 <HAL_I2C_AddrCallback>
}
 8002f70:	e017      	b.n	8002fa2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fcea 	bl	8003950 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f84:	89ba      	ldrh	r2, [r7, #12]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fe5a 	bl	8002c44 <HAL_I2C_AddrCallback>
}
 8002f90:	e007      	b.n	8002fa2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2208      	movs	r2, #8
 8002f98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	0b9b      	lsrs	r3, r3, #14
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e00d      	b.n	8002ffc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	0bdb      	lsrs	r3, r3, #15
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b29      	cmp	r3, #41	; 0x29
 8003006:	d112      	bne.n	800302e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2228      	movs	r2, #40	; 0x28
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2221      	movs	r2, #33	; 0x21
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003016:	2101      	movs	r1, #1
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fc99 	bl	8003950 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fdf8 	bl	8002c1c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800302c:	e017      	b.n	800305e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b2a      	cmp	r3, #42	; 0x2a
 8003038:	d111      	bne.n	800305e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2228      	movs	r2, #40	; 0x28
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2222      	movs	r2, #34	; 0x22
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003048:	2102      	movs	r1, #2
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fc80 	bl	8003950 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fde9 	bl	8002c30 <HAL_I2C_SlaveRxCpltCallback>
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003084:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b21      	cmp	r3, #33	; 0x21
 8003092:	d002      	beq.n	800309a <I2C_ITSlaveCplt+0x32>
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b29      	cmp	r3, #41	; 0x29
 8003098:	d108      	bne.n	80030ac <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800309a:	f248 0101 	movw	r1, #32769	; 0x8001
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fc56 	bl	8003950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2221      	movs	r2, #33	; 0x21
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
 80030aa:	e00d      	b.n	80030c8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b22      	cmp	r3, #34	; 0x22
 80030b0:	d002      	beq.n	80030b8 <I2C_ITSlaveCplt+0x50>
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b2a      	cmp	r3, #42	; 0x2a
 80030b6:	d107      	bne.n	80030c8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80030b8:	f248 0102 	movw	r1, #32770	; 0x8002
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fc47 	bl	8003950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2222      	movs	r2, #34	; 0x22
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b64      	ldr	r3, [pc, #400]	; (8003274 <I2C_ITSlaveCplt+0x20c>)
 80030e4:	400b      	ands	r3, r1
 80030e6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa14 	bl	8003516 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	0b9b      	lsrs	r3, r3, #14
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d013      	beq.n	8003122 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003108:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003120:	e018      	b.n	8003154 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	0bdb      	lsrs	r3, r3, #15
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0304 	bic.w	r3, r3, #4
 8003166:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8a7 	bl	8003328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b28      	cmp	r3, #40	; 0x28
 80031e4:	d141      	bne.n	800326a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031e6:	6979      	ldr	r1, [r7, #20]
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f847 	bl	800327c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031ee:	e03c      	b.n	800326a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d014      	beq.n	8003224 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fed5 	bl	8002faa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <I2C_ITSlaveCplt+0x210>)
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fd1f 	bl	8002c60 <HAL_I2C_ListenCpltCallback>
}
 8003222:	e022      	b.n	800326a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b22      	cmp	r3, #34	; 0x22
 800322e:	d10e      	bne.n	800324e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fcf2 	bl	8002c30 <HAL_I2C_SlaveRxCpltCallback>
}
 800324c:	e00d      	b.n	800326a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fcd9 	bl	8002c1c <HAL_I2C_SlaveTxCpltCallback>
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	fe00e800 	.word	0xfe00e800
 8003278:	ffff0000 	.word	0xffff0000

0800327c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a26      	ldr	r2, [pc, #152]	; (8003324 <I2C_ITListenCplt+0xa8>)
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d022      	beq.n	80032fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f043 0204 	orr.w	r2, r3, #4
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fb26 	bl	8003950 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fca3 	bl	8002c60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	ffff0000 	.word	0xffff0000

08003328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <I2C_ITError+0x194>)
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b28      	cmp	r3, #40	; 0x28
 800335e:	d005      	beq.n	800336c <I2C_ITError+0x44>
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b29      	cmp	r3, #41	; 0x29
 8003364:	d002      	beq.n	800336c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b2a      	cmp	r3, #42	; 0x2a
 800336a:	d10b      	bne.n	8003384 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800336c:	2103      	movs	r1, #3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 faee 	bl	8003950 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2228      	movs	r2, #40	; 0x28
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a50      	ldr	r2, [pc, #320]	; (80034c0 <I2C_ITError+0x198>)
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
 8003382:	e011      	b.n	80033a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003384:	f248 0103 	movw	r1, #32771	; 0x8003
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fae1 	bl	8003950 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b60      	cmp	r3, #96	; 0x60
 8003398:	d003      	beq.n	80033a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d039      	beq.n	800342a <I2C_ITError+0x102>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	d002      	beq.n	80033c2 <I2C_ITError+0x9a>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b21      	cmp	r3, #33	; 0x21
 80033c0:	d133      	bne.n	800342a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d0:	d107      	bne.n	80033e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff2a 	bl	8002240 <HAL_DMA_GetState>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d017      	beq.n	8003422 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <I2C_ITError+0x19c>)
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fed9 	bl	80021be <HAL_DMA_Abort_IT>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04d      	beq.n	80034ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800341c:	4610      	mov	r0, r2
 800341e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003420:	e045      	b.n	80034ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f850 	bl	80034c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003428:	e041      	b.n	80034ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d039      	beq.n	80034a6 <I2C_ITError+0x17e>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b12      	cmp	r3, #18
 8003436:	d002      	beq.n	800343e <I2C_ITError+0x116>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b22      	cmp	r3, #34	; 0x22
 800343c:	d133      	bne.n	80034a6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d107      	bne.n	800345e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe feec 	bl	8002240 <HAL_DMA_GetState>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d017      	beq.n	800349e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <I2C_ITError+0x19c>)
 8003474:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fe9b 	bl	80021be <HAL_DMA_Abort_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003498:	4610      	mov	r0, r2
 800349a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800349c:	e009      	b.n	80034b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f812 	bl	80034c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034a4:	e005      	b.n	80034b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f80e 	bl	80034c8 <I2C_TreatErrorCallback>
  }
}
 80034ac:	e002      	b.n	80034b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034b2:	bf00      	nop
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	ffff0000 	.word	0xffff0000
 80034c0:	08002c9d 	.word	0x08002c9d
 80034c4:	0800355f 	.word	0x0800355f

080034c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b60      	cmp	r3, #96	; 0x60
 80034da:	d10e      	bne.n	80034fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fbc8 	bl	8002c88 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034f8:	e009      	b.n	800350e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fbb3 	bl	8002c74 <HAL_I2C_ErrorCallback>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d103      	bne.n	8003534 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d007      	beq.n	8003552 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	619a      	str	r2, [r3, #24]
  }
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	2200      	movs	r2, #0
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	2200      	movs	r2, #0
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff ff9b 	bl	80034c8 <I2C_TreatErrorCallback>
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	e022      	b.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d01e      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7fe fcc2 	bl	8001f3c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d113      	bne.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e00f      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0cd      	beq.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003626:	e02c      	b.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f871 	bl	8003714 <I2C_IsErrorOccurred>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e02a      	b.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d01e      	beq.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe fc7a 	bl	8001f3c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e007      	b.n	8003692 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d1cb      	bne.n	8003628 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a6:	e028      	b.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f831 	bl	8003714 <I2C_IsErrorOccurred>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e026      	b.n	800370a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7fe fc3e 	bl	8001f3c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d113      	bne.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d1cf      	bne.n	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d075      	beq.n	800382c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003748:	e056      	b.n	80037f8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d052      	beq.n	80037f8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fbf3 	bl	8001f3c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_IsErrorOccurred+0x54>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d147      	bne.n	80037f8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003772:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800377a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378a:	d12e      	bne.n	80037ea <I2C_IsErrorOccurred+0xd6>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003792:	d02a      	beq.n	80037ea <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b20      	cmp	r3, #32
 8003798:	d027      	beq.n	80037ea <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037aa:	f7fe fbc7 	bl	8001f3c <HAL_GetTick>
 80037ae:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b0:	e01b      	b.n	80037ea <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037b2:	f7fe fbc3 	bl	8001f3c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b19      	cmp	r3, #25
 80037be:	d914      	bls.n	80037ea <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d1dc      	bne.n	80037b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d003      	beq.n	800380e <I2C_IsErrorOccurred+0xfa>
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800380a:	2b00      	cmp	r3, #0
 800380c:	d09d      	beq.n	800374a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800380e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2220      	movs	r2, #32
 800381c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800384e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	f043 0308 	orr.w	r3, r3, #8
 8003866:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800389a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01c      	beq.n	80038dc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fe37 	bl	8003516 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <I2C_IsErrorOccurred+0x1d4>)
 80038b4:	400b      	ands	r3, r1
 80038b6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	fe00e800 	.word	0xfe00e800

080038ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	4613      	mov	r3, r2
 80038fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003904:	7a7b      	ldrb	r3, [r7, #9]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	4313      	orrs	r3, r2
 8003916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800391a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	0d5b      	lsrs	r3, r3, #21
 8003926:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <I2C_TransferConfig+0x60>)
 800392c:	430b      	orrs	r3, r1
 800392e:	43db      	mvns	r3, r3
 8003930:	ea02 0103 	and.w	r1, r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	03ff63ff 	.word	0x03ff63ff

08003950 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003960:	887b      	ldrh	r3, [r7, #2]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00f      	beq.n	800398a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003970:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800397e:	2b28      	cmp	r3, #40	; 0x28
 8003980:	d003      	beq.n	800398a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003988:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00f      	beq.n	80039b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800399a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039a8:	2b28      	cmp	r3, #40	; 0x28
 80039aa:	d003      	beq.n	80039b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80039b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da03      	bge.n	80039c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039c4:	887b      	ldrh	r3, [r7, #2]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d103      	bne.n	80039d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d103      	bne.n	80039e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f043 0320 	orr.w	r3, r3, #32
 80039de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d103      	bne.n	80039ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d138      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e032      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d139      	bne.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e033      	b.n	8003b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2224      	movs	r2, #36	; 0x24
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40007000 	.word	0x40007000

08003b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b66:	d130      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d038      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2232      	movs	r2, #50	; 0x32
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9c:	e002      	b.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f2      	bne.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d110      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d007      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be0:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	431bde83 	.word	0x431bde83

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e3d4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4ba1      	ldr	r3, [pc, #644]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80e4 	beq.w	8003e00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4a>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	f040 808b 	bne.w	8003d5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 8087 	bne.w	8003d5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c4e:	4b93      	ldr	r3, [pc, #588]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e3ac      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCC_OscConfig+0x7c>
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_OscConfig+0x88>
 8003c80:	4b86      	ldr	r3, [pc, #536]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d223      	bcs.n	8003cd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fd41 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e38d      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca4:	4b7d      	ldr	r3, [pc, #500]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003caa:	f043 0308 	orr.w	r3, r3, #8
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4977      	ldr	r1, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	4972      	ldr	r1, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
 8003cd6:	e025      	b.n	8003d24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd8:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6f      	ldr	r2, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	496a      	ldr	r1, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf6:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4965      	ldr	r1, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd01 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e34d      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d24:	f000 fc36 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	495a      	ldr	r1, [pc, #360]	; (8003ea0 <HAL_RCC_OscConfig+0x29c>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x2a0>)
 8003d42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d44:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_RCC_OscConfig+0x2a4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe f8a7 	bl	8001e9c <HAL_InitTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d052      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	e331      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d64:	4b4d      	ldr	r3, [pc, #308]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4c      	ldr	r2, [pc, #304]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d70:	f7fe f8e4 	bl	8001f3c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d78:	f7fe f8e0 	bl	8001f3c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e31a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8a:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	493b      	ldr	r1, [pc, #236]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4936      	ldr	r1, [pc, #216]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e01a      	b.n	8003e00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a33      	ldr	r2, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd6:	f7fe f8b1 	bl	8001f3c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dde:	f7fe f8ad 	bl	8001f3c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e2e7      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x1da>
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d074      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d005      	beq.n	8003e1e <HAL_RCC_OscConfig+0x21a>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d10e      	bne.n	8003e36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d10b      	bne.n	8003e36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d064      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d160      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e2c4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x24a>
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e01d      	b.n	8003e8a <HAL_RCC_OscConfig+0x286>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x26e>
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x286>
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe f853 	bl	8001f3c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e98:	e011      	b.n	8003ebe <HAL_RCC_OscConfig+0x2ba>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08008f40 	.word	0x08008f40
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe f846 	bl	8001f3c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e280      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	4baf      	ldr	r3, [pc, #700]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x2a8>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f836 	bl	8001f3c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe f832 	bl	8001f3c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e26c      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	4ba5      	ldr	r3, [pc, #660]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2d0>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d060      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_OscConfig+0x310>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d116      	bne.n	8003f42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f14:	4b99      	ldr	r3, [pc, #612]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x328>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e249      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	4990      	ldr	r1, [pc, #576]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f40:	e040      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d023      	beq.n	8003f92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4a:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a8b      	ldr	r2, [pc, #556]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fff1 	bl	8001f3c <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fd ffed 	bl	8001f3c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e227      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f70:	4b82      	ldr	r3, [pc, #520]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	497c      	ldr	r1, [pc, #496]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	e018      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b7a      	ldr	r3, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a79      	ldr	r2, [pc, #484]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd ffcd 	bl	8001f3c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fd ffc9 	bl	8001f3c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e203      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb8:	4b70      	ldr	r3, [pc, #448]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03c      	beq.n	800404a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01c      	beq.n	8004012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd8:	4b68      	ldr	r3, [pc, #416]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd ffa8 	bl	8001f3c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff0:	f7fd ffa4 	bl	8001f3c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1de      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004002:	4b5e      	ldr	r3, [pc, #376]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ef      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x3ec>
 8004010:	e01b      	b.n	800404a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004012:	4b5a      	ldr	r3, [pc, #360]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd ff8b 	bl	8001f3c <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402a:	f7fd ff87 	bl	8001f3c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1c1      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ef      	bne.n	800402a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80a6 	beq.w	80041a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004058:	2300      	movs	r3, #0
 800405a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b44      	ldr	r3, [pc, #272]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a43      	ldr	r2, [pc, #268]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d118      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409c:	f7fd ff4e 	bl	8001f3c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd ff4a 	bl	8001f3c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e184      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <HAL_RCC_OscConfig+0x4d8>
 80040ca:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040da:	e024      	b.n	8004126 <HAL_RCC_OscConfig+0x522>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d110      	bne.n	8004106 <HAL_RCC_OscConfig+0x502>
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004104:	e00f      	b.n	8004126 <HAL_RCC_OscConfig+0x522>
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd ff05 	bl	8001f3c <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd ff01 	bl	8001f3c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e139      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ed      	beq.n	8004136 <HAL_RCC_OscConfig+0x532>
 800415a:	e01a      	b.n	8004192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd feee 	bl	8001f3c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd feea 	bl	8001f3c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d906      	bls.n	8004184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e122      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004184:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e8      	bne.n	8004164 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004198:	4b8b      	ldr	r3, [pc, #556]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a8a      	ldr	r2, [pc, #552]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8108 	beq.w	80043be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	f040 80d0 	bne.w	8004358 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b8:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d130      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	3b01      	subs	r3, #1
 80041d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d127      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11f      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f8:	2a07      	cmp	r2, #7
 80041fa:	bf14      	ite	ne
 80041fc:	2201      	movne	r2, #1
 80041fe:	2200      	moveq	r2, #0
 8004200:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004202:	4293      	cmp	r3, r2
 8004204:	d113      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d109      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d06e      	beq.n	800430c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d069      	beq.n	8004308 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004240:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b7      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004250:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800425c:	f7fd fe6e 	bl	8001f3c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd fe6a 	bl	8001f3c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0a4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <HAL_RCC_OscConfig+0x7c8>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429c:	0212      	lsls	r2, r2, #8
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0552      	lsls	r2, r2, #21
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042bc:	0912      	lsrs	r2, r2, #4
 80042be:	0452      	lsls	r2, r2, #17
 80042c0:	430a      	orrs	r2, r1
 80042c2:	4941      	ldr	r1, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3e      	ldr	r2, [pc, #248]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d4:	4b3c      	ldr	r3, [pc, #240]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a3b      	ldr	r2, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e0:	f7fd fe2c 	bl	8001f3c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fd fe28 	bl	8001f3c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e062      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004306:	e05a      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e059      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430c:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d152      	bne.n	80043be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004330:	f7fd fe04 	bl	8001f3c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd fe00 	bl	8001f3c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e03a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x734>
 8004356:	e032      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d02d      	beq.n	80043ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004368:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fdd3 	bl	8001f3c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd fdcf 	bl	8001f3c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e009      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x796>
 80043b8:	e001      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	f99d808c 	.word	0xf99d808c

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0c8      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4961      	ldr	r1, [pc, #388]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b5f      	ldr	r3, [pc, #380]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b0      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04c      	beq.n	80044ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d121      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e09e      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e092      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004458:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e086      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e07e      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 0203 	bic.w	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	493f      	ldr	r1, [pc, #252]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fd fd57 	bl	8001f3c <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004492:	f7fd fd53 	bl	8001f3c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e066      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 020c 	and.w	r2, r3, #12
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1eb      	bne.n	8004492 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	492c      	ldr	r1, [pc, #176]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d210      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4924      	ldr	r1, [pc, #144]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e036      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4918      	ldr	r1, [pc, #96]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4910      	ldr	r1, [pc, #64]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004546:	f000 f825 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490c      	ldr	r1, [pc, #48]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd fc96 	bl	8001e9c <HAL_InitTick>
 8004570:	4603      	mov	r3, r0
 8004572:	72fb      	strb	r3, [r7, #11]

  return status;
 8004574:	7afb      	ldrb	r3, [r7, #11]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000
 8004584:	40021000 	.word	0x40021000
 8004588:	08008f40 	.word	0x08008f40
 800458c:	20000000 	.word	0x20000000
 8004590:	20000004 	.word	0x20000004

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ac:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x34>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d121      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d11e      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045d4:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e005      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004604:	e00a      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d102      	bne.n	8004612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e004      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d101      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800461a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d134      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0xa6>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d003      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0xac>
 8004638:	e005      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800463c:	617b      	str	r3, [r7, #20]
      break;
 800463e:	e005      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004642:	617b      	str	r3, [r7, #20]
      break;
 8004644:	e002      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	617b      	str	r3, [r7, #20]
      break;
 800464a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	3301      	adds	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	fb02 f203 	mul.w	r2, r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	0e5b      	lsrs	r3, r3, #25
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	3301      	adds	r3, #1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800468c:	69bb      	ldr	r3, [r7, #24]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	08008f58 	.word	0x08008f58
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000000 	.word	0x20000000

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046c8:	f7ff fff0 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08008f50 	.word	0x08008f50

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046f4:	f7ff ffda 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0adb      	lsrs	r3, r3, #11
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	08008f50 	.word	0x08008f50

0800471c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004734:	f7ff fa02 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 8004738:	6178      	str	r0, [r7, #20]
 800473a:	e014      	b.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004746:	6593      	str	r3, [r2, #88]	; 0x58
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004754:	f7ff f9f2 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 8004758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d10b      	bne.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d919      	bls.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2ba0      	cmp	r3, #160	; 0xa0
 8004778:	d902      	bls.n	8004780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800477a:	2302      	movs	r3, #2
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e013      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004780:	2301      	movs	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e010      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d902      	bls.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800478c:	2303      	movs	r3, #3
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e00a      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d102      	bne.n	800479e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004798:	2302      	movs	r3, #2
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e004      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d101      	bne.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a4:	2301      	movs	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 0207 	bic.w	r2, r3, #7
 80047b0:	4909      	ldr	r1, [pc, #36]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d001      	beq.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40022000 	.word	0x40022000

080047dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e4:	2300      	movs	r3, #0
 80047e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e8:	2300      	movs	r3, #0
 80047ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d041      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004800:	d02a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004806:	d824      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800480e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004812:	d81e      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481c:	d010      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800481e:	e018      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004820:	4b86      	ldr	r3, [pc, #536]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a85      	ldr	r2, [pc, #532]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482c:	e015      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fabb 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3320      	adds	r3, #32
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fba6 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004850:	e003      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	74fb      	strb	r3, [r7, #19]
      break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004860:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486e:	4973      	ldr	r1, [pc, #460]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d041      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004890:	d02a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004896:	d824      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800489e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a2:	d81e      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ac:	d010      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ae:	e018      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b0:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a61      	ldr	r2, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048bc:	e015      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa73 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3320      	adds	r3, #32
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fb5e 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	74fb      	strb	r3, [r7, #19]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	494f      	ldr	r1, [pc, #316]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004906:	e001      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80a0 	beq.w	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6593      	str	r3, [r2, #88]	; 0x58
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494c:	2301      	movs	r3, #1
 800494e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004950:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3a      	ldr	r2, [pc, #232]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495c:	f7fd faee 	bl	8001f3c <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fd faea 	bl	8001f3c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
        break;
 8004976:	e005      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ef      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d15c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d019      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd faa9 	bl	8001f3c <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	e00b      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd faa5 	bl	8001f3c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d902      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	74fb      	strb	r3, [r7, #19]
            break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ec      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a32:	e009      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	74bb      	strb	r3, [r7, #18]
 8004a38:	e006      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a48:	7c7b      	ldrb	r3, [r7, #17]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	4a9d      	ldr	r2, [pc, #628]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a66:	4b98      	ldr	r3, [pc, #608]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f023 0203 	bic.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4994      	ldr	r1, [pc, #592]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 020c 	bic.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	498c      	ldr	r1, [pc, #560]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aaa:	4b87      	ldr	r3, [pc, #540]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4983      	ldr	r1, [pc, #524]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004acc:	4b7e      	ldr	r3, [pc, #504]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	497b      	ldr	r1, [pc, #492]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aee:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afc:	4972      	ldr	r1, [pc, #456]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	496a      	ldr	r1, [pc, #424]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b32:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	4961      	ldr	r1, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b54:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	4959      	ldr	r1, [pc, #356]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b76:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	4950      	ldr	r1, [pc, #320]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b98:	4b4b      	ldr	r3, [pc, #300]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	4948      	ldr	r1, [pc, #288]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	493f      	ldr	r1, [pc, #252]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d028      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a31      	ldr	r2, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	e011      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c12:	d10c      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f8c8 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c64:	60d3      	str	r3, [r2, #12]
 8004c66:	e011      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f899 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	4908      	ldr	r1, [pc, #32]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a02      	ldr	r2, [pc, #8]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f867 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	4928      	ldr	r1, [pc, #160]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f844 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2c:	7cfb      	ldrb	r3, [r7, #19]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e011      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3320      	adds	r3, #32
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f925 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d76:	490d      	ldr	r1, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	4904      	ldr	r1, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b75      	ldr	r3, [pc, #468]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004de2:	4b6c      	ldr	r3, [pc, #432]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
       ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d047      	beq.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e044      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d018      	beq.n	8004e36 <RCCEx_PLLSAI1_Config+0x86>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d825      	bhi.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d002      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x62>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d009      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x74>
 8004e10:	e020      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e12:	4b60      	ldr	r3, [pc, #384]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11d      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e22:	e01a      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e013      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e36:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e42:	4b54      	ldr	r3, [pc, #336]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e52:	e006      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e004      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4944      	ldr	r1, [pc, #272]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d17d      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e8c:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a40      	ldr	r2, [pc, #256]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fd f850 	bl	8001f3c <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e9e:	e009      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea0:	f7fd f84c 	bl	8001f3c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e005      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb4:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d160      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d111      	bne.n	8004ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	0211      	lsls	r1, r2, #8
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	0912      	lsrs	r2, r2, #4
 8004ee4:	0452      	lsls	r2, r2, #17
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	492a      	ldr	r1, [pc, #168]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	610b      	str	r3, [r1, #16]
 8004eee:	e027      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d112      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6892      	ldr	r2, [r2, #8]
 8004f06:	0211      	lsls	r1, r2, #8
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6912      	ldr	r2, [r2, #16]
 8004f0c:	0852      	lsrs	r2, r2, #1
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	0552      	lsls	r2, r2, #21
 8004f12:	430a      	orrs	r2, r1
 8004f14:	491f      	ldr	r1, [pc, #124]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
 8004f1a:	e011      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	0211      	lsls	r1, r2, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6952      	ldr	r2, [r2, #20]
 8004f32:	0852      	lsrs	r2, r2, #1
 8004f34:	3a01      	subs	r2, #1
 8004f36:	0652      	lsls	r2, r2, #25
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	4916      	ldr	r1, [pc, #88]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fc fff6 	bl	8001f3c <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f52:	e009      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f54:	f7fc fff2 	bl	8001f3c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	73fb      	strb	r3, [r7, #15]
          break;
 8004f66:	e005      	b.n	8004f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ef      	beq.n	8004f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	4904      	ldr	r1, [pc, #16]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000

08004f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fa6:	4b6a      	ldr	r3, [pc, #424]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fb2:	4b67      	ldr	r3, [pc, #412]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0203 	and.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10d      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d047      	beq.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e044      	b.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d018      	beq.n	800501e <RCCEx_PLLSAI2_Config+0x86>
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d825      	bhi.n	800503c <RCCEx_PLLSAI2_Config+0xa4>
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <RCCEx_PLLSAI2_Config+0x62>
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d009      	beq.n	800500c <RCCEx_PLLSAI2_Config+0x74>
 8004ff8:	e020      	b.n	800503c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ffa:	4b55      	ldr	r3, [pc, #340]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11d      	bne.n	8005042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500a:	e01a      	b.n	8005042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501c:	e013      	b.n	8005046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800501e:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800502a:	4b49      	ldr	r3, [pc, #292]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800503a:	e006      	b.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      break;
 8005040:	e004      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504a:	bf00      	nop
    }

    if(status == HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	3b01      	subs	r3, #1
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	430b      	orrs	r3, r1
 8005068:	4939      	ldr	r1, [pc, #228]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d167      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fc ff5c 	bl	8001f3c <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005086:	e009      	b.n	800509c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005088:	f7fc ff58 	bl	8001f3c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d902      	bls.n	800509c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	73fb      	strb	r3, [r7, #15]
        break;
 800509a:	e005      	b.n	80050a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ef      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d14a      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d111      	bne.n	80050d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6892      	ldr	r2, [r2, #8]
 80050c4:	0211      	lsls	r1, r2, #8
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68d2      	ldr	r2, [r2, #12]
 80050ca:	0912      	lsrs	r2, r2, #4
 80050cc:	0452      	lsls	r2, r2, #17
 80050ce:	430a      	orrs	r2, r1
 80050d0:	491f      	ldr	r1, [pc, #124]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	614b      	str	r3, [r1, #20]
 80050d6:	e011      	b.n	80050fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	0211      	lsls	r1, r2, #8
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6912      	ldr	r2, [r2, #16]
 80050ee:	0852      	lsrs	r2, r2, #1
 80050f0:	3a01      	subs	r2, #1
 80050f2:	0652      	lsls	r2, r2, #25
 80050f4:	430a      	orrs	r2, r1
 80050f6:	4916      	ldr	r1, [pc, #88]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fc ff18 	bl	8001f3c <HAL_GetTick>
 800510c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800510e:	e009      	b.n	8005124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005110:	f7fc ff14 	bl	8001f3c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d902      	bls.n	8005124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	73fb      	strb	r3, [r7, #15]
          break;
 8005122:	e005      	b.n	8005130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ef      	beq.n	8005110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4904      	ldr	r1, [pc, #16]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fd6a 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 f8fe 	bl	8005394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_TIM_ConfigClockSource+0x1c>
 800521a:	2302      	movs	r3, #2
 800521c:	e0b6      	b.n	800538c <HAL_TIM_ConfigClockSource+0x18a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005240:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005248:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	d03e      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xd8>
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005260:	f200 8087 	bhi.w	8005372 <HAL_TIM_ConfigClockSource+0x170>
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	f000 8086 	beq.w	8005378 <HAL_TIM_ConfigClockSource+0x176>
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005270:	d87f      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	d01a      	beq.n	80052ac <HAL_TIM_ConfigClockSource+0xaa>
 8005276:	2b70      	cmp	r3, #112	; 0x70
 8005278:	d87b      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 800527a:	2b60      	cmp	r3, #96	; 0x60
 800527c:	d050      	beq.n	8005320 <HAL_TIM_ConfigClockSource+0x11e>
 800527e:	2b60      	cmp	r3, #96	; 0x60
 8005280:	d877      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 8005282:	2b50      	cmp	r3, #80	; 0x50
 8005284:	d03c      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xfe>
 8005286:	2b50      	cmp	r3, #80	; 0x50
 8005288:	d873      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d058      	beq.n	8005340 <HAL_TIM_ConfigClockSource+0x13e>
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d86f      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d064      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x15e>
 8005296:	2b30      	cmp	r3, #48	; 0x30
 8005298:	d86b      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d060      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x15e>
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d867      	bhi.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d05c      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x15e>
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d05a      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x15e>
 80052aa:	e062      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f000 f97e 	bl	80055bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e04f      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6899      	ldr	r1, [r3, #8]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f000 f967 	bl	80055bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fc:	609a      	str	r2, [r3, #8]
      break;
 80052fe:	e03c      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6859      	ldr	r1, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	461a      	mov	r2, r3
 800530e:	f000 f8db 	bl	80054c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2150      	movs	r1, #80	; 0x50
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f934 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 800531e:	e02c      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	461a      	mov	r2, r3
 800532e:	f000 f8fa 	bl	8005526 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2160      	movs	r1, #96	; 0x60
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f924 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 800533e:	e01c      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	461a      	mov	r2, r3
 800534e:	f000 f8bb 	bl	80054c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f914 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 800535e:	e00c      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 f90b 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 8005370:	e003      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
      break;
 8005376:	e000      	b.n	800537a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005378:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a40      	ldr	r2, [pc, #256]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d00f      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3d      	ldr	r2, [pc, #244]	; (80054ac <TIM_Base_SetConfig+0x118>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3c      	ldr	r2, [pc, #240]	; (80054b0 <TIM_Base_SetConfig+0x11c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d007      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3b      	ldr	r2, [pc, #236]	; (80054b4 <TIM_Base_SetConfig+0x120>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d108      	bne.n	80053e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01f      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d01b      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <TIM_Base_SetConfig+0x118>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <TIM_Base_SetConfig+0x11c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <TIM_Base_SetConfig+0x120>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a28      	ldr	r2, [pc, #160]	; (80054bc <TIM_Base_SetConfig+0x128>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <TIM_Base_SetConfig+0x12c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0x9a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <TIM_Base_SetConfig+0x130>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a10      	ldr	r2, [pc, #64]	; (80054a8 <TIM_Base_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a11      	ldr	r2, [pc, #68]	; (80054bc <TIM_Base_SetConfig+0x128>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <TIM_Base_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0xf8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0f      	ldr	r2, [pc, #60]	; (80054c4 <TIM_Base_SetConfig+0x130>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d103      	bne.n	8005494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	615a      	str	r2, [r3, #20]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800

080054c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 030a 	bic.w	r3, r3, #10
 8005504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005526:	b480      	push	{r7}
 8005528:	b087      	sub	sp, #28
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0210 	bic.w	r2, r3, #16
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	031b      	lsls	r3, r3, #12
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005562:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f043 0307 	orr.w	r3, r3, #7
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	431a      	orrs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e068      	b.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2e      	ldr	r2, [pc, #184]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2d      	ldr	r2, [pc, #180]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800564e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d018      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a14      	ldr	r2, [pc, #80]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10c      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40014000 	.word	0x40014000

0800570c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e040      	b.n	80057a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fb0e 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8c0 	bl	80058d0 <UART_SetConfig>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fb3e 	bl	8005de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fbc5 	bl	8005f28 <UART_CheckIdleState>
 800579e:	4603      	mov	r3, r0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057bc:	2b20      	cmp	r3, #32
 80057be:	f040 8082 	bne.w	80058c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_UART_Transmit+0x26>
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e07a      	b.n	80058c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_UART_Transmit+0x38>
 80057dc:	2302      	movs	r3, #2
 80057de:	e073      	b.n	80058c8 <HAL_UART_Transmit+0x120>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f6:	f7fc fba1 	bl	8001f3c <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005814:	d108      	bne.n	8005828 <HAL_UART_Transmit+0x80>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	e003      	b.n	8005830 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005838:	e02d      	b.n	8005896 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fbb8 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e039      	b.n	80058c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005866:	b292      	uxth	r2, r2
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	3302      	adds	r3, #2
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e008      	b.n	8005884 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b292      	uxth	r2, r2
 800587c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1cb      	bne.n	800583a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2140      	movs	r1, #64	; 0x40
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fb84 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e005      	b.n	80058c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4bad      	ldr	r3, [pc, #692]	; (8005bb0 <UART_SetConfig+0x2e0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	69f9      	ldr	r1, [r7, #28]
 8005904:	430b      	orrs	r3, r1
 8005906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4aa2      	ldr	r2, [pc, #648]	; (8005bb4 <UART_SetConfig+0x2e4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	4313      	orrs	r3, r2
 8005936:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a99      	ldr	r2, [pc, #612]	; (8005bb8 <UART_SetConfig+0x2e8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d121      	bne.n	800599a <UART_SetConfig+0xca>
 8005956:	4b99      	ldr	r3, [pc, #612]	; (8005bbc <UART_SetConfig+0x2ec>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d817      	bhi.n	8005994 <UART_SetConfig+0xc4>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x9c>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	0800597d 	.word	0x0800597d
 8005970:	08005989 	.word	0x08005989
 8005974:	08005983 	.word	0x08005983
 8005978:	0800598f 	.word	0x0800598f
 800597c:	2301      	movs	r3, #1
 800597e:	76fb      	strb	r3, [r7, #27]
 8005980:	e0e7      	b.n	8005b52 <UART_SetConfig+0x282>
 8005982:	2302      	movs	r3, #2
 8005984:	76fb      	strb	r3, [r7, #27]
 8005986:	e0e4      	b.n	8005b52 <UART_SetConfig+0x282>
 8005988:	2304      	movs	r3, #4
 800598a:	76fb      	strb	r3, [r7, #27]
 800598c:	e0e1      	b.n	8005b52 <UART_SetConfig+0x282>
 800598e:	2308      	movs	r3, #8
 8005990:	76fb      	strb	r3, [r7, #27]
 8005992:	e0de      	b.n	8005b52 <UART_SetConfig+0x282>
 8005994:	2310      	movs	r3, #16
 8005996:	76fb      	strb	r3, [r7, #27]
 8005998:	e0db      	b.n	8005b52 <UART_SetConfig+0x282>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a88      	ldr	r2, [pc, #544]	; (8005bc0 <UART_SetConfig+0x2f0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d132      	bne.n	8005a0a <UART_SetConfig+0x13a>
 80059a4:	4b85      	ldr	r3, [pc, #532]	; (8005bbc <UART_SetConfig+0x2ec>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d828      	bhi.n	8005a04 <UART_SetConfig+0x134>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0xe8>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a05 	.word	0x08005a05
 80059c4:	08005a05 	.word	0x08005a05
 80059c8:	080059f9 	.word	0x080059f9
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a05 	.word	0x08005a05
 80059d8:	080059f3 	.word	0x080059f3
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a05 	.word	0x08005a05
 80059e8:	080059ff 	.word	0x080059ff
 80059ec:	2300      	movs	r3, #0
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	e0af      	b.n	8005b52 <UART_SetConfig+0x282>
 80059f2:	2302      	movs	r3, #2
 80059f4:	76fb      	strb	r3, [r7, #27]
 80059f6:	e0ac      	b.n	8005b52 <UART_SetConfig+0x282>
 80059f8:	2304      	movs	r3, #4
 80059fa:	76fb      	strb	r3, [r7, #27]
 80059fc:	e0a9      	b.n	8005b52 <UART_SetConfig+0x282>
 80059fe:	2308      	movs	r3, #8
 8005a00:	76fb      	strb	r3, [r7, #27]
 8005a02:	e0a6      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a04:	2310      	movs	r3, #16
 8005a06:	76fb      	strb	r3, [r7, #27]
 8005a08:	e0a3      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6d      	ldr	r2, [pc, #436]	; (8005bc4 <UART_SetConfig+0x2f4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d120      	bne.n	8005a56 <UART_SetConfig+0x186>
 8005a14:	4b69      	ldr	r3, [pc, #420]	; (8005bbc <UART_SetConfig+0x2ec>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d013      	beq.n	8005a4a <UART_SetConfig+0x17a>
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	d814      	bhi.n	8005a50 <UART_SetConfig+0x180>
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d009      	beq.n	8005a3e <UART_SetConfig+0x16e>
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d810      	bhi.n	8005a50 <UART_SetConfig+0x180>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <UART_SetConfig+0x168>
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x174>
 8005a36:	e00b      	b.n	8005a50 <UART_SetConfig+0x180>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e089      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	76fb      	strb	r3, [r7, #27]
 8005a42:	e086      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a44:	2304      	movs	r3, #4
 8005a46:	76fb      	strb	r3, [r7, #27]
 8005a48:	e083      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	76fb      	strb	r3, [r7, #27]
 8005a4e:	e080      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a50:	2310      	movs	r3, #16
 8005a52:	76fb      	strb	r3, [r7, #27]
 8005a54:	e07d      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <UART_SetConfig+0x2f8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d120      	bne.n	8005aa2 <UART_SetConfig+0x1d2>
 8005a60:	4b56      	ldr	r3, [pc, #344]	; (8005bbc <UART_SetConfig+0x2ec>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a6c:	d013      	beq.n	8005a96 <UART_SetConfig+0x1c6>
 8005a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a70:	d814      	bhi.n	8005a9c <UART_SetConfig+0x1cc>
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0x1ba>
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d810      	bhi.n	8005a9c <UART_SetConfig+0x1cc>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <UART_SetConfig+0x1b4>
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d006      	beq.n	8005a90 <UART_SetConfig+0x1c0>
 8005a82:	e00b      	b.n	8005a9c <UART_SetConfig+0x1cc>
 8005a84:	2300      	movs	r3, #0
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e063      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	76fb      	strb	r3, [r7, #27]
 8005a8e:	e060      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a90:	2304      	movs	r3, #4
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	e05d      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a96:	2308      	movs	r3, #8
 8005a98:	76fb      	strb	r3, [r7, #27]
 8005a9a:	e05a      	b.n	8005b52 <UART_SetConfig+0x282>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	76fb      	strb	r3, [r7, #27]
 8005aa0:	e057      	b.n	8005b52 <UART_SetConfig+0x282>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a49      	ldr	r2, [pc, #292]	; (8005bcc <UART_SetConfig+0x2fc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d125      	bne.n	8005af8 <UART_SetConfig+0x228>
 8005aac:	4b43      	ldr	r3, [pc, #268]	; (8005bbc <UART_SetConfig+0x2ec>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aba:	d017      	beq.n	8005aec <UART_SetConfig+0x21c>
 8005abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ac0:	d817      	bhi.n	8005af2 <UART_SetConfig+0x222>
 8005ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac6:	d00b      	beq.n	8005ae0 <UART_SetConfig+0x210>
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d811      	bhi.n	8005af2 <UART_SetConfig+0x222>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <UART_SetConfig+0x20a>
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d006      	beq.n	8005ae6 <UART_SetConfig+0x216>
 8005ad8:	e00b      	b.n	8005af2 <UART_SetConfig+0x222>
 8005ada:	2300      	movs	r3, #0
 8005adc:	76fb      	strb	r3, [r7, #27]
 8005ade:	e038      	b.n	8005b52 <UART_SetConfig+0x282>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	76fb      	strb	r3, [r7, #27]
 8005ae4:	e035      	b.n	8005b52 <UART_SetConfig+0x282>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	76fb      	strb	r3, [r7, #27]
 8005aea:	e032      	b.n	8005b52 <UART_SetConfig+0x282>
 8005aec:	2308      	movs	r3, #8
 8005aee:	76fb      	strb	r3, [r7, #27]
 8005af0:	e02f      	b.n	8005b52 <UART_SetConfig+0x282>
 8005af2:	2310      	movs	r3, #16
 8005af4:	76fb      	strb	r3, [r7, #27]
 8005af6:	e02c      	b.n	8005b52 <UART_SetConfig+0x282>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2d      	ldr	r2, [pc, #180]	; (8005bb4 <UART_SetConfig+0x2e4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d125      	bne.n	8005b4e <UART_SetConfig+0x27e>
 8005b02:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <UART_SetConfig+0x2ec>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b10:	d017      	beq.n	8005b42 <UART_SetConfig+0x272>
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b16:	d817      	bhi.n	8005b48 <UART_SetConfig+0x278>
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1c:	d00b      	beq.n	8005b36 <UART_SetConfig+0x266>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	d811      	bhi.n	8005b48 <UART_SetConfig+0x278>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0x260>
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2c:	d006      	beq.n	8005b3c <UART_SetConfig+0x26c>
 8005b2e:	e00b      	b.n	8005b48 <UART_SetConfig+0x278>
 8005b30:	2300      	movs	r3, #0
 8005b32:	76fb      	strb	r3, [r7, #27]
 8005b34:	e00d      	b.n	8005b52 <UART_SetConfig+0x282>
 8005b36:	2302      	movs	r3, #2
 8005b38:	76fb      	strb	r3, [r7, #27]
 8005b3a:	e00a      	b.n	8005b52 <UART_SetConfig+0x282>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	76fb      	strb	r3, [r7, #27]
 8005b40:	e007      	b.n	8005b52 <UART_SetConfig+0x282>
 8005b42:	2308      	movs	r3, #8
 8005b44:	76fb      	strb	r3, [r7, #27]
 8005b46:	e004      	b.n	8005b52 <UART_SetConfig+0x282>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e001      	b.n	8005b52 <UART_SetConfig+0x282>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <UART_SetConfig+0x2e4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	f040 8087 	bne.w	8005c6c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b5e:	7efb      	ldrb	r3, [r7, #27]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d837      	bhi.n	8005bd4 <UART_SetConfig+0x304>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x29c>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005bd5 	.word	0x08005bd5
 8005b7c:	08005b9f 	.word	0x08005b9f
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bd5 	.word	0x08005bd5
 8005b8c:	08005ba7 	.word	0x08005ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fd98 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8005b94:	6178      	str	r0, [r7, #20]
        break;
 8005b96:	e022      	b.n	8005bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <UART_SetConfig+0x300>)
 8005b9a:	617b      	str	r3, [r7, #20]
        break;
 8005b9c:	e01f      	b.n	8005bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b9e:	f7fe fcf9 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8005ba2:	6178      	str	r0, [r7, #20]
        break;
 8005ba4:	e01b      	b.n	8005bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005baa:	617b      	str	r3, [r7, #20]
        break;
 8005bac:	e017      	b.n	8005bde <UART_SetConfig+0x30e>
 8005bae:	bf00      	nop
 8005bb0:	efff69f3 	.word	0xefff69f3
 8005bb4:	40008000 	.word	0x40008000
 8005bb8:	40013800 	.word	0x40013800
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40004400 	.word	0x40004400
 8005bc4:	40004800 	.word	0x40004800
 8005bc8:	40004c00 	.word	0x40004c00
 8005bcc:	40005000 	.word	0x40005000
 8005bd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	76bb      	strb	r3, [r7, #26]
        break;
 8005bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80f1 	beq.w	8005dc8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d305      	bcc.n	8005c02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d902      	bls.n	8005c08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	76bb      	strb	r3, [r7, #26]
 8005c06:	e0df      	b.n	8005dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f04f 0100 	mov.w	r1, #0
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	020b      	lsls	r3, r1, #8
 8005c1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c1e:	0202      	lsls	r2, r0, #8
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	6849      	ldr	r1, [r1, #4]
 8005c24:	0849      	lsrs	r1, r1, #1
 8005c26:	4608      	mov	r0, r1
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	1814      	adds	r4, r2, r0
 8005c2e:	eb43 0501 	adc.w	r5, r3, r1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fb f802 	bl	8000c48 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c52:	d308      	bcc.n	8005c66 <UART_SetConfig+0x396>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5a:	d204      	bcs.n	8005c66 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e0b0      	b.n	8005dc8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	76bb      	strb	r3, [r7, #26]
 8005c6a:	e0ad      	b.n	8005dc8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d15b      	bne.n	8005d2e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005c76:	7efb      	ldrb	r3, [r7, #27]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d828      	bhi.n	8005cce <UART_SetConfig+0x3fe>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x3b4>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	08005ccf 	.word	0x08005ccf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005ccf 	.word	0x08005ccf
 8005ca0:	08005ccf 	.word	0x08005ccf
 8005ca4:	08005cc7 	.word	0x08005cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca8:	f7fe fd0c 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8005cac:	6178      	str	r0, [r7, #20]
        break;
 8005cae:	e013      	b.n	8005cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb0:	f7fe fd1e 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8005cb4:	6178      	str	r0, [r7, #20]
        break;
 8005cb6:	e00f      	b.n	8005cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <UART_SetConfig+0x510>)
 8005cba:	617b      	str	r3, [r7, #20]
        break;
 8005cbc:	e00c      	b.n	8005cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fe fc69 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8005cc2:	6178      	str	r0, [r7, #20]
        break;
 8005cc4:	e008      	b.n	8005cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	617b      	str	r3, [r7, #20]
        break;
 8005ccc:	e004      	b.n	8005cd8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	76bb      	strb	r3, [r7, #26]
        break;
 8005cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d074      	beq.n	8005dc8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	005a      	lsls	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	441a      	add	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	d916      	bls.n	8005d28 <UART_SetConfig+0x458>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d00:	d212      	bcs.n	8005d28 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f023 030f 	bic.w	r3, r3, #15
 8005d0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	89fb      	ldrh	r3, [r7, #14]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	89fa      	ldrh	r2, [r7, #14]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	e04f      	b.n	8005dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	76bb      	strb	r3, [r7, #26]
 8005d2c:	e04c      	b.n	8005dc8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d2e:	7efb      	ldrb	r3, [r7, #27]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d828      	bhi.n	8005d86 <UART_SetConfig+0x4b6>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <UART_SetConfig+0x46c>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	08005d87 	.word	0x08005d87
 8005d4c:	08005d77 	.word	0x08005d77
 8005d50:	08005d87 	.word	0x08005d87
 8005d54:	08005d87 	.word	0x08005d87
 8005d58:	08005d87 	.word	0x08005d87
 8005d5c:	08005d7f 	.word	0x08005d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7fe fcb0 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8005d64:	6178      	str	r0, [r7, #20]
        break;
 8005d66:	e013      	b.n	8005d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d68:	f7fe fcc2 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8005d6c:	6178      	str	r0, [r7, #20]
        break;
 8005d6e:	e00f      	b.n	8005d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <UART_SetConfig+0x510>)
 8005d72:	617b      	str	r3, [r7, #20]
        break;
 8005d74:	e00c      	b.n	8005d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d76:	f7fe fc0d 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8005d7a:	6178      	str	r0, [r7, #20]
        break;
 8005d7c:	e008      	b.n	8005d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d82:	617b      	str	r3, [r7, #20]
        break;
 8005d84:	e004      	b.n	8005d90 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	76bb      	strb	r3, [r7, #26]
        break;
 8005d8e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d018      	beq.n	8005dc8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	085a      	lsrs	r2, r3, #1
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	441a      	add	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d909      	bls.n	8005dc4 <UART_SetConfig+0x4f4>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db6:	d205      	bcs.n	8005dc4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e001      	b.n	8005dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	00f42400 	.word	0x00f42400

08005de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01a      	beq.n	8005efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee2:	d10a      	bne.n	8005efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f38:	f7fc f800 	bl	8001f3c <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d10e      	bne.n	8005f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f82d 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e023      	b.n	8005fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d10e      	bne.n	8005f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f817 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00d      	b.n	8005fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b09c      	sub	sp, #112	; 0x70
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	e0a5      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	f000 80a1 	beq.w	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fb ffb1 	bl	8001f3c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <UART_WaitOnFlagUntilTimeout+0x32>
 8005fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d13e      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006000:	667b      	str	r3, [r7, #100]	; 0x64
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800600c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	663b      	str	r3, [r7, #96]	; 0x60
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800603e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e067      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d04f      	beq.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006086:	d147      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006090:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e6      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	613b      	str	r3, [r7, #16]
   return(result);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	66bb      	str	r3, [r7, #104]	; 0x68
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e4:	623a      	str	r2, [r7, #32]
 80060e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e5      	bne.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e010      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	f43f af4a 	beq.w	8005fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3770      	adds	r7, #112	; 0x70
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	; (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	2000000c 	.word	0x2000000c

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	4d0d      	ldr	r5, [pc, #52]	; (8006188 <__libc_init_array+0x38>)
 8006154:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006156:	1b64      	subs	r4, r4, r5
 8006158:	10a4      	asrs	r4, r4, #2
 800615a:	2600      	movs	r6, #0
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	4d0b      	ldr	r5, [pc, #44]	; (8006190 <__libc_init_array+0x40>)
 8006162:	4c0c      	ldr	r4, [pc, #48]	; (8006194 <__libc_init_array+0x44>)
 8006164:	f002 feb6 	bl	8008ed4 <_init>
 8006168:	1b64      	subs	r4, r4, r5
 800616a:	10a4      	asrs	r4, r4, #2
 800616c:	2600      	movs	r6, #0
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	08009374 	.word	0x08009374
 800618c:	08009374 	.word	0x08009374
 8006190:	08009374 	.word	0x08009374
 8006194:	08009378 	.word	0x08009378

08006198 <memset>:
 8006198:	4402      	add	r2, r0
 800619a:	4603      	mov	r3, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <memset+0xa>
 80061a0:	4770      	bx	lr
 80061a2:	f803 1b01 	strb.w	r1, [r3], #1
 80061a6:	e7f9      	b.n	800619c <memset+0x4>

080061a8 <__cvt>:
 80061a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	ec55 4b10 	vmov	r4, r5, d0
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	460e      	mov	r6, r1
 80061b4:	4619      	mov	r1, r3
 80061b6:	462b      	mov	r3, r5
 80061b8:	bfbb      	ittet	lt
 80061ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061be:	461d      	movlt	r5, r3
 80061c0:	2300      	movge	r3, #0
 80061c2:	232d      	movlt	r3, #45	; 0x2d
 80061c4:	700b      	strb	r3, [r1, #0]
 80061c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061cc:	4691      	mov	r9, r2
 80061ce:	f023 0820 	bic.w	r8, r3, #32
 80061d2:	bfbc      	itt	lt
 80061d4:	4622      	movlt	r2, r4
 80061d6:	4614      	movlt	r4, r2
 80061d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061dc:	d005      	beq.n	80061ea <__cvt+0x42>
 80061de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061e2:	d100      	bne.n	80061e6 <__cvt+0x3e>
 80061e4:	3601      	adds	r6, #1
 80061e6:	2102      	movs	r1, #2
 80061e8:	e000      	b.n	80061ec <__cvt+0x44>
 80061ea:	2103      	movs	r1, #3
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	ab02      	add	r3, sp, #8
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	ec45 4b10 	vmov	d0, r4, r5
 80061f8:	4653      	mov	r3, sl
 80061fa:	4632      	mov	r2, r6
 80061fc:	f000 fcec 	bl	8006bd8 <_dtoa_r>
 8006200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006204:	4607      	mov	r7, r0
 8006206:	d102      	bne.n	800620e <__cvt+0x66>
 8006208:	f019 0f01 	tst.w	r9, #1
 800620c:	d022      	beq.n	8006254 <__cvt+0xac>
 800620e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006212:	eb07 0906 	add.w	r9, r7, r6
 8006216:	d110      	bne.n	800623a <__cvt+0x92>
 8006218:	783b      	ldrb	r3, [r7, #0]
 800621a:	2b30      	cmp	r3, #48	; 0x30
 800621c:	d10a      	bne.n	8006234 <__cvt+0x8c>
 800621e:	2200      	movs	r2, #0
 8006220:	2300      	movs	r3, #0
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	f7fa fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800622a:	b918      	cbnz	r0, 8006234 <__cvt+0x8c>
 800622c:	f1c6 0601 	rsb	r6, r6, #1
 8006230:	f8ca 6000 	str.w	r6, [sl]
 8006234:	f8da 3000 	ldr.w	r3, [sl]
 8006238:	4499      	add	r9, r3
 800623a:	2200      	movs	r2, #0
 800623c:	2300      	movs	r3, #0
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	f7fa fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006246:	b108      	cbz	r0, 800624c <__cvt+0xa4>
 8006248:	f8cd 900c 	str.w	r9, [sp, #12]
 800624c:	2230      	movs	r2, #48	; 0x30
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	454b      	cmp	r3, r9
 8006252:	d307      	bcc.n	8006264 <__cvt+0xbc>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006258:	1bdb      	subs	r3, r3, r7
 800625a:	4638      	mov	r0, r7
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	b004      	add	sp, #16
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	9103      	str	r1, [sp, #12]
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e7f0      	b.n	800624e <__cvt+0xa6>

0800626c <__exponent>:
 800626c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626e:	4603      	mov	r3, r0
 8006270:	2900      	cmp	r1, #0
 8006272:	bfb8      	it	lt
 8006274:	4249      	neglt	r1, r1
 8006276:	f803 2b02 	strb.w	r2, [r3], #2
 800627a:	bfb4      	ite	lt
 800627c:	222d      	movlt	r2, #45	; 0x2d
 800627e:	222b      	movge	r2, #43	; 0x2b
 8006280:	2909      	cmp	r1, #9
 8006282:	7042      	strb	r2, [r0, #1]
 8006284:	dd2a      	ble.n	80062dc <__exponent+0x70>
 8006286:	f10d 0407 	add.w	r4, sp, #7
 800628a:	46a4      	mov	ip, r4
 800628c:	270a      	movs	r7, #10
 800628e:	46a6      	mov	lr, r4
 8006290:	460a      	mov	r2, r1
 8006292:	fb91 f6f7 	sdiv	r6, r1, r7
 8006296:	fb07 1516 	mls	r5, r7, r6, r1
 800629a:	3530      	adds	r5, #48	; 0x30
 800629c:	2a63      	cmp	r2, #99	; 0x63
 800629e:	f104 34ff 	add.w	r4, r4, #4294967295
 80062a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062a6:	4631      	mov	r1, r6
 80062a8:	dcf1      	bgt.n	800628e <__exponent+0x22>
 80062aa:	3130      	adds	r1, #48	; 0x30
 80062ac:	f1ae 0502 	sub.w	r5, lr, #2
 80062b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062b4:	1c44      	adds	r4, r0, #1
 80062b6:	4629      	mov	r1, r5
 80062b8:	4561      	cmp	r1, ip
 80062ba:	d30a      	bcc.n	80062d2 <__exponent+0x66>
 80062bc:	f10d 0209 	add.w	r2, sp, #9
 80062c0:	eba2 020e 	sub.w	r2, r2, lr
 80062c4:	4565      	cmp	r5, ip
 80062c6:	bf88      	it	hi
 80062c8:	2200      	movhi	r2, #0
 80062ca:	4413      	add	r3, r2
 80062cc:	1a18      	subs	r0, r3, r0
 80062ce:	b003      	add	sp, #12
 80062d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062da:	e7ed      	b.n	80062b8 <__exponent+0x4c>
 80062dc:	2330      	movs	r3, #48	; 0x30
 80062de:	3130      	adds	r1, #48	; 0x30
 80062e0:	7083      	strb	r3, [r0, #2]
 80062e2:	70c1      	strb	r1, [r0, #3]
 80062e4:	1d03      	adds	r3, r0, #4
 80062e6:	e7f1      	b.n	80062cc <__exponent+0x60>

080062e8 <_printf_float>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	ed2d 8b02 	vpush	{d8}
 80062f0:	b08d      	sub	sp, #52	; 0x34
 80062f2:	460c      	mov	r4, r1
 80062f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062f8:	4616      	mov	r6, r2
 80062fa:	461f      	mov	r7, r3
 80062fc:	4605      	mov	r5, r0
 80062fe:	f001 fa57 	bl	80077b0 <_localeconv_r>
 8006302:	f8d0 a000 	ldr.w	sl, [r0]
 8006306:	4650      	mov	r0, sl
 8006308:	f7f9 ff62 	bl	80001d0 <strlen>
 800630c:	2300      	movs	r3, #0
 800630e:	930a      	str	r3, [sp, #40]	; 0x28
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	9305      	str	r3, [sp, #20]
 8006314:	f8d8 3000 	ldr.w	r3, [r8]
 8006318:	f894 b018 	ldrb.w	fp, [r4, #24]
 800631c:	3307      	adds	r3, #7
 800631e:	f023 0307 	bic.w	r3, r3, #7
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	f8c8 2000 	str.w	r2, [r8]
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006332:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006340:	ee08 0a10 	vmov	s16, r0
 8006344:	4b9f      	ldr	r3, [pc, #636]	; (80065c4 <_printf_float+0x2dc>)
 8006346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800634a:	f04f 32ff 	mov.w	r2, #4294967295
 800634e:	f7fa fbed 	bl	8000b2c <__aeabi_dcmpun>
 8006352:	bb88      	cbnz	r0, 80063b8 <_printf_float+0xd0>
 8006354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006358:	4b9a      	ldr	r3, [pc, #616]	; (80065c4 <_printf_float+0x2dc>)
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	f7fa fbc7 	bl	8000af0 <__aeabi_dcmple>
 8006362:	bb48      	cbnz	r0, 80063b8 <_printf_float+0xd0>
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa fbb6 	bl	8000adc <__aeabi_dcmplt>
 8006370:	b110      	cbz	r0, 8006378 <_printf_float+0x90>
 8006372:	232d      	movs	r3, #45	; 0x2d
 8006374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006378:	4b93      	ldr	r3, [pc, #588]	; (80065c8 <_printf_float+0x2e0>)
 800637a:	4894      	ldr	r0, [pc, #592]	; (80065cc <_printf_float+0x2e4>)
 800637c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006380:	bf94      	ite	ls
 8006382:	4698      	movls	r8, r3
 8006384:	4680      	movhi	r8, r0
 8006386:	2303      	movs	r3, #3
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	9b05      	ldr	r3, [sp, #20]
 800638c:	f023 0204 	bic.w	r2, r3, #4
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	f04f 0900 	mov.w	r9, #0
 8006396:	9700      	str	r7, [sp, #0]
 8006398:	4633      	mov	r3, r6
 800639a:	aa0b      	add	r2, sp, #44	; 0x2c
 800639c:	4621      	mov	r1, r4
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 f9d8 	bl	8006754 <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	f040 8090 	bne.w	80064ca <_printf_float+0x1e2>
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295
 80063ae:	b00d      	add	sp, #52	; 0x34
 80063b0:	ecbd 8b02 	vpop	{d8}
 80063b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	4640      	mov	r0, r8
 80063be:	4649      	mov	r1, r9
 80063c0:	f7fa fbb4 	bl	8000b2c <__aeabi_dcmpun>
 80063c4:	b140      	cbz	r0, 80063d8 <_printf_float+0xf0>
 80063c6:	464b      	mov	r3, r9
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bfbc      	itt	lt
 80063cc:	232d      	movlt	r3, #45	; 0x2d
 80063ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063d2:	487f      	ldr	r0, [pc, #508]	; (80065d0 <_printf_float+0x2e8>)
 80063d4:	4b7f      	ldr	r3, [pc, #508]	; (80065d4 <_printf_float+0x2ec>)
 80063d6:	e7d1      	b.n	800637c <_printf_float+0x94>
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063de:	9206      	str	r2, [sp, #24]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	d13f      	bne.n	8006464 <_printf_float+0x17c>
 80063e4:	2306      	movs	r3, #6
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	9b05      	ldr	r3, [sp, #20]
 80063ea:	6861      	ldr	r1, [r4, #4]
 80063ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063f0:	2300      	movs	r3, #0
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	ab0a      	add	r3, sp, #40	; 0x28
 80063f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063fa:	ab09      	add	r3, sp, #36	; 0x24
 80063fc:	ec49 8b10 	vmov	d0, r8, r9
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	6022      	str	r2, [r4, #0]
 8006404:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006408:	4628      	mov	r0, r5
 800640a:	f7ff fecd 	bl	80061a8 <__cvt>
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006412:	2b47      	cmp	r3, #71	; 0x47
 8006414:	4680      	mov	r8, r0
 8006416:	d108      	bne.n	800642a <_printf_float+0x142>
 8006418:	1cc8      	adds	r0, r1, #3
 800641a:	db02      	blt.n	8006422 <_printf_float+0x13a>
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	4299      	cmp	r1, r3
 8006420:	dd41      	ble.n	80064a6 <_printf_float+0x1be>
 8006422:	f1ab 0b02 	sub.w	fp, fp, #2
 8006426:	fa5f fb8b 	uxtb.w	fp, fp
 800642a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800642e:	d820      	bhi.n	8006472 <_printf_float+0x18a>
 8006430:	3901      	subs	r1, #1
 8006432:	465a      	mov	r2, fp
 8006434:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006438:	9109      	str	r1, [sp, #36]	; 0x24
 800643a:	f7ff ff17 	bl	800626c <__exponent>
 800643e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006440:	1813      	adds	r3, r2, r0
 8006442:	2a01      	cmp	r2, #1
 8006444:	4681      	mov	r9, r0
 8006446:	6123      	str	r3, [r4, #16]
 8006448:	dc02      	bgt.n	8006450 <_printf_float+0x168>
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	07d2      	lsls	r2, r2, #31
 800644e:	d501      	bpl.n	8006454 <_printf_float+0x16c>
 8006450:	3301      	adds	r3, #1
 8006452:	6123      	str	r3, [r4, #16]
 8006454:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006458:	2b00      	cmp	r3, #0
 800645a:	d09c      	beq.n	8006396 <_printf_float+0xae>
 800645c:	232d      	movs	r3, #45	; 0x2d
 800645e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006462:	e798      	b.n	8006396 <_printf_float+0xae>
 8006464:	9a06      	ldr	r2, [sp, #24]
 8006466:	2a47      	cmp	r2, #71	; 0x47
 8006468:	d1be      	bne.n	80063e8 <_printf_float+0x100>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1bc      	bne.n	80063e8 <_printf_float+0x100>
 800646e:	2301      	movs	r3, #1
 8006470:	e7b9      	b.n	80063e6 <_printf_float+0xfe>
 8006472:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006476:	d118      	bne.n	80064aa <_printf_float+0x1c2>
 8006478:	2900      	cmp	r1, #0
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	dd0b      	ble.n	8006496 <_printf_float+0x1ae>
 800647e:	6121      	str	r1, [r4, #16]
 8006480:	b913      	cbnz	r3, 8006488 <_printf_float+0x1a0>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	07d0      	lsls	r0, r2, #31
 8006486:	d502      	bpl.n	800648e <_printf_float+0x1a6>
 8006488:	3301      	adds	r3, #1
 800648a:	440b      	add	r3, r1
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006490:	f04f 0900 	mov.w	r9, #0
 8006494:	e7de      	b.n	8006454 <_printf_float+0x16c>
 8006496:	b913      	cbnz	r3, 800649e <_printf_float+0x1b6>
 8006498:	6822      	ldr	r2, [r4, #0]
 800649a:	07d2      	lsls	r2, r2, #31
 800649c:	d501      	bpl.n	80064a2 <_printf_float+0x1ba>
 800649e:	3302      	adds	r3, #2
 80064a0:	e7f4      	b.n	800648c <_printf_float+0x1a4>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7f2      	b.n	800648c <_printf_float+0x1a4>
 80064a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ac:	4299      	cmp	r1, r3
 80064ae:	db05      	blt.n	80064bc <_printf_float+0x1d4>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	6121      	str	r1, [r4, #16]
 80064b4:	07d8      	lsls	r0, r3, #31
 80064b6:	d5ea      	bpl.n	800648e <_printf_float+0x1a6>
 80064b8:	1c4b      	adds	r3, r1, #1
 80064ba:	e7e7      	b.n	800648c <_printf_float+0x1a4>
 80064bc:	2900      	cmp	r1, #0
 80064be:	bfd4      	ite	le
 80064c0:	f1c1 0202 	rsble	r2, r1, #2
 80064c4:	2201      	movgt	r2, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	e7e0      	b.n	800648c <_printf_float+0x1a4>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	055a      	lsls	r2, r3, #21
 80064ce:	d407      	bmi.n	80064e0 <_printf_float+0x1f8>
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	4642      	mov	r2, r8
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	d12c      	bne.n	8006538 <_printf_float+0x250>
 80064de:	e764      	b.n	80063aa <_printf_float+0xc2>
 80064e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064e4:	f240 80e0 	bls.w	80066a8 <_printf_float+0x3c0>
 80064e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7fa faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d034      	beq.n	8006562 <_printf_float+0x27a>
 80064f8:	4a37      	ldr	r2, [pc, #220]	; (80065d8 <_printf_float+0x2f0>)
 80064fa:	2301      	movs	r3, #1
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af51 	beq.w	80063aa <_printf_float+0xc2>
 8006508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800650c:	429a      	cmp	r2, r3
 800650e:	db02      	blt.n	8006516 <_printf_float+0x22e>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	07d8      	lsls	r0, r3, #31
 8006514:	d510      	bpl.n	8006538 <_printf_float+0x250>
 8006516:	ee18 3a10 	vmov	r3, s16
 800651a:	4652      	mov	r2, sl
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f af41 	beq.w	80063aa <_printf_float+0xc2>
 8006528:	f04f 0800 	mov.w	r8, #0
 800652c:	f104 091a 	add.w	r9, r4, #26
 8006530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006532:	3b01      	subs	r3, #1
 8006534:	4543      	cmp	r3, r8
 8006536:	dc09      	bgt.n	800654c <_printf_float+0x264>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	079b      	lsls	r3, r3, #30
 800653c:	f100 8105 	bmi.w	800674a <_printf_float+0x462>
 8006540:	68e0      	ldr	r0, [r4, #12]
 8006542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006544:	4298      	cmp	r0, r3
 8006546:	bfb8      	it	lt
 8006548:	4618      	movlt	r0, r3
 800654a:	e730      	b.n	80063ae <_printf_float+0xc6>
 800654c:	2301      	movs	r3, #1
 800654e:	464a      	mov	r2, r9
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	f43f af27 	beq.w	80063aa <_printf_float+0xc2>
 800655c:	f108 0801 	add.w	r8, r8, #1
 8006560:	e7e6      	b.n	8006530 <_printf_float+0x248>
 8006562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	dc39      	bgt.n	80065dc <_printf_float+0x2f4>
 8006568:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <_printf_float+0x2f0>)
 800656a:	2301      	movs	r3, #1
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af19 	beq.w	80063aa <_printf_float+0xc2>
 8006578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800657c:	4313      	orrs	r3, r2
 800657e:	d102      	bne.n	8006586 <_printf_float+0x29e>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	07d9      	lsls	r1, r3, #31
 8006584:	d5d8      	bpl.n	8006538 <_printf_float+0x250>
 8006586:	ee18 3a10 	vmov	r3, s16
 800658a:	4652      	mov	r2, sl
 800658c:	4631      	mov	r1, r6
 800658e:	4628      	mov	r0, r5
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af09 	beq.w	80063aa <_printf_float+0xc2>
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	f104 0a1a 	add.w	sl, r4, #26
 80065a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a2:	425b      	negs	r3, r3
 80065a4:	454b      	cmp	r3, r9
 80065a6:	dc01      	bgt.n	80065ac <_printf_float+0x2c4>
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	e792      	b.n	80064d2 <_printf_float+0x1ea>
 80065ac:	2301      	movs	r3, #1
 80065ae:	4652      	mov	r2, sl
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	f43f aef7 	beq.w	80063aa <_printf_float+0xc2>
 80065bc:	f109 0901 	add.w	r9, r9, #1
 80065c0:	e7ee      	b.n	80065a0 <_printf_float+0x2b8>
 80065c2:	bf00      	nop
 80065c4:	7fefffff 	.word	0x7fefffff
 80065c8:	08008f8c 	.word	0x08008f8c
 80065cc:	08008f90 	.word	0x08008f90
 80065d0:	08008f98 	.word	0x08008f98
 80065d4:	08008f94 	.word	0x08008f94
 80065d8:	08008f9c 	.word	0x08008f9c
 80065dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e0:	429a      	cmp	r2, r3
 80065e2:	bfa8      	it	ge
 80065e4:	461a      	movge	r2, r3
 80065e6:	2a00      	cmp	r2, #0
 80065e8:	4691      	mov	r9, r2
 80065ea:	dc37      	bgt.n	800665c <_printf_float+0x374>
 80065ec:	f04f 0b00 	mov.w	fp, #0
 80065f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f4:	f104 021a 	add.w	r2, r4, #26
 80065f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065fa:	9305      	str	r3, [sp, #20]
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	455b      	cmp	r3, fp
 8006602:	dc33      	bgt.n	800666c <_printf_float+0x384>
 8006604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006608:	429a      	cmp	r2, r3
 800660a:	db3b      	blt.n	8006684 <_printf_float+0x39c>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	07da      	lsls	r2, r3, #31
 8006610:	d438      	bmi.n	8006684 <_printf_float+0x39c>
 8006612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	eba2 0901 	sub.w	r9, r2, r1
 800661e:	4599      	cmp	r9, r3
 8006620:	bfa8      	it	ge
 8006622:	4699      	movge	r9, r3
 8006624:	f1b9 0f00 	cmp.w	r9, #0
 8006628:	dc35      	bgt.n	8006696 <_printf_float+0x3ae>
 800662a:	f04f 0800 	mov.w	r8, #0
 800662e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006632:	f104 0a1a 	add.w	sl, r4, #26
 8006636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	eba3 0309 	sub.w	r3, r3, r9
 8006640:	4543      	cmp	r3, r8
 8006642:	f77f af79 	ble.w	8006538 <_printf_float+0x250>
 8006646:	2301      	movs	r3, #1
 8006648:	4652      	mov	r2, sl
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f aeaa 	beq.w	80063aa <_printf_float+0xc2>
 8006656:	f108 0801 	add.w	r8, r8, #1
 800665a:	e7ec      	b.n	8006636 <_printf_float+0x34e>
 800665c:	4613      	mov	r3, r2
 800665e:	4631      	mov	r1, r6
 8006660:	4642      	mov	r2, r8
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	d1c0      	bne.n	80065ec <_printf_float+0x304>
 800666a:	e69e      	b.n	80063aa <_printf_float+0xc2>
 800666c:	2301      	movs	r3, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	9205      	str	r2, [sp, #20]
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f ae97 	beq.w	80063aa <_printf_float+0xc2>
 800667c:	9a05      	ldr	r2, [sp, #20]
 800667e:	f10b 0b01 	add.w	fp, fp, #1
 8006682:	e7b9      	b.n	80065f8 <_printf_float+0x310>
 8006684:	ee18 3a10 	vmov	r3, s16
 8006688:	4652      	mov	r2, sl
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	d1be      	bne.n	8006612 <_printf_float+0x32a>
 8006694:	e689      	b.n	80063aa <_printf_float+0xc2>
 8006696:	9a05      	ldr	r2, [sp, #20]
 8006698:	464b      	mov	r3, r9
 800669a:	4442      	add	r2, r8
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	47b8      	blx	r7
 80066a2:	3001      	adds	r0, #1
 80066a4:	d1c1      	bne.n	800662a <_printf_float+0x342>
 80066a6:	e680      	b.n	80063aa <_printf_float+0xc2>
 80066a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066aa:	2a01      	cmp	r2, #1
 80066ac:	dc01      	bgt.n	80066b2 <_printf_float+0x3ca>
 80066ae:	07db      	lsls	r3, r3, #31
 80066b0:	d538      	bpl.n	8006724 <_printf_float+0x43c>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4642      	mov	r2, r8
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f ae74 	beq.w	80063aa <_printf_float+0xc2>
 80066c2:	ee18 3a10 	vmov	r3, s16
 80066c6:	4652      	mov	r2, sl
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f ae6b 	beq.w	80063aa <_printf_float+0xc2>
 80066d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7fa f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e0:	b9d8      	cbnz	r0, 800671a <_printf_float+0x432>
 80066e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e4:	f108 0201 	add.w	r2, r8, #1
 80066e8:	3b01      	subs	r3, #1
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	d10e      	bne.n	8006712 <_printf_float+0x42a>
 80066f4:	e659      	b.n	80063aa <_printf_float+0xc2>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4652      	mov	r2, sl
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f ae52 	beq.w	80063aa <_printf_float+0xc2>
 8006706:	f108 0801 	add.w	r8, r8, #1
 800670a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	4543      	cmp	r3, r8
 8006710:	dcf1      	bgt.n	80066f6 <_printf_float+0x40e>
 8006712:	464b      	mov	r3, r9
 8006714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006718:	e6dc      	b.n	80064d4 <_printf_float+0x1ec>
 800671a:	f04f 0800 	mov.w	r8, #0
 800671e:	f104 0a1a 	add.w	sl, r4, #26
 8006722:	e7f2      	b.n	800670a <_printf_float+0x422>
 8006724:	2301      	movs	r3, #1
 8006726:	4642      	mov	r2, r8
 8006728:	e7df      	b.n	80066ea <_printf_float+0x402>
 800672a:	2301      	movs	r3, #1
 800672c:	464a      	mov	r2, r9
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	f43f ae38 	beq.w	80063aa <_printf_float+0xc2>
 800673a:	f108 0801 	add.w	r8, r8, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	4543      	cmp	r3, r8
 8006746:	dcf0      	bgt.n	800672a <_printf_float+0x442>
 8006748:	e6fa      	b.n	8006540 <_printf_float+0x258>
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	f104 0919 	add.w	r9, r4, #25
 8006752:	e7f4      	b.n	800673e <_printf_float+0x456>

08006754 <_printf_common>:
 8006754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	4616      	mov	r6, r2
 800675a:	4699      	mov	r9, r3
 800675c:	688a      	ldr	r2, [r1, #8]
 800675e:	690b      	ldr	r3, [r1, #16]
 8006760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006764:	4293      	cmp	r3, r2
 8006766:	bfb8      	it	lt
 8006768:	4613      	movlt	r3, r2
 800676a:	6033      	str	r3, [r6, #0]
 800676c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006770:	4607      	mov	r7, r0
 8006772:	460c      	mov	r4, r1
 8006774:	b10a      	cbz	r2, 800677a <_printf_common+0x26>
 8006776:	3301      	adds	r3, #1
 8006778:	6033      	str	r3, [r6, #0]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	0699      	lsls	r1, r3, #26
 800677e:	bf42      	ittt	mi
 8006780:	6833      	ldrmi	r3, [r6, #0]
 8006782:	3302      	addmi	r3, #2
 8006784:	6033      	strmi	r3, [r6, #0]
 8006786:	6825      	ldr	r5, [r4, #0]
 8006788:	f015 0506 	ands.w	r5, r5, #6
 800678c:	d106      	bne.n	800679c <_printf_common+0x48>
 800678e:	f104 0a19 	add.w	sl, r4, #25
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	6832      	ldr	r2, [r6, #0]
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	42ab      	cmp	r3, r5
 800679a:	dc26      	bgt.n	80067ea <_printf_common+0x96>
 800679c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067a0:	1e13      	subs	r3, r2, #0
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	bf18      	it	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	0692      	lsls	r2, r2, #26
 80067aa:	d42b      	bmi.n	8006804 <_printf_common+0xb0>
 80067ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b0:	4649      	mov	r1, r9
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c0      	blx	r8
 80067b6:	3001      	adds	r0, #1
 80067b8:	d01e      	beq.n	80067f8 <_printf_common+0xa4>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	68e5      	ldr	r5, [r4, #12]
 80067be:	6832      	ldr	r2, [r6, #0]
 80067c0:	f003 0306 	and.w	r3, r3, #6
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	bf08      	it	eq
 80067c8:	1aad      	subeq	r5, r5, r2
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	6922      	ldr	r2, [r4, #16]
 80067ce:	bf0c      	ite	eq
 80067d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d4:	2500      	movne	r5, #0
 80067d6:	4293      	cmp	r3, r2
 80067d8:	bfc4      	itt	gt
 80067da:	1a9b      	subgt	r3, r3, r2
 80067dc:	18ed      	addgt	r5, r5, r3
 80067de:	2600      	movs	r6, #0
 80067e0:	341a      	adds	r4, #26
 80067e2:	42b5      	cmp	r5, r6
 80067e4:	d11a      	bne.n	800681c <_printf_common+0xc8>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e008      	b.n	80067fc <_printf_common+0xa8>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4652      	mov	r2, sl
 80067ee:	4649      	mov	r1, r9
 80067f0:	4638      	mov	r0, r7
 80067f2:	47c0      	blx	r8
 80067f4:	3001      	adds	r0, #1
 80067f6:	d103      	bne.n	8006800 <_printf_common+0xac>
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006800:	3501      	adds	r5, #1
 8006802:	e7c6      	b.n	8006792 <_printf_common+0x3e>
 8006804:	18e1      	adds	r1, r4, r3
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	2030      	movs	r0, #48	; 0x30
 800680a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800680e:	4422      	add	r2, r4
 8006810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006818:	3302      	adds	r3, #2
 800681a:	e7c7      	b.n	80067ac <_printf_common+0x58>
 800681c:	2301      	movs	r3, #1
 800681e:	4622      	mov	r2, r4
 8006820:	4649      	mov	r1, r9
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	3001      	adds	r0, #1
 8006828:	d0e6      	beq.n	80067f8 <_printf_common+0xa4>
 800682a:	3601      	adds	r6, #1
 800682c:	e7d9      	b.n	80067e2 <_printf_common+0x8e>
	...

08006830 <_printf_i>:
 8006830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	4691      	mov	r9, r2
 8006838:	7e27      	ldrb	r7, [r4, #24]
 800683a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800683c:	2f78      	cmp	r7, #120	; 0x78
 800683e:	4680      	mov	r8, r0
 8006840:	469a      	mov	sl, r3
 8006842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006846:	d807      	bhi.n	8006858 <_printf_i+0x28>
 8006848:	2f62      	cmp	r7, #98	; 0x62
 800684a:	d80a      	bhi.n	8006862 <_printf_i+0x32>
 800684c:	2f00      	cmp	r7, #0
 800684e:	f000 80d8 	beq.w	8006a02 <_printf_i+0x1d2>
 8006852:	2f58      	cmp	r7, #88	; 0x58
 8006854:	f000 80a3 	beq.w	800699e <_printf_i+0x16e>
 8006858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800685c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006860:	e03a      	b.n	80068d8 <_printf_i+0xa8>
 8006862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006866:	2b15      	cmp	r3, #21
 8006868:	d8f6      	bhi.n	8006858 <_printf_i+0x28>
 800686a:	a001      	add	r0, pc, #4	; (adr r0, 8006870 <_printf_i+0x40>)
 800686c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068dd 	.word	0x080068dd
 8006878:	08006859 	.word	0x08006859
 800687c:	08006859 	.word	0x08006859
 8006880:	08006859 	.word	0x08006859
 8006884:	08006859 	.word	0x08006859
 8006888:	080068dd 	.word	0x080068dd
 800688c:	08006859 	.word	0x08006859
 8006890:	08006859 	.word	0x08006859
 8006894:	08006859 	.word	0x08006859
 8006898:	08006859 	.word	0x08006859
 800689c:	080069e9 	.word	0x080069e9
 80068a0:	0800690d 	.word	0x0800690d
 80068a4:	080069cb 	.word	0x080069cb
 80068a8:	08006859 	.word	0x08006859
 80068ac:	08006859 	.word	0x08006859
 80068b0:	08006a0b 	.word	0x08006a0b
 80068b4:	08006859 	.word	0x08006859
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	08006859 	.word	0x08006859
 80068c0:	08006859 	.word	0x08006859
 80068c4:	080069d3 	.word	0x080069d3
 80068c8:	680b      	ldr	r3, [r1, #0]
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	600a      	str	r2, [r1, #0]
 80068d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d8:	2301      	movs	r3, #1
 80068da:	e0a3      	b.n	8006a24 <_printf_i+0x1f4>
 80068dc:	6825      	ldr	r5, [r4, #0]
 80068de:	6808      	ldr	r0, [r1, #0]
 80068e0:	062e      	lsls	r6, r5, #24
 80068e2:	f100 0304 	add.w	r3, r0, #4
 80068e6:	d50a      	bpl.n	80068fe <_printf_i+0xce>
 80068e8:	6805      	ldr	r5, [r0, #0]
 80068ea:	600b      	str	r3, [r1, #0]
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	da03      	bge.n	80068f8 <_printf_i+0xc8>
 80068f0:	232d      	movs	r3, #45	; 0x2d
 80068f2:	426d      	negs	r5, r5
 80068f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f8:	485e      	ldr	r0, [pc, #376]	; (8006a74 <_printf_i+0x244>)
 80068fa:	230a      	movs	r3, #10
 80068fc:	e019      	b.n	8006932 <_printf_i+0x102>
 80068fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006902:	6805      	ldr	r5, [r0, #0]
 8006904:	600b      	str	r3, [r1, #0]
 8006906:	bf18      	it	ne
 8006908:	b22d      	sxthne	r5, r5
 800690a:	e7ef      	b.n	80068ec <_printf_i+0xbc>
 800690c:	680b      	ldr	r3, [r1, #0]
 800690e:	6825      	ldr	r5, [r4, #0]
 8006910:	1d18      	adds	r0, r3, #4
 8006912:	6008      	str	r0, [r1, #0]
 8006914:	0628      	lsls	r0, r5, #24
 8006916:	d501      	bpl.n	800691c <_printf_i+0xec>
 8006918:	681d      	ldr	r5, [r3, #0]
 800691a:	e002      	b.n	8006922 <_printf_i+0xf2>
 800691c:	0669      	lsls	r1, r5, #25
 800691e:	d5fb      	bpl.n	8006918 <_printf_i+0xe8>
 8006920:	881d      	ldrh	r5, [r3, #0]
 8006922:	4854      	ldr	r0, [pc, #336]	; (8006a74 <_printf_i+0x244>)
 8006924:	2f6f      	cmp	r7, #111	; 0x6f
 8006926:	bf0c      	ite	eq
 8006928:	2308      	moveq	r3, #8
 800692a:	230a      	movne	r3, #10
 800692c:	2100      	movs	r1, #0
 800692e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006932:	6866      	ldr	r6, [r4, #4]
 8006934:	60a6      	str	r6, [r4, #8]
 8006936:	2e00      	cmp	r6, #0
 8006938:	bfa2      	ittt	ge
 800693a:	6821      	ldrge	r1, [r4, #0]
 800693c:	f021 0104 	bicge.w	r1, r1, #4
 8006940:	6021      	strge	r1, [r4, #0]
 8006942:	b90d      	cbnz	r5, 8006948 <_printf_i+0x118>
 8006944:	2e00      	cmp	r6, #0
 8006946:	d04d      	beq.n	80069e4 <_printf_i+0x1b4>
 8006948:	4616      	mov	r6, r2
 800694a:	fbb5 f1f3 	udiv	r1, r5, r3
 800694e:	fb03 5711 	mls	r7, r3, r1, r5
 8006952:	5dc7      	ldrb	r7, [r0, r7]
 8006954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006958:	462f      	mov	r7, r5
 800695a:	42bb      	cmp	r3, r7
 800695c:	460d      	mov	r5, r1
 800695e:	d9f4      	bls.n	800694a <_printf_i+0x11a>
 8006960:	2b08      	cmp	r3, #8
 8006962:	d10b      	bne.n	800697c <_printf_i+0x14c>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	07df      	lsls	r7, r3, #31
 8006968:	d508      	bpl.n	800697c <_printf_i+0x14c>
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	4299      	cmp	r1, r3
 8006970:	bfde      	ittt	le
 8006972:	2330      	movle	r3, #48	; 0x30
 8006974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800697c:	1b92      	subs	r2, r2, r6
 800697e:	6122      	str	r2, [r4, #16]
 8006980:	f8cd a000 	str.w	sl, [sp]
 8006984:	464b      	mov	r3, r9
 8006986:	aa03      	add	r2, sp, #12
 8006988:	4621      	mov	r1, r4
 800698a:	4640      	mov	r0, r8
 800698c:	f7ff fee2 	bl	8006754 <_printf_common>
 8006990:	3001      	adds	r0, #1
 8006992:	d14c      	bne.n	8006a2e <_printf_i+0x1fe>
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	b004      	add	sp, #16
 800699a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699e:	4835      	ldr	r0, [pc, #212]	; (8006a74 <_printf_i+0x244>)
 80069a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	680e      	ldr	r6, [r1, #0]
 80069a8:	061f      	lsls	r7, r3, #24
 80069aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80069ae:	600e      	str	r6, [r1, #0]
 80069b0:	d514      	bpl.n	80069dc <_printf_i+0x1ac>
 80069b2:	07d9      	lsls	r1, r3, #31
 80069b4:	bf44      	itt	mi
 80069b6:	f043 0320 	orrmi.w	r3, r3, #32
 80069ba:	6023      	strmi	r3, [r4, #0]
 80069bc:	b91d      	cbnz	r5, 80069c6 <_printf_i+0x196>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	f023 0320 	bic.w	r3, r3, #32
 80069c4:	6023      	str	r3, [r4, #0]
 80069c6:	2310      	movs	r3, #16
 80069c8:	e7b0      	b.n	800692c <_printf_i+0xfc>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	f043 0320 	orr.w	r3, r3, #32
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	2378      	movs	r3, #120	; 0x78
 80069d4:	4828      	ldr	r0, [pc, #160]	; (8006a78 <_printf_i+0x248>)
 80069d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069da:	e7e3      	b.n	80069a4 <_printf_i+0x174>
 80069dc:	065e      	lsls	r6, r3, #25
 80069de:	bf48      	it	mi
 80069e0:	b2ad      	uxthmi	r5, r5
 80069e2:	e7e6      	b.n	80069b2 <_printf_i+0x182>
 80069e4:	4616      	mov	r6, r2
 80069e6:	e7bb      	b.n	8006960 <_printf_i+0x130>
 80069e8:	680b      	ldr	r3, [r1, #0]
 80069ea:	6826      	ldr	r6, [r4, #0]
 80069ec:	6960      	ldr	r0, [r4, #20]
 80069ee:	1d1d      	adds	r5, r3, #4
 80069f0:	600d      	str	r5, [r1, #0]
 80069f2:	0635      	lsls	r5, r6, #24
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	d501      	bpl.n	80069fc <_printf_i+0x1cc>
 80069f8:	6018      	str	r0, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <_printf_i+0x1d2>
 80069fc:	0671      	lsls	r1, r6, #25
 80069fe:	d5fb      	bpl.n	80069f8 <_printf_i+0x1c8>
 8006a00:	8018      	strh	r0, [r3, #0]
 8006a02:	2300      	movs	r3, #0
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	4616      	mov	r6, r2
 8006a08:	e7ba      	b.n	8006980 <_printf_i+0x150>
 8006a0a:	680b      	ldr	r3, [r1, #0]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	600a      	str	r2, [r1, #0]
 8006a10:	681e      	ldr	r6, [r3, #0]
 8006a12:	6862      	ldr	r2, [r4, #4]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7f9 fbe2 	bl	80001e0 <memchr>
 8006a1c:	b108      	cbz	r0, 8006a22 <_printf_i+0x1f2>
 8006a1e:	1b80      	subs	r0, r0, r6
 8006a20:	6060      	str	r0, [r4, #4]
 8006a22:	6863      	ldr	r3, [r4, #4]
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	2300      	movs	r3, #0
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2c:	e7a8      	b.n	8006980 <_printf_i+0x150>
 8006a2e:	6923      	ldr	r3, [r4, #16]
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d0ab      	beq.n	8006994 <_printf_i+0x164>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	079b      	lsls	r3, r3, #30
 8006a40:	d413      	bmi.n	8006a6a <_printf_i+0x23a>
 8006a42:	68e0      	ldr	r0, [r4, #12]
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	4298      	cmp	r0, r3
 8006a48:	bfb8      	it	lt
 8006a4a:	4618      	movlt	r0, r3
 8006a4c:	e7a4      	b.n	8006998 <_printf_i+0x168>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4632      	mov	r2, r6
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	47d0      	blx	sl
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d09b      	beq.n	8006994 <_printf_i+0x164>
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	68e3      	ldr	r3, [r4, #12]
 8006a60:	9903      	ldr	r1, [sp, #12]
 8006a62:	1a5b      	subs	r3, r3, r1
 8006a64:	42ab      	cmp	r3, r5
 8006a66:	dcf2      	bgt.n	8006a4e <_printf_i+0x21e>
 8006a68:	e7eb      	b.n	8006a42 <_printf_i+0x212>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	f104 0619 	add.w	r6, r4, #25
 8006a70:	e7f5      	b.n	8006a5e <_printf_i+0x22e>
 8006a72:	bf00      	nop
 8006a74:	08008f9e 	.word	0x08008f9e
 8006a78:	08008faf 	.word	0x08008faf

08006a7c <siprintf>:
 8006a7c:	b40e      	push	{r1, r2, r3}
 8006a7e:	b500      	push	{lr}
 8006a80:	b09c      	sub	sp, #112	; 0x70
 8006a82:	ab1d      	add	r3, sp, #116	; 0x74
 8006a84:	9002      	str	r0, [sp, #8]
 8006a86:	9006      	str	r0, [sp, #24]
 8006a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a8c:	4809      	ldr	r0, [pc, #36]	; (8006ab4 <siprintf+0x38>)
 8006a8e:	9107      	str	r1, [sp, #28]
 8006a90:	9104      	str	r1, [sp, #16]
 8006a92:	4909      	ldr	r1, [pc, #36]	; (8006ab8 <siprintf+0x3c>)
 8006a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a98:	9105      	str	r1, [sp, #20]
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	a902      	add	r1, sp, #8
 8006aa0:	f001 fb34 	bl	800810c <_svfiprintf_r>
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	b01c      	add	sp, #112	; 0x70
 8006aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab0:	b003      	add	sp, #12
 8006ab2:	4770      	bx	lr
 8006ab4:	2000000c 	.word	0x2000000c
 8006ab8:	ffff0208 	.word	0xffff0208

08006abc <quorem>:
 8006abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	6903      	ldr	r3, [r0, #16]
 8006ac2:	690c      	ldr	r4, [r1, #16]
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	f2c0 8081 	blt.w	8006bce <quorem+0x112>
 8006acc:	3c01      	subs	r4, #1
 8006ace:	f101 0814 	add.w	r8, r1, #20
 8006ad2:	f100 0514 	add.w	r5, r0, #20
 8006ad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006aec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006af0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006af4:	d331      	bcc.n	8006b5a <quorem+0x9e>
 8006af6:	f04f 0e00 	mov.w	lr, #0
 8006afa:	4640      	mov	r0, r8
 8006afc:	46ac      	mov	ip, r5
 8006afe:	46f2      	mov	sl, lr
 8006b00:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b04:	b293      	uxth	r3, r2
 8006b06:	fb06 e303 	mla	r3, r6, r3, lr
 8006b0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ebaa 0303 	sub.w	r3, sl, r3
 8006b14:	0c12      	lsrs	r2, r2, #16
 8006b16:	f8dc a000 	ldr.w	sl, [ip]
 8006b1a:	fb06 e202 	mla	r2, r6, r2, lr
 8006b1e:	fa13 f38a 	uxtah	r3, r3, sl
 8006b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b26:	fa1f fa82 	uxth.w	sl, r2
 8006b2a:	f8dc 2000 	ldr.w	r2, [ip]
 8006b2e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3c:	4581      	cmp	r9, r0
 8006b3e:	f84c 3b04 	str.w	r3, [ip], #4
 8006b42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b46:	d2db      	bcs.n	8006b00 <quorem+0x44>
 8006b48:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b4c:	b92b      	cbnz	r3, 8006b5a <quorem+0x9e>
 8006b4e:	9b01      	ldr	r3, [sp, #4]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d32e      	bcc.n	8006bb6 <quorem+0xfa>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	f001 f8c0 	bl	8007ce0 <__mcmp>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	db24      	blt.n	8006bae <quorem+0xf2>
 8006b64:	3601      	adds	r6, #1
 8006b66:	4628      	mov	r0, r5
 8006b68:	f04f 0c00 	mov.w	ip, #0
 8006b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b70:	f8d0 e000 	ldr.w	lr, [r0]
 8006b74:	b293      	uxth	r3, r2
 8006b76:	ebac 0303 	sub.w	r3, ip, r3
 8006b7a:	0c12      	lsrs	r2, r2, #16
 8006b7c:	fa13 f38e 	uxtah	r3, r3, lr
 8006b80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b8e:	45c1      	cmp	r9, r8
 8006b90:	f840 3b04 	str.w	r3, [r0], #4
 8006b94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b98:	d2e8      	bcs.n	8006b6c <quorem+0xb0>
 8006b9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ba2:	b922      	cbnz	r2, 8006bae <quorem+0xf2>
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	429d      	cmp	r5, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	d30a      	bcc.n	8006bc2 <quorem+0x106>
 8006bac:	613c      	str	r4, [r7, #16]
 8006bae:	4630      	mov	r0, r6
 8006bb0:	b003      	add	sp, #12
 8006bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	3b04      	subs	r3, #4
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d1cc      	bne.n	8006b58 <quorem+0x9c>
 8006bbe:	3c01      	subs	r4, #1
 8006bc0:	e7c7      	b.n	8006b52 <quorem+0x96>
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	2a00      	cmp	r2, #0
 8006bc8:	d1f0      	bne.n	8006bac <quorem+0xf0>
 8006bca:	3c01      	subs	r4, #1
 8006bcc:	e7eb      	b.n	8006ba6 <quorem+0xea>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e7ee      	b.n	8006bb0 <quorem+0xf4>
 8006bd2:	0000      	movs	r0, r0
 8006bd4:	0000      	movs	r0, r0
	...

08006bd8 <_dtoa_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	ed2d 8b02 	vpush	{d8}
 8006be0:	ec57 6b10 	vmov	r6, r7, d0
 8006be4:	b095      	sub	sp, #84	; 0x54
 8006be6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006be8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bf8:	b975      	cbnz	r5, 8006c18 <_dtoa_r+0x40>
 8006bfa:	2010      	movs	r0, #16
 8006bfc:	f000 fddc 	bl	80077b8 <malloc>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6260      	str	r0, [r4, #36]	; 0x24
 8006c04:	b920      	cbnz	r0, 8006c10 <_dtoa_r+0x38>
 8006c06:	4bb2      	ldr	r3, [pc, #712]	; (8006ed0 <_dtoa_r+0x2f8>)
 8006c08:	21ea      	movs	r1, #234	; 0xea
 8006c0a:	48b2      	ldr	r0, [pc, #712]	; (8006ed4 <_dtoa_r+0x2fc>)
 8006c0c:	f001 fb8e 	bl	800832c <__assert_func>
 8006c10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c14:	6005      	str	r5, [r0, #0]
 8006c16:	60c5      	str	r5, [r0, #12]
 8006c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1a:	6819      	ldr	r1, [r3, #0]
 8006c1c:	b151      	cbz	r1, 8006c34 <_dtoa_r+0x5c>
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	604a      	str	r2, [r1, #4]
 8006c22:	2301      	movs	r3, #1
 8006c24:	4093      	lsls	r3, r2
 8006c26:	608b      	str	r3, [r1, #8]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fe1b 	bl	8007864 <_Bfree>
 8006c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	1e3b      	subs	r3, r7, #0
 8006c36:	bfb9      	ittee	lt
 8006c38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	9303      	strlt	r3, [sp, #12]
 8006c3e:	2300      	movge	r3, #0
 8006c40:	f8c8 3000 	strge.w	r3, [r8]
 8006c44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c48:	4ba3      	ldr	r3, [pc, #652]	; (8006ed8 <_dtoa_r+0x300>)
 8006c4a:	bfbc      	itt	lt
 8006c4c:	2201      	movlt	r2, #1
 8006c4e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c52:	ea33 0309 	bics.w	r3, r3, r9
 8006c56:	d11b      	bne.n	8006c90 <_dtoa_r+0xb8>
 8006c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c64:	4333      	orrs	r3, r6
 8006c66:	f000 857a 	beq.w	800775e <_dtoa_r+0xb86>
 8006c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c6c:	b963      	cbnz	r3, 8006c88 <_dtoa_r+0xb0>
 8006c6e:	4b9b      	ldr	r3, [pc, #620]	; (8006edc <_dtoa_r+0x304>)
 8006c70:	e024      	b.n	8006cbc <_dtoa_r+0xe4>
 8006c72:	4b9b      	ldr	r3, [pc, #620]	; (8006ee0 <_dtoa_r+0x308>)
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	9800      	ldr	r0, [sp, #0]
 8006c7e:	b015      	add	sp, #84	; 0x54
 8006c80:	ecbd 8b02 	vpop	{d8}
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	4b94      	ldr	r3, [pc, #592]	; (8006edc <_dtoa_r+0x304>)
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	e7f3      	b.n	8006c78 <_dtoa_r+0xa0>
 8006c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	ec51 0b17 	vmov	r0, r1, d7
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006ca0:	f7f9 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	b158      	cbz	r0, 8006cc0 <_dtoa_r+0xe8>
 8006ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006caa:	2301      	movs	r3, #1
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8551 	beq.w	8007758 <_dtoa_r+0xb80>
 8006cb6:	488b      	ldr	r0, [pc, #556]	; (8006ee4 <_dtoa_r+0x30c>)
 8006cb8:	6018      	str	r0, [r3, #0]
 8006cba:	1e43      	subs	r3, r0, #1
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	e7dd      	b.n	8006c7c <_dtoa_r+0xa4>
 8006cc0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006cc4:	aa12      	add	r2, sp, #72	; 0x48
 8006cc6:	a913      	add	r1, sp, #76	; 0x4c
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f001 f8ad 	bl	8007e28 <__d2b>
 8006cce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	d07c      	beq.n	8006dd2 <_dtoa_r+0x1fa>
 8006cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006ce6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006cf2:	4b7d      	ldr	r3, [pc, #500]	; (8006ee8 <_dtoa_r+0x310>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	f7f9 fac5 	bl	8000288 <__aeabi_dsub>
 8006cfe:	a36e      	add	r3, pc, #440	; (adr r3, 8006eb8 <_dtoa_r+0x2e0>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fc78 	bl	80005f8 <__aeabi_dmul>
 8006d08:	a36d      	add	r3, pc, #436	; (adr r3, 8006ec0 <_dtoa_r+0x2e8>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fabd 	bl	800028c <__adddf3>
 8006d12:	4606      	mov	r6, r0
 8006d14:	4628      	mov	r0, r5
 8006d16:	460f      	mov	r7, r1
 8006d18:	f7f9 fc04 	bl	8000524 <__aeabi_i2d>
 8006d1c:	a36a      	add	r3, pc, #424	; (adr r3, 8006ec8 <_dtoa_r+0x2f0>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fc69 	bl	80005f8 <__aeabi_dmul>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 faad 	bl	800028c <__adddf3>
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	f7f9 ff0f 	bl	8000b58 <__aeabi_d2iz>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	f7f9 feca 	bl	8000adc <__aeabi_dcmplt>
 8006d48:	b148      	cbz	r0, 8006d5e <_dtoa_r+0x186>
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f7f9 fbea 	bl	8000524 <__aeabi_i2d>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f7f9 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d58:	b908      	cbnz	r0, 8006d5e <_dtoa_r+0x186>
 8006d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5e:	f1ba 0f16 	cmp.w	sl, #22
 8006d62:	d854      	bhi.n	8006e0e <_dtoa_r+0x236>
 8006d64:	4b61      	ldr	r3, [pc, #388]	; (8006eec <_dtoa_r+0x314>)
 8006d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d72:	f7f9 feb3 	bl	8000adc <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d04b      	beq.n	8006e12 <_dtoa_r+0x23a>
 8006d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d7e:	2300      	movs	r3, #0
 8006d80:	930e      	str	r3, [sp, #56]	; 0x38
 8006d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d84:	1b5d      	subs	r5, r3, r5
 8006d86:	1e6b      	subs	r3, r5, #1
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	bf43      	ittte	mi
 8006d8c:	2300      	movmi	r3, #0
 8006d8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d92:	9304      	strmi	r3, [sp, #16]
 8006d94:	f04f 0800 	movpl.w	r8, #0
 8006d98:	f1ba 0f00 	cmp.w	sl, #0
 8006d9c:	db3b      	blt.n	8006e16 <_dtoa_r+0x23e>
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006da4:	4453      	add	r3, sl
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	2300      	movs	r3, #0
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	9b05      	ldr	r3, [sp, #20]
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	d869      	bhi.n	8006e86 <_dtoa_r+0x2ae>
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	bfc4      	itt	gt
 8006db6:	3b04      	subgt	r3, #4
 8006db8:	9305      	strgt	r3, [sp, #20]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	f1a3 0302 	sub.w	r3, r3, #2
 8006dc0:	bfcc      	ite	gt
 8006dc2:	2500      	movgt	r5, #0
 8006dc4:	2501      	movle	r5, #1
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d869      	bhi.n	8006e9e <_dtoa_r+0x2c6>
 8006dca:	e8df f003 	tbb	[pc, r3]
 8006dce:	4e2c      	.short	0x4e2c
 8006dd0:	5a4c      	.short	0x5a4c
 8006dd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006dd6:	441d      	add	r5, r3
 8006dd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	bfc1      	itttt	gt
 8006de0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006de4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006de8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006dec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006df0:	bfda      	itte	le
 8006df2:	f1c3 0320 	rsble	r3, r3, #32
 8006df6:	fa06 f003 	lslle.w	r0, r6, r3
 8006dfa:	4318      	orrgt	r0, r3
 8006dfc:	f7f9 fb82 	bl	8000504 <__aeabi_ui2d>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4606      	mov	r6, r0
 8006e04:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006e08:	3d01      	subs	r5, #1
 8006e0a:	9310      	str	r3, [sp, #64]	; 0x40
 8006e0c:	e771      	b.n	8006cf2 <_dtoa_r+0x11a>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7b6      	b.n	8006d80 <_dtoa_r+0x1a8>
 8006e12:	900e      	str	r0, [sp, #56]	; 0x38
 8006e14:	e7b5      	b.n	8006d82 <_dtoa_r+0x1aa>
 8006e16:	f1ca 0300 	rsb	r3, sl, #0
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	eba8 080a 	sub.w	r8, r8, sl
 8006e22:	930d      	str	r3, [sp, #52]	; 0x34
 8006e24:	e7c2      	b.n	8006dac <_dtoa_r+0x1d4>
 8006e26:	2300      	movs	r3, #0
 8006e28:	9308      	str	r3, [sp, #32]
 8006e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dc39      	bgt.n	8006ea4 <_dtoa_r+0x2cc>
 8006e30:	f04f 0901 	mov.w	r9, #1
 8006e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e38:	464b      	mov	r3, r9
 8006e3a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e40:	2200      	movs	r2, #0
 8006e42:	6042      	str	r2, [r0, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	f102 0614 	add.w	r6, r2, #20
 8006e4a:	429e      	cmp	r6, r3
 8006e4c:	6841      	ldr	r1, [r0, #4]
 8006e4e:	d92f      	bls.n	8006eb0 <_dtoa_r+0x2d8>
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fcc7 	bl	80077e4 <_Balloc>
 8006e56:	9000      	str	r0, [sp, #0]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d14b      	bne.n	8006ef4 <_dtoa_r+0x31c>
 8006e5c:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <_dtoa_r+0x318>)
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e64:	e6d1      	b.n	8006c0a <_dtoa_r+0x32>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e7de      	b.n	8006e28 <_dtoa_r+0x250>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9308      	str	r3, [sp, #32]
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	eb0a 0903 	add.w	r9, sl, r3
 8006e74:	f109 0301 	add.w	r3, r9, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	bfb8      	it	lt
 8006e7e:	2301      	movlt	r3, #1
 8006e80:	e7dd      	b.n	8006e3e <_dtoa_r+0x266>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e7f2      	b.n	8006e6c <_dtoa_r+0x294>
 8006e86:	2501      	movs	r5, #1
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	9508      	str	r5, [sp, #32]
 8006e8e:	f04f 39ff 	mov.w	r9, #4294967295
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e98:	2312      	movs	r3, #18
 8006e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9c:	e7cf      	b.n	8006e3e <_dtoa_r+0x266>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	9308      	str	r3, [sp, #32]
 8006ea2:	e7f4      	b.n	8006e8e <_dtoa_r+0x2b6>
 8006ea4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ea8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006eac:	464b      	mov	r3, r9
 8006eae:	e7c6      	b.n	8006e3e <_dtoa_r+0x266>
 8006eb0:	3101      	adds	r1, #1
 8006eb2:	6041      	str	r1, [r0, #4]
 8006eb4:	0052      	lsls	r2, r2, #1
 8006eb6:	e7c6      	b.n	8006e46 <_dtoa_r+0x26e>
 8006eb8:	636f4361 	.word	0x636f4361
 8006ebc:	3fd287a7 	.word	0x3fd287a7
 8006ec0:	8b60c8b3 	.word	0x8b60c8b3
 8006ec4:	3fc68a28 	.word	0x3fc68a28
 8006ec8:	509f79fb 	.word	0x509f79fb
 8006ecc:	3fd34413 	.word	0x3fd34413
 8006ed0:	08008fcd 	.word	0x08008fcd
 8006ed4:	08008fe4 	.word	0x08008fe4
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	08008fc9 	.word	0x08008fc9
 8006ee0:	08008fc0 	.word	0x08008fc0
 8006ee4:	08008f9d 	.word	0x08008f9d
 8006ee8:	3ff80000 	.word	0x3ff80000
 8006eec:	080090e0 	.word	0x080090e0
 8006ef0:	08009043 	.word	0x08009043
 8006ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef6:	9a00      	ldr	r2, [sp, #0]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	2b0e      	cmp	r3, #14
 8006efe:	f200 80ad 	bhi.w	800705c <_dtoa_r+0x484>
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	f000 80aa 	beq.w	800705c <_dtoa_r+0x484>
 8006f08:	f1ba 0f00 	cmp.w	sl, #0
 8006f0c:	dd36      	ble.n	8006f7c <_dtoa_r+0x3a4>
 8006f0e:	4ac3      	ldr	r2, [pc, #780]	; (800721c <_dtoa_r+0x644>)
 8006f10:	f00a 030f 	and.w	r3, sl, #15
 8006f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f18:	ed93 7b00 	vldr	d7, [r3]
 8006f1c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f20:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006f24:	eeb0 8a47 	vmov.f32	s16, s14
 8006f28:	eef0 8a67 	vmov.f32	s17, s15
 8006f2c:	d016      	beq.n	8006f5c <_dtoa_r+0x384>
 8006f2e:	4bbc      	ldr	r3, [pc, #752]	; (8007220 <_dtoa_r+0x648>)
 8006f30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f38:	f7f9 fc88 	bl	800084c <__aeabi_ddiv>
 8006f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f40:	f007 070f 	and.w	r7, r7, #15
 8006f44:	2503      	movs	r5, #3
 8006f46:	4eb6      	ldr	r6, [pc, #728]	; (8007220 <_dtoa_r+0x648>)
 8006f48:	b957      	cbnz	r7, 8006f60 <_dtoa_r+0x388>
 8006f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4e:	ec53 2b18 	vmov	r2, r3, d8
 8006f52:	f7f9 fc7b 	bl	800084c <__aeabi_ddiv>
 8006f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f5a:	e029      	b.n	8006fb0 <_dtoa_r+0x3d8>
 8006f5c:	2502      	movs	r5, #2
 8006f5e:	e7f2      	b.n	8006f46 <_dtoa_r+0x36e>
 8006f60:	07f9      	lsls	r1, r7, #31
 8006f62:	d508      	bpl.n	8006f76 <_dtoa_r+0x39e>
 8006f64:	ec51 0b18 	vmov	r0, r1, d8
 8006f68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	ec41 0b18 	vmov	d8, r0, r1
 8006f74:	3501      	adds	r5, #1
 8006f76:	107f      	asrs	r7, r7, #1
 8006f78:	3608      	adds	r6, #8
 8006f7a:	e7e5      	b.n	8006f48 <_dtoa_r+0x370>
 8006f7c:	f000 80a6 	beq.w	80070cc <_dtoa_r+0x4f4>
 8006f80:	f1ca 0600 	rsb	r6, sl, #0
 8006f84:	4ba5      	ldr	r3, [pc, #660]	; (800721c <_dtoa_r+0x644>)
 8006f86:	4fa6      	ldr	r7, [pc, #664]	; (8007220 <_dtoa_r+0x648>)
 8006f88:	f006 020f 	and.w	r2, r6, #15
 8006f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa0:	1136      	asrs	r6, r6, #4
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2502      	movs	r5, #2
 8006fa6:	2e00      	cmp	r6, #0
 8006fa8:	f040 8085 	bne.w	80070b6 <_dtoa_r+0x4de>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1d2      	bne.n	8006f56 <_dtoa_r+0x37e>
 8006fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 808c 	beq.w	80070d0 <_dtoa_r+0x4f8>
 8006fb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fbc:	4b99      	ldr	r3, [pc, #612]	; (8007224 <_dtoa_r+0x64c>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7f9 fd8a 	bl	8000adc <__aeabi_dcmplt>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f000 8081 	beq.w	80070d0 <_dtoa_r+0x4f8>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d07d      	beq.n	80070d0 <_dtoa_r+0x4f8>
 8006fd4:	f1b9 0f00 	cmp.w	r9, #0
 8006fd8:	dd3c      	ble.n	8007054 <_dtoa_r+0x47c>
 8006fda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4b91      	ldr	r3, [pc, #580]	; (8007228 <_dtoa_r+0x650>)
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006ff6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7f9 fa92 	bl	8000524 <__aeabi_i2d>
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	4b88      	ldr	r3, [pc, #544]	; (800722c <_dtoa_r+0x654>)
 800700a:	2200      	movs	r2, #0
 800700c:	f7f9 f93e 	bl	800028c <__adddf3>
 8007010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007018:	9303      	str	r3, [sp, #12]
 800701a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800701c:	2b00      	cmp	r3, #0
 800701e:	d15c      	bne.n	80070da <_dtoa_r+0x502>
 8007020:	4b83      	ldr	r3, [pc, #524]	; (8007230 <_dtoa_r+0x658>)
 8007022:	2200      	movs	r2, #0
 8007024:	4630      	mov	r0, r6
 8007026:	4639      	mov	r1, r7
 8007028:	f7f9 f92e 	bl	8000288 <__aeabi_dsub>
 800702c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007030:	4606      	mov	r6, r0
 8007032:	460f      	mov	r7, r1
 8007034:	f7f9 fd70 	bl	8000b18 <__aeabi_dcmpgt>
 8007038:	2800      	cmp	r0, #0
 800703a:	f040 8296 	bne.w	800756a <_dtoa_r+0x992>
 800703e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007042:	4630      	mov	r0, r6
 8007044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007048:	4639      	mov	r1, r7
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8288 	bne.w	8007564 <_dtoa_r+0x98c>
 8007054:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007058:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800705c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800705e:	2b00      	cmp	r3, #0
 8007060:	f2c0 8158 	blt.w	8007314 <_dtoa_r+0x73c>
 8007064:	f1ba 0f0e 	cmp.w	sl, #14
 8007068:	f300 8154 	bgt.w	8007314 <_dtoa_r+0x73c>
 800706c:	4b6b      	ldr	r3, [pc, #428]	; (800721c <_dtoa_r+0x644>)
 800706e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007072:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	f280 80e3 	bge.w	8007244 <_dtoa_r+0x66c>
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f300 80df 	bgt.w	8007244 <_dtoa_r+0x66c>
 8007086:	f040 826d 	bne.w	8007564 <_dtoa_r+0x98c>
 800708a:	4b69      	ldr	r3, [pc, #420]	; (8007230 <_dtoa_r+0x658>)
 800708c:	2200      	movs	r2, #0
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	f7f9 fab1 	bl	80005f8 <__aeabi_dmul>
 8007096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800709a:	f7f9 fd33 	bl	8000b04 <__aeabi_dcmpge>
 800709e:	9e01      	ldr	r6, [sp, #4]
 80070a0:	4637      	mov	r7, r6
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f040 8243 	bne.w	800752e <_dtoa_r+0x956>
 80070a8:	9d00      	ldr	r5, [sp, #0]
 80070aa:	2331      	movs	r3, #49	; 0x31
 80070ac:	f805 3b01 	strb.w	r3, [r5], #1
 80070b0:	f10a 0a01 	add.w	sl, sl, #1
 80070b4:	e23f      	b.n	8007536 <_dtoa_r+0x95e>
 80070b6:	07f2      	lsls	r2, r6, #31
 80070b8:	d505      	bpl.n	80070c6 <_dtoa_r+0x4ee>
 80070ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	3501      	adds	r5, #1
 80070c4:	2301      	movs	r3, #1
 80070c6:	1076      	asrs	r6, r6, #1
 80070c8:	3708      	adds	r7, #8
 80070ca:	e76c      	b.n	8006fa6 <_dtoa_r+0x3ce>
 80070cc:	2502      	movs	r5, #2
 80070ce:	e76f      	b.n	8006fb0 <_dtoa_r+0x3d8>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80070d6:	930c      	str	r3, [sp, #48]	; 0x30
 80070d8:	e78d      	b.n	8006ff6 <_dtoa_r+0x41e>
 80070da:	9900      	ldr	r1, [sp, #0]
 80070dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070e0:	4b4e      	ldr	r3, [pc, #312]	; (800721c <_dtoa_r+0x644>)
 80070e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070e6:	4401      	add	r1, r0
 80070e8:	9102      	str	r1, [sp, #8]
 80070ea:	9908      	ldr	r1, [sp, #32]
 80070ec:	eeb0 8a47 	vmov.f32	s16, s14
 80070f0:	eef0 8a67 	vmov.f32	s17, s15
 80070f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d045      	beq.n	800718c <_dtoa_r+0x5b4>
 8007100:	494c      	ldr	r1, [pc, #304]	; (8007234 <_dtoa_r+0x65c>)
 8007102:	2000      	movs	r0, #0
 8007104:	f7f9 fba2 	bl	800084c <__aeabi_ddiv>
 8007108:	ec53 2b18 	vmov	r2, r3, d8
 800710c:	f7f9 f8bc 	bl	8000288 <__aeabi_dsub>
 8007110:	9d00      	ldr	r5, [sp, #0]
 8007112:	ec41 0b18 	vmov	d8, r0, r1
 8007116:	4639      	mov	r1, r7
 8007118:	4630      	mov	r0, r6
 800711a:	f7f9 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800711e:	900c      	str	r0, [sp, #48]	; 0x30
 8007120:	f7f9 fa00 	bl	8000524 <__aeabi_i2d>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 f8ac 	bl	8000288 <__aeabi_dsub>
 8007130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007132:	3330      	adds	r3, #48	; 0x30
 8007134:	f805 3b01 	strb.w	r3, [r5], #1
 8007138:	ec53 2b18 	vmov	r2, r3, d8
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	f7f9 fccc 	bl	8000adc <__aeabi_dcmplt>
 8007144:	2800      	cmp	r0, #0
 8007146:	d165      	bne.n	8007214 <_dtoa_r+0x63c>
 8007148:	4632      	mov	r2, r6
 800714a:	463b      	mov	r3, r7
 800714c:	4935      	ldr	r1, [pc, #212]	; (8007224 <_dtoa_r+0x64c>)
 800714e:	2000      	movs	r0, #0
 8007150:	f7f9 f89a 	bl	8000288 <__aeabi_dsub>
 8007154:	ec53 2b18 	vmov	r2, r3, d8
 8007158:	f7f9 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800715c:	2800      	cmp	r0, #0
 800715e:	f040 80b9 	bne.w	80072d4 <_dtoa_r+0x6fc>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	429d      	cmp	r5, r3
 8007166:	f43f af75 	beq.w	8007054 <_dtoa_r+0x47c>
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <_dtoa_r+0x650>)
 800716c:	ec51 0b18 	vmov	r0, r1, d8
 8007170:	2200      	movs	r2, #0
 8007172:	f7f9 fa41 	bl	80005f8 <__aeabi_dmul>
 8007176:	4b2c      	ldr	r3, [pc, #176]	; (8007228 <_dtoa_r+0x650>)
 8007178:	ec41 0b18 	vmov	d8, r0, r1
 800717c:	2200      	movs	r2, #0
 800717e:	4630      	mov	r0, r6
 8007180:	4639      	mov	r1, r7
 8007182:	f7f9 fa39 	bl	80005f8 <__aeabi_dmul>
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	e7c4      	b.n	8007116 <_dtoa_r+0x53e>
 800718c:	ec51 0b17 	vmov	r0, r1, d7
 8007190:	f7f9 fa32 	bl	80005f8 <__aeabi_dmul>
 8007194:	9b02      	ldr	r3, [sp, #8]
 8007196:	9d00      	ldr	r5, [sp, #0]
 8007198:	930c      	str	r3, [sp, #48]	; 0x30
 800719a:	ec41 0b18 	vmov	d8, r0, r1
 800719e:	4639      	mov	r1, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7f9 fcd9 	bl	8000b58 <__aeabi_d2iz>
 80071a6:	9011      	str	r0, [sp, #68]	; 0x44
 80071a8:	f7f9 f9bc 	bl	8000524 <__aeabi_i2d>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 f868 	bl	8000288 <__aeabi_dsub>
 80071b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ba:	3330      	adds	r3, #48	; 0x30
 80071bc:	f805 3b01 	strb.w	r3, [r5], #1
 80071c0:	9b02      	ldr	r3, [sp, #8]
 80071c2:	429d      	cmp	r5, r3
 80071c4:	4606      	mov	r6, r0
 80071c6:	460f      	mov	r7, r1
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	d134      	bne.n	8007238 <_dtoa_r+0x660>
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <_dtoa_r+0x65c>)
 80071d0:	ec51 0b18 	vmov	r0, r1, d8
 80071d4:	f7f9 f85a 	bl	800028c <__adddf3>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d175      	bne.n	80072d4 <_dtoa_r+0x6fc>
 80071e8:	ec53 2b18 	vmov	r2, r3, d8
 80071ec:	4911      	ldr	r1, [pc, #68]	; (8007234 <_dtoa_r+0x65c>)
 80071ee:	2000      	movs	r0, #0
 80071f0:	f7f9 f84a 	bl	8000288 <__aeabi_dsub>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 fc6e 	bl	8000adc <__aeabi_dcmplt>
 8007200:	2800      	cmp	r0, #0
 8007202:	f43f af27 	beq.w	8007054 <_dtoa_r+0x47c>
 8007206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007208:	1e6b      	subs	r3, r5, #1
 800720a:	930c      	str	r3, [sp, #48]	; 0x30
 800720c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	d0f8      	beq.n	8007206 <_dtoa_r+0x62e>
 8007214:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007218:	e04a      	b.n	80072b0 <_dtoa_r+0x6d8>
 800721a:	bf00      	nop
 800721c:	080090e0 	.word	0x080090e0
 8007220:	080090b8 	.word	0x080090b8
 8007224:	3ff00000 	.word	0x3ff00000
 8007228:	40240000 	.word	0x40240000
 800722c:	401c0000 	.word	0x401c0000
 8007230:	40140000 	.word	0x40140000
 8007234:	3fe00000 	.word	0x3fe00000
 8007238:	4baf      	ldr	r3, [pc, #700]	; (80074f8 <_dtoa_r+0x920>)
 800723a:	f7f9 f9dd 	bl	80005f8 <__aeabi_dmul>
 800723e:	4606      	mov	r6, r0
 8007240:	460f      	mov	r7, r1
 8007242:	e7ac      	b.n	800719e <_dtoa_r+0x5c6>
 8007244:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007248:	9d00      	ldr	r5, [sp, #0]
 800724a:	4642      	mov	r2, r8
 800724c:	464b      	mov	r3, r9
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	f7f9 fafb 	bl	800084c <__aeabi_ddiv>
 8007256:	f7f9 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800725a:	9002      	str	r0, [sp, #8]
 800725c:	f7f9 f962 	bl	8000524 <__aeabi_i2d>
 8007260:	4642      	mov	r2, r8
 8007262:	464b      	mov	r3, r9
 8007264:	f7f9 f9c8 	bl	80005f8 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 f80a 	bl	8000288 <__aeabi_dsub>
 8007274:	9e02      	ldr	r6, [sp, #8]
 8007276:	9f01      	ldr	r7, [sp, #4]
 8007278:	3630      	adds	r6, #48	; 0x30
 800727a:	f805 6b01 	strb.w	r6, [r5], #1
 800727e:	9e00      	ldr	r6, [sp, #0]
 8007280:	1bae      	subs	r6, r5, r6
 8007282:	42b7      	cmp	r7, r6
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	d137      	bne.n	80072fa <_dtoa_r+0x722>
 800728a:	f7f8 ffff 	bl	800028c <__adddf3>
 800728e:	4642      	mov	r2, r8
 8007290:	464b      	mov	r3, r9
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	f7f9 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800729a:	b9c8      	cbnz	r0, 80072d0 <_dtoa_r+0x6f8>
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f9 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a8:	b110      	cbz	r0, 80072b0 <_dtoa_r+0x6d8>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	07d9      	lsls	r1, r3, #31
 80072ae:	d40f      	bmi.n	80072d0 <_dtoa_r+0x6f8>
 80072b0:	4620      	mov	r0, r4
 80072b2:	4659      	mov	r1, fp
 80072b4:	f000 fad6 	bl	8007864 <_Bfree>
 80072b8:	2300      	movs	r3, #0
 80072ba:	702b      	strb	r3, [r5, #0]
 80072bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072be:	f10a 0001 	add.w	r0, sl, #1
 80072c2:	6018      	str	r0, [r3, #0]
 80072c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f43f acd8 	beq.w	8006c7c <_dtoa_r+0xa4>
 80072cc:	601d      	str	r5, [r3, #0]
 80072ce:	e4d5      	b.n	8006c7c <_dtoa_r+0xa4>
 80072d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80072d4:	462b      	mov	r3, r5
 80072d6:	461d      	mov	r5, r3
 80072d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072dc:	2a39      	cmp	r2, #57	; 0x39
 80072de:	d108      	bne.n	80072f2 <_dtoa_r+0x71a>
 80072e0:	9a00      	ldr	r2, [sp, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d1f7      	bne.n	80072d6 <_dtoa_r+0x6fe>
 80072e6:	9a07      	ldr	r2, [sp, #28]
 80072e8:	9900      	ldr	r1, [sp, #0]
 80072ea:	3201      	adds	r2, #1
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	2230      	movs	r2, #48	; 0x30
 80072f0:	700a      	strb	r2, [r1, #0]
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	3201      	adds	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e78c      	b.n	8007214 <_dtoa_r+0x63c>
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <_dtoa_r+0x920>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	f7f9 f97b 	bl	80005f8 <__aeabi_dmul>
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4606      	mov	r6, r0
 8007308:	460f      	mov	r7, r1
 800730a:	f7f9 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800730e:	2800      	cmp	r0, #0
 8007310:	d09b      	beq.n	800724a <_dtoa_r+0x672>
 8007312:	e7cd      	b.n	80072b0 <_dtoa_r+0x6d8>
 8007314:	9a08      	ldr	r2, [sp, #32]
 8007316:	2a00      	cmp	r2, #0
 8007318:	f000 80c4 	beq.w	80074a4 <_dtoa_r+0x8cc>
 800731c:	9a05      	ldr	r2, [sp, #20]
 800731e:	2a01      	cmp	r2, #1
 8007320:	f300 80a8 	bgt.w	8007474 <_dtoa_r+0x89c>
 8007324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007326:	2a00      	cmp	r2, #0
 8007328:	f000 80a0 	beq.w	800746c <_dtoa_r+0x894>
 800732c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007330:	9e06      	ldr	r6, [sp, #24]
 8007332:	4645      	mov	r5, r8
 8007334:	9a04      	ldr	r2, [sp, #16]
 8007336:	2101      	movs	r1, #1
 8007338:	441a      	add	r2, r3
 800733a:	4620      	mov	r0, r4
 800733c:	4498      	add	r8, r3
 800733e:	9204      	str	r2, [sp, #16]
 8007340:	f000 fb4c 	bl	80079dc <__i2b>
 8007344:	4607      	mov	r7, r0
 8007346:	2d00      	cmp	r5, #0
 8007348:	dd0b      	ble.n	8007362 <_dtoa_r+0x78a>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd08      	ble.n	8007362 <_dtoa_r+0x78a>
 8007350:	42ab      	cmp	r3, r5
 8007352:	9a04      	ldr	r2, [sp, #16]
 8007354:	bfa8      	it	ge
 8007356:	462b      	movge	r3, r5
 8007358:	eba8 0803 	sub.w	r8, r8, r3
 800735c:	1aed      	subs	r5, r5, r3
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	b1fb      	cbz	r3, 80073a6 <_dtoa_r+0x7ce>
 8007366:	9b08      	ldr	r3, [sp, #32]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 809f 	beq.w	80074ac <_dtoa_r+0x8d4>
 800736e:	2e00      	cmp	r6, #0
 8007370:	dd11      	ble.n	8007396 <_dtoa_r+0x7be>
 8007372:	4639      	mov	r1, r7
 8007374:	4632      	mov	r2, r6
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fbec 	bl	8007b54 <__pow5mult>
 800737c:	465a      	mov	r2, fp
 800737e:	4601      	mov	r1, r0
 8007380:	4607      	mov	r7, r0
 8007382:	4620      	mov	r0, r4
 8007384:	f000 fb40 	bl	8007a08 <__multiply>
 8007388:	4659      	mov	r1, fp
 800738a:	9007      	str	r0, [sp, #28]
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fa69 	bl	8007864 <_Bfree>
 8007392:	9b07      	ldr	r3, [sp, #28]
 8007394:	469b      	mov	fp, r3
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	1b9a      	subs	r2, r3, r6
 800739a:	d004      	beq.n	80073a6 <_dtoa_r+0x7ce>
 800739c:	4659      	mov	r1, fp
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fbd8 	bl	8007b54 <__pow5mult>
 80073a4:	4683      	mov	fp, r0
 80073a6:	2101      	movs	r1, #1
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fb17 	bl	80079dc <__i2b>
 80073ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	4606      	mov	r6, r0
 80073b4:	dd7c      	ble.n	80074b0 <_dtoa_r+0x8d8>
 80073b6:	461a      	mov	r2, r3
 80073b8:	4601      	mov	r1, r0
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fbca 	bl	8007b54 <__pow5mult>
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	4606      	mov	r6, r0
 80073c6:	dd76      	ble.n	80074b6 <_dtoa_r+0x8de>
 80073c8:	2300      	movs	r3, #0
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	6933      	ldr	r3, [r6, #16]
 80073ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073d2:	6918      	ldr	r0, [r3, #16]
 80073d4:	f000 fab2 	bl	800793c <__hi0bits>
 80073d8:	f1c0 0020 	rsb	r0, r0, #32
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	4418      	add	r0, r3
 80073e0:	f010 001f 	ands.w	r0, r0, #31
 80073e4:	f000 8086 	beq.w	80074f4 <_dtoa_r+0x91c>
 80073e8:	f1c0 0320 	rsb	r3, r0, #32
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	dd7f      	ble.n	80074f0 <_dtoa_r+0x918>
 80073f0:	f1c0 001c 	rsb	r0, r0, #28
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	4403      	add	r3, r0
 80073f8:	4480      	add	r8, r0
 80073fa:	4405      	add	r5, r0
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	f1b8 0f00 	cmp.w	r8, #0
 8007402:	dd05      	ble.n	8007410 <_dtoa_r+0x838>
 8007404:	4659      	mov	r1, fp
 8007406:	4642      	mov	r2, r8
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fbfd 	bl	8007c08 <__lshift>
 800740e:	4683      	mov	fp, r0
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd05      	ble.n	8007422 <_dtoa_r+0x84a>
 8007416:	4631      	mov	r1, r6
 8007418:	461a      	mov	r2, r3
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fbf4 	bl	8007c08 <__lshift>
 8007420:	4606      	mov	r6, r0
 8007422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	d069      	beq.n	80074fc <_dtoa_r+0x924>
 8007428:	4631      	mov	r1, r6
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fc58 	bl	8007ce0 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	da63      	bge.n	80074fc <_dtoa_r+0x924>
 8007434:	2300      	movs	r3, #0
 8007436:	4659      	mov	r1, fp
 8007438:	220a      	movs	r2, #10
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fa34 	bl	80078a8 <__multadd>
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007446:	4683      	mov	fp, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 818f 	beq.w	800776c <_dtoa_r+0xb94>
 800744e:	4639      	mov	r1, r7
 8007450:	2300      	movs	r3, #0
 8007452:	220a      	movs	r2, #10
 8007454:	4620      	mov	r0, r4
 8007456:	f000 fa27 	bl	80078a8 <__multadd>
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	4607      	mov	r7, r0
 8007460:	f300 808e 	bgt.w	8007580 <_dtoa_r+0x9a8>
 8007464:	9b05      	ldr	r3, [sp, #20]
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc50      	bgt.n	800750c <_dtoa_r+0x934>
 800746a:	e089      	b.n	8007580 <_dtoa_r+0x9a8>
 800746c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800746e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007472:	e75d      	b.n	8007330 <_dtoa_r+0x758>
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	1e5e      	subs	r6, r3, #1
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	42b3      	cmp	r3, r6
 800747c:	bfbf      	itttt	lt
 800747e:	9b06      	ldrlt	r3, [sp, #24]
 8007480:	9606      	strlt	r6, [sp, #24]
 8007482:	1af2      	sublt	r2, r6, r3
 8007484:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007486:	bfb6      	itet	lt
 8007488:	189b      	addlt	r3, r3, r2
 800748a:	1b9e      	subge	r6, r3, r6
 800748c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	bfb8      	it	lt
 8007492:	2600      	movlt	r6, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfb5      	itete	lt
 8007498:	eba8 0503 	sublt.w	r5, r8, r3
 800749c:	9b01      	ldrge	r3, [sp, #4]
 800749e:	2300      	movlt	r3, #0
 80074a0:	4645      	movge	r5, r8
 80074a2:	e747      	b.n	8007334 <_dtoa_r+0x75c>
 80074a4:	9e06      	ldr	r6, [sp, #24]
 80074a6:	9f08      	ldr	r7, [sp, #32]
 80074a8:	4645      	mov	r5, r8
 80074aa:	e74c      	b.n	8007346 <_dtoa_r+0x76e>
 80074ac:	9a06      	ldr	r2, [sp, #24]
 80074ae:	e775      	b.n	800739c <_dtoa_r+0x7c4>
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	dc18      	bgt.n	80074e8 <_dtoa_r+0x910>
 80074b6:	9b02      	ldr	r3, [sp, #8]
 80074b8:	b9b3      	cbnz	r3, 80074e8 <_dtoa_r+0x910>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c0:	b9a3      	cbnz	r3, 80074ec <_dtoa_r+0x914>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	051b      	lsls	r3, r3, #20
 80074cc:	b12b      	cbz	r3, 80074da <_dtoa_r+0x902>
 80074ce:	9b04      	ldr	r3, [sp, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	f108 0801 	add.w	r8, r8, #1
 80074d8:	2301      	movs	r3, #1
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f47f af74 	bne.w	80073cc <_dtoa_r+0x7f4>
 80074e4:	2001      	movs	r0, #1
 80074e6:	e779      	b.n	80073dc <_dtoa_r+0x804>
 80074e8:	2300      	movs	r3, #0
 80074ea:	e7f6      	b.n	80074da <_dtoa_r+0x902>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	e7f4      	b.n	80074da <_dtoa_r+0x902>
 80074f0:	d085      	beq.n	80073fe <_dtoa_r+0x826>
 80074f2:	4618      	mov	r0, r3
 80074f4:	301c      	adds	r0, #28
 80074f6:	e77d      	b.n	80073f4 <_dtoa_r+0x81c>
 80074f8:	40240000 	.word	0x40240000
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dc38      	bgt.n	8007574 <_dtoa_r+0x99c>
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	2b02      	cmp	r3, #2
 8007506:	dd35      	ble.n	8007574 <_dtoa_r+0x99c>
 8007508:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800750c:	f1b9 0f00 	cmp.w	r9, #0
 8007510:	d10d      	bne.n	800752e <_dtoa_r+0x956>
 8007512:	4631      	mov	r1, r6
 8007514:	464b      	mov	r3, r9
 8007516:	2205      	movs	r2, #5
 8007518:	4620      	mov	r0, r4
 800751a:	f000 f9c5 	bl	80078a8 <__multadd>
 800751e:	4601      	mov	r1, r0
 8007520:	4606      	mov	r6, r0
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fbdc 	bl	8007ce0 <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	f73f adbd 	bgt.w	80070a8 <_dtoa_r+0x4d0>
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	9d00      	ldr	r5, [sp, #0]
 8007532:	ea6f 0a03 	mvn.w	sl, r3
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	4631      	mov	r1, r6
 800753c:	4620      	mov	r0, r4
 800753e:	f000 f991 	bl	8007864 <_Bfree>
 8007542:	2f00      	cmp	r7, #0
 8007544:	f43f aeb4 	beq.w	80072b0 <_dtoa_r+0x6d8>
 8007548:	f1b8 0f00 	cmp.w	r8, #0
 800754c:	d005      	beq.n	800755a <_dtoa_r+0x982>
 800754e:	45b8      	cmp	r8, r7
 8007550:	d003      	beq.n	800755a <_dtoa_r+0x982>
 8007552:	4641      	mov	r1, r8
 8007554:	4620      	mov	r0, r4
 8007556:	f000 f985 	bl	8007864 <_Bfree>
 800755a:	4639      	mov	r1, r7
 800755c:	4620      	mov	r0, r4
 800755e:	f000 f981 	bl	8007864 <_Bfree>
 8007562:	e6a5      	b.n	80072b0 <_dtoa_r+0x6d8>
 8007564:	2600      	movs	r6, #0
 8007566:	4637      	mov	r7, r6
 8007568:	e7e1      	b.n	800752e <_dtoa_r+0x956>
 800756a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800756c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007570:	4637      	mov	r7, r6
 8007572:	e599      	b.n	80070a8 <_dtoa_r+0x4d0>
 8007574:	9b08      	ldr	r3, [sp, #32]
 8007576:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 80fd 	beq.w	800777a <_dtoa_r+0xba2>
 8007580:	2d00      	cmp	r5, #0
 8007582:	dd05      	ble.n	8007590 <_dtoa_r+0x9b8>
 8007584:	4639      	mov	r1, r7
 8007586:	462a      	mov	r2, r5
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fb3d 	bl	8007c08 <__lshift>
 800758e:	4607      	mov	r7, r0
 8007590:	9b06      	ldr	r3, [sp, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d05c      	beq.n	8007650 <_dtoa_r+0xa78>
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4620      	mov	r0, r4
 800759a:	f000 f923 	bl	80077e4 <_Balloc>
 800759e:	4605      	mov	r5, r0
 80075a0:	b928      	cbnz	r0, 80075ae <_dtoa_r+0x9d6>
 80075a2:	4b80      	ldr	r3, [pc, #512]	; (80077a4 <_dtoa_r+0xbcc>)
 80075a4:	4602      	mov	r2, r0
 80075a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075aa:	f7ff bb2e 	b.w	8006c0a <_dtoa_r+0x32>
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	3202      	adds	r2, #2
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	f107 010c 	add.w	r1, r7, #12
 80075b8:	300c      	adds	r0, #12
 80075ba:	f000 f905 	bl	80077c8 <memcpy>
 80075be:	2201      	movs	r2, #1
 80075c0:	4629      	mov	r1, r5
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 fb20 	bl	8007c08 <__lshift>
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	9b00      	ldr	r3, [sp, #0]
 80075d0:	444b      	add	r3, r9
 80075d2:	9307      	str	r3, [sp, #28]
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	46b8      	mov	r8, r7
 80075dc:	9306      	str	r3, [sp, #24]
 80075de:	4607      	mov	r7, r0
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	4631      	mov	r1, r6
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4658      	mov	r0, fp
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	f7ff fa67 	bl	8006abc <quorem>
 80075ee:	4603      	mov	r3, r0
 80075f0:	3330      	adds	r3, #48	; 0x30
 80075f2:	9004      	str	r0, [sp, #16]
 80075f4:	4641      	mov	r1, r8
 80075f6:	4658      	mov	r0, fp
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	f000 fb71 	bl	8007ce0 <__mcmp>
 80075fe:	463a      	mov	r2, r7
 8007600:	4681      	mov	r9, r0
 8007602:	4631      	mov	r1, r6
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fb87 	bl	8007d18 <__mdiff>
 800760a:	68c2      	ldr	r2, [r0, #12]
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	4605      	mov	r5, r0
 8007610:	bb02      	cbnz	r2, 8007654 <_dtoa_r+0xa7c>
 8007612:	4601      	mov	r1, r0
 8007614:	4658      	mov	r0, fp
 8007616:	f000 fb63 	bl	8007ce0 <__mcmp>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	4602      	mov	r2, r0
 800761e:	4629      	mov	r1, r5
 8007620:	4620      	mov	r0, r4
 8007622:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007626:	f000 f91d 	bl	8007864 <_Bfree>
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800762e:	9d01      	ldr	r5, [sp, #4]
 8007630:	ea43 0102 	orr.w	r1, r3, r2
 8007634:	9b06      	ldr	r3, [sp, #24]
 8007636:	430b      	orrs	r3, r1
 8007638:	9b08      	ldr	r3, [sp, #32]
 800763a:	d10d      	bne.n	8007658 <_dtoa_r+0xa80>
 800763c:	2b39      	cmp	r3, #57	; 0x39
 800763e:	d029      	beq.n	8007694 <_dtoa_r+0xabc>
 8007640:	f1b9 0f00 	cmp.w	r9, #0
 8007644:	dd01      	ble.n	800764a <_dtoa_r+0xa72>
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	3331      	adds	r3, #49	; 0x31
 800764a:	9a02      	ldr	r2, [sp, #8]
 800764c:	7013      	strb	r3, [r2, #0]
 800764e:	e774      	b.n	800753a <_dtoa_r+0x962>
 8007650:	4638      	mov	r0, r7
 8007652:	e7b9      	b.n	80075c8 <_dtoa_r+0x9f0>
 8007654:	2201      	movs	r2, #1
 8007656:	e7e2      	b.n	800761e <_dtoa_r+0xa46>
 8007658:	f1b9 0f00 	cmp.w	r9, #0
 800765c:	db06      	blt.n	800766c <_dtoa_r+0xa94>
 800765e:	9905      	ldr	r1, [sp, #20]
 8007660:	ea41 0909 	orr.w	r9, r1, r9
 8007664:	9906      	ldr	r1, [sp, #24]
 8007666:	ea59 0101 	orrs.w	r1, r9, r1
 800766a:	d120      	bne.n	80076ae <_dtoa_r+0xad6>
 800766c:	2a00      	cmp	r2, #0
 800766e:	ddec      	ble.n	800764a <_dtoa_r+0xa72>
 8007670:	4659      	mov	r1, fp
 8007672:	2201      	movs	r2, #1
 8007674:	4620      	mov	r0, r4
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	f000 fac6 	bl	8007c08 <__lshift>
 800767c:	4631      	mov	r1, r6
 800767e:	4683      	mov	fp, r0
 8007680:	f000 fb2e 	bl	8007ce0 <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	dc02      	bgt.n	8007690 <_dtoa_r+0xab8>
 800768a:	d1de      	bne.n	800764a <_dtoa_r+0xa72>
 800768c:	07da      	lsls	r2, r3, #31
 800768e:	d5dc      	bpl.n	800764a <_dtoa_r+0xa72>
 8007690:	2b39      	cmp	r3, #57	; 0x39
 8007692:	d1d8      	bne.n	8007646 <_dtoa_r+0xa6e>
 8007694:	9a02      	ldr	r2, [sp, #8]
 8007696:	2339      	movs	r3, #57	; 0x39
 8007698:	7013      	strb	r3, [r2, #0]
 800769a:	462b      	mov	r3, r5
 800769c:	461d      	mov	r5, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076a4:	2a39      	cmp	r2, #57	; 0x39
 80076a6:	d050      	beq.n	800774a <_dtoa_r+0xb72>
 80076a8:	3201      	adds	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e745      	b.n	800753a <_dtoa_r+0x962>
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	dd03      	ble.n	80076ba <_dtoa_r+0xae2>
 80076b2:	2b39      	cmp	r3, #57	; 0x39
 80076b4:	d0ee      	beq.n	8007694 <_dtoa_r+0xabc>
 80076b6:	3301      	adds	r3, #1
 80076b8:	e7c7      	b.n	800764a <_dtoa_r+0xa72>
 80076ba:	9a01      	ldr	r2, [sp, #4]
 80076bc:	9907      	ldr	r1, [sp, #28]
 80076be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076c2:	428a      	cmp	r2, r1
 80076c4:	d02a      	beq.n	800771c <_dtoa_r+0xb44>
 80076c6:	4659      	mov	r1, fp
 80076c8:	2300      	movs	r3, #0
 80076ca:	220a      	movs	r2, #10
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 f8eb 	bl	80078a8 <__multadd>
 80076d2:	45b8      	cmp	r8, r7
 80076d4:	4683      	mov	fp, r0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	f04f 020a 	mov.w	r2, #10
 80076de:	4641      	mov	r1, r8
 80076e0:	4620      	mov	r0, r4
 80076e2:	d107      	bne.n	80076f4 <_dtoa_r+0xb1c>
 80076e4:	f000 f8e0 	bl	80078a8 <__multadd>
 80076e8:	4680      	mov	r8, r0
 80076ea:	4607      	mov	r7, r0
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	3301      	adds	r3, #1
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	e775      	b.n	80075e0 <_dtoa_r+0xa08>
 80076f4:	f000 f8d8 	bl	80078a8 <__multadd>
 80076f8:	4639      	mov	r1, r7
 80076fa:	4680      	mov	r8, r0
 80076fc:	2300      	movs	r3, #0
 80076fe:	220a      	movs	r2, #10
 8007700:	4620      	mov	r0, r4
 8007702:	f000 f8d1 	bl	80078a8 <__multadd>
 8007706:	4607      	mov	r7, r0
 8007708:	e7f0      	b.n	80076ec <_dtoa_r+0xb14>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	9a00      	ldr	r2, [sp, #0]
 8007710:	bfcc      	ite	gt
 8007712:	464d      	movgt	r5, r9
 8007714:	2501      	movle	r5, #1
 8007716:	4415      	add	r5, r2
 8007718:	f04f 0800 	mov.w	r8, #0
 800771c:	4659      	mov	r1, fp
 800771e:	2201      	movs	r2, #1
 8007720:	4620      	mov	r0, r4
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	f000 fa70 	bl	8007c08 <__lshift>
 8007728:	4631      	mov	r1, r6
 800772a:	4683      	mov	fp, r0
 800772c:	f000 fad8 	bl	8007ce0 <__mcmp>
 8007730:	2800      	cmp	r0, #0
 8007732:	dcb2      	bgt.n	800769a <_dtoa_r+0xac2>
 8007734:	d102      	bne.n	800773c <_dtoa_r+0xb64>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d4ae      	bmi.n	800769a <_dtoa_r+0xac2>
 800773c:	462b      	mov	r3, r5
 800773e:	461d      	mov	r5, r3
 8007740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007744:	2a30      	cmp	r2, #48	; 0x30
 8007746:	d0fa      	beq.n	800773e <_dtoa_r+0xb66>
 8007748:	e6f7      	b.n	800753a <_dtoa_r+0x962>
 800774a:	9a00      	ldr	r2, [sp, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d1a5      	bne.n	800769c <_dtoa_r+0xac4>
 8007750:	f10a 0a01 	add.w	sl, sl, #1
 8007754:	2331      	movs	r3, #49	; 0x31
 8007756:	e779      	b.n	800764c <_dtoa_r+0xa74>
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <_dtoa_r+0xbd0>)
 800775a:	f7ff baaf 	b.w	8006cbc <_dtoa_r+0xe4>
 800775e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f aa86 	bne.w	8006c72 <_dtoa_r+0x9a>
 8007766:	4b11      	ldr	r3, [pc, #68]	; (80077ac <_dtoa_r+0xbd4>)
 8007768:	f7ff baa8 	b.w	8006cbc <_dtoa_r+0xe4>
 800776c:	f1b9 0f00 	cmp.w	r9, #0
 8007770:	dc03      	bgt.n	800777a <_dtoa_r+0xba2>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	2b02      	cmp	r3, #2
 8007776:	f73f aec9 	bgt.w	800750c <_dtoa_r+0x934>
 800777a:	9d00      	ldr	r5, [sp, #0]
 800777c:	4631      	mov	r1, r6
 800777e:	4658      	mov	r0, fp
 8007780:	f7ff f99c 	bl	8006abc <quorem>
 8007784:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007788:	f805 3b01 	strb.w	r3, [r5], #1
 800778c:	9a00      	ldr	r2, [sp, #0]
 800778e:	1aaa      	subs	r2, r5, r2
 8007790:	4591      	cmp	r9, r2
 8007792:	ddba      	ble.n	800770a <_dtoa_r+0xb32>
 8007794:	4659      	mov	r1, fp
 8007796:	2300      	movs	r3, #0
 8007798:	220a      	movs	r2, #10
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f884 	bl	80078a8 <__multadd>
 80077a0:	4683      	mov	fp, r0
 80077a2:	e7eb      	b.n	800777c <_dtoa_r+0xba4>
 80077a4:	08009043 	.word	0x08009043
 80077a8:	08008f9c 	.word	0x08008f9c
 80077ac:	08008fc0 	.word	0x08008fc0

080077b0 <_localeconv_r>:
 80077b0:	4800      	ldr	r0, [pc, #0]	; (80077b4 <_localeconv_r+0x4>)
 80077b2:	4770      	bx	lr
 80077b4:	20000160 	.word	0x20000160

080077b8 <malloc>:
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <malloc+0xc>)
 80077ba:	4601      	mov	r1, r0
 80077bc:	6818      	ldr	r0, [r3, #0]
 80077be:	f000 bbef 	b.w	8007fa0 <_malloc_r>
 80077c2:	bf00      	nop
 80077c4:	2000000c 	.word	0x2000000c

080077c8 <memcpy>:
 80077c8:	440a      	add	r2, r1
 80077ca:	4291      	cmp	r1, r2
 80077cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077d0:	d100      	bne.n	80077d4 <memcpy+0xc>
 80077d2:	4770      	bx	lr
 80077d4:	b510      	push	{r4, lr}
 80077d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077de:	4291      	cmp	r1, r2
 80077e0:	d1f9      	bne.n	80077d6 <memcpy+0xe>
 80077e2:	bd10      	pop	{r4, pc}

080077e4 <_Balloc>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	b976      	cbnz	r6, 800780c <_Balloc+0x28>
 80077ee:	2010      	movs	r0, #16
 80077f0:	f7ff ffe2 	bl	80077b8 <malloc>
 80077f4:	4602      	mov	r2, r0
 80077f6:	6260      	str	r0, [r4, #36]	; 0x24
 80077f8:	b920      	cbnz	r0, 8007804 <_Balloc+0x20>
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <_Balloc+0x78>)
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <_Balloc+0x7c>)
 80077fe:	2166      	movs	r1, #102	; 0x66
 8007800:	f000 fd94 	bl	800832c <__assert_func>
 8007804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007808:	6006      	str	r6, [r0, #0]
 800780a:	60c6      	str	r6, [r0, #12]
 800780c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800780e:	68f3      	ldr	r3, [r6, #12]
 8007810:	b183      	cbz	r3, 8007834 <_Balloc+0x50>
 8007812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800781a:	b9b8      	cbnz	r0, 800784c <_Balloc+0x68>
 800781c:	2101      	movs	r1, #1
 800781e:	fa01 f605 	lsl.w	r6, r1, r5
 8007822:	1d72      	adds	r2, r6, #5
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fb5a 	bl	8007ee0 <_calloc_r>
 800782c:	b160      	cbz	r0, 8007848 <_Balloc+0x64>
 800782e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007832:	e00e      	b.n	8007852 <_Balloc+0x6e>
 8007834:	2221      	movs	r2, #33	; 0x21
 8007836:	2104      	movs	r1, #4
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fb51 	bl	8007ee0 <_calloc_r>
 800783e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007840:	60f0      	str	r0, [r6, #12]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e4      	bne.n	8007812 <_Balloc+0x2e>
 8007848:	2000      	movs	r0, #0
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	6802      	ldr	r2, [r0, #0]
 800784e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007852:	2300      	movs	r3, #0
 8007854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007858:	e7f7      	b.n	800784a <_Balloc+0x66>
 800785a:	bf00      	nop
 800785c:	08008fcd 	.word	0x08008fcd
 8007860:	08009054 	.word	0x08009054

08007864 <_Bfree>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007868:	4605      	mov	r5, r0
 800786a:	460c      	mov	r4, r1
 800786c:	b976      	cbnz	r6, 800788c <_Bfree+0x28>
 800786e:	2010      	movs	r0, #16
 8007870:	f7ff ffa2 	bl	80077b8 <malloc>
 8007874:	4602      	mov	r2, r0
 8007876:	6268      	str	r0, [r5, #36]	; 0x24
 8007878:	b920      	cbnz	r0, 8007884 <_Bfree+0x20>
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <_Bfree+0x3c>)
 800787c:	4809      	ldr	r0, [pc, #36]	; (80078a4 <_Bfree+0x40>)
 800787e:	218a      	movs	r1, #138	; 0x8a
 8007880:	f000 fd54 	bl	800832c <__assert_func>
 8007884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007888:	6006      	str	r6, [r0, #0]
 800788a:	60c6      	str	r6, [r0, #12]
 800788c:	b13c      	cbz	r4, 800789e <_Bfree+0x3a>
 800788e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007890:	6862      	ldr	r2, [r4, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007898:	6021      	str	r1, [r4, #0]
 800789a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	08008fcd 	.word	0x08008fcd
 80078a4:	08009054 	.word	0x08009054

080078a8 <__multadd>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	690e      	ldr	r6, [r1, #16]
 80078ae:	4607      	mov	r7, r0
 80078b0:	4698      	mov	r8, r3
 80078b2:	460c      	mov	r4, r1
 80078b4:	f101 0014 	add.w	r0, r1, #20
 80078b8:	2300      	movs	r3, #0
 80078ba:	6805      	ldr	r5, [r0, #0]
 80078bc:	b2a9      	uxth	r1, r5
 80078be:	fb02 8101 	mla	r1, r2, r1, r8
 80078c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80078c6:	0c2d      	lsrs	r5, r5, #16
 80078c8:	fb02 c505 	mla	r5, r2, r5, ip
 80078cc:	b289      	uxth	r1, r1
 80078ce:	3301      	adds	r3, #1
 80078d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80078d4:	429e      	cmp	r6, r3
 80078d6:	f840 1b04 	str.w	r1, [r0], #4
 80078da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80078de:	dcec      	bgt.n	80078ba <__multadd+0x12>
 80078e0:	f1b8 0f00 	cmp.w	r8, #0
 80078e4:	d022      	beq.n	800792c <__multadd+0x84>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	42b3      	cmp	r3, r6
 80078ea:	dc19      	bgt.n	8007920 <__multadd+0x78>
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4638      	mov	r0, r7
 80078f0:	3101      	adds	r1, #1
 80078f2:	f7ff ff77 	bl	80077e4 <_Balloc>
 80078f6:	4605      	mov	r5, r0
 80078f8:	b928      	cbnz	r0, 8007906 <__multadd+0x5e>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <__multadd+0x8c>)
 80078fe:	480e      	ldr	r0, [pc, #56]	; (8007938 <__multadd+0x90>)
 8007900:	21b5      	movs	r1, #181	; 0xb5
 8007902:	f000 fd13 	bl	800832c <__assert_func>
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	3202      	adds	r2, #2
 800790a:	f104 010c 	add.w	r1, r4, #12
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f7ff ff59 	bl	80077c8 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa3 	bl	8007864 <_Bfree>
 800791e:	462c      	mov	r4, r5
 8007920:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007924:	3601      	adds	r6, #1
 8007926:	f8c3 8014 	str.w	r8, [r3, #20]
 800792a:	6126      	str	r6, [r4, #16]
 800792c:	4620      	mov	r0, r4
 800792e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007932:	bf00      	nop
 8007934:	08009043 	.word	0x08009043
 8007938:	08009054 	.word	0x08009054

0800793c <__hi0bits>:
 800793c:	0c03      	lsrs	r3, r0, #16
 800793e:	041b      	lsls	r3, r3, #16
 8007940:	b9d3      	cbnz	r3, 8007978 <__hi0bits+0x3c>
 8007942:	0400      	lsls	r0, r0, #16
 8007944:	2310      	movs	r3, #16
 8007946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800794a:	bf04      	itt	eq
 800794c:	0200      	lsleq	r0, r0, #8
 800794e:	3308      	addeq	r3, #8
 8007950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007954:	bf04      	itt	eq
 8007956:	0100      	lsleq	r0, r0, #4
 8007958:	3304      	addeq	r3, #4
 800795a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800795e:	bf04      	itt	eq
 8007960:	0080      	lsleq	r0, r0, #2
 8007962:	3302      	addeq	r3, #2
 8007964:	2800      	cmp	r0, #0
 8007966:	db05      	blt.n	8007974 <__hi0bits+0x38>
 8007968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800796c:	f103 0301 	add.w	r3, r3, #1
 8007970:	bf08      	it	eq
 8007972:	2320      	moveq	r3, #32
 8007974:	4618      	mov	r0, r3
 8007976:	4770      	bx	lr
 8007978:	2300      	movs	r3, #0
 800797a:	e7e4      	b.n	8007946 <__hi0bits+0xa>

0800797c <__lo0bits>:
 800797c:	6803      	ldr	r3, [r0, #0]
 800797e:	f013 0207 	ands.w	r2, r3, #7
 8007982:	4601      	mov	r1, r0
 8007984:	d00b      	beq.n	800799e <__lo0bits+0x22>
 8007986:	07da      	lsls	r2, r3, #31
 8007988:	d424      	bmi.n	80079d4 <__lo0bits+0x58>
 800798a:	0798      	lsls	r0, r3, #30
 800798c:	bf49      	itett	mi
 800798e:	085b      	lsrmi	r3, r3, #1
 8007990:	089b      	lsrpl	r3, r3, #2
 8007992:	2001      	movmi	r0, #1
 8007994:	600b      	strmi	r3, [r1, #0]
 8007996:	bf5c      	itt	pl
 8007998:	600b      	strpl	r3, [r1, #0]
 800799a:	2002      	movpl	r0, #2
 800799c:	4770      	bx	lr
 800799e:	b298      	uxth	r0, r3
 80079a0:	b9b0      	cbnz	r0, 80079d0 <__lo0bits+0x54>
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	2010      	movs	r0, #16
 80079a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079aa:	bf04      	itt	eq
 80079ac:	0a1b      	lsreq	r3, r3, #8
 80079ae:	3008      	addeq	r0, #8
 80079b0:	071a      	lsls	r2, r3, #28
 80079b2:	bf04      	itt	eq
 80079b4:	091b      	lsreq	r3, r3, #4
 80079b6:	3004      	addeq	r0, #4
 80079b8:	079a      	lsls	r2, r3, #30
 80079ba:	bf04      	itt	eq
 80079bc:	089b      	lsreq	r3, r3, #2
 80079be:	3002      	addeq	r0, #2
 80079c0:	07da      	lsls	r2, r3, #31
 80079c2:	d403      	bmi.n	80079cc <__lo0bits+0x50>
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	f100 0001 	add.w	r0, r0, #1
 80079ca:	d005      	beq.n	80079d8 <__lo0bits+0x5c>
 80079cc:	600b      	str	r3, [r1, #0]
 80079ce:	4770      	bx	lr
 80079d0:	4610      	mov	r0, r2
 80079d2:	e7e8      	b.n	80079a6 <__lo0bits+0x2a>
 80079d4:	2000      	movs	r0, #0
 80079d6:	4770      	bx	lr
 80079d8:	2020      	movs	r0, #32
 80079da:	4770      	bx	lr

080079dc <__i2b>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	460c      	mov	r4, r1
 80079e0:	2101      	movs	r1, #1
 80079e2:	f7ff feff 	bl	80077e4 <_Balloc>
 80079e6:	4602      	mov	r2, r0
 80079e8:	b928      	cbnz	r0, 80079f6 <__i2b+0x1a>
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <__i2b+0x24>)
 80079ec:	4805      	ldr	r0, [pc, #20]	; (8007a04 <__i2b+0x28>)
 80079ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80079f2:	f000 fc9b 	bl	800832c <__assert_func>
 80079f6:	2301      	movs	r3, #1
 80079f8:	6144      	str	r4, [r0, #20]
 80079fa:	6103      	str	r3, [r0, #16]
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	08009043 	.word	0x08009043
 8007a04:	08009054 	.word	0x08009054

08007a08 <__multiply>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	690a      	ldr	r2, [r1, #16]
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	bfb8      	it	lt
 8007a16:	460b      	movlt	r3, r1
 8007a18:	460d      	mov	r5, r1
 8007a1a:	bfbc      	itt	lt
 8007a1c:	4625      	movlt	r5, r4
 8007a1e:	461c      	movlt	r4, r3
 8007a20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007a24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a28:	68ab      	ldr	r3, [r5, #8]
 8007a2a:	6869      	ldr	r1, [r5, #4]
 8007a2c:	eb0a 0709 	add.w	r7, sl, r9
 8007a30:	42bb      	cmp	r3, r7
 8007a32:	b085      	sub	sp, #20
 8007a34:	bfb8      	it	lt
 8007a36:	3101      	addlt	r1, #1
 8007a38:	f7ff fed4 	bl	80077e4 <_Balloc>
 8007a3c:	b930      	cbnz	r0, 8007a4c <__multiply+0x44>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	4b42      	ldr	r3, [pc, #264]	; (8007b4c <__multiply+0x144>)
 8007a42:	4843      	ldr	r0, [pc, #268]	; (8007b50 <__multiply+0x148>)
 8007a44:	f240 115d 	movw	r1, #349	; 0x15d
 8007a48:	f000 fc70 	bl	800832c <__assert_func>
 8007a4c:	f100 0614 	add.w	r6, r0, #20
 8007a50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007a54:	4633      	mov	r3, r6
 8007a56:	2200      	movs	r2, #0
 8007a58:	4543      	cmp	r3, r8
 8007a5a:	d31e      	bcc.n	8007a9a <__multiply+0x92>
 8007a5c:	f105 0c14 	add.w	ip, r5, #20
 8007a60:	f104 0314 	add.w	r3, r4, #20
 8007a64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007a68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007a6c:	9202      	str	r2, [sp, #8]
 8007a6e:	ebac 0205 	sub.w	r2, ip, r5
 8007a72:	3a15      	subs	r2, #21
 8007a74:	f022 0203 	bic.w	r2, r2, #3
 8007a78:	3204      	adds	r2, #4
 8007a7a:	f105 0115 	add.w	r1, r5, #21
 8007a7e:	458c      	cmp	ip, r1
 8007a80:	bf38      	it	cc
 8007a82:	2204      	movcc	r2, #4
 8007a84:	9201      	str	r2, [sp, #4]
 8007a86:	9a02      	ldr	r2, [sp, #8]
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d808      	bhi.n	8007aa0 <__multiply+0x98>
 8007a8e:	2f00      	cmp	r7, #0
 8007a90:	dc55      	bgt.n	8007b3e <__multiply+0x136>
 8007a92:	6107      	str	r7, [r0, #16]
 8007a94:	b005      	add	sp, #20
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	f843 2b04 	str.w	r2, [r3], #4
 8007a9e:	e7db      	b.n	8007a58 <__multiply+0x50>
 8007aa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007aa4:	f1ba 0f00 	cmp.w	sl, #0
 8007aa8:	d020      	beq.n	8007aec <__multiply+0xe4>
 8007aaa:	f105 0e14 	add.w	lr, r5, #20
 8007aae:	46b1      	mov	r9, r6
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ab6:	f8d9 b000 	ldr.w	fp, [r9]
 8007aba:	b2a1      	uxth	r1, r4
 8007abc:	fa1f fb8b 	uxth.w	fp, fp
 8007ac0:	fb0a b101 	mla	r1, sl, r1, fp
 8007ac4:	4411      	add	r1, r2
 8007ac6:	f8d9 2000 	ldr.w	r2, [r9]
 8007aca:	0c24      	lsrs	r4, r4, #16
 8007acc:	0c12      	lsrs	r2, r2, #16
 8007ace:	fb0a 2404 	mla	r4, sl, r4, r2
 8007ad2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ad6:	b289      	uxth	r1, r1
 8007ad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007adc:	45f4      	cmp	ip, lr
 8007ade:	f849 1b04 	str.w	r1, [r9], #4
 8007ae2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ae6:	d8e4      	bhi.n	8007ab2 <__multiply+0xaa>
 8007ae8:	9901      	ldr	r1, [sp, #4]
 8007aea:	5072      	str	r2, [r6, r1]
 8007aec:	9a03      	ldr	r2, [sp, #12]
 8007aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007af2:	3304      	adds	r3, #4
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	d01f      	beq.n	8007b3a <__multiply+0x132>
 8007afa:	6834      	ldr	r4, [r6, #0]
 8007afc:	f105 0114 	add.w	r1, r5, #20
 8007b00:	46b6      	mov	lr, r6
 8007b02:	f04f 0a00 	mov.w	sl, #0
 8007b06:	880a      	ldrh	r2, [r1, #0]
 8007b08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007b0c:	fb09 b202 	mla	r2, r9, r2, fp
 8007b10:	4492      	add	sl, r2
 8007b12:	b2a4      	uxth	r4, r4
 8007b14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007b18:	f84e 4b04 	str.w	r4, [lr], #4
 8007b1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b20:	f8be 2000 	ldrh.w	r2, [lr]
 8007b24:	0c24      	lsrs	r4, r4, #16
 8007b26:	fb09 2404 	mla	r4, r9, r4, r2
 8007b2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007b2e:	458c      	cmp	ip, r1
 8007b30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b34:	d8e7      	bhi.n	8007b06 <__multiply+0xfe>
 8007b36:	9a01      	ldr	r2, [sp, #4]
 8007b38:	50b4      	str	r4, [r6, r2]
 8007b3a:	3604      	adds	r6, #4
 8007b3c:	e7a3      	b.n	8007a86 <__multiply+0x7e>
 8007b3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1a5      	bne.n	8007a92 <__multiply+0x8a>
 8007b46:	3f01      	subs	r7, #1
 8007b48:	e7a1      	b.n	8007a8e <__multiply+0x86>
 8007b4a:	bf00      	nop
 8007b4c:	08009043 	.word	0x08009043
 8007b50:	08009054 	.word	0x08009054

08007b54 <__pow5mult>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4615      	mov	r5, r2
 8007b5a:	f012 0203 	ands.w	r2, r2, #3
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460f      	mov	r7, r1
 8007b62:	d007      	beq.n	8007b74 <__pow5mult+0x20>
 8007b64:	4c25      	ldr	r4, [pc, #148]	; (8007bfc <__pow5mult+0xa8>)
 8007b66:	3a01      	subs	r2, #1
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b6e:	f7ff fe9b 	bl	80078a8 <__multadd>
 8007b72:	4607      	mov	r7, r0
 8007b74:	10ad      	asrs	r5, r5, #2
 8007b76:	d03d      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007b78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b7a:	b97c      	cbnz	r4, 8007b9c <__pow5mult+0x48>
 8007b7c:	2010      	movs	r0, #16
 8007b7e:	f7ff fe1b 	bl	80077b8 <malloc>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6270      	str	r0, [r6, #36]	; 0x24
 8007b86:	b928      	cbnz	r0, 8007b94 <__pow5mult+0x40>
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <__pow5mult+0xac>)
 8007b8a:	481e      	ldr	r0, [pc, #120]	; (8007c04 <__pow5mult+0xb0>)
 8007b8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b90:	f000 fbcc 	bl	800832c <__assert_func>
 8007b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b98:	6004      	str	r4, [r0, #0]
 8007b9a:	60c4      	str	r4, [r0, #12]
 8007b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba4:	b94c      	cbnz	r4, 8007bba <__pow5mult+0x66>
 8007ba6:	f240 2171 	movw	r1, #625	; 0x271
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ff16 	bl	80079dc <__i2b>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	07eb      	lsls	r3, r5, #31
 8007bc0:	d50a      	bpl.n	8007bd8 <__pow5mult+0x84>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ff1e 	bl	8007a08 <__multiply>
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fe47 	bl	8007864 <_Bfree>
 8007bd6:	4647      	mov	r7, r8
 8007bd8:	106d      	asrs	r5, r5, #1
 8007bda:	d00b      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	b938      	cbnz	r0, 8007bf0 <__pow5mult+0x9c>
 8007be0:	4622      	mov	r2, r4
 8007be2:	4621      	mov	r1, r4
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff ff0f 	bl	8007a08 <__multiply>
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	f8c0 9000 	str.w	r9, [r0]
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e7e4      	b.n	8007bbe <__pow5mult+0x6a>
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	bf00      	nop
 8007bfc:	080091a8 	.word	0x080091a8
 8007c00:	08008fcd 	.word	0x08008fcd
 8007c04:	08009054 	.word	0x08009054

08007c08 <__lshift>:
 8007c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6849      	ldr	r1, [r1, #4]
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	4607      	mov	r7, r0
 8007c1a:	4691      	mov	r9, r2
 8007c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c20:	f108 0601 	add.w	r6, r8, #1
 8007c24:	42b3      	cmp	r3, r6
 8007c26:	db0b      	blt.n	8007c40 <__lshift+0x38>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff fddb 	bl	80077e4 <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b948      	cbnz	r0, 8007c46 <__lshift+0x3e>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <__lshift+0xd0>)
 8007c36:	4829      	ldr	r0, [pc, #164]	; (8007cdc <__lshift+0xd4>)
 8007c38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c3c:	f000 fb76 	bl	800832c <__assert_func>
 8007c40:	3101      	adds	r1, #1
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	e7ee      	b.n	8007c24 <__lshift+0x1c>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f100 0114 	add.w	r1, r0, #20
 8007c4c:	f100 0210 	add.w	r2, r0, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	4553      	cmp	r3, sl
 8007c54:	db33      	blt.n	8007cbe <__lshift+0xb6>
 8007c56:	6920      	ldr	r0, [r4, #16]
 8007c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c5c:	f104 0314 	add.w	r3, r4, #20
 8007c60:	f019 091f 	ands.w	r9, r9, #31
 8007c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c6c:	d02b      	beq.n	8007cc6 <__lshift+0xbe>
 8007c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c72:	468a      	mov	sl, r1
 8007c74:	2200      	movs	r2, #0
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	fa00 f009 	lsl.w	r0, r0, r9
 8007c7c:	4302      	orrs	r2, r0
 8007c7e:	f84a 2b04 	str.w	r2, [sl], #4
 8007c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c86:	459c      	cmp	ip, r3
 8007c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c8c:	d8f3      	bhi.n	8007c76 <__lshift+0x6e>
 8007c8e:	ebac 0304 	sub.w	r3, ip, r4
 8007c92:	3b15      	subs	r3, #21
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	3304      	adds	r3, #4
 8007c9a:	f104 0015 	add.w	r0, r4, #21
 8007c9e:	4584      	cmp	ip, r0
 8007ca0:	bf38      	it	cc
 8007ca2:	2304      	movcc	r3, #4
 8007ca4:	50ca      	str	r2, [r1, r3]
 8007ca6:	b10a      	cbz	r2, 8007cac <__lshift+0xa4>
 8007ca8:	f108 0602 	add.w	r6, r8, #2
 8007cac:	3e01      	subs	r6, #1
 8007cae:	4638      	mov	r0, r7
 8007cb0:	612e      	str	r6, [r5, #16]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f7ff fdd6 	bl	8007864 <_Bfree>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7c5      	b.n	8007c52 <__lshift+0x4a>
 8007cc6:	3904      	subs	r1, #4
 8007cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cd0:	459c      	cmp	ip, r3
 8007cd2:	d8f9      	bhi.n	8007cc8 <__lshift+0xc0>
 8007cd4:	e7ea      	b.n	8007cac <__lshift+0xa4>
 8007cd6:	bf00      	nop
 8007cd8:	08009043 	.word	0x08009043
 8007cdc:	08009054 	.word	0x08009054

08007ce0 <__mcmp>:
 8007ce0:	b530      	push	{r4, r5, lr}
 8007ce2:	6902      	ldr	r2, [r0, #16]
 8007ce4:	690c      	ldr	r4, [r1, #16]
 8007ce6:	1b12      	subs	r2, r2, r4
 8007ce8:	d10e      	bne.n	8007d08 <__mcmp+0x28>
 8007cea:	f100 0314 	add.w	r3, r0, #20
 8007cee:	3114      	adds	r1, #20
 8007cf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d003      	beq.n	8007d0c <__mcmp+0x2c>
 8007d04:	d305      	bcc.n	8007d12 <__mcmp+0x32>
 8007d06:	2201      	movs	r2, #1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	bd30      	pop	{r4, r5, pc}
 8007d0c:	4283      	cmp	r3, r0
 8007d0e:	d3f3      	bcc.n	8007cf8 <__mcmp+0x18>
 8007d10:	e7fa      	b.n	8007d08 <__mcmp+0x28>
 8007d12:	f04f 32ff 	mov.w	r2, #4294967295
 8007d16:	e7f7      	b.n	8007d08 <__mcmp+0x28>

08007d18 <__mdiff>:
 8007d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	4606      	mov	r6, r0
 8007d20:	4611      	mov	r1, r2
 8007d22:	4620      	mov	r0, r4
 8007d24:	4617      	mov	r7, r2
 8007d26:	f7ff ffdb 	bl	8007ce0 <__mcmp>
 8007d2a:	1e05      	subs	r5, r0, #0
 8007d2c:	d110      	bne.n	8007d50 <__mdiff+0x38>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff fd57 	bl	80077e4 <_Balloc>
 8007d36:	b930      	cbnz	r0, 8007d46 <__mdiff+0x2e>
 8007d38:	4b39      	ldr	r3, [pc, #228]	; (8007e20 <__mdiff+0x108>)
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	f240 2132 	movw	r1, #562	; 0x232
 8007d40:	4838      	ldr	r0, [pc, #224]	; (8007e24 <__mdiff+0x10c>)
 8007d42:	f000 faf3 	bl	800832c <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	bfa4      	itt	ge
 8007d52:	463b      	movge	r3, r7
 8007d54:	4627      	movge	r7, r4
 8007d56:	4630      	mov	r0, r6
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	bfa6      	itte	ge
 8007d5c:	461c      	movge	r4, r3
 8007d5e:	2500      	movge	r5, #0
 8007d60:	2501      	movlt	r5, #1
 8007d62:	f7ff fd3f 	bl	80077e4 <_Balloc>
 8007d66:	b920      	cbnz	r0, 8007d72 <__mdiff+0x5a>
 8007d68:	4b2d      	ldr	r3, [pc, #180]	; (8007e20 <__mdiff+0x108>)
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d70:	e7e6      	b.n	8007d40 <__mdiff+0x28>
 8007d72:	693e      	ldr	r6, [r7, #16]
 8007d74:	60c5      	str	r5, [r0, #12]
 8007d76:	6925      	ldr	r5, [r4, #16]
 8007d78:	f107 0114 	add.w	r1, r7, #20
 8007d7c:	f104 0914 	add.w	r9, r4, #20
 8007d80:	f100 0e14 	add.w	lr, r0, #20
 8007d84:	f107 0210 	add.w	r2, r7, #16
 8007d88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007d8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007d90:	46f2      	mov	sl, lr
 8007d92:	2700      	movs	r7, #0
 8007d94:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d9c:	fa1f f883 	uxth.w	r8, r3
 8007da0:	fa17 f78b 	uxtah	r7, r7, fp
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	eba7 0808 	sub.w	r8, r7, r8
 8007daa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007db2:	fa1f f888 	uxth.w	r8, r8
 8007db6:	141f      	asrs	r7, r3, #16
 8007db8:	454d      	cmp	r5, r9
 8007dba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007dbe:	f84a 3b04 	str.w	r3, [sl], #4
 8007dc2:	d8e7      	bhi.n	8007d94 <__mdiff+0x7c>
 8007dc4:	1b2b      	subs	r3, r5, r4
 8007dc6:	3b15      	subs	r3, #21
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	3304      	adds	r3, #4
 8007dce:	3415      	adds	r4, #21
 8007dd0:	42a5      	cmp	r5, r4
 8007dd2:	bf38      	it	cc
 8007dd4:	2304      	movcc	r3, #4
 8007dd6:	4419      	add	r1, r3
 8007dd8:	4473      	add	r3, lr
 8007dda:	469e      	mov	lr, r3
 8007ddc:	460d      	mov	r5, r1
 8007dde:	4565      	cmp	r5, ip
 8007de0:	d30e      	bcc.n	8007e00 <__mdiff+0xe8>
 8007de2:	f10c 0203 	add.w	r2, ip, #3
 8007de6:	1a52      	subs	r2, r2, r1
 8007de8:	f022 0203 	bic.w	r2, r2, #3
 8007dec:	3903      	subs	r1, #3
 8007dee:	458c      	cmp	ip, r1
 8007df0:	bf38      	it	cc
 8007df2:	2200      	movcc	r2, #0
 8007df4:	441a      	add	r2, r3
 8007df6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007dfa:	b17b      	cbz	r3, 8007e1c <__mdiff+0x104>
 8007dfc:	6106      	str	r6, [r0, #16]
 8007dfe:	e7a5      	b.n	8007d4c <__mdiff+0x34>
 8007e00:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e04:	fa17 f488 	uxtah	r4, r7, r8
 8007e08:	1422      	asrs	r2, r4, #16
 8007e0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007e0e:	b2a4      	uxth	r4, r4
 8007e10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007e14:	f84e 4b04 	str.w	r4, [lr], #4
 8007e18:	1417      	asrs	r7, r2, #16
 8007e1a:	e7e0      	b.n	8007dde <__mdiff+0xc6>
 8007e1c:	3e01      	subs	r6, #1
 8007e1e:	e7ea      	b.n	8007df6 <__mdiff+0xde>
 8007e20:	08009043 	.word	0x08009043
 8007e24:	08009054 	.word	0x08009054

08007e28 <__d2b>:
 8007e28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	2101      	movs	r1, #1
 8007e30:	ec57 6b10 	vmov	r6, r7, d0
 8007e34:	4690      	mov	r8, r2
 8007e36:	f7ff fcd5 	bl	80077e4 <_Balloc>
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	b930      	cbnz	r0, 8007e4c <__d2b+0x24>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <__d2b+0xb0>)
 8007e42:	4826      	ldr	r0, [pc, #152]	; (8007edc <__d2b+0xb4>)
 8007e44:	f240 310a 	movw	r1, #778	; 0x30a
 8007e48:	f000 fa70 	bl	800832c <__assert_func>
 8007e4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007e50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e54:	bb35      	cbnz	r5, 8007ea4 <__d2b+0x7c>
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	d028      	beq.n	8007eae <__d2b+0x86>
 8007e5c:	4668      	mov	r0, sp
 8007e5e:	9600      	str	r6, [sp, #0]
 8007e60:	f7ff fd8c 	bl	800797c <__lo0bits>
 8007e64:	9900      	ldr	r1, [sp, #0]
 8007e66:	b300      	cbz	r0, 8007eaa <__d2b+0x82>
 8007e68:	9a01      	ldr	r2, [sp, #4]
 8007e6a:	f1c0 0320 	rsb	r3, r0, #32
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	430b      	orrs	r3, r1
 8007e74:	40c2      	lsrs	r2, r0
 8007e76:	6163      	str	r3, [r4, #20]
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	61a3      	str	r3, [r4, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2202      	movne	r2, #2
 8007e84:	2201      	moveq	r2, #1
 8007e86:	6122      	str	r2, [r4, #16]
 8007e88:	b1d5      	cbz	r5, 8007ec0 <__d2b+0x98>
 8007e8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e8e:	4405      	add	r5, r0
 8007e90:	f8c9 5000 	str.w	r5, [r9]
 8007e94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e98:	f8c8 0000 	str.w	r0, [r8]
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	b003      	add	sp, #12
 8007ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea8:	e7d5      	b.n	8007e56 <__d2b+0x2e>
 8007eaa:	6161      	str	r1, [r4, #20]
 8007eac:	e7e5      	b.n	8007e7a <__d2b+0x52>
 8007eae:	a801      	add	r0, sp, #4
 8007eb0:	f7ff fd64 	bl	800797c <__lo0bits>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	6163      	str	r3, [r4, #20]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	6122      	str	r2, [r4, #16]
 8007ebc:	3020      	adds	r0, #32
 8007ebe:	e7e3      	b.n	8007e88 <__d2b+0x60>
 8007ec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ec8:	f8c9 0000 	str.w	r0, [r9]
 8007ecc:	6918      	ldr	r0, [r3, #16]
 8007ece:	f7ff fd35 	bl	800793c <__hi0bits>
 8007ed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ed6:	e7df      	b.n	8007e98 <__d2b+0x70>
 8007ed8:	08009043 	.word	0x08009043
 8007edc:	08009054 	.word	0x08009054

08007ee0 <_calloc_r>:
 8007ee0:	b513      	push	{r0, r1, r4, lr}
 8007ee2:	434a      	muls	r2, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	9201      	str	r2, [sp, #4]
 8007ee8:	f000 f85a 	bl	8007fa0 <_malloc_r>
 8007eec:	4604      	mov	r4, r0
 8007eee:	b118      	cbz	r0, 8007ef8 <_calloc_r+0x18>
 8007ef0:	9a01      	ldr	r2, [sp, #4]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	f7fe f950 	bl	8006198 <memset>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	b002      	add	sp, #8
 8007efc:	bd10      	pop	{r4, pc}
	...

08007f00 <_free_r>:
 8007f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f02:	2900      	cmp	r1, #0
 8007f04:	d048      	beq.n	8007f98 <_free_r+0x98>
 8007f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f0a:	9001      	str	r0, [sp, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f12:	bfb8      	it	lt
 8007f14:	18e4      	addlt	r4, r4, r3
 8007f16:	f000 fa65 	bl	80083e4 <__malloc_lock>
 8007f1a:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <_free_r+0x9c>)
 8007f1c:	9801      	ldr	r0, [sp, #4]
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	4615      	mov	r5, r2
 8007f22:	b933      	cbnz	r3, 8007f32 <_free_r+0x32>
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	6014      	str	r4, [r2, #0]
 8007f28:	b003      	add	sp, #12
 8007f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f2e:	f000 ba5f 	b.w	80083f0 <__malloc_unlock>
 8007f32:	42a3      	cmp	r3, r4
 8007f34:	d90b      	bls.n	8007f4e <_free_r+0x4e>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	1862      	adds	r2, r4, r1
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	bf04      	itt	eq
 8007f3e:	681a      	ldreq	r2, [r3, #0]
 8007f40:	685b      	ldreq	r3, [r3, #4]
 8007f42:	6063      	str	r3, [r4, #4]
 8007f44:	bf04      	itt	eq
 8007f46:	1852      	addeq	r2, r2, r1
 8007f48:	6022      	streq	r2, [r4, #0]
 8007f4a:	602c      	str	r4, [r5, #0]
 8007f4c:	e7ec      	b.n	8007f28 <_free_r+0x28>
 8007f4e:	461a      	mov	r2, r3
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	b10b      	cbz	r3, 8007f58 <_free_r+0x58>
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d9fa      	bls.n	8007f4e <_free_r+0x4e>
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	1855      	adds	r5, r2, r1
 8007f5c:	42a5      	cmp	r5, r4
 8007f5e:	d10b      	bne.n	8007f78 <_free_r+0x78>
 8007f60:	6824      	ldr	r4, [r4, #0]
 8007f62:	4421      	add	r1, r4
 8007f64:	1854      	adds	r4, r2, r1
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	6011      	str	r1, [r2, #0]
 8007f6a:	d1dd      	bne.n	8007f28 <_free_r+0x28>
 8007f6c:	681c      	ldr	r4, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	6053      	str	r3, [r2, #4]
 8007f72:	4421      	add	r1, r4
 8007f74:	6011      	str	r1, [r2, #0]
 8007f76:	e7d7      	b.n	8007f28 <_free_r+0x28>
 8007f78:	d902      	bls.n	8007f80 <_free_r+0x80>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	e7d3      	b.n	8007f28 <_free_r+0x28>
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf04      	itt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	6063      	str	r3, [r4, #4]
 8007f8e:	bf04      	itt	eq
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	6054      	str	r4, [r2, #4]
 8007f96:	e7c7      	b.n	8007f28 <_free_r+0x28>
 8007f98:	b003      	add	sp, #12
 8007f9a:	bd30      	pop	{r4, r5, pc}
 8007f9c:	2000020c 	.word	0x2000020c

08007fa0 <_malloc_r>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	1ccd      	adds	r5, r1, #3
 8007fa4:	f025 0503 	bic.w	r5, r5, #3
 8007fa8:	3508      	adds	r5, #8
 8007faa:	2d0c      	cmp	r5, #12
 8007fac:	bf38      	it	cc
 8007fae:	250c      	movcc	r5, #12
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	db01      	blt.n	8007fba <_malloc_r+0x1a>
 8007fb6:	42a9      	cmp	r1, r5
 8007fb8:	d903      	bls.n	8007fc2 <_malloc_r+0x22>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc2:	f000 fa0f 	bl	80083e4 <__malloc_lock>
 8007fc6:	4921      	ldr	r1, [pc, #132]	; (800804c <_malloc_r+0xac>)
 8007fc8:	680a      	ldr	r2, [r1, #0]
 8007fca:	4614      	mov	r4, r2
 8007fcc:	b99c      	cbnz	r4, 8007ff6 <_malloc_r+0x56>
 8007fce:	4f20      	ldr	r7, [pc, #128]	; (8008050 <_malloc_r+0xb0>)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	b923      	cbnz	r3, 8007fde <_malloc_r+0x3e>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f998 	bl	800830c <_sbrk_r>
 8007fdc:	6038      	str	r0, [r7, #0]
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f993 	bl	800830c <_sbrk_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d123      	bne.n	8008032 <_malloc_r+0x92>
 8007fea:	230c      	movs	r3, #12
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f9fe 	bl	80083f0 <__malloc_unlock>
 8007ff4:	e7e3      	b.n	8007fbe <_malloc_r+0x1e>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	1b5b      	subs	r3, r3, r5
 8007ffa:	d417      	bmi.n	800802c <_malloc_r+0x8c>
 8007ffc:	2b0b      	cmp	r3, #11
 8007ffe:	d903      	bls.n	8008008 <_malloc_r+0x68>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	441c      	add	r4, r3
 8008004:	6025      	str	r5, [r4, #0]
 8008006:	e004      	b.n	8008012 <_malloc_r+0x72>
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	42a2      	cmp	r2, r4
 800800c:	bf0c      	ite	eq
 800800e:	600b      	streq	r3, [r1, #0]
 8008010:	6053      	strne	r3, [r2, #4]
 8008012:	4630      	mov	r0, r6
 8008014:	f000 f9ec 	bl	80083f0 <__malloc_unlock>
 8008018:	f104 000b 	add.w	r0, r4, #11
 800801c:	1d23      	adds	r3, r4, #4
 800801e:	f020 0007 	bic.w	r0, r0, #7
 8008022:	1ac2      	subs	r2, r0, r3
 8008024:	d0cc      	beq.n	8007fc0 <_malloc_r+0x20>
 8008026:	1a1b      	subs	r3, r3, r0
 8008028:	50a3      	str	r3, [r4, r2]
 800802a:	e7c9      	b.n	8007fc0 <_malloc_r+0x20>
 800802c:	4622      	mov	r2, r4
 800802e:	6864      	ldr	r4, [r4, #4]
 8008030:	e7cc      	b.n	8007fcc <_malloc_r+0x2c>
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0e3      	beq.n	8008004 <_malloc_r+0x64>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f964 	bl	800830c <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1dd      	bne.n	8008004 <_malloc_r+0x64>
 8008048:	e7cf      	b.n	8007fea <_malloc_r+0x4a>
 800804a:	bf00      	nop
 800804c:	2000020c 	.word	0x2000020c
 8008050:	20000210 	.word	0x20000210

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	688e      	ldr	r6, [r1, #8]
 800805a:	429e      	cmp	r6, r3
 800805c:	4682      	mov	sl, r0
 800805e:	460c      	mov	r4, r1
 8008060:	4690      	mov	r8, r2
 8008062:	461f      	mov	r7, r3
 8008064:	d838      	bhi.n	80080d8 <__ssputs_r+0x84>
 8008066:	898a      	ldrh	r2, [r1, #12]
 8008068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806c:	d032      	beq.n	80080d4 <__ssputs_r+0x80>
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	6909      	ldr	r1, [r1, #16]
 8008072:	eba5 0901 	sub.w	r9, r5, r1
 8008076:	6965      	ldr	r5, [r4, #20]
 8008078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800807c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008080:	3301      	adds	r3, #1
 8008082:	444b      	add	r3, r9
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d531      	bpl.n	80080f4 <__ssputs_r+0xa0>
 8008090:	4629      	mov	r1, r5
 8008092:	f7ff ff85 	bl	8007fa0 <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b950      	cbnz	r0, 80080b0 <__ssputs_r+0x5c>
 800809a:	230c      	movs	r3, #12
 800809c:	f8ca 3000 	str.w	r3, [sl]
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	6921      	ldr	r1, [r4, #16]
 80080b2:	464a      	mov	r2, r9
 80080b4:	f7ff fb88 	bl	80077c8 <memcpy>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6126      	str	r6, [r4, #16]
 80080c6:	6165      	str	r5, [r4, #20]
 80080c8:	444e      	add	r6, r9
 80080ca:	eba5 0509 	sub.w	r5, r5, r9
 80080ce:	6026      	str	r6, [r4, #0]
 80080d0:	60a5      	str	r5, [r4, #8]
 80080d2:	463e      	mov	r6, r7
 80080d4:	42be      	cmp	r6, r7
 80080d6:	d900      	bls.n	80080da <__ssputs_r+0x86>
 80080d8:	463e      	mov	r6, r7
 80080da:	4632      	mov	r2, r6
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	4641      	mov	r1, r8
 80080e0:	f000 f966 	bl	80083b0 <memmove>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	4432      	add	r2, r6
 80080ec:	60a3      	str	r3, [r4, #8]
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7db      	b.n	80080ac <__ssputs_r+0x58>
 80080f4:	462a      	mov	r2, r5
 80080f6:	f000 f981 	bl	80083fc <_realloc_r>
 80080fa:	4606      	mov	r6, r0
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e1      	bne.n	80080c4 <__ssputs_r+0x70>
 8008100:	6921      	ldr	r1, [r4, #16]
 8008102:	4650      	mov	r0, sl
 8008104:	f7ff fefc 	bl	8007f00 <_free_r>
 8008108:	e7c7      	b.n	800809a <__ssputs_r+0x46>
	...

0800810c <_svfiprintf_r>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4698      	mov	r8, r3
 8008112:	898b      	ldrh	r3, [r1, #12]
 8008114:	061b      	lsls	r3, r3, #24
 8008116:	b09d      	sub	sp, #116	; 0x74
 8008118:	4607      	mov	r7, r0
 800811a:	460d      	mov	r5, r1
 800811c:	4614      	mov	r4, r2
 800811e:	d50e      	bpl.n	800813e <_svfiprintf_r+0x32>
 8008120:	690b      	ldr	r3, [r1, #16]
 8008122:	b963      	cbnz	r3, 800813e <_svfiprintf_r+0x32>
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	f7ff ff3b 	bl	8007fa0 <_malloc_r>
 800812a:	6028      	str	r0, [r5, #0]
 800812c:	6128      	str	r0, [r5, #16]
 800812e:	b920      	cbnz	r0, 800813a <_svfiprintf_r+0x2e>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e0d1      	b.n	80082de <_svfiprintf_r+0x1d2>
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	616b      	str	r3, [r5, #20]
 800813e:	2300      	movs	r3, #0
 8008140:	9309      	str	r3, [sp, #36]	; 0x24
 8008142:	2320      	movs	r3, #32
 8008144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008148:	f8cd 800c 	str.w	r8, [sp, #12]
 800814c:	2330      	movs	r3, #48	; 0x30
 800814e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082f8 <_svfiprintf_r+0x1ec>
 8008152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008156:	f04f 0901 	mov.w	r9, #1
 800815a:	4623      	mov	r3, r4
 800815c:	469a      	mov	sl, r3
 800815e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008162:	b10a      	cbz	r2, 8008168 <_svfiprintf_r+0x5c>
 8008164:	2a25      	cmp	r2, #37	; 0x25
 8008166:	d1f9      	bne.n	800815c <_svfiprintf_r+0x50>
 8008168:	ebba 0b04 	subs.w	fp, sl, r4
 800816c:	d00b      	beq.n	8008186 <_svfiprintf_r+0x7a>
 800816e:	465b      	mov	r3, fp
 8008170:	4622      	mov	r2, r4
 8008172:	4629      	mov	r1, r5
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff6d 	bl	8008054 <__ssputs_r>
 800817a:	3001      	adds	r0, #1
 800817c:	f000 80aa 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008182:	445a      	add	r2, fp
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	f89a 3000 	ldrb.w	r3, [sl]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a2 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008190:	2300      	movs	r3, #0
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819a:	f10a 0a01 	add.w	sl, sl, #1
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a6:	931a      	str	r3, [sp, #104]	; 0x68
 80081a8:	4654      	mov	r4, sl
 80081aa:	2205      	movs	r2, #5
 80081ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b0:	4851      	ldr	r0, [pc, #324]	; (80082f8 <_svfiprintf_r+0x1ec>)
 80081b2:	f7f8 f815 	bl	80001e0 <memchr>
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	b9d8      	cbnz	r0, 80081f2 <_svfiprintf_r+0xe6>
 80081ba:	06d0      	lsls	r0, r2, #27
 80081bc:	bf44      	itt	mi
 80081be:	2320      	movmi	r3, #32
 80081c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c4:	0711      	lsls	r1, r2, #28
 80081c6:	bf44      	itt	mi
 80081c8:	232b      	movmi	r3, #43	; 0x2b
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d015      	beq.n	8008202 <_svfiprintf_r+0xf6>
 80081d6:	9a07      	ldr	r2, [sp, #28]
 80081d8:	4654      	mov	r4, sl
 80081da:	2000      	movs	r0, #0
 80081dc:	f04f 0c0a 	mov.w	ip, #10
 80081e0:	4621      	mov	r1, r4
 80081e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d94e      	bls.n	800828a <_svfiprintf_r+0x17e>
 80081ec:	b1b0      	cbz	r0, 800821c <_svfiprintf_r+0x110>
 80081ee:	9207      	str	r2, [sp, #28]
 80081f0:	e014      	b.n	800821c <_svfiprintf_r+0x110>
 80081f2:	eba0 0308 	sub.w	r3, r0, r8
 80081f6:	fa09 f303 	lsl.w	r3, r9, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	46a2      	mov	sl, r4
 8008200:	e7d2      	b.n	80081a8 <_svfiprintf_r+0x9c>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	1d19      	adds	r1, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9103      	str	r1, [sp, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	bfbb      	ittet	lt
 800820e:	425b      	neglt	r3, r3
 8008210:	f042 0202 	orrlt.w	r2, r2, #2
 8008214:	9307      	strge	r3, [sp, #28]
 8008216:	9307      	strlt	r3, [sp, #28]
 8008218:	bfb8      	it	lt
 800821a:	9204      	strlt	r2, [sp, #16]
 800821c:	7823      	ldrb	r3, [r4, #0]
 800821e:	2b2e      	cmp	r3, #46	; 0x2e
 8008220:	d10c      	bne.n	800823c <_svfiprintf_r+0x130>
 8008222:	7863      	ldrb	r3, [r4, #1]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d135      	bne.n	8008294 <_svfiprintf_r+0x188>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	1d1a      	adds	r2, r3, #4
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	9203      	str	r2, [sp, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	bfb8      	it	lt
 8008234:	f04f 33ff 	movlt.w	r3, #4294967295
 8008238:	3402      	adds	r4, #2
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008308 <_svfiprintf_r+0x1fc>
 8008240:	7821      	ldrb	r1, [r4, #0]
 8008242:	2203      	movs	r2, #3
 8008244:	4650      	mov	r0, sl
 8008246:	f7f7 ffcb 	bl	80001e0 <memchr>
 800824a:	b140      	cbz	r0, 800825e <_svfiprintf_r+0x152>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	eba0 000a 	sub.w	r0, r0, sl
 8008252:	fa03 f000 	lsl.w	r0, r3, r0
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	4303      	orrs	r3, r0
 800825a:	3401      	adds	r4, #1
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	4826      	ldr	r0, [pc, #152]	; (80082fc <_svfiprintf_r+0x1f0>)
 8008264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008268:	2206      	movs	r2, #6
 800826a:	f7f7 ffb9 	bl	80001e0 <memchr>
 800826e:	2800      	cmp	r0, #0
 8008270:	d038      	beq.n	80082e4 <_svfiprintf_r+0x1d8>
 8008272:	4b23      	ldr	r3, [pc, #140]	; (8008300 <_svfiprintf_r+0x1f4>)
 8008274:	bb1b      	cbnz	r3, 80082be <_svfiprintf_r+0x1b2>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	3307      	adds	r3, #7
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	3308      	adds	r3, #8
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	4433      	add	r3, r6
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	e767      	b.n	800815a <_svfiprintf_r+0x4e>
 800828a:	fb0c 3202 	mla	r2, ip, r2, r3
 800828e:	460c      	mov	r4, r1
 8008290:	2001      	movs	r0, #1
 8008292:	e7a5      	b.n	80081e0 <_svfiprintf_r+0xd4>
 8008294:	2300      	movs	r3, #0
 8008296:	3401      	adds	r4, #1
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	4619      	mov	r1, r3
 800829c:	f04f 0c0a 	mov.w	ip, #10
 80082a0:	4620      	mov	r0, r4
 80082a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a6:	3a30      	subs	r2, #48	; 0x30
 80082a8:	2a09      	cmp	r2, #9
 80082aa:	d903      	bls.n	80082b4 <_svfiprintf_r+0x1a8>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0c5      	beq.n	800823c <_svfiprintf_r+0x130>
 80082b0:	9105      	str	r1, [sp, #20]
 80082b2:	e7c3      	b.n	800823c <_svfiprintf_r+0x130>
 80082b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b8:	4604      	mov	r4, r0
 80082ba:	2301      	movs	r3, #1
 80082bc:	e7f0      	b.n	80082a0 <_svfiprintf_r+0x194>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <_svfiprintf_r+0x1f8>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7fe f80d 	bl	80062e8 <_printf_float>
 80082ce:	1c42      	adds	r2, r0, #1
 80082d0:	4606      	mov	r6, r0
 80082d2:	d1d6      	bne.n	8008282 <_svfiprintf_r+0x176>
 80082d4:	89ab      	ldrh	r3, [r5, #12]
 80082d6:	065b      	lsls	r3, r3, #25
 80082d8:	f53f af2c 	bmi.w	8008134 <_svfiprintf_r+0x28>
 80082dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082de:	b01d      	add	sp, #116	; 0x74
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	ab03      	add	r3, sp, #12
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	462a      	mov	r2, r5
 80082ea:	4b06      	ldr	r3, [pc, #24]	; (8008304 <_svfiprintf_r+0x1f8>)
 80082ec:	a904      	add	r1, sp, #16
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7fe fa9e 	bl	8006830 <_printf_i>
 80082f4:	e7eb      	b.n	80082ce <_svfiprintf_r+0x1c2>
 80082f6:	bf00      	nop
 80082f8:	080091b4 	.word	0x080091b4
 80082fc:	080091be 	.word	0x080091be
 8008300:	080062e9 	.word	0x080062e9
 8008304:	08008055 	.word	0x08008055
 8008308:	080091ba 	.word	0x080091ba

0800830c <_sbrk_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	; (8008328 <_sbrk_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f9 fbe6 	bl	8001ae8 <_sbrk>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_sbrk_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_sbrk_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	200003b4 	.word	0x200003b4

0800832c <__assert_func>:
 800832c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800832e:	4614      	mov	r4, r2
 8008330:	461a      	mov	r2, r3
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <__assert_func+0x2c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4605      	mov	r5, r0
 8008338:	68d8      	ldr	r0, [r3, #12]
 800833a:	b14c      	cbz	r4, 8008350 <__assert_func+0x24>
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <__assert_func+0x30>)
 800833e:	9100      	str	r1, [sp, #0]
 8008340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008344:	4906      	ldr	r1, [pc, #24]	; (8008360 <__assert_func+0x34>)
 8008346:	462b      	mov	r3, r5
 8008348:	f000 f80e 	bl	8008368 <fiprintf>
 800834c:	f000 faa4 	bl	8008898 <abort>
 8008350:	4b04      	ldr	r3, [pc, #16]	; (8008364 <__assert_func+0x38>)
 8008352:	461c      	mov	r4, r3
 8008354:	e7f3      	b.n	800833e <__assert_func+0x12>
 8008356:	bf00      	nop
 8008358:	2000000c 	.word	0x2000000c
 800835c:	080091c5 	.word	0x080091c5
 8008360:	080091d2 	.word	0x080091d2
 8008364:	08009200 	.word	0x08009200

08008368 <fiprintf>:
 8008368:	b40e      	push	{r1, r2, r3}
 800836a:	b503      	push	{r0, r1, lr}
 800836c:	4601      	mov	r1, r0
 800836e:	ab03      	add	r3, sp, #12
 8008370:	4805      	ldr	r0, [pc, #20]	; (8008388 <fiprintf+0x20>)
 8008372:	f853 2b04 	ldr.w	r2, [r3], #4
 8008376:	6800      	ldr	r0, [r0, #0]
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	f000 f88f 	bl	800849c <_vfiprintf_r>
 800837e:	b002      	add	sp, #8
 8008380:	f85d eb04 	ldr.w	lr, [sp], #4
 8008384:	b003      	add	sp, #12
 8008386:	4770      	bx	lr
 8008388:	2000000c 	.word	0x2000000c

0800838c <__ascii_mbtowc>:
 800838c:	b082      	sub	sp, #8
 800838e:	b901      	cbnz	r1, 8008392 <__ascii_mbtowc+0x6>
 8008390:	a901      	add	r1, sp, #4
 8008392:	b142      	cbz	r2, 80083a6 <__ascii_mbtowc+0x1a>
 8008394:	b14b      	cbz	r3, 80083aa <__ascii_mbtowc+0x1e>
 8008396:	7813      	ldrb	r3, [r2, #0]
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	1e10      	subs	r0, r2, #0
 800839e:	bf18      	it	ne
 80083a0:	2001      	movne	r0, #1
 80083a2:	b002      	add	sp, #8
 80083a4:	4770      	bx	lr
 80083a6:	4610      	mov	r0, r2
 80083a8:	e7fb      	b.n	80083a2 <__ascii_mbtowc+0x16>
 80083aa:	f06f 0001 	mvn.w	r0, #1
 80083ae:	e7f8      	b.n	80083a2 <__ascii_mbtowc+0x16>

080083b0 <memmove>:
 80083b0:	4288      	cmp	r0, r1
 80083b2:	b510      	push	{r4, lr}
 80083b4:	eb01 0402 	add.w	r4, r1, r2
 80083b8:	d902      	bls.n	80083c0 <memmove+0x10>
 80083ba:	4284      	cmp	r4, r0
 80083bc:	4623      	mov	r3, r4
 80083be:	d807      	bhi.n	80083d0 <memmove+0x20>
 80083c0:	1e43      	subs	r3, r0, #1
 80083c2:	42a1      	cmp	r1, r4
 80083c4:	d008      	beq.n	80083d8 <memmove+0x28>
 80083c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ce:	e7f8      	b.n	80083c2 <memmove+0x12>
 80083d0:	4402      	add	r2, r0
 80083d2:	4601      	mov	r1, r0
 80083d4:	428a      	cmp	r2, r1
 80083d6:	d100      	bne.n	80083da <memmove+0x2a>
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083e2:	e7f7      	b.n	80083d4 <memmove+0x24>

080083e4 <__malloc_lock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_lock+0x8>)
 80083e6:	f000 bc17 	b.w	8008c18 <__retarget_lock_acquire_recursive>
 80083ea:	bf00      	nop
 80083ec:	200003bc 	.word	0x200003bc

080083f0 <__malloc_unlock>:
 80083f0:	4801      	ldr	r0, [pc, #4]	; (80083f8 <__malloc_unlock+0x8>)
 80083f2:	f000 bc12 	b.w	8008c1a <__retarget_lock_release_recursive>
 80083f6:	bf00      	nop
 80083f8:	200003bc 	.word	0x200003bc

080083fc <_realloc_r>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	4607      	mov	r7, r0
 8008400:	4614      	mov	r4, r2
 8008402:	460e      	mov	r6, r1
 8008404:	b921      	cbnz	r1, 8008410 <_realloc_r+0x14>
 8008406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800840a:	4611      	mov	r1, r2
 800840c:	f7ff bdc8 	b.w	8007fa0 <_malloc_r>
 8008410:	b922      	cbnz	r2, 800841c <_realloc_r+0x20>
 8008412:	f7ff fd75 	bl	8007f00 <_free_r>
 8008416:	4625      	mov	r5, r4
 8008418:	4628      	mov	r0, r5
 800841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800841c:	f000 fc62 	bl	8008ce4 <_malloc_usable_size_r>
 8008420:	42a0      	cmp	r0, r4
 8008422:	d20f      	bcs.n	8008444 <_realloc_r+0x48>
 8008424:	4621      	mov	r1, r4
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff fdba 	bl	8007fa0 <_malloc_r>
 800842c:	4605      	mov	r5, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d0f2      	beq.n	8008418 <_realloc_r+0x1c>
 8008432:	4631      	mov	r1, r6
 8008434:	4622      	mov	r2, r4
 8008436:	f7ff f9c7 	bl	80077c8 <memcpy>
 800843a:	4631      	mov	r1, r6
 800843c:	4638      	mov	r0, r7
 800843e:	f7ff fd5f 	bl	8007f00 <_free_r>
 8008442:	e7e9      	b.n	8008418 <_realloc_r+0x1c>
 8008444:	4635      	mov	r5, r6
 8008446:	e7e7      	b.n	8008418 <_realloc_r+0x1c>

08008448 <__sfputc_r>:
 8008448:	6893      	ldr	r3, [r2, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	b410      	push	{r4}
 8008450:	6093      	str	r3, [r2, #8]
 8008452:	da08      	bge.n	8008466 <__sfputc_r+0x1e>
 8008454:	6994      	ldr	r4, [r2, #24]
 8008456:	42a3      	cmp	r3, r4
 8008458:	db01      	blt.n	800845e <__sfputc_r+0x16>
 800845a:	290a      	cmp	r1, #10
 800845c:	d103      	bne.n	8008466 <__sfputc_r+0x1e>
 800845e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008462:	f000 b94b 	b.w	80086fc <__swbuf_r>
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	1c58      	adds	r0, r3, #1
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	7019      	strb	r1, [r3, #0]
 800846e:	4608      	mov	r0, r1
 8008470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008474:	4770      	bx	lr

08008476 <__sfputs_r>:
 8008476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	4614      	mov	r4, r2
 800847e:	18d5      	adds	r5, r2, r3
 8008480:	42ac      	cmp	r4, r5
 8008482:	d101      	bne.n	8008488 <__sfputs_r+0x12>
 8008484:	2000      	movs	r0, #0
 8008486:	e007      	b.n	8008498 <__sfputs_r+0x22>
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	463a      	mov	r2, r7
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffda 	bl	8008448 <__sfputc_r>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d1f3      	bne.n	8008480 <__sfputs_r+0xa>
 8008498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800849c <_vfiprintf_r>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	460d      	mov	r5, r1
 80084a2:	b09d      	sub	sp, #116	; 0x74
 80084a4:	4614      	mov	r4, r2
 80084a6:	4698      	mov	r8, r3
 80084a8:	4606      	mov	r6, r0
 80084aa:	b118      	cbz	r0, 80084b4 <_vfiprintf_r+0x18>
 80084ac:	6983      	ldr	r3, [r0, #24]
 80084ae:	b90b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x18>
 80084b0:	f000 fb14 	bl	8008adc <__sinit>
 80084b4:	4b89      	ldr	r3, [pc, #548]	; (80086dc <_vfiprintf_r+0x240>)
 80084b6:	429d      	cmp	r5, r3
 80084b8:	d11b      	bne.n	80084f2 <_vfiprintf_r+0x56>
 80084ba:	6875      	ldr	r5, [r6, #4]
 80084bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084be:	07d9      	lsls	r1, r3, #31
 80084c0:	d405      	bmi.n	80084ce <_vfiprintf_r+0x32>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	059a      	lsls	r2, r3, #22
 80084c6:	d402      	bmi.n	80084ce <_vfiprintf_r+0x32>
 80084c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ca:	f000 fba5 	bl	8008c18 <__retarget_lock_acquire_recursive>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	071b      	lsls	r3, r3, #28
 80084d2:	d501      	bpl.n	80084d8 <_vfiprintf_r+0x3c>
 80084d4:	692b      	ldr	r3, [r5, #16]
 80084d6:	b9eb      	cbnz	r3, 8008514 <_vfiprintf_r+0x78>
 80084d8:	4629      	mov	r1, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 f96e 	bl	80087bc <__swsetup_r>
 80084e0:	b1c0      	cbz	r0, 8008514 <_vfiprintf_r+0x78>
 80084e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084e4:	07dc      	lsls	r4, r3, #31
 80084e6:	d50e      	bpl.n	8008506 <_vfiprintf_r+0x6a>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b01d      	add	sp, #116	; 0x74
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	4b7b      	ldr	r3, [pc, #492]	; (80086e0 <_vfiprintf_r+0x244>)
 80084f4:	429d      	cmp	r5, r3
 80084f6:	d101      	bne.n	80084fc <_vfiprintf_r+0x60>
 80084f8:	68b5      	ldr	r5, [r6, #8]
 80084fa:	e7df      	b.n	80084bc <_vfiprintf_r+0x20>
 80084fc:	4b79      	ldr	r3, [pc, #484]	; (80086e4 <_vfiprintf_r+0x248>)
 80084fe:	429d      	cmp	r5, r3
 8008500:	bf08      	it	eq
 8008502:	68f5      	ldreq	r5, [r6, #12]
 8008504:	e7da      	b.n	80084bc <_vfiprintf_r+0x20>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	0598      	lsls	r0, r3, #22
 800850a:	d4ed      	bmi.n	80084e8 <_vfiprintf_r+0x4c>
 800850c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850e:	f000 fb84 	bl	8008c1a <__retarget_lock_release_recursive>
 8008512:	e7e9      	b.n	80084e8 <_vfiprintf_r+0x4c>
 8008514:	2300      	movs	r3, #0
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	2320      	movs	r3, #32
 800851a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008522:	2330      	movs	r3, #48	; 0x30
 8008524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086e8 <_vfiprintf_r+0x24c>
 8008528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852c:	f04f 0901 	mov.w	r9, #1
 8008530:	4623      	mov	r3, r4
 8008532:	469a      	mov	sl, r3
 8008534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008538:	b10a      	cbz	r2, 800853e <_vfiprintf_r+0xa2>
 800853a:	2a25      	cmp	r2, #37	; 0x25
 800853c:	d1f9      	bne.n	8008532 <_vfiprintf_r+0x96>
 800853e:	ebba 0b04 	subs.w	fp, sl, r4
 8008542:	d00b      	beq.n	800855c <_vfiprintf_r+0xc0>
 8008544:	465b      	mov	r3, fp
 8008546:	4622      	mov	r2, r4
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff93 	bl	8008476 <__sfputs_r>
 8008550:	3001      	adds	r0, #1
 8008552:	f000 80aa 	beq.w	80086aa <_vfiprintf_r+0x20e>
 8008556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008558:	445a      	add	r2, fp
 800855a:	9209      	str	r2, [sp, #36]	; 0x24
 800855c:	f89a 3000 	ldrb.w	r3, [sl]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 80a2 	beq.w	80086aa <_vfiprintf_r+0x20e>
 8008566:	2300      	movs	r3, #0
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008570:	f10a 0a01 	add.w	sl, sl, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	9307      	str	r3, [sp, #28]
 8008578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857c:	931a      	str	r3, [sp, #104]	; 0x68
 800857e:	4654      	mov	r4, sl
 8008580:	2205      	movs	r2, #5
 8008582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008586:	4858      	ldr	r0, [pc, #352]	; (80086e8 <_vfiprintf_r+0x24c>)
 8008588:	f7f7 fe2a 	bl	80001e0 <memchr>
 800858c:	9a04      	ldr	r2, [sp, #16]
 800858e:	b9d8      	cbnz	r0, 80085c8 <_vfiprintf_r+0x12c>
 8008590:	06d1      	lsls	r1, r2, #27
 8008592:	bf44      	itt	mi
 8008594:	2320      	movmi	r3, #32
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859a:	0713      	lsls	r3, r2, #28
 800859c:	bf44      	itt	mi
 800859e:	232b      	movmi	r3, #43	; 0x2b
 80085a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a4:	f89a 3000 	ldrb.w	r3, [sl]
 80085a8:	2b2a      	cmp	r3, #42	; 0x2a
 80085aa:	d015      	beq.n	80085d8 <_vfiprintf_r+0x13c>
 80085ac:	9a07      	ldr	r2, [sp, #28]
 80085ae:	4654      	mov	r4, sl
 80085b0:	2000      	movs	r0, #0
 80085b2:	f04f 0c0a 	mov.w	ip, #10
 80085b6:	4621      	mov	r1, r4
 80085b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085bc:	3b30      	subs	r3, #48	; 0x30
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d94e      	bls.n	8008660 <_vfiprintf_r+0x1c4>
 80085c2:	b1b0      	cbz	r0, 80085f2 <_vfiprintf_r+0x156>
 80085c4:	9207      	str	r2, [sp, #28]
 80085c6:	e014      	b.n	80085f2 <_vfiprintf_r+0x156>
 80085c8:	eba0 0308 	sub.w	r3, r0, r8
 80085cc:	fa09 f303 	lsl.w	r3, r9, r3
 80085d0:	4313      	orrs	r3, r2
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	46a2      	mov	sl, r4
 80085d6:	e7d2      	b.n	800857e <_vfiprintf_r+0xe2>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	1d19      	adds	r1, r3, #4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	9103      	str	r1, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbb      	ittet	lt
 80085e4:	425b      	neglt	r3, r3
 80085e6:	f042 0202 	orrlt.w	r2, r2, #2
 80085ea:	9307      	strge	r3, [sp, #28]
 80085ec:	9307      	strlt	r3, [sp, #28]
 80085ee:	bfb8      	it	lt
 80085f0:	9204      	strlt	r2, [sp, #16]
 80085f2:	7823      	ldrb	r3, [r4, #0]
 80085f4:	2b2e      	cmp	r3, #46	; 0x2e
 80085f6:	d10c      	bne.n	8008612 <_vfiprintf_r+0x176>
 80085f8:	7863      	ldrb	r3, [r4, #1]
 80085fa:	2b2a      	cmp	r3, #42	; 0x2a
 80085fc:	d135      	bne.n	800866a <_vfiprintf_r+0x1ce>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9203      	str	r2, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfb8      	it	lt
 800860a:	f04f 33ff 	movlt.w	r3, #4294967295
 800860e:	3402      	adds	r4, #2
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086f8 <_vfiprintf_r+0x25c>
 8008616:	7821      	ldrb	r1, [r4, #0]
 8008618:	2203      	movs	r2, #3
 800861a:	4650      	mov	r0, sl
 800861c:	f7f7 fde0 	bl	80001e0 <memchr>
 8008620:	b140      	cbz	r0, 8008634 <_vfiprintf_r+0x198>
 8008622:	2340      	movs	r3, #64	; 0x40
 8008624:	eba0 000a 	sub.w	r0, r0, sl
 8008628:	fa03 f000 	lsl.w	r0, r3, r0
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	4303      	orrs	r3, r0
 8008630:	3401      	adds	r4, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008638:	482c      	ldr	r0, [pc, #176]	; (80086ec <_vfiprintf_r+0x250>)
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863e:	2206      	movs	r2, #6
 8008640:	f7f7 fdce 	bl	80001e0 <memchr>
 8008644:	2800      	cmp	r0, #0
 8008646:	d03f      	beq.n	80086c8 <_vfiprintf_r+0x22c>
 8008648:	4b29      	ldr	r3, [pc, #164]	; (80086f0 <_vfiprintf_r+0x254>)
 800864a:	bb1b      	cbnz	r3, 8008694 <_vfiprintf_r+0x1f8>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	3308      	adds	r3, #8
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	443b      	add	r3, r7
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	e767      	b.n	8008530 <_vfiprintf_r+0x94>
 8008660:	fb0c 3202 	mla	r2, ip, r2, r3
 8008664:	460c      	mov	r4, r1
 8008666:	2001      	movs	r0, #1
 8008668:	e7a5      	b.n	80085b6 <_vfiprintf_r+0x11a>
 800866a:	2300      	movs	r3, #0
 800866c:	3401      	adds	r4, #1
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	4619      	mov	r1, r3
 8008672:	f04f 0c0a 	mov.w	ip, #10
 8008676:	4620      	mov	r0, r4
 8008678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867c:	3a30      	subs	r2, #48	; 0x30
 800867e:	2a09      	cmp	r2, #9
 8008680:	d903      	bls.n	800868a <_vfiprintf_r+0x1ee>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0c5      	beq.n	8008612 <_vfiprintf_r+0x176>
 8008686:	9105      	str	r1, [sp, #20]
 8008688:	e7c3      	b.n	8008612 <_vfiprintf_r+0x176>
 800868a:	fb0c 2101 	mla	r1, ip, r1, r2
 800868e:	4604      	mov	r4, r0
 8008690:	2301      	movs	r3, #1
 8008692:	e7f0      	b.n	8008676 <_vfiprintf_r+0x1da>
 8008694:	ab03      	add	r3, sp, #12
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	462a      	mov	r2, r5
 800869a:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <_vfiprintf_r+0x258>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	4630      	mov	r0, r6
 80086a0:	f7fd fe22 	bl	80062e8 <_printf_float>
 80086a4:	4607      	mov	r7, r0
 80086a6:	1c78      	adds	r0, r7, #1
 80086a8:	d1d6      	bne.n	8008658 <_vfiprintf_r+0x1bc>
 80086aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ac:	07d9      	lsls	r1, r3, #31
 80086ae:	d405      	bmi.n	80086bc <_vfiprintf_r+0x220>
 80086b0:	89ab      	ldrh	r3, [r5, #12]
 80086b2:	059a      	lsls	r2, r3, #22
 80086b4:	d402      	bmi.n	80086bc <_vfiprintf_r+0x220>
 80086b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b8:	f000 faaf 	bl	8008c1a <__retarget_lock_release_recursive>
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	065b      	lsls	r3, r3, #25
 80086c0:	f53f af12 	bmi.w	80084e8 <_vfiprintf_r+0x4c>
 80086c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c6:	e711      	b.n	80084ec <_vfiprintf_r+0x50>
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <_vfiprintf_r+0x258>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7fe f8ac 	bl	8006830 <_printf_i>
 80086d8:	e7e4      	b.n	80086a4 <_vfiprintf_r+0x208>
 80086da:	bf00      	nop
 80086dc:	0800932c 	.word	0x0800932c
 80086e0:	0800934c 	.word	0x0800934c
 80086e4:	0800930c 	.word	0x0800930c
 80086e8:	080091b4 	.word	0x080091b4
 80086ec:	080091be 	.word	0x080091be
 80086f0:	080062e9 	.word	0x080062e9
 80086f4:	08008477 	.word	0x08008477
 80086f8:	080091ba 	.word	0x080091ba

080086fc <__swbuf_r>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	460e      	mov	r6, r1
 8008700:	4614      	mov	r4, r2
 8008702:	4605      	mov	r5, r0
 8008704:	b118      	cbz	r0, 800870e <__swbuf_r+0x12>
 8008706:	6983      	ldr	r3, [r0, #24]
 8008708:	b90b      	cbnz	r3, 800870e <__swbuf_r+0x12>
 800870a:	f000 f9e7 	bl	8008adc <__sinit>
 800870e:	4b21      	ldr	r3, [pc, #132]	; (8008794 <__swbuf_r+0x98>)
 8008710:	429c      	cmp	r4, r3
 8008712:	d12b      	bne.n	800876c <__swbuf_r+0x70>
 8008714:	686c      	ldr	r4, [r5, #4]
 8008716:	69a3      	ldr	r3, [r4, #24]
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	071a      	lsls	r2, r3, #28
 800871e:	d52f      	bpl.n	8008780 <__swbuf_r+0x84>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	b36b      	cbz	r3, 8008780 <__swbuf_r+0x84>
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	6820      	ldr	r0, [r4, #0]
 8008728:	1ac0      	subs	r0, r0, r3
 800872a:	6963      	ldr	r3, [r4, #20]
 800872c:	b2f6      	uxtb	r6, r6
 800872e:	4283      	cmp	r3, r0
 8008730:	4637      	mov	r7, r6
 8008732:	dc04      	bgt.n	800873e <__swbuf_r+0x42>
 8008734:	4621      	mov	r1, r4
 8008736:	4628      	mov	r0, r5
 8008738:	f000 f93c 	bl	80089b4 <_fflush_r>
 800873c:	bb30      	cbnz	r0, 800878c <__swbuf_r+0x90>
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	3b01      	subs	r3, #1
 8008742:	60a3      	str	r3, [r4, #8]
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	6022      	str	r2, [r4, #0]
 800874a:	701e      	strb	r6, [r3, #0]
 800874c:	6963      	ldr	r3, [r4, #20]
 800874e:	3001      	adds	r0, #1
 8008750:	4283      	cmp	r3, r0
 8008752:	d004      	beq.n	800875e <__swbuf_r+0x62>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	07db      	lsls	r3, r3, #31
 8008758:	d506      	bpl.n	8008768 <__swbuf_r+0x6c>
 800875a:	2e0a      	cmp	r6, #10
 800875c:	d104      	bne.n	8008768 <__swbuf_r+0x6c>
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f927 	bl	80089b4 <_fflush_r>
 8008766:	b988      	cbnz	r0, 800878c <__swbuf_r+0x90>
 8008768:	4638      	mov	r0, r7
 800876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <__swbuf_r+0x9c>)
 800876e:	429c      	cmp	r4, r3
 8008770:	d101      	bne.n	8008776 <__swbuf_r+0x7a>
 8008772:	68ac      	ldr	r4, [r5, #8]
 8008774:	e7cf      	b.n	8008716 <__swbuf_r+0x1a>
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <__swbuf_r+0xa0>)
 8008778:	429c      	cmp	r4, r3
 800877a:	bf08      	it	eq
 800877c:	68ec      	ldreq	r4, [r5, #12]
 800877e:	e7ca      	b.n	8008716 <__swbuf_r+0x1a>
 8008780:	4621      	mov	r1, r4
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f81a 	bl	80087bc <__swsetup_r>
 8008788:	2800      	cmp	r0, #0
 800878a:	d0cb      	beq.n	8008724 <__swbuf_r+0x28>
 800878c:	f04f 37ff 	mov.w	r7, #4294967295
 8008790:	e7ea      	b.n	8008768 <__swbuf_r+0x6c>
 8008792:	bf00      	nop
 8008794:	0800932c 	.word	0x0800932c
 8008798:	0800934c 	.word	0x0800934c
 800879c:	0800930c 	.word	0x0800930c

080087a0 <__ascii_wctomb>:
 80087a0:	b149      	cbz	r1, 80087b6 <__ascii_wctomb+0x16>
 80087a2:	2aff      	cmp	r2, #255	; 0xff
 80087a4:	bf85      	ittet	hi
 80087a6:	238a      	movhi	r3, #138	; 0x8a
 80087a8:	6003      	strhi	r3, [r0, #0]
 80087aa:	700a      	strbls	r2, [r1, #0]
 80087ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80087b0:	bf98      	it	ls
 80087b2:	2001      	movls	r0, #1
 80087b4:	4770      	bx	lr
 80087b6:	4608      	mov	r0, r1
 80087b8:	4770      	bx	lr
	...

080087bc <__swsetup_r>:
 80087bc:	4b32      	ldr	r3, [pc, #200]	; (8008888 <__swsetup_r+0xcc>)
 80087be:	b570      	push	{r4, r5, r6, lr}
 80087c0:	681d      	ldr	r5, [r3, #0]
 80087c2:	4606      	mov	r6, r0
 80087c4:	460c      	mov	r4, r1
 80087c6:	b125      	cbz	r5, 80087d2 <__swsetup_r+0x16>
 80087c8:	69ab      	ldr	r3, [r5, #24]
 80087ca:	b913      	cbnz	r3, 80087d2 <__swsetup_r+0x16>
 80087cc:	4628      	mov	r0, r5
 80087ce:	f000 f985 	bl	8008adc <__sinit>
 80087d2:	4b2e      	ldr	r3, [pc, #184]	; (800888c <__swsetup_r+0xd0>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d10f      	bne.n	80087f8 <__swsetup_r+0x3c>
 80087d8:	686c      	ldr	r4, [r5, #4]
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087e0:	0719      	lsls	r1, r3, #28
 80087e2:	d42c      	bmi.n	800883e <__swsetup_r+0x82>
 80087e4:	06dd      	lsls	r5, r3, #27
 80087e6:	d411      	bmi.n	800880c <__swsetup_r+0x50>
 80087e8:	2309      	movs	r3, #9
 80087ea:	6033      	str	r3, [r6, #0]
 80087ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e03e      	b.n	8008876 <__swsetup_r+0xba>
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <__swsetup_r+0xd4>)
 80087fa:	429c      	cmp	r4, r3
 80087fc:	d101      	bne.n	8008802 <__swsetup_r+0x46>
 80087fe:	68ac      	ldr	r4, [r5, #8]
 8008800:	e7eb      	b.n	80087da <__swsetup_r+0x1e>
 8008802:	4b24      	ldr	r3, [pc, #144]	; (8008894 <__swsetup_r+0xd8>)
 8008804:	429c      	cmp	r4, r3
 8008806:	bf08      	it	eq
 8008808:	68ec      	ldreq	r4, [r5, #12]
 800880a:	e7e6      	b.n	80087da <__swsetup_r+0x1e>
 800880c:	0758      	lsls	r0, r3, #29
 800880e:	d512      	bpl.n	8008836 <__swsetup_r+0x7a>
 8008810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008812:	b141      	cbz	r1, 8008826 <__swsetup_r+0x6a>
 8008814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008818:	4299      	cmp	r1, r3
 800881a:	d002      	beq.n	8008822 <__swsetup_r+0x66>
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff fb6f 	bl	8007f00 <_free_r>
 8008822:	2300      	movs	r3, #0
 8008824:	6363      	str	r3, [r4, #52]	; 0x34
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	2300      	movs	r3, #0
 8008830:	6063      	str	r3, [r4, #4]
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f043 0308 	orr.w	r3, r3, #8
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	b94b      	cbnz	r3, 8008856 <__swsetup_r+0x9a>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884c:	d003      	beq.n	8008856 <__swsetup_r+0x9a>
 800884e:	4621      	mov	r1, r4
 8008850:	4630      	mov	r0, r6
 8008852:	f000 fa07 	bl	8008c64 <__smakebuf_r>
 8008856:	89a0      	ldrh	r0, [r4, #12]
 8008858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800885c:	f010 0301 	ands.w	r3, r0, #1
 8008860:	d00a      	beq.n	8008878 <__swsetup_r+0xbc>
 8008862:	2300      	movs	r3, #0
 8008864:	60a3      	str	r3, [r4, #8]
 8008866:	6963      	ldr	r3, [r4, #20]
 8008868:	425b      	negs	r3, r3
 800886a:	61a3      	str	r3, [r4, #24]
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	b943      	cbnz	r3, 8008882 <__swsetup_r+0xc6>
 8008870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008874:	d1ba      	bne.n	80087ec <__swsetup_r+0x30>
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	0781      	lsls	r1, r0, #30
 800887a:	bf58      	it	pl
 800887c:	6963      	ldrpl	r3, [r4, #20]
 800887e:	60a3      	str	r3, [r4, #8]
 8008880:	e7f4      	b.n	800886c <__swsetup_r+0xb0>
 8008882:	2000      	movs	r0, #0
 8008884:	e7f7      	b.n	8008876 <__swsetup_r+0xba>
 8008886:	bf00      	nop
 8008888:	2000000c 	.word	0x2000000c
 800888c:	0800932c 	.word	0x0800932c
 8008890:	0800934c 	.word	0x0800934c
 8008894:	0800930c 	.word	0x0800930c

08008898 <abort>:
 8008898:	b508      	push	{r3, lr}
 800889a:	2006      	movs	r0, #6
 800889c:	f000 fa52 	bl	8008d44 <raise>
 80088a0:	2001      	movs	r0, #1
 80088a2:	f7f9 f8a9 	bl	80019f8 <_exit>
	...

080088a8 <__sflush_r>:
 80088a8:	898a      	ldrh	r2, [r1, #12]
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	4605      	mov	r5, r0
 80088b0:	0710      	lsls	r0, r2, #28
 80088b2:	460c      	mov	r4, r1
 80088b4:	d458      	bmi.n	8008968 <__sflush_r+0xc0>
 80088b6:	684b      	ldr	r3, [r1, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc05      	bgt.n	80088c8 <__sflush_r+0x20>
 80088bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc02      	bgt.n	80088c8 <__sflush_r+0x20>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d0f9      	beq.n	80088c2 <__sflush_r+0x1a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d4:	682f      	ldr	r7, [r5, #0]
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	d032      	beq.n	8008940 <__sflush_r+0x98>
 80088da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	075a      	lsls	r2, r3, #29
 80088e0:	d505      	bpl.n	80088ee <__sflush_r+0x46>
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e8:	b10b      	cbz	r3, 80088ee <__sflush_r+0x46>
 80088ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	2300      	movs	r3, #0
 80088f0:	4602      	mov	r2, r0
 80088f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b0      	blx	r6
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	d106      	bne.n	800890e <__sflush_r+0x66>
 8008900:	6829      	ldr	r1, [r5, #0]
 8008902:	291d      	cmp	r1, #29
 8008904:	d82c      	bhi.n	8008960 <__sflush_r+0xb8>
 8008906:	4a2a      	ldr	r2, [pc, #168]	; (80089b0 <__sflush_r+0x108>)
 8008908:	40ca      	lsrs	r2, r1
 800890a:	07d6      	lsls	r6, r2, #31
 800890c:	d528      	bpl.n	8008960 <__sflush_r+0xb8>
 800890e:	2200      	movs	r2, #0
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	04d9      	lsls	r1, r3, #19
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	d504      	bpl.n	8008924 <__sflush_r+0x7c>
 800891a:	1c42      	adds	r2, r0, #1
 800891c:	d101      	bne.n	8008922 <__sflush_r+0x7a>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	b903      	cbnz	r3, 8008924 <__sflush_r+0x7c>
 8008922:	6560      	str	r0, [r4, #84]	; 0x54
 8008924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	2900      	cmp	r1, #0
 800892a:	d0ca      	beq.n	80088c2 <__sflush_r+0x1a>
 800892c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008930:	4299      	cmp	r1, r3
 8008932:	d002      	beq.n	800893a <__sflush_r+0x92>
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff fae3 	bl	8007f00 <_free_r>
 800893a:	2000      	movs	r0, #0
 800893c:	6360      	str	r0, [r4, #52]	; 0x34
 800893e:	e7c1      	b.n	80088c4 <__sflush_r+0x1c>
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	2301      	movs	r3, #1
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	1c41      	adds	r1, r0, #1
 800894a:	d1c7      	bne.n	80088dc <__sflush_r+0x34>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c4      	beq.n	80088dc <__sflush_r+0x34>
 8008952:	2b1d      	cmp	r3, #29
 8008954:	d001      	beq.n	800895a <__sflush_r+0xb2>
 8008956:	2b16      	cmp	r3, #22
 8008958:	d101      	bne.n	800895e <__sflush_r+0xb6>
 800895a:	602f      	str	r7, [r5, #0]
 800895c:	e7b1      	b.n	80088c2 <__sflush_r+0x1a>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	e7ad      	b.n	80088c4 <__sflush_r+0x1c>
 8008968:	690f      	ldr	r7, [r1, #16]
 800896a:	2f00      	cmp	r7, #0
 800896c:	d0a9      	beq.n	80088c2 <__sflush_r+0x1a>
 800896e:	0793      	lsls	r3, r2, #30
 8008970:	680e      	ldr	r6, [r1, #0]
 8008972:	bf08      	it	eq
 8008974:	694b      	ldreq	r3, [r1, #20]
 8008976:	600f      	str	r7, [r1, #0]
 8008978:	bf18      	it	ne
 800897a:	2300      	movne	r3, #0
 800897c:	eba6 0807 	sub.w	r8, r6, r7
 8008980:	608b      	str	r3, [r1, #8]
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd9c      	ble.n	80088c2 <__sflush_r+0x1a>
 8008988:	6a21      	ldr	r1, [r4, #32]
 800898a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800898c:	4643      	mov	r3, r8
 800898e:	463a      	mov	r2, r7
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	2800      	cmp	r0, #0
 8008996:	dc06      	bgt.n	80089a6 <__sflush_r+0xfe>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e78e      	b.n	80088c4 <__sflush_r+0x1c>
 80089a6:	4407      	add	r7, r0
 80089a8:	eba8 0800 	sub.w	r8, r8, r0
 80089ac:	e7e9      	b.n	8008982 <__sflush_r+0xda>
 80089ae:	bf00      	nop
 80089b0:	20400001 	.word	0x20400001

080089b4 <_fflush_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	690b      	ldr	r3, [r1, #16]
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b913      	cbnz	r3, 80089c4 <_fflush_r+0x10>
 80089be:	2500      	movs	r5, #0
 80089c0:	4628      	mov	r0, r5
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	b118      	cbz	r0, 80089ce <_fflush_r+0x1a>
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	b90b      	cbnz	r3, 80089ce <_fflush_r+0x1a>
 80089ca:	f000 f887 	bl	8008adc <__sinit>
 80089ce:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <_fflush_r+0x6c>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d11b      	bne.n	8008a0c <_fflush_r+0x58>
 80089d4:	686c      	ldr	r4, [r5, #4]
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0ef      	beq.n	80089be <_fflush_r+0xa>
 80089de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e0:	07d0      	lsls	r0, r2, #31
 80089e2:	d404      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 f915 	bl	8008c18 <__retarget_lock_acquire_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4621      	mov	r1, r4
 80089f2:	f7ff ff59 	bl	80088a8 <__sflush_r>
 80089f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f8:	07da      	lsls	r2, r3, #31
 80089fa:	4605      	mov	r5, r0
 80089fc:	d4e0      	bmi.n	80089c0 <_fflush_r+0xc>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4dd      	bmi.n	80089c0 <_fflush_r+0xc>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f000 f908 	bl	8008c1a <__retarget_lock_release_recursive>
 8008a0a:	e7d9      	b.n	80089c0 <_fflush_r+0xc>
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <_fflush_r+0x70>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	d101      	bne.n	8008a16 <_fflush_r+0x62>
 8008a12:	68ac      	ldr	r4, [r5, #8]
 8008a14:	e7df      	b.n	80089d6 <_fflush_r+0x22>
 8008a16:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <_fflush_r+0x74>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	bf08      	it	eq
 8008a1c:	68ec      	ldreq	r4, [r5, #12]
 8008a1e:	e7da      	b.n	80089d6 <_fflush_r+0x22>
 8008a20:	0800932c 	.word	0x0800932c
 8008a24:	0800934c 	.word	0x0800934c
 8008a28:	0800930c 	.word	0x0800930c

08008a2c <std>:
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	e9c0 3300 	strd	r3, r3, [r0]
 8008a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3a:	6083      	str	r3, [r0, #8]
 8008a3c:	8181      	strh	r1, [r0, #12]
 8008a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a40:	81c2      	strh	r2, [r0, #14]
 8008a42:	6183      	str	r3, [r0, #24]
 8008a44:	4619      	mov	r1, r3
 8008a46:	2208      	movs	r2, #8
 8008a48:	305c      	adds	r0, #92	; 0x5c
 8008a4a:	f7fd fba5 	bl	8006198 <memset>
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x38>)
 8008a50:	6263      	str	r3, [r4, #36]	; 0x24
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x3c>)
 8008a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x40>)
 8008a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <std+0x44>)
 8008a5c:	6224      	str	r4, [r4, #32]
 8008a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	bf00      	nop
 8008a64:	08008d7d 	.word	0x08008d7d
 8008a68:	08008d9f 	.word	0x08008d9f
 8008a6c:	08008dd7 	.word	0x08008dd7
 8008a70:	08008dfb 	.word	0x08008dfb

08008a74 <_cleanup_r>:
 8008a74:	4901      	ldr	r1, [pc, #4]	; (8008a7c <_cleanup_r+0x8>)
 8008a76:	f000 b8af 	b.w	8008bd8 <_fwalk_reent>
 8008a7a:	bf00      	nop
 8008a7c:	080089b5 	.word	0x080089b5

08008a80 <__sfmoreglue>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	1e4a      	subs	r2, r1, #1
 8008a84:	2568      	movs	r5, #104	; 0x68
 8008a86:	4355      	muls	r5, r2
 8008a88:	460e      	mov	r6, r1
 8008a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a8e:	f7ff fa87 	bl	8007fa0 <_malloc_r>
 8008a92:	4604      	mov	r4, r0
 8008a94:	b140      	cbz	r0, 8008aa8 <__sfmoreglue+0x28>
 8008a96:	2100      	movs	r1, #0
 8008a98:	e9c0 1600 	strd	r1, r6, [r0]
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	60a0      	str	r0, [r4, #8]
 8008aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa4:	f7fd fb78 	bl	8006198 <memset>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}

08008aac <__sfp_lock_acquire>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__sfp_lock_acquire+0x8>)
 8008aae:	f000 b8b3 	b.w	8008c18 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	200003c0 	.word	0x200003c0

08008ab8 <__sfp_lock_release>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <__sfp_lock_release+0x8>)
 8008aba:	f000 b8ae 	b.w	8008c1a <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	200003c0 	.word	0x200003c0

08008ac4 <__sinit_lock_acquire>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__sinit_lock_acquire+0x8>)
 8008ac6:	f000 b8a7 	b.w	8008c18 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	200003bb 	.word	0x200003bb

08008ad0 <__sinit_lock_release>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sinit_lock_release+0x8>)
 8008ad2:	f000 b8a2 	b.w	8008c1a <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	200003bb 	.word	0x200003bb

08008adc <__sinit>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	f7ff fff0 	bl	8008ac4 <__sinit_lock_acquire>
 8008ae4:	69a3      	ldr	r3, [r4, #24]
 8008ae6:	b11b      	cbz	r3, 8008af0 <__sinit+0x14>
 8008ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aec:	f7ff bff0 	b.w	8008ad0 <__sinit_lock_release>
 8008af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af4:	6523      	str	r3, [r4, #80]	; 0x50
 8008af6:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <__sinit+0x68>)
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <__sinit+0x6c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	bf04      	itt	eq
 8008b02:	2301      	moveq	r3, #1
 8008b04:	61a3      	streq	r3, [r4, #24]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f820 	bl	8008b4c <__sfp>
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f81c 	bl	8008b4c <__sfp>
 8008b14:	60a0      	str	r0, [r4, #8]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f818 	bl	8008b4c <__sfp>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60e0      	str	r0, [r4, #12]
 8008b20:	2104      	movs	r1, #4
 8008b22:	6860      	ldr	r0, [r4, #4]
 8008b24:	f7ff ff82 	bl	8008a2c <std>
 8008b28:	68a0      	ldr	r0, [r4, #8]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	2109      	movs	r1, #9
 8008b2e:	f7ff ff7d 	bl	8008a2c <std>
 8008b32:	68e0      	ldr	r0, [r4, #12]
 8008b34:	2202      	movs	r2, #2
 8008b36:	2112      	movs	r1, #18
 8008b38:	f7ff ff78 	bl	8008a2c <std>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	61a3      	str	r3, [r4, #24]
 8008b40:	e7d2      	b.n	8008ae8 <__sinit+0xc>
 8008b42:	bf00      	nop
 8008b44:	08008f88 	.word	0x08008f88
 8008b48:	08008a75 	.word	0x08008a75

08008b4c <__sfp>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f7ff ffac 	bl	8008aac <__sfp_lock_acquire>
 8008b54:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <__sfp+0x84>)
 8008b56:	681e      	ldr	r6, [r3, #0]
 8008b58:	69b3      	ldr	r3, [r6, #24]
 8008b5a:	b913      	cbnz	r3, 8008b62 <__sfp+0x16>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ffbd 	bl	8008adc <__sinit>
 8008b62:	3648      	adds	r6, #72	; 0x48
 8008b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	d503      	bpl.n	8008b74 <__sfp+0x28>
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	b30b      	cbz	r3, 8008bb4 <__sfp+0x68>
 8008b70:	6836      	ldr	r6, [r6, #0]
 8008b72:	e7f7      	b.n	8008b64 <__sfp+0x18>
 8008b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b78:	b9d5      	cbnz	r5, 8008bb0 <__sfp+0x64>
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <__sfp+0x88>)
 8008b7c:	60e3      	str	r3, [r4, #12]
 8008b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b82:	6665      	str	r5, [r4, #100]	; 0x64
 8008b84:	f000 f847 	bl	8008c16 <__retarget_lock_init_recursive>
 8008b88:	f7ff ff96 	bl	8008ab8 <__sfp_lock_release>
 8008b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b94:	6025      	str	r5, [r4, #0]
 8008b96:	61a5      	str	r5, [r4, #24]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba0:	f7fd fafa 	bl	8006198 <memset>
 8008ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bac:	4620      	mov	r0, r4
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	3468      	adds	r4, #104	; 0x68
 8008bb2:	e7d9      	b.n	8008b68 <__sfp+0x1c>
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f7ff ff62 	bl	8008a80 <__sfmoreglue>
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	6030      	str	r0, [r6, #0]
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1d5      	bne.n	8008b70 <__sfp+0x24>
 8008bc4:	f7ff ff78 	bl	8008ab8 <__sfp_lock_release>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	e7ee      	b.n	8008bac <__sfp+0x60>
 8008bce:	bf00      	nop
 8008bd0:	08008f88 	.word	0x08008f88
 8008bd4:	ffff0001 	.word	0xffff0001

08008bd8 <_fwalk_reent>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	4606      	mov	r6, r0
 8008bde:	4688      	mov	r8, r1
 8008be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008be4:	2700      	movs	r7, #0
 8008be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bea:	f1b9 0901 	subs.w	r9, r9, #1
 8008bee:	d505      	bpl.n	8008bfc <_fwalk_reent+0x24>
 8008bf0:	6824      	ldr	r4, [r4, #0]
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	d1f7      	bne.n	8008be6 <_fwalk_reent+0xe>
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d907      	bls.n	8008c12 <_fwalk_reent+0x3a>
 8008c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c06:	3301      	adds	r3, #1
 8008c08:	d003      	beq.n	8008c12 <_fwalk_reent+0x3a>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	47c0      	blx	r8
 8008c10:	4307      	orrs	r7, r0
 8008c12:	3568      	adds	r5, #104	; 0x68
 8008c14:	e7e9      	b.n	8008bea <_fwalk_reent+0x12>

08008c16 <__retarget_lock_init_recursive>:
 8008c16:	4770      	bx	lr

08008c18 <__retarget_lock_acquire_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_release_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <__swhatbuf_r>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c24:	2900      	cmp	r1, #0
 8008c26:	b096      	sub	sp, #88	; 0x58
 8008c28:	4614      	mov	r4, r2
 8008c2a:	461d      	mov	r5, r3
 8008c2c:	da07      	bge.n	8008c3e <__swhatbuf_r+0x22>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	89b3      	ldrh	r3, [r6, #12]
 8008c34:	061a      	lsls	r2, r3, #24
 8008c36:	d410      	bmi.n	8008c5a <__swhatbuf_r+0x3e>
 8008c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c3c:	e00e      	b.n	8008c5c <__swhatbuf_r+0x40>
 8008c3e:	466a      	mov	r2, sp
 8008c40:	f000 f902 	bl	8008e48 <_fstat_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dbf2      	blt.n	8008c2e <__swhatbuf_r+0x12>
 8008c48:	9a01      	ldr	r2, [sp, #4]
 8008c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c52:	425a      	negs	r2, r3
 8008c54:	415a      	adcs	r2, r3
 8008c56:	602a      	str	r2, [r5, #0]
 8008c58:	e7ee      	b.n	8008c38 <__swhatbuf_r+0x1c>
 8008c5a:	2340      	movs	r3, #64	; 0x40
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	b016      	add	sp, #88	; 0x58
 8008c62:	bd70      	pop	{r4, r5, r6, pc}

08008c64 <__smakebuf_r>:
 8008c64:	898b      	ldrh	r3, [r1, #12]
 8008c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c68:	079d      	lsls	r5, r3, #30
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	d507      	bpl.n	8008c80 <__smakebuf_r+0x1c>
 8008c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	6163      	str	r3, [r4, #20]
 8008c7c:	b002      	add	sp, #8
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	ab01      	add	r3, sp, #4
 8008c82:	466a      	mov	r2, sp
 8008c84:	f7ff ffca 	bl	8008c1c <__swhatbuf_r>
 8008c88:	9900      	ldr	r1, [sp, #0]
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7ff f987 	bl	8007fa0 <_malloc_r>
 8008c92:	b948      	cbnz	r0, 8008ca8 <__smakebuf_r+0x44>
 8008c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c98:	059a      	lsls	r2, r3, #22
 8008c9a:	d4ef      	bmi.n	8008c7c <__smakebuf_r+0x18>
 8008c9c:	f023 0303 	bic.w	r3, r3, #3
 8008ca0:	f043 0302 	orr.w	r3, r3, #2
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	e7e3      	b.n	8008c70 <__smakebuf_r+0xc>
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <__smakebuf_r+0x7c>)
 8008caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	6020      	str	r0, [r4, #0]
 8008cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	6163      	str	r3, [r4, #20]
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	6120      	str	r0, [r4, #16]
 8008cbe:	b15b      	cbz	r3, 8008cd8 <__smakebuf_r+0x74>
 8008cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f000 f8d1 	bl	8008e6c <_isatty_r>
 8008cca:	b128      	cbz	r0, 8008cd8 <__smakebuf_r+0x74>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f023 0303 	bic.w	r3, r3, #3
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	89a0      	ldrh	r0, [r4, #12]
 8008cda:	4305      	orrs	r5, r0
 8008cdc:	81a5      	strh	r5, [r4, #12]
 8008cde:	e7cd      	b.n	8008c7c <__smakebuf_r+0x18>
 8008ce0:	08008a75 	.word	0x08008a75

08008ce4 <_malloc_usable_size_r>:
 8008ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce8:	1f18      	subs	r0, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfbc      	itt	lt
 8008cee:	580b      	ldrlt	r3, [r1, r0]
 8008cf0:	18c0      	addlt	r0, r0, r3
 8008cf2:	4770      	bx	lr

08008cf4 <_raise_r>:
 8008cf4:	291f      	cmp	r1, #31
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	d904      	bls.n	8008d08 <_raise_r+0x14>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d0a:	b112      	cbz	r2, 8008d12 <_raise_r+0x1e>
 8008d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d10:	b94b      	cbnz	r3, 8008d26 <_raise_r+0x32>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f830 	bl	8008d78 <_getpid_r>
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d22:	f000 b817 	b.w	8008d54 <_kill_r>
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d00a      	beq.n	8008d40 <_raise_r+0x4c>
 8008d2a:	1c59      	adds	r1, r3, #1
 8008d2c:	d103      	bne.n	8008d36 <_raise_r+0x42>
 8008d2e:	2316      	movs	r3, #22
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7e7      	b.n	8008d06 <_raise_r+0x12>
 8008d36:	2400      	movs	r4, #0
 8008d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	4798      	blx	r3
 8008d40:	2000      	movs	r0, #0
 8008d42:	e7e0      	b.n	8008d06 <_raise_r+0x12>

08008d44 <raise>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <raise+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f7ff bfd3 	b.w	8008cf4 <_raise_r>
 8008d4e:	bf00      	nop
 8008d50:	2000000c 	.word	0x2000000c

08008d54 <_kill_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	; (8008d74 <_kill_r+0x20>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f7f8 fe39 	bl	80019d8 <_kill>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d102      	bne.n	8008d70 <_kill_r+0x1c>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b103      	cbz	r3, 8008d70 <_kill_r+0x1c>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	200003b4 	.word	0x200003b4

08008d78 <_getpid_r>:
 8008d78:	f7f8 be26 	b.w	80019c8 <_getpid>

08008d7c <__sread>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d84:	f000 f894 	bl	8008eb0 <_read_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	bfab      	itete	ge
 8008d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d90:	181b      	addge	r3, r3, r0
 8008d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d96:	bfac      	ite	ge
 8008d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d9a:	81a3      	strhlt	r3, [r4, #12]
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__swrite>:
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	461f      	mov	r7, r3
 8008da4:	898b      	ldrh	r3, [r1, #12]
 8008da6:	05db      	lsls	r3, r3, #23
 8008da8:	4605      	mov	r5, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4616      	mov	r6, r2
 8008dae:	d505      	bpl.n	8008dbc <__swrite+0x1e>
 8008db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db4:	2302      	movs	r3, #2
 8008db6:	2200      	movs	r2, #0
 8008db8:	f000 f868 	bl	8008e8c <_lseek_r>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	4632      	mov	r2, r6
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4628      	mov	r0, r5
 8008dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd2:	f000 b817 	b.w	8008e04 <_write_r>

08008dd6 <__sseek>:
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	460c      	mov	r4, r1
 8008dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dde:	f000 f855 	bl	8008e8c <_lseek_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	bf15      	itete	ne
 8008de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008df2:	81a3      	strheq	r3, [r4, #12]
 8008df4:	bf18      	it	ne
 8008df6:	81a3      	strhne	r3, [r4, #12]
 8008df8:	bd10      	pop	{r4, pc}

08008dfa <__sclose>:
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	f000 b813 	b.w	8008e28 <_close_r>
	...

08008e04 <_write_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d07      	ldr	r5, [pc, #28]	; (8008e24 <_write_r+0x20>)
 8008e08:	4604      	mov	r4, r0
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f8 fe17 	bl	8001a46 <_write>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_write_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_write_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	200003b4 	.word	0x200003b4

08008e28 <_close_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d06      	ldr	r5, [pc, #24]	; (8008e44 <_close_r+0x1c>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	f7f8 fe23 	bl	8001a7e <_close>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_close_r+0x1a>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_close_r+0x1a>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	200003b4 	.word	0x200003b4

08008e48 <_fstat_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_fstat_r+0x20>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f7f8 fe1e 	bl	8001a96 <_fstat>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d102      	bne.n	8008e64 <_fstat_r+0x1c>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	b103      	cbz	r3, 8008e64 <_fstat_r+0x1c>
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	200003b4 	.word	0x200003b4

08008e6c <_isatty_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d06      	ldr	r5, [pc, #24]	; (8008e88 <_isatty_r+0x1c>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	602b      	str	r3, [r5, #0]
 8008e78:	f7f8 fe1d 	bl	8001ab6 <_isatty>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_isatty_r+0x1a>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_isatty_r+0x1a>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	200003b4 	.word	0x200003b4

08008e8c <_lseek_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_lseek_r+0x20>)
 8008e90:	4604      	mov	r4, r0
 8008e92:	4608      	mov	r0, r1
 8008e94:	4611      	mov	r1, r2
 8008e96:	2200      	movs	r2, #0
 8008e98:	602a      	str	r2, [r5, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f7f8 fe16 	bl	8001acc <_lseek>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_lseek_r+0x1e>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_lseek_r+0x1e>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	200003b4 	.word	0x200003b4

08008eb0 <_read_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d07      	ldr	r5, [pc, #28]	; (8008ed0 <_read_r+0x20>)
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	602a      	str	r2, [r5, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f7f8 fda4 	bl	8001a0c <_read>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_read_r+0x1e>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_read_r+0x1e>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200003b4 	.word	0x200003b4

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr

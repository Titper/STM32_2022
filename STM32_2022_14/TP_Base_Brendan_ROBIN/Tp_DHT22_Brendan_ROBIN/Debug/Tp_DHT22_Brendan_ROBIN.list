
Tp_DHT22_Brendan_ROBIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08009e78  08009e78  00019e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a39c  0800a39c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a39c  0800a39c  0001a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3a4  0800a3a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a8  0800a3a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001e0  0800a58c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800a58c  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e02  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d18  00000000  00000000  00039012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003cfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ec1  00000000  00000000  0003e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017543  00000000  00000000  00067019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7122  00000000  00000000  0007e55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017567e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006378  00000000  00000000  001756d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e60 	.word	0x08009e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009e60 	.word	0x08009e60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_GPIO_Init+0xe4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_GPIO_Init+0xe4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2122      	movs	r1, #34	; 0x22
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 f9f9 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001074:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_GPIO_Init+0xe8>)
 8001086:	f001 f829 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 800108a:	2302      	movs	r3, #2
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 f81a 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a8:	2320      	movs	r3, #32
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f001 f80b 	bl	80020dc <HAL_GPIO_Init>

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800

080010d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C1_Init+0x74>)
 8001114:	f001 f9bc 	bl	8002490 <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fc0a 	bl	8001936 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C1_Init+0x74>)
 8001126:	f001 fe3d 	bl	8002da4 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 fc01 	bl	8001936 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C1_Init+0x74>)
 8001138:	f001 fe7f 	bl	8002e3a <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 fbf8 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000218 	.word	0x20000218
 8001150:	40005400 	.word	0x40005400
 8001154:	10909cec 	.word	0x10909cec

08001158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	; 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2288      	movs	r2, #136	; 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fa43 	bl	8005604 <memset>
  if(i2cHandle->Instance==I2C1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_I2C_MspInit+0xb0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13b      	bne.n	8001200 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fced 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f000 fbc9 	bl	8001936 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	2304      	movs	r3, #4
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011e4:	f000 ff7a 	bl	80020dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	; 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <lcd_init>:
I2C_HandleTypeDef hi2c3;

UART_HandleTypeDef huart3;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f043 030c 	orr.w	r3, r3, #12
 800122a:	b2da      	uxtb	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	b2db      	uxtb	r3, r3
 800123e:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart3,(uint8_t *)data,2,10);
 8001240:	f107 0118 	add.w	r1, r7, #24
 8001244:	230a      	movs	r3, #10
 8001246:	2202      	movs	r2, #2
 8001248:	486c      	ldr	r0, [pc, #432]	; (80013fc <lcd_init+0x1e8>)
 800124a:	f003 fce3 	bl	8004c14 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800124e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001252:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8001254:	f107 0114 	add.w	r1, r7, #20
 8001258:	230a      	movs	r3, #10
 800125a:	2202      	movs	r2, #2
 800125c:	4867      	ldr	r0, [pc, #412]	; (80013fc <lcd_init+0x1e8>)
 800125e:	f003 fcd9 	bl	8004c14 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	2205      	movs	r2, #5
 8001266:	217c      	movs	r1, #124	; 0x7c
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f001 fa95 	bl	8002798 <HAL_I2C_IsDeviceReady>
 800126e:	4603      	mov	r3, r0
 8001270:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart3,&status,1,10);
 8001272:	f107 0113 	add.w	r1, r7, #19
 8001276:	230a      	movs	r3, #10
 8001278:	2201      	movs	r2, #1
 800127a:	4860      	ldr	r0, [pc, #384]	; (80013fc <lcd_init+0x1e8>)
 800127c:	f003 fcca 	bl	8004c14 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f000 fe21 	bl	8001ec8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001286:	f107 0218 	add.w	r2, r7, #24
 800128a:	f241 3388 	movw	r3, #5000	; 0x1388
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	217c      	movs	r1, #124	; 0x7c
 8001294:	69f8      	ldr	r0, [r7, #28]
 8001296:	f001 f98b 	bl	80025b0 <HAL_I2C_Master_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart3,&status2,1,10);
 800129e:	f107 0112 	add.w	r1, r7, #18
 80012a2:	230a      	movs	r3, #10
 80012a4:	2201      	movs	r2, #1
 80012a6:	4855      	ldr	r0, [pc, #340]	; (80013fc <lcd_init+0x1e8>)
 80012a8:	f003 fcb4 	bl	8004c14 <HAL_UART_Transmit>
	HAL_Delay(50);
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f000 fe0b 	bl	8001ec8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80012b2:	f107 0218 	add.w	r2, r7, #24
 80012b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2302      	movs	r3, #2
 80012be:	217c      	movs	r1, #124	; 0x7c
 80012c0:	69f8      	ldr	r0, [r7, #28]
 80012c2:	f001 f975 	bl	80025b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fdfe 	bl	8001ec8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80012cc:	f107 0218 	add.w	r2, r7, #24
 80012d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	217c      	movs	r1, #124	; 0x7c
 80012da:	69f8      	ldr	r0, [r7, #28]
 80012dc:	f001 f968 	bl	80025b0 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2204      	movs	r2, #4
 80012e4:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80012f2:	f107 0218 	add.w	r2, r7, #24
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	217c      	movs	r1, #124	; 0x7c
 8001300:	69f8      	ldr	r0, [r7, #28]
 8001302:	f001 f955 	bl	80025b0 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001306:	2301      	movs	r3, #1
 8001308:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800130a:	f107 0218 	add.w	r2, r7, #24
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	217c      	movs	r1, #124	; 0x7c
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f001 f949 	bl	80025b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800131e:	2002      	movs	r0, #2
 8001320:	f000 fdd2 	bl	8001ec8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2202      	movs	r2, #2
 8001328:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	b2db      	uxtb	r3, r3
 8001334:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001336:	f107 0218 	add.w	r2, r7, #24
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	217c      	movs	r1, #124	; 0x7c
 8001344:	69f8      	ldr	r0, [r7, #28]
 8001346:	f001 f933 	bl	80025b0 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800134a:	2300      	movs	r3, #0
 800134c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001352:	f107 0210 	add.w	r2, r7, #16
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	21c4      	movs	r1, #196	; 0xc4
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f001 f925 	bl	80025b0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001366:	2308      	movs	r3, #8
 8001368:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800136a:	23ff      	movs	r3, #255	; 0xff
 800136c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800136e:	f107 0210 	add.w	r2, r7, #16
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	21c4      	movs	r1, #196	; 0xc4
 800137c:	69f8      	ldr	r0, [r7, #28]
 800137e:	f001 f917 	bl	80025b0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001382:	2301      	movs	r3, #1
 8001384:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001386:	2320      	movs	r3, #32
 8001388:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	21c4      	movs	r1, #196	; 0xc4
 8001398:	69f8      	ldr	r0, [r7, #28]
 800139a:	f001 f909 	bl	80025b0 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800139e:	2304      	movs	r3, #4
 80013a0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013a2:	23ff      	movs	r3, #255	; 0xff
 80013a4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2302      	movs	r3, #2
 80013b2:	21c4      	movs	r1, #196	; 0xc4
 80013b4:	69f8      	ldr	r0, [r7, #28]
 80013b6:	f001 f8fb 	bl	80025b0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80013ba:	2303      	movs	r3, #3
 80013bc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013be:	23ff      	movs	r3, #255	; 0xff
 80013c0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013c2:	f107 020c 	add.w	r2, r7, #12
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	21c4      	movs	r1, #196	; 0xc4
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f001 f8ed 	bl	80025b0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80013d6:	2302      	movs	r3, #2
 80013d8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2302      	movs	r3, #2
 80013ea:	21c4      	movs	r1, #196	; 0xc4
 80013ec:	69f8      	ldr	r0, [r7, #28]
 80013ee:	f001 f8df 	bl	80025b0 <HAL_I2C_Master_Transmit>


}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002b0 	.word	0x200002b0

08001400 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001416:	e011      	b.n	800143c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2302      	movs	r3, #2
 800142e:	217c      	movs	r1, #124	; 0x7c
 8001430:	6938      	ldr	r0, [r7, #16]
 8001432:	f001 f8bd 	bl	80025b0 <HAL_I2C_Master_Transmit>
            i++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e7      	bne.n	8001418 <lcd_print+0x18>
   }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af02      	add	r7, sp, #8
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
 800145e:	4613      	mov	r3, r2
 8001460:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <lcd_position+0x24>
    {
        col = col | 0x80;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	e003      	b.n	800147e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800147c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001486:	f107 0208 	add.w	r2, r7, #8
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2302      	movs	r3, #2
 8001492:	217c      	movs	r1, #124	; 0x7c
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f001 f88b 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <Delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay_us(uint16_t us)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Delay_us+0x30>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80014b6:	bf00      	nop
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <Delay_us+0x30>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3f9      	bcc.n	80014b8 <Delay_us+0x14>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000364 	.word	0x20000364

080014d8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fde8 	bl	80020dc <HAL_GPIO_Init>
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fdca 	bl	80020dc <HAL_GPIO_Init>
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <DHT22_start>:

void DHT22_start(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);//Mettre broche en sortie pour initialiser DHT22
 8001554:	2102      	movs	r1, #2
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f7ff ffbd 	bl	80014d8 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2102      	movs	r1, #2
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f000 ff7b 	bl	8002460 <HAL_GPIO_WritePin>
	Delay_us(1200);
 800156a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800156e:	f7ff ff99 	bl	80014a4 <Delay_us>
	HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2102      	movs	r1, #2
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f000 ff71 	bl	8002460 <HAL_GPIO_WritePin>
	Delay_us(30);
 800157e:	201e      	movs	r0, #30
 8001580:	f7ff ff90 	bl	80014a4 <Delay_us>
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin); //Mettre broche en entrée pour recevoir réponse DHT22
 8001584:	2102      	movs	r1, #2
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f7ff ffc3 	bl	8001514 <Set_Pin_Input>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}

08001592 <DHT22_Answer>:

int DHT22_Answer(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
	//Je choisit toujours 10 us de plus pour les temps pour une marge d'erreur
	int temps = 0, reponse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
	//verifier qu'on est bien a 0 pendant 80 us
	while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 90))
 80015a0:	e005      	b.n	80015ae <DHT22_Answer+0x1c>
	{
		Delay_us(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ff7e 	bl	80014a4 <Delay_us>
		temps++;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
	while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 90))
 80015ae:	2102      	movs	r1, #2
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f000 ff3c 	bl	8002430 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <DHT22_Answer+0x32>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b59      	cmp	r3, #89	; 0x59
 80015c2:	ddee      	ble.n	80015a2 <DHT22_Answer+0x10>
	}

	if(temps < 90)//si on est bien rester à 0 pendant de 80 us alors OK
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b59      	cmp	r3, #89	; 0x59
 80015c8:	dc2f      	bgt.n	800162a <DHT22_Answer+0x98>
	{
		temps = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
		//verifier qu'on est bien a 1 pendant 80 us
		while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_SET) && (temps < 90))
 80015ce:	e005      	b.n	80015dc <DHT22_Answer+0x4a>
		{
			Delay_us(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff ff67 	bl	80014a4 <Delay_us>
			temps++;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
		while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_SET) && (temps < 90))
 80015dc:	2102      	movs	r1, #2
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 ff25 	bl	8002430 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <DHT22_Answer+0x60>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b59      	cmp	r3, #89	; 0x59
 80015f0:	ddee      	ble.n	80015d0 <DHT22_Answer+0x3e>
		}

		if(temps < 90)//si on est bient rester à 1 pendant 80 us alors OK
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b59      	cmp	r3, #89	; 0x59
 80015f6:	dc18      	bgt.n	800162a <DHT22_Answer+0x98>
		{
			//début de la trame de donnée 50 us à 0 puis 1er bit de donnée
			temps = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]

			//vérifier la reception du premier bit
			while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 60))
 80015fc:	e005      	b.n	800160a <DHT22_Answer+0x78>
			{
				Delay_us(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff ff50 	bl	80014a4 <Delay_us>
				temps++;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3301      	adds	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
			while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 60))
 800160a:	2102      	movs	r1, #2
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f000 ff0e 	bl	8002430 <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <DHT22_Answer+0x8e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b3b      	cmp	r3, #59	; 0x3b
 800161e:	ddee      	ble.n	80015fe <DHT22_Answer+0x6c>
			}
			if(temps < 60)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b3b      	cmp	r3, #59	; 0x3b
 8001624:	dc01      	bgt.n	800162a <DHT22_Answer+0x98>
			{
				reponse = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	603b      	str	r3, [r7, #0]
			}
		}
	}

	Delay_us(40);
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f7ff ff3a 	bl	80014a4 <Delay_us>

	return reponse;
 8001630:	683b      	ldr	r3, [r7, #0]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <DHT22_Read_Data>:

void DHT22_Read_Data (uint8_t *data)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 	int i, k;
  	for (i=0;i<8;i++)
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e057      	b.n	80016f8 <DHT22_Read_Data+0xbe>
  	{
  		if (HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET)
 8001648:	2102      	movs	r1, #2
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f000 feef 	bl	8002430 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11d      	bne.n	8001694 <DHT22_Read_Data+0x5a>
  		{
  			(*data)&= ~(1<<(7-i)); //Mettre bit à 0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25a      	sxtb	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1c3 0307 	rsb	r3, r3, #7
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	b25b      	sxtb	r3, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4013      	ands	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 800167a:	bf00      	nop
 800167c:	2102      	movs	r1, #2
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 fed5 	bl	8002430 <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f7      	beq.n	800167c <DHT22_Read_Data+0x42>
  			Delay_us(40);
 800168c:	2028      	movs	r0, #40	; 0x28
 800168e:	f7ff ff09 	bl	80014a4 <Delay_us>
 8001692:	e02e      	b.n	80016f2 <DHT22_Read_Data+0xb8>
  		}
  		else
  		{
  			(*data)|= (1<<(7-i)); //Mettre bit à 1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1c3 0307 	rsb	r3, r3, #7
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	e00a      	b.n	80016ce <DHT22_Read_Data+0x94>
  			{
  				if (HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET)
 80016b8:	2102      	movs	r1, #2
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f000 feb7 	bl	8002430 <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <DHT22_Read_Data+0x9e>
  			for (k=0;k<1000;k++)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d4:	dbf0      	blt.n	80016b8 <DHT22_Read_Data+0x7e>
 80016d6:	e000      	b.n	80016da <DHT22_Read_Data+0xa0>
  				  {
  				  	break;
 80016d8:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)));
 80016da:	bf00      	nop
 80016dc:	2102      	movs	r1, #2
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f000 fea5 	bl	8002430 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f7      	beq.n	80016dc <DHT22_Read_Data+0xa2>
  			Delay_us(40);
 80016ec:	2028      	movs	r0, #40	; 0x28
 80016ee:	f7ff fed9 	bl	80014a4 <Delay_us>
  	for (i=0;i<8;i++)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	dda4      	ble.n	8001648 <DHT22_Read_Data+0xe>
  		}
  	 }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <DHT22_Display_Data>:

void DHT22_Display_Data(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	sprintf(tabH,"Humidite: %.1f ", Humidite);
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <DHT22_Display_Data+0x60>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4914      	ldr	r1, [pc, #80]	; (800176c <DHT22_Display_Data+0x64>)
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <DHT22_Display_Data+0x68>)
 800171e:	f004 fdf9 	bl	8006314 <siprintf>
	sprintf(tabT, "Temp.: %.1f C   ", Temperature);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <DHT22_Display_Data+0x6c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff0e 	bl	8000548 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <DHT22_Display_Data+0x70>)
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <DHT22_Display_Data+0x74>)
 8001734:	f004 fdee 	bl	8006314 <siprintf>
	lcd_position(&hi2c1, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <DHT22_Display_Data+0x78>)
 800173e:	f7ff fe88 	bl	8001452 <lcd_position>
	lcd_print(&hi2c1, tabH);
 8001742:	490b      	ldr	r1, [pc, #44]	; (8001770 <DHT22_Display_Data+0x68>)
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <DHT22_Display_Data+0x78>)
 8001746:	f7ff fe5b 	bl	8001400 <lcd_print>
	lcd_print(&hi2c1, "%");
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <DHT22_Display_Data+0x7c>)
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <DHT22_Display_Data+0x78>)
 800174e:	f7ff fe57 	bl	8001400 <lcd_print>
	lcd_position(&hi2c1, 0, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	2100      	movs	r1, #0
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <DHT22_Display_Data+0x78>)
 8001758:	f7ff fe7b 	bl	8001452 <lcd_position>
	lcd_print(&hi2c1, tabT);
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <DHT22_Display_Data+0x74>)
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <DHT22_Display_Data+0x78>)
 8001760:	f7ff fe4e 	bl	8001400 <lcd_print>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000204 	.word	0x20000204
 800176c:	08009e78 	.word	0x08009e78
 8001770:	2000034c 	.word	0x2000034c
 8001774:	20000200 	.word	0x20000200
 8001778:	08009e88 	.word	0x08009e88
 800177c:	20000334 	.word	0x20000334
 8001780:	20000218 	.word	0x20000218
 8001784:	08009e9c 	.word	0x08009e9c

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178c:	f000 fb20 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001790:	f000 f880 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001794:	f7ff fc2a 	bl	8000fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001798:	f000 fa64 	bl	8001c64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800179c:	f7ff fc9c 	bl	80010d8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017a0:	f000 f9f4 	bl	8001b8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//initialisation timer
 80017a4:	482f      	ldr	r0, [pc, #188]	; (8001864 <main+0xdc>)
 80017a6:	f002 fef9 	bl	800459c <HAL_TIM_Base_Start>
  lcd_init(&hi2c1, &lcdData); //initialisation lcd
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <main+0xe0>)
 80017ac:	482f      	ldr	r0, [pc, #188]	; (800186c <main+0xe4>)
 80017ae:	f7ff fd31 	bl	8001214 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 HAL_Delay(1000);//Attente 1s = refaire la boucle toute les secondes
 80017b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b6:	f000 fb87 	bl	8001ec8 <HAL_Delay>
	 DHT22_start();
 80017ba:	f7ff fec9 	bl	8001550 <DHT22_start>
	 reponse = DHT22_Answer();
 80017be:	f7ff fee8 	bl	8001592 <DHT22_Answer>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <main+0xe8>)
 80017c6:	6013      	str	r3, [r2, #0]

	 /*DHT22 à une trame de 40 bit, 8 premier bit humidité haute HH, 8 bit d'après humidité basse HL,
	 8 bit bit d'après température haute, 8 bit d'après température basse, 8 dernier bit pour verification
	 de l'acquisition */

	 if(reponse == 1)
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <main+0xe8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d1f0      	bne.n	80017b2 <main+0x2a>
	 {
	 	 //Commencer aquérir les 5 différents octets
	 	 DHT22_Read_Data(&HH);
 80017d0:	4828      	ldr	r0, [pc, #160]	; (8001874 <main+0xec>)
 80017d2:	f7ff ff32 	bl	800163a <DHT22_Read_Data>
	 	 DHT22_Read_Data(&HL);
 80017d6:	4828      	ldr	r0, [pc, #160]	; (8001878 <main+0xf0>)
 80017d8:	f7ff ff2f 	bl	800163a <DHT22_Read_Data>
	 	 DHT22_Read_Data(&TH);
 80017dc:	4827      	ldr	r0, [pc, #156]	; (800187c <main+0xf4>)
 80017de:	f7ff ff2c 	bl	800163a <DHT22_Read_Data>
	 	 DHT22_Read_Data(&TL);
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <main+0xf8>)
 80017e4:	f7ff ff29 	bl	800163a <DHT22_Read_Data>
	 	 DHT22_Read_Data(&SUM);
 80017e8:	4826      	ldr	r0, [pc, #152]	; (8001884 <main+0xfc>)
 80017ea:	f7ff ff26 	bl	800163a <DHT22_Read_Data>

	 	 check = HH + HL + TH + TL;
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <main+0xec>)
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <main+0xf0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <main+0xf4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <main+0xf8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <main+0x100>)
 800180c:	701a      	strb	r2, [r3, #0]
	 	 if(check == SUM)//vérifier qu'il n'y a pas d'erreur dans les données reçu
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <main+0x100>)
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <main+0xfc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d1cb      	bne.n	80017b2 <main+0x2a>
	 	 {
	 	  	//combiner 2 octets d'humité et diviser resultat par 10 pour avoir humidité en %
	 	  	Humidite = (float) ((HH<<8) | HL) / 10;
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <main+0xec>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <main+0xf0>)
 8001822:	7812      	ldrb	r2, [r2, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	ee07 3a90 	vmov	s15, r3
 800182a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <main+0x104>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
	 	  	//combiner 2 octets de température et diviser resultat par 10 pour avoir température en °C
	 	  	Temperature = (float) ((TH<<8) | TL) / 10;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <main+0xf4>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <main+0xf8>)
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001850:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <main+0x108>)
 800185a:	edc3 7a00 	vstr	s15, [r3]

	 	  	DHT22_Display_Data();//afficher température sur LCD
 800185e:	f7ff ff53 	bl	8001708 <DHT22_Display_Data>
	 HAL_Delay(1000);//Attente 1s = refaire la boucle toute les secondes
 8001862:	e7a6      	b.n	80017b2 <main+0x2a>
 8001864:	20000364 	.word	0x20000364
 8001868:	200001fc 	.word	0x200001fc
 800186c:	20000218 	.word	0x20000218
 8001870:	20000208 	.word	0x20000208
 8001874:	20000349 	.word	0x20000349
 8001878:	20000361 	.word	0x20000361
 800187c:	20000360 	.word	0x20000360
 8001880:	2000034a 	.word	0x2000034a
 8001884:	20000362 	.word	0x20000362
 8001888:	20000348 	.word	0x20000348
 800188c:	20000204 	.word	0x20000204
 8001890:	20000200 	.word	0x20000200

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b096      	sub	sp, #88	; 0x58
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2244      	movs	r2, #68	; 0x44
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 feae 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	463b      	mov	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018ba:	f001 fb19 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018c4:	f000 f837 	bl	8001936 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d2:	2310      	movs	r3, #16
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d6:	2302      	movs	r3, #2
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018da:	2302      	movs	r3, #2
 80018dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018e2:	230a      	movs	r3, #10
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018e6:	2307      	movs	r3, #7
 80018e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fb50 	bl	8002f9c <HAL_RCC_OscConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001902:	f000 f818 	bl	8001936 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001906:	230f      	movs	r3, #15
 8001908:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190a:	2303      	movs	r3, #3
 800190c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2104      	movs	r1, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f001 ff22 	bl	8003768 <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800192a:	f000 f804 	bl	8001936 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3758      	adds	r7, #88	; 0x58
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193a:	b672      	cpsid	i
}
 800193c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193e:	e7fe      	b.n	800193e <Error_Handler+0x8>

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d4:	f000 fa58 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_kill>:

int _kill(int pid, int sig)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019f6:	f003 fddb 	bl	80055b0 <__errno>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2216      	movs	r2, #22
 80019fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_exit>:

void _exit (int status)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe7 	bl	80019ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a1e:	e7fe      	b.n	8001a1e <_exit+0x12>

08001a20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a32:	f3af 8000 	nop.w
 8001a36:	4601      	mov	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
	}

return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
	}
	return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:

int _close(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aba:	605a      	str	r2, [r3, #4]
	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:

int _isatty(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f003 fd40 	bl	80055b0 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20018000 	.word	0x20018000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	2000020c 	.word	0x2000020c
 8001b64:	20000448 	.word	0x20000448

08001b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bb4:	224f      	movs	r2, #79	; 0x4f
 8001bb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bd4:	f002 fc8a 	bl	80044ec <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bde:	f7ff feaa 	bl	8001936 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001bf0:	f002 fd3c 	bl	800466c <HAL_TIM_ConfigClockSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bfa:	f7ff fe9c 	bl	8001936 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <MX_TIM2_Init+0x98>)
 8001c0c:	f002 ff2c 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c16:	f7ff fe8e 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000364 	.word	0x20000364

08001c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d10b      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6593      	str	r3, [r2, #88]	; 0x58
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000

08001c64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <MX_USART2_UART_Init+0x5c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001ca8:	f002 ff66 	bl	8004b78 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cb2:	f7ff fe40 	bl	8001936 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200003b0 	.word	0x200003b0
 8001cc0:	40004400 	.word	0x40004400

08001cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ac      	sub	sp, #176	; 0xb0
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2288      	movs	r2, #136	; 0x88
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fc8d 	bl	8005604 <memset>
  if(uartHandle->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_UART_MspInit+0xb0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d13b      	bne.n	8001d6c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 ff37 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d0c:	f7ff fe13 	bl	8001936 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0xb4>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d40:	230c      	movs	r3, #12
 8001d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d68:	f000 f9b8 	bl	80020dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	37b0      	adds	r7, #176	; 0xb0
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40021000 	.word	0x40021000

08001d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d80:	f7ff fef2 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <LoopForever+0xe>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	; (8001dc8 <LoopForever+0x16>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f003 fc07 	bl	80055bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dae:	f7ff fceb 	bl	8001788 <main>

08001db2 <LoopForever>:

LoopForever:
    b LoopForever
 8001db2:	e7fe      	b.n	8001db2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dc0:	0800a3ac 	.word	0x0800a3ac
  ldr r2, =_sbss
 8001dc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dc8:	20000448 	.word	0x20000448

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_Init+0x3c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <HAL_Init+0x3c>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f944 	bl	8002074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f80f 	bl	8001e10 <HAL_InitTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	e001      	b.n	8001e02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dfe:	f7ff fd9f 	bl	8001940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_InitTick+0x6c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_InitTick+0x70>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_InitTick+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f941 	bl	80020c2 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d809      	bhi.n	8001e60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 f919 	bl	800208a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_InitTick+0x74>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e007      	b.n	8001e70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e004      	b.n	8001e70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e001      	b.n	8001e70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000434 	.word	0x20000434

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000434 	.word	0x20000434

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	db0a      	blt.n	8001f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <__NVIC_SetPriority+0x4c>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	440b      	add	r3, r1
 8001f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f9c:	e00a      	b.n	8001fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <__NVIC_SetPriority+0x50>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	3b04      	subs	r3, #4
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	761a      	strb	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f1c3 0307 	rsb	r3, r3, #7
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	2304      	movcs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3304      	adds	r3, #4
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d902      	bls.n	8001ff8 <NVIC_EncodePriority+0x30>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3b03      	subs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <NVIC_EncodePriority+0x32>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	401a      	ands	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43d9      	mvns	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	4313      	orrs	r3, r2
         );
}
 8002022:	4618      	mov	r0, r3
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002040:	d301      	bcc.n	8002046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002042:	2301      	movs	r3, #1
 8002044:	e00f      	b.n	8002066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <SysTick_Config+0x40>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204e:	210f      	movs	r1, #15
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f7ff ff8e 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <SysTick_Config+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Config+0x40>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff47 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800209c:	f7ff ff5c 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f7ff ff8e 	bl	8001fc8 <NVIC_EncodePriority>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5d 	bl	8001f74 <__NVIC_SetPriority>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffb0 	bl	8002030 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ea:	e17f      	b.n	80023ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8171 	beq.w	80023e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d005      	beq.n	800211c <HAL_GPIO_Init+0x40>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d130      	bne.n	800217e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002152:	2201      	movs	r2, #1
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 0201 	and.w	r2, r3, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b03      	cmp	r3, #3
 8002188:	d118      	bne.n	80021bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002190:	2201      	movs	r2, #1
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	f003 0201 	and.w	r2, r3, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d017      	beq.n	80021f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80ac 	beq.w	80023e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_GPIO_Init+0x330>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_GPIO_Init+0x330>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6613      	str	r3, [r2, #96]	; 0x60
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_GPIO_Init+0x330>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a6:	4a5a      	ldr	r2, [pc, #360]	; (8002410 <HAL_GPIO_Init+0x334>)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x242>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_GPIO_Init+0x338>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x23e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_GPIO_Init+0x33c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x23a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_GPIO_Init+0x340>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x236>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x344>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x232>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_GPIO_Init+0x348>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x22e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <HAL_GPIO_Init+0x34c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x22a>
 8002302:	2306      	movs	r3, #6
 8002304:	e00c      	b.n	8002320 <HAL_GPIO_Init+0x244>
 8002306:	2307      	movs	r3, #7
 8002308:	e00a      	b.n	8002320 <HAL_GPIO_Init+0x244>
 800230a:	2305      	movs	r3, #5
 800230c:	e008      	b.n	8002320 <HAL_GPIO_Init+0x244>
 800230e:	2304      	movs	r3, #4
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x244>
 8002312:	2303      	movs	r3, #3
 8002314:	e004      	b.n	8002320 <HAL_GPIO_Init+0x244>
 8002316:	2302      	movs	r3, #2
 8002318:	e002      	b.n	8002320 <HAL_GPIO_Init+0x244>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x244>
 800231e:	2300      	movs	r3, #0
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	f002 0203 	and.w	r2, r2, #3
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	4093      	lsls	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002330:	4937      	ldr	r1, [pc, #220]	; (8002410 <HAL_GPIO_Init+0x334>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_GPIO_Init+0x350>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <HAL_GPIO_Init+0x350>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_GPIO_Init+0x350>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_GPIO_Init+0x350>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_GPIO_Init+0x350>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_GPIO_Init+0x350>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_GPIO_Init+0x350>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023e0:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_GPIO_Init+0x350>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3301      	adds	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f47f ae78 	bne.w	80020ec <HAL_GPIO_Init+0x10>
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	48000400 	.word	0x48000400
 8002418:	48000800 	.word	0x48000800
 800241c:	48000c00 	.word	0x48000c00
 8002420:	48001000 	.word	0x48001000
 8002424:	48001400 	.word	0x48001400
 8002428:	48001800 	.word	0x48001800
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800247c:	e002      	b.n	8002484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e081      	b.n	80025a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fe4e 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e006      	b.n	8002518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69d9      	ldr	r1, [r3, #28]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1a      	ldr	r2, [r3, #32]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
 80025c0:	4613      	mov	r3, r2
 80025c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	f040 80da 	bne.w	8002786 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x30>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0d3      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e8:	f7ff fc62 	bl	8001eb0 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2319      	movs	r3, #25
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9f7 	bl	80029ee <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0be      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2210      	movs	r2, #16
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	893a      	ldrh	r2, [r7, #8]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2bff      	cmp	r3, #255	; 0xff
 800263a:	d90e      	bls.n	800265a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	22ff      	movs	r2, #255	; 0xff
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_I2C_Master_Transmit+0x1e0>)
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fb74 	bl	8002d40 <I2C_TransferConfig>
 8002658:	e06c      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	4b48      	ldr	r3, [pc, #288]	; (8002790 <HAL_I2C_Master_Transmit+0x1e0>)
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb63 	bl	8002d40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800267a:	e05b      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f9f4 	bl	8002a6e <I2C_WaitOnTXISFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e07b      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d034      	beq.n	8002734 <HAL_I2C_Master_Transmit+0x184>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d130      	bne.n	8002734 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f986 	bl	80029ee <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e04d      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d90e      	bls.n	8002714 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	22ff      	movs	r2, #255	; 0xff
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fb17 	bl	8002d40 <I2C_TransferConfig>
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	2300      	movs	r3, #0
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fb06 	bl	8002d40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d19e      	bne.n	800267c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f9d3 	bl	8002aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e01a      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2220      	movs	r2, #32
 8002758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_I2C_Master_Transmit+0x1e4>)
 8002766:	400b      	ands	r3, r1
 8002768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	80002000 	.word	0x80002000
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 80f1 	bne.w	800299c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e7      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x44>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0e0      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_I2C_IsDeviceReady+0x72>
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002808:	e004      	b.n	8002814 <HAL_I2C_IsDeviceReady+0x7c>
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002810:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800281a:	f7ff fb49 	bl	8001eb0 <HAL_GetTick>
 800281e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b10      	cmp	r3, #16
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800284c:	e034      	b.n	80028b8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d01a      	beq.n	800288c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7ff fb2b 	bl	8001eb0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <HAL_I2C_IsDeviceReady+0xd4>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e088      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_I2C_IsDeviceReady+0x12c>
 80028be:	7fbb      	ldrb	r3, [r7, #30]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0c4      	beq.n	800284e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d01a      	beq.n	8002908 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	2120      	movs	r1, #32
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f886 	bl	80029ee <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e058      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2220      	movs	r2, #32
 80028f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e04a      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	2120      	movs	r1, #32
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f86b 	bl	80029ee <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e03d      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d118      	bne.n	800296c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002948:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2120      	movs	r1, #32
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f84a 	bl	80029ee <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e01c      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3301      	adds	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	f63f af3b 	bhi.w	80027f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d103      	bne.n	80029c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d007      	beq.n	80029e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	619a      	str	r2, [r3, #24]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fe:	e022      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d01e      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7ff fa52 	bl	8001eb0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d0cd      	beq.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a7a:	e02c      	b.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f871 	bl	8002b68 <I2C_IsErrorOccurred>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e02a      	b.n	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d01e      	beq.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7ff fa0a 	bl	8001eb0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d113      	bne.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d1cb      	bne.n	8002a7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afa:	e028      	b.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f831 	bl	8002b68 <I2C_IsErrorOccurred>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e026      	b.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f9ce 	bl	8001eb0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d1cf      	bne.n	8002afc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d075      	beq.n	8002c80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b9c:	e056      	b.n	8002c4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d052      	beq.n	8002c4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7ff f983 	bl	8001eb0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_IsErrorOccurred+0x54>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d147      	bne.n	8002c4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bde:	d12e      	bne.n	8002c3e <I2C_IsErrorOccurred+0xd6>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be6:	d02a      	beq.n	8002c3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d027      	beq.n	8002c3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bfc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bfe:	f7ff f957 	bl	8001eb0 <HAL_GetTick>
 8002c02:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	e01b      	b.n	8002c3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c06:	f7ff f953 	bl	8001eb0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b19      	cmp	r3, #25
 8002c12:	d914      	bls.n	8002c3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d1dc      	bne.n	8002c06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d003      	beq.n	8002c62 <I2C_IsErrorOccurred+0xfa>
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d09d      	beq.n	8002b9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01c      	beq.n	8002d30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fe55 	bl	80029a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <I2C_IsErrorOccurred+0x1d4>)
 8002d08:	400b      	ands	r3, r1
 8002d0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	fe00e800 	.word	0xfe00e800

08002d40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d58:	7a7b      	ldrb	r3, [r7, #9]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	0d5b      	lsrs	r3, r3, #21
 8002d7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <I2C_TransferConfig+0x60>)
 8002d80:	430b      	orrs	r3, r1
 8002d82:	43db      	mvns	r3, r3
 8002d84:	ea02 0103 	and.w	r1, r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	03ff63ff 	.word	0x03ff63ff

08002da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d138      	bne.n	8002e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e032      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d139      	bne.n	8002ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e033      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2224      	movs	r2, #36	; 0x24
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_PWREx_GetVoltageRange+0x18>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efe:	d130      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0c:	d038      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2232      	movs	r2, #50	; 0x32
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	e002      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d102      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f2      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d110      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d007      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e3d4      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4ba1      	ldr	r3, [pc, #644]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b9e      	ldr	r3, [pc, #632]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80e4 	beq.w	8003198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f040 808b 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 8087 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	4b93      	ldr	r3, [pc, #588]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e3ac      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	4b8c      	ldr	r3, [pc, #560]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCC_OscConfig+0x7c>
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003016:	e005      	b.n	8003024 <HAL_RCC_OscConfig+0x88>
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	4293      	cmp	r3, r2
 8003026:	d223      	bcs.n	8003070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd41 	bl	8003ab4 <RCC_SetFlashLatencyFromMSIRange>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e38d      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b7d      	ldr	r3, [pc, #500]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a7c      	ldr	r2, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b7a      	ldr	r3, [pc, #488]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4977      	ldr	r1, [pc, #476]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4972      	ldr	r1, [pc, #456]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e025      	b.n	80030bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003070:	4b70      	ldr	r3, [pc, #448]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	496a      	ldr	r1, [pc, #424]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308e:	4b69      	ldr	r3, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	4965      	ldr	r1, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd01 	bl	8003ab4 <RCC_SetFlashLatencyFromMSIRange>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e34d      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030bc:	f000 fc36 	bl	800392c <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	495a      	ldr	r1, [pc, #360]	; (8003238 <HAL_RCC_OscConfig+0x29c>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_RCC_OscConfig+0x2a0>)
 80030da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030dc:	4b58      	ldr	r3, [pc, #352]	; (8003240 <HAL_RCC_OscConfig+0x2a4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fe95 	bl	8001e10 <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d052      	beq.n	8003196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	e331      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003108:	f7fe fed2 	bl	8001eb0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7fe fece 	bl	8001eb0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e31a      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	493b      	ldr	r1, [pc, #236]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	4936      	ldr	r1, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e01a      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003162:	4b34      	ldr	r3, [pc, #208]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316e:	f7fe fe9f 	bl	8001eb0 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003176:	f7fe fe9b 	bl	8001eb0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e2e7      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003188:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x1da>
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d074      	beq.n	800328e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x21a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d10e      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d064      	beq.n	800328c <HAL_RCC_OscConfig+0x2f0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d160      	bne.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2c4      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x24a>
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e01d      	b.n	8003222 <HAL_RCC_OscConfig+0x286>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ee:	d10c      	bne.n	800320a <HAL_RCC_OscConfig+0x26e>
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e00b      	b.n	8003222 <HAL_RCC_OscConfig+0x286>
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_RCC_OscConfig+0x298>)
 800321c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01c      	beq.n	8003264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fe41 	bl	8001eb0 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003230:	e011      	b.n	8003256 <HAL_RCC_OscConfig+0x2ba>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	08009ea0 	.word	0x08009ea0
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fe34 	bl	8001eb0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e280      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	4baf      	ldr	r3, [pc, #700]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2a8>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fe24 	bl	8001eb0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fe20 	bl	8001eb0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e26c      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	4ba5      	ldr	r3, [pc, #660]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x2d0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d060      	beq.n	800335c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x310>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d119      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d116      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	4b99      	ldr	r3, [pc, #612]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x328>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e249      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b93      	ldr	r3, [pc, #588]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4990      	ldr	r1, [pc, #576]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	e040      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d023      	beq.n	800332a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e2:	4b8c      	ldr	r3, [pc, #560]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8b      	ldr	r2, [pc, #556]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fddf 	bl	8001eb0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fddb 	bl	8001eb0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e227      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	4b82      	ldr	r3, [pc, #520]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	497c      	ldr	r1, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	e018      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a79      	ldr	r2, [pc, #484]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fdbb 	bl	8001eb0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fdb7 	bl	8001eb0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e203      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003376:	4a67      	ldr	r2, [pc, #412]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fd96 	bl	8001eb0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe fd92 	bl	8001eb0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1de      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <HAL_RCC_OscConfig+0x3ec>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b0:	4a58      	ldr	r2, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fd79 	bl	8001eb0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe fd75 	bl	8001eb0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1c1      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033f4:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_OscConfig+0x57c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x57c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <HAL_RCC_OscConfig+0x57c>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fe fd3c 	bl	8001eb0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe fd38 	bl	8001eb0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e184      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_RCC_OscConfig+0x57c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d8>
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003472:	e024      	b.n	80034be <HAL_RCC_OscConfig+0x522>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d110      	bne.n	800349e <HAL_RCC_OscConfig+0x502>
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a24      	ldr	r2, [pc, #144]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a20      	ldr	r2, [pc, #128]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349c:	e00f      	b.n	80034be <HAL_RCC_OscConfig+0x522>
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fcf3 	bl	8001eb0 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fcef 	bl	8001eb0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e139      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_OscConfig+0x578>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ed      	beq.n	80034ce <HAL_RCC_OscConfig+0x532>
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fcdc 	bl	8001eb0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fa:	e00f      	b.n	800351c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe fcd8 	bl	8001eb0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d906      	bls.n	800351c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e122      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	4b90      	ldr	r3, [pc, #576]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e8      	bne.n	80034fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7ffb      	ldrb	r3, [r7, #31]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	4a8a      	ldr	r2, [pc, #552]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8108 	beq.w	8003756 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80d0 	bne.w	80036f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003550:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d130      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	3b01      	subs	r3, #1
 8003570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d127      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003590:	2a07      	cmp	r2, #7
 8003592:	bf14      	ite	ne
 8003594:	2201      	movne	r2, #1
 8003596:	2200      	moveq	r2, #0
 8003598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d06e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d069      	beq.n	80036a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035d8:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b7      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e8:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5c      	ldr	r2, [pc, #368]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fe fc5c 	bl	8001eb0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fc58 	bl	8001eb0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0a4      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	4b51      	ldr	r3, [pc, #324]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b51      	ldr	r3, [pc, #324]	; (8003764 <HAL_RCC_OscConfig+0x7c8>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800362a:	3a01      	subs	r2, #1
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003648:	0852      	lsrs	r2, r2, #1
 800364a:	3a01      	subs	r2, #1
 800364c:	0652      	lsls	r2, r2, #25
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003654:	0912      	lsrs	r2, r2, #4
 8003656:	0452      	lsls	r2, r2, #17
 8003658:	430a      	orrs	r2, r1
 800365a:	4941      	ldr	r1, [pc, #260]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003660:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a3b      	ldr	r2, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fe fc1a 	bl	8001eb0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe fc16 	bl	8001eb0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e062      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	e05a      	b.n	8003756 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e059      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d152      	bne.n	8003756 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fe fbf2 	bl	8001eb0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fbee 	bl	8001eb0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e03a      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x734>
 80036ee:	e032      	b.n	8003756 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d02d      	beq.n	8003752 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003714:	f023 0303 	bic.w	r3, r3, #3
 8003718:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003720:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fbc1 	bl	8001eb0 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fbbd 	bl	8001eb0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e009      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_OscConfig+0x7c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x796>
 8003750:	e001      	b.n	8003756 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	f99d808c 	.word	0xf99d808c

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0c8      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d910      	bls.n	80037ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 0207 	bic.w	r2, r3, #7
 8003792:	4961      	ldr	r1, [pc, #388]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b0      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d04c      	beq.n	8003852 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c0:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d121      	bne.n	8003810 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e09e      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d8:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d115      	bne.n	8003810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e092      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f0:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e086      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e07e      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003810:	4b42      	ldr	r3, [pc, #264]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	493f      	ldr	r1, [pc, #252]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003822:	f7fe fb45 	bl	8001eb0 <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003828:	e00a      	b.n	8003840 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382a:	f7fe fb41 	bl	8001eb0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e066      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 020c 	and.w	r2, r3, #12
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	429a      	cmp	r2, r3
 8003850:	d1eb      	bne.n	800382a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385e:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	492c      	ldr	r1, [pc, #176]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d210      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	4924      	ldr	r1, [pc, #144]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_RCC_ClockConfig+0x1b0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e036      	b.n	800390e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4918      	ldr	r1, [pc, #96]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4910      	ldr	r1, [pc, #64]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038de:	f000 f825 	bl	800392c <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_RCC_ClockConfig+0x1b4>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490c      	ldr	r1, [pc, #48]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fa84 	bl	8001e10 <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	72fb      	strb	r3, [r7, #11]

  return status;
 800390c:	7afb      	ldrb	r3, [r7, #11]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40022000 	.word	0x40022000
 800391c:	40021000 	.word	0x40021000
 8003920:	08009ea0 	.word	0x08009ea0
 8003924:	20000000 	.word	0x20000000
 8003928:	20000004 	.word	0x20000004

0800392c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x34>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d121      	bne.n	800399e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d11e      	bne.n	800399e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	e005      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003988:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10d      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d102      	bne.n	80039aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e004      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80039b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d134      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d003      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0xac>
 80039d0:	e005      	b.n	80039de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80039d4:	617b      	str	r3, [r7, #20]
      break;
 80039d6:	e005      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80039da:	617b      	str	r3, [r7, #20]
      break;
 80039dc:	e002      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	617b      	str	r3, [r7, #20]
      break;
 80039e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	3301      	adds	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	fb02 f203 	mul.w	r2, r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	0e5b      	lsrs	r3, r3, #25
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	3301      	adds	r3, #1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a24:	69bb      	ldr	r3, [r7, #24]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3724      	adds	r7, #36	; 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08009eb8 	.word	0x08009eb8
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200

08003a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a60:	f7ff fff0 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	08009eb0 	.word	0x08009eb0

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a8c:	f7ff ffda 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0adb      	lsrs	r3, r3, #11
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4904      	ldr	r1, [pc, #16]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08009eb0 	.word	0x08009eb0

08003ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003acc:	f7ff fa02 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003ad0:	6178      	str	r0, [r7, #20]
 8003ad2:	e014      	b.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aec:	f7ff f9f2 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b04:	d10b      	bne.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d919      	bls.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b10:	d902      	bls.n	8003b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b12:	2302      	movs	r3, #2
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e013      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e010      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d902      	bls.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b24:	2303      	movs	r3, #3
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e00a      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d102      	bne.n	8003b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b30:	2302      	movs	r3, #2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e004      	b.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b70      	cmp	r3, #112	; 0x70
 8003b3a:	d101      	bne.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0207 	bic.w	r2, r3, #7
 8003b48:	4909      	ldr	r1, [pc, #36]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40022000 	.word	0x40022000

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b80:	2300      	movs	r3, #0
 8003b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d041      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b98:	d02a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b9e:	d824      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003baa:	d81e      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bb6:	e018      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb8:	4b86      	ldr	r3, [pc, #536]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a85      	ldr	r2, [pc, #532]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fabb 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3320      	adds	r3, #32
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fba6 	bl	8004330 <RCCEx_PLLSAI2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	74fb      	strb	r3, [r7, #19]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf8:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c06:	4973      	ldr	r1, [pc, #460]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d041      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c28:	d02a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2e:	d824      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3a:	d81e      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d010      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c46:	e018      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c54:	e015      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa73 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c66:	e00c      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3320      	adds	r3, #32
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fb5e 	bl	8004330 <RCCEx_PLLSAI2_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c82:	7cfb      	ldrb	r3, [r7, #19]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	494f      	ldr	r1, [pc, #316]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c9e:	e001      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a0 	beq.w	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	4a40      	ldr	r2, [pc, #256]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3a      	ldr	r2, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe f8dc 	bl	8001eb0 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cfa:	e009      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fe f8d8 	bl	8001eb0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d15c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d019      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fe f897 	bl	8001eb0 <HAL_GetTick>
 8003d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d84:	e00b      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fe f893 	bl	8001eb0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d902      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ec      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dca:	e009      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de0:	7c7b      	ldrb	r3, [r7, #17]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de6:	4b9e      	ldr	r3, [pc, #632]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	4a9d      	ldr	r2, [pc, #628]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfe:	4b98      	ldr	r3, [pc, #608]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0203 	bic.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	4994      	ldr	r1, [pc, #592]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e20:	4b8f      	ldr	r3, [pc, #572]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 020c 	bic.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	498c      	ldr	r1, [pc, #560]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e42:	4b87      	ldr	r3, [pc, #540]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4983      	ldr	r1, [pc, #524]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e64:	4b7e      	ldr	r3, [pc, #504]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	497b      	ldr	r1, [pc, #492]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	4972      	ldr	r1, [pc, #456]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea8:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	496a      	ldr	r1, [pc, #424]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eca:	4b65      	ldr	r3, [pc, #404]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	4961      	ldr	r1, [pc, #388]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eec:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	4959      	ldr	r1, [pc, #356]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f0e:	4b54      	ldr	r3, [pc, #336]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	4950      	ldr	r1, [pc, #320]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f30:	4b4b      	ldr	r3, [pc, #300]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	4948      	ldr	r1, [pc, #288]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	493f      	ldr	r1, [pc, #252]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d028      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f74:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	4937      	ldr	r1, [pc, #220]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a31      	ldr	r2, [pc, #196]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
 8003fa0:	e011      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003faa:	d10c      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f8c8 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d028      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	491f      	ldr	r1, [pc, #124]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff0:	d106      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffc:	60d3      	str	r3, [r2, #12]
 8003ffe:	e011      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004008:	d10c      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f899 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02b      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4908      	ldr	r1, [pc, #32]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800404e:	d109      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a02      	ldr	r2, [pc, #8]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
 800405c:	e014      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f867 	bl	8004148 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02f      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004094:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	4928      	ldr	r1, [pc, #160]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b2:	d10d      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2102      	movs	r1, #2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f844 	bl	8004148 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d014      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
 80040ce:	e011      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3320      	adds	r3, #32
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f925 	bl	8004330 <RCCEx_PLLSAI2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410e:	490d      	ldr	r1, [pc, #52]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800413a:	7cbb      	ldrb	r3, [r7, #18]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000

08004148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004156:	4b75      	ldr	r3, [pc, #468]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004162:	4b72      	ldr	r3, [pc, #456]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0203 	and.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
       ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800417a:	4b6c      	ldr	r3, [pc, #432]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
       ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d047      	beq.n	800421e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
 8004192:	e044      	b.n	800421e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d018      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0x86>
 800419c:	2b03      	cmp	r3, #3
 800419e:	d825      	bhi.n	80041ec <RCCEx_PLLSAI1_Config+0xa4>
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d002      	beq.n	80041aa <RCCEx_PLLSAI1_Config+0x62>
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d009      	beq.n	80041bc <RCCEx_PLLSAI1_Config+0x74>
 80041a8:	e020      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041aa:	4b60      	ldr	r3, [pc, #384]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11d      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ba:	e01a      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041bc:	4b5b      	ldr	r3, [pc, #364]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041cc:	e013      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10f      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041da:	4b54      	ldr	r3, [pc, #336]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ea:	e006      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e004      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	430b      	orrs	r3, r1
 8004218:	4944      	ldr	r1, [pc, #272]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d17d      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004224:	4b41      	ldr	r3, [pc, #260]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a40      	ldr	r2, [pc, #256]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fd fe3e 	bl	8001eb0 <HAL_GetTick>
 8004234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004236:	e009      	b.n	800424c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004238:	f7fd fe3a 	bl	8001eb0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d902      	bls.n	800424c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	73fb      	strb	r3, [r7, #15]
        break;
 800424a:	e005      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ef      	bne.n	8004238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d160      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	0912      	lsrs	r2, r2, #4
 800427c:	0452      	lsls	r2, r2, #17
 800427e:	430a      	orrs	r2, r1
 8004280:	492a      	ldr	r1, [pc, #168]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
 8004286:	e027      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d112      	bne.n	80042b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6892      	ldr	r2, [r2, #8]
 800429e:	0211      	lsls	r1, r2, #8
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6912      	ldr	r2, [r2, #16]
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0552      	lsls	r2, r2, #21
 80042aa:	430a      	orrs	r2, r1
 80042ac:	491f      	ldr	r1, [pc, #124]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
 80042b2:	e011      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	0211      	lsls	r1, r2, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6952      	ldr	r2, [r2, #20]
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0652      	lsls	r2, r2, #25
 80042d0:	430a      	orrs	r2, r1
 80042d2:	4916      	ldr	r1, [pc, #88]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fde4 	bl	8001eb0 <HAL_GetTick>
 80042e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ea:	e009      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ec:	f7fd fde0 	bl	8001eb0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	73fb      	strb	r3, [r7, #15]
          break;
 80042fe:	e005      	b.n	800430c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4904      	ldr	r1, [pc, #16]	; (800432c <RCCEx_PLLSAI1_Config+0x1e4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000

08004330 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d018      	beq.n	800437c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800434a:	4b67      	ldr	r3, [pc, #412]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0203 	and.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d10d      	bne.n	8004376 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
       ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004362:	4b61      	ldr	r3, [pc, #388]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
       ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d047      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	e044      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d018      	beq.n	80043b6 <RCCEx_PLLSAI2_Config+0x86>
 8004384:	2b03      	cmp	r3, #3
 8004386:	d825      	bhi.n	80043d4 <RCCEx_PLLSAI2_Config+0xa4>
 8004388:	2b01      	cmp	r3, #1
 800438a:	d002      	beq.n	8004392 <RCCEx_PLLSAI2_Config+0x62>
 800438c:	2b02      	cmp	r3, #2
 800438e:	d009      	beq.n	80043a4 <RCCEx_PLLSAI2_Config+0x74>
 8004390:	e020      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004392:	4b55      	ldr	r3, [pc, #340]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11d      	bne.n	80043da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a2:	e01a      	b.n	80043da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043a4:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b4:	e013      	b.n	80043de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043b6:	4b4c      	ldr	r3, [pc, #304]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043c2:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043d2:	e006      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      break;
 80043d8:	e004      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043ea:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	430b      	orrs	r3, r1
 8004400:	4939      	ldr	r1, [pc, #228]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d167      	bne.n	80044dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fd fd4a 	bl	8001eb0 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800441e:	e009      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004420:	f7fd fd46 	bl	8001eb0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d902      	bls.n	8004434 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	73fb      	strb	r3, [r7, #15]
        break;
 8004432:	e005      	b.n	8004440 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ef      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d14a      	bne.n	80044dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d111      	bne.n	8004470 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
 800445c:	0211      	lsls	r1, r2, #8
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	0912      	lsrs	r2, r2, #4
 8004464:	0452      	lsls	r2, r2, #17
 8004466:	430a      	orrs	r2, r1
 8004468:	491f      	ldr	r1, [pc, #124]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	614b      	str	r3, [r1, #20]
 800446e:	e011      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	0211      	lsls	r1, r2, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6912      	ldr	r2, [r2, #16]
 8004486:	0852      	lsrs	r2, r2, #1
 8004488:	3a01      	subs	r2, #1
 800448a:	0652      	lsls	r2, r2, #25
 800448c:	430a      	orrs	r2, r1
 800448e:	4916      	ldr	r1, [pc, #88]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd fd06 	bl	8001eb0 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044a6:	e009      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044a8:	f7fd fd02 	bl	8001eb0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ba:	e005      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4904      	ldr	r1, [pc, #16]	; (80044e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e049      	b.n	8004592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fb88 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 f968 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e047      	b.n	8004644 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_TIM_Base_Start+0xb4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d018      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <HAL_TIM_Base_Start+0xb8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_TIM_Base_Start+0xbc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_TIM_Base_Start+0xc0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_TIM_Base_Start+0xc4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_Base_Start+0x66>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <HAL_TIM_Base_Start+0xc8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d115      	bne.n	800462e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <HAL_TIM_Base_Start+0xcc>)
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d015      	beq.n	8004640 <HAL_TIM_Base_Start+0xa4>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461a:	d011      	beq.n	8004640 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	e008      	b.n	8004640 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40013400 	.word	0x40013400
 8004664:	40014000 	.word	0x40014000
 8004668:	00010007 	.word	0x00010007

0800466c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e0b6      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x18a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c4:	d03e      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0xd8>
 80046c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ca:	f200 8087 	bhi.w	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d2:	f000 8086 	beq.w	80047e2 <HAL_TIM_ConfigClockSource+0x176>
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d87f      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d01a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xaa>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d87b      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d050      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x11e>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d877      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046ec:	2b50      	cmp	r3, #80	; 0x50
 80046ee:	d03c      	beq.n	800476a <HAL_TIM_ConfigClockSource+0xfe>
 80046f0:	2b50      	cmp	r3, #80	; 0x50
 80046f2:	d873      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d058      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x13e>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d86f      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d064      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x15e>
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d86b      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d060      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x15e>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d867      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x15e>
 8004710:	2b10      	cmp	r3, #16
 8004712:	d05a      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x15e>
 8004714:	e062      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6899      	ldr	r1, [r3, #8]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f000 f97f 	bl	8004a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	609a      	str	r2, [r3, #8]
      break;
 8004742:	e04f      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6899      	ldr	r1, [r3, #8]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f000 f968 	bl	8004a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004766:	609a      	str	r2, [r3, #8]
      break;
 8004768:	e03c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	461a      	mov	r2, r3
 8004778:	f000 f8dc 	bl	8004934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2150      	movs	r1, #80	; 0x50
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f935 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004788:	e02c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	f000 f8fb 	bl	8004992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2160      	movs	r1, #96	; 0x60
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f925 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047a8:	e01c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 f8bc 	bl	8004934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2140      	movs	r1, #64	; 0x40
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f915 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047c8:	e00c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f000 f90c 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80047da:	e003      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a40      	ldr	r2, [pc, #256]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00f      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d108      	bne.n	8004852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <TIM_Base_SetConfig+0x114>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <TIM_Base_SetConfig+0x118>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <TIM_Base_SetConfig+0x11c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_Base_SetConfig+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0x124>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <TIM_Base_SetConfig+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <TIM_Base_SetConfig+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a11      	ldr	r2, [pc, #68]	; (8004928 <TIM_Base_SetConfig+0x128>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <TIM_Base_SetConfig+0x12c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 030a 	bic.w	r3, r3, #10
 8004970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0210 	bic.w	r2, r3, #16
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	031b      	lsls	r3, r3, #12
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f043 0307 	orr.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e068      	b.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01d      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d018      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d10c      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40014000 	.word	0x40014000

08004b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e040      	b.n	8004c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd f892 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2224      	movs	r2, #36	; 0x24
 8004ba4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8c0 	bl	8004d3c <UART_SetConfig>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e022      	b.n	8004c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb3e 	bl	8005250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fbc5 	bl	8005394 <UART_CheckIdleState>
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f040 8082 	bne.w	8004d32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_Transmit+0x26>
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07a      	b.n	8004d34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Transmit+0x38>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e073      	b.n	8004d34 <HAL_UART_Transmit+0x120>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2221      	movs	r2, #33	; 0x21
 8004c60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fd f925 	bl	8001eb0 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c80:	d108      	bne.n	8004c94 <HAL_UART_Transmit+0x80>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e003      	b.n	8004c9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ca4:	e02d      	b.n	8004d02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fbb8 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e039      	b.n	8004d34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3302      	adds	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	e008      	b.n	8004cf0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1cb      	bne.n	8004ca6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb84 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e005      	b.n	8004d34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b5b0      	push	{r4, r5, r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4bad      	ldr	r3, [pc, #692]	; (800501c <UART_SetConfig+0x2e0>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	69f9      	ldr	r1, [r7, #28]
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4aa2      	ldr	r2, [pc, #648]	; (8005020 <UART_SetConfig+0x2e4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a99      	ldr	r2, [pc, #612]	; (8005024 <UART_SetConfig+0x2e8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d121      	bne.n	8004e06 <UART_SetConfig+0xca>
 8004dc2:	4b99      	ldr	r3, [pc, #612]	; (8005028 <UART_SetConfig+0x2ec>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d817      	bhi.n	8004e00 <UART_SetConfig+0xc4>
 8004dd0:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x9c>)
 8004dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd6:	bf00      	nop
 8004dd8:	08004de9 	.word	0x08004de9
 8004ddc:	08004df5 	.word	0x08004df5
 8004de0:	08004def 	.word	0x08004def
 8004de4:	08004dfb 	.word	0x08004dfb
 8004de8:	2301      	movs	r3, #1
 8004dea:	76fb      	strb	r3, [r7, #27]
 8004dec:	e0e7      	b.n	8004fbe <UART_SetConfig+0x282>
 8004dee:	2302      	movs	r3, #2
 8004df0:	76fb      	strb	r3, [r7, #27]
 8004df2:	e0e4      	b.n	8004fbe <UART_SetConfig+0x282>
 8004df4:	2304      	movs	r3, #4
 8004df6:	76fb      	strb	r3, [r7, #27]
 8004df8:	e0e1      	b.n	8004fbe <UART_SetConfig+0x282>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	76fb      	strb	r3, [r7, #27]
 8004dfe:	e0de      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e00:	2310      	movs	r3, #16
 8004e02:	76fb      	strb	r3, [r7, #27]
 8004e04:	e0db      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a88      	ldr	r2, [pc, #544]	; (800502c <UART_SetConfig+0x2f0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d132      	bne.n	8004e76 <UART_SetConfig+0x13a>
 8004e10:	4b85      	ldr	r3, [pc, #532]	; (8005028 <UART_SetConfig+0x2ec>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d828      	bhi.n	8004e70 <UART_SetConfig+0x134>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0xe8>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e71 	.word	0x08004e71
 8004e2c:	08004e71 	.word	0x08004e71
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e65 	.word	0x08004e65
 8004e38:	08004e71 	.word	0x08004e71
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004e71 	.word	0x08004e71
 8004e44:	08004e5f 	.word	0x08004e5f
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e71 	.word	0x08004e71
 8004e54:	08004e6b 	.word	0x08004e6b
 8004e58:	2300      	movs	r3, #0
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e0af      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e0ac      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e64:	2304      	movs	r3, #4
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e0a9      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e0a6      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e70:	2310      	movs	r3, #16
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e0a3      	b.n	8004fbe <UART_SetConfig+0x282>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6d      	ldr	r2, [pc, #436]	; (8005030 <UART_SetConfig+0x2f4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d120      	bne.n	8004ec2 <UART_SetConfig+0x186>
 8004e80:	4b69      	ldr	r3, [pc, #420]	; (8005028 <UART_SetConfig+0x2ec>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	d013      	beq.n	8004eb6 <UART_SetConfig+0x17a>
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d814      	bhi.n	8004ebc <UART_SetConfig+0x180>
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d009      	beq.n	8004eaa <UART_SetConfig+0x16e>
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d810      	bhi.n	8004ebc <UART_SetConfig+0x180>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <UART_SetConfig+0x168>
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d006      	beq.n	8004eb0 <UART_SetConfig+0x174>
 8004ea2:	e00b      	b.n	8004ebc <UART_SetConfig+0x180>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	76fb      	strb	r3, [r7, #27]
 8004ea8:	e089      	b.n	8004fbe <UART_SetConfig+0x282>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	76fb      	strb	r3, [r7, #27]
 8004eae:	e086      	b.n	8004fbe <UART_SetConfig+0x282>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	e083      	b.n	8004fbe <UART_SetConfig+0x282>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	76fb      	strb	r3, [r7, #27]
 8004eba:	e080      	b.n	8004fbe <UART_SetConfig+0x282>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	76fb      	strb	r3, [r7, #27]
 8004ec0:	e07d      	b.n	8004fbe <UART_SetConfig+0x282>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5b      	ldr	r2, [pc, #364]	; (8005034 <UART_SetConfig+0x2f8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d120      	bne.n	8004f0e <UART_SetConfig+0x1d2>
 8004ecc:	4b56      	ldr	r3, [pc, #344]	; (8005028 <UART_SetConfig+0x2ec>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ed8:	d013      	beq.n	8004f02 <UART_SetConfig+0x1c6>
 8004eda:	2bc0      	cmp	r3, #192	; 0xc0
 8004edc:	d814      	bhi.n	8004f08 <UART_SetConfig+0x1cc>
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d009      	beq.n	8004ef6 <UART_SetConfig+0x1ba>
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	d810      	bhi.n	8004f08 <UART_SetConfig+0x1cc>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <UART_SetConfig+0x1b4>
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d006      	beq.n	8004efc <UART_SetConfig+0x1c0>
 8004eee:	e00b      	b.n	8004f08 <UART_SetConfig+0x1cc>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	76fb      	strb	r3, [r7, #27]
 8004ef4:	e063      	b.n	8004fbe <UART_SetConfig+0x282>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	76fb      	strb	r3, [r7, #27]
 8004efa:	e060      	b.n	8004fbe <UART_SetConfig+0x282>
 8004efc:	2304      	movs	r3, #4
 8004efe:	76fb      	strb	r3, [r7, #27]
 8004f00:	e05d      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f02:	2308      	movs	r3, #8
 8004f04:	76fb      	strb	r3, [r7, #27]
 8004f06:	e05a      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	76fb      	strb	r3, [r7, #27]
 8004f0c:	e057      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a49      	ldr	r2, [pc, #292]	; (8005038 <UART_SetConfig+0x2fc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d125      	bne.n	8004f64 <UART_SetConfig+0x228>
 8004f18:	4b43      	ldr	r3, [pc, #268]	; (8005028 <UART_SetConfig+0x2ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f26:	d017      	beq.n	8004f58 <UART_SetConfig+0x21c>
 8004f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2c:	d817      	bhi.n	8004f5e <UART_SetConfig+0x222>
 8004f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f32:	d00b      	beq.n	8004f4c <UART_SetConfig+0x210>
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d811      	bhi.n	8004f5e <UART_SetConfig+0x222>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <UART_SetConfig+0x20a>
 8004f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f42:	d006      	beq.n	8004f52 <UART_SetConfig+0x216>
 8004f44:	e00b      	b.n	8004f5e <UART_SetConfig+0x222>
 8004f46:	2300      	movs	r3, #0
 8004f48:	76fb      	strb	r3, [r7, #27]
 8004f4a:	e038      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	76fb      	strb	r3, [r7, #27]
 8004f50:	e035      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f52:	2304      	movs	r3, #4
 8004f54:	76fb      	strb	r3, [r7, #27]
 8004f56:	e032      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e02f      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f5e:	2310      	movs	r3, #16
 8004f60:	76fb      	strb	r3, [r7, #27]
 8004f62:	e02c      	b.n	8004fbe <UART_SetConfig+0x282>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	; (8005020 <UART_SetConfig+0x2e4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d125      	bne.n	8004fba <UART_SetConfig+0x27e>
 8004f6e:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <UART_SetConfig+0x2ec>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f7c:	d017      	beq.n	8004fae <UART_SetConfig+0x272>
 8004f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f82:	d817      	bhi.n	8004fb4 <UART_SetConfig+0x278>
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	d00b      	beq.n	8004fa2 <UART_SetConfig+0x266>
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8e:	d811      	bhi.n	8004fb4 <UART_SetConfig+0x278>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <UART_SetConfig+0x260>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d006      	beq.n	8004fa8 <UART_SetConfig+0x26c>
 8004f9a:	e00b      	b.n	8004fb4 <UART_SetConfig+0x278>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x282>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	76fb      	strb	r3, [r7, #27]
 8004fa6:	e00a      	b.n	8004fbe <UART_SetConfig+0x282>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e007      	b.n	8004fbe <UART_SetConfig+0x282>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e004      	b.n	8004fbe <UART_SetConfig+0x282>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e001      	b.n	8004fbe <UART_SetConfig+0x282>
 8004fba:	2310      	movs	r3, #16
 8004fbc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	; (8005020 <UART_SetConfig+0x2e4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	f040 8087 	bne.w	80050d8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fca:	7efb      	ldrb	r3, [r7, #27]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d837      	bhi.n	8005040 <UART_SetConfig+0x304>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x29c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005041 	.word	0x08005041
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	08005041 	.word	0x08005041
 8004fe8:	0800500b 	.word	0x0800500b
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	08005041 	.word	0x08005041
 8004ff8:	08005013 	.word	0x08005013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe fd2e 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005000:	6178      	str	r0, [r7, #20]
        break;
 8005002:	e022      	b.n	800504a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005004:	4b0d      	ldr	r3, [pc, #52]	; (800503c <UART_SetConfig+0x300>)
 8005006:	617b      	str	r3, [r7, #20]
        break;
 8005008:	e01f      	b.n	800504a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500a:	f7fe fc8f 	bl	800392c <HAL_RCC_GetSysClockFreq>
 800500e:	6178      	str	r0, [r7, #20]
        break;
 8005010:	e01b      	b.n	800504a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005016:	617b      	str	r3, [r7, #20]
        break;
 8005018:	e017      	b.n	800504a <UART_SetConfig+0x30e>
 800501a:	bf00      	nop
 800501c:	efff69f3 	.word	0xefff69f3
 8005020:	40008000 	.word	0x40008000
 8005024:	40013800 	.word	0x40013800
 8005028:	40021000 	.word	0x40021000
 800502c:	40004400 	.word	0x40004400
 8005030:	40004800 	.word	0x40004800
 8005034:	40004c00 	.word	0x40004c00
 8005038:	40005000 	.word	0x40005000
 800503c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	76bb      	strb	r3, [r7, #26]
        break;
 8005048:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80f1 	beq.w	8005234 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	429a      	cmp	r2, r3
 8005060:	d305      	bcc.n	800506e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	429a      	cmp	r2, r3
 800506c:	d902      	bls.n	8005074 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	76bb      	strb	r3, [r7, #26]
 8005072:	e0df      	b.n	8005234 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4618      	mov	r0, r3
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	020b      	lsls	r3, r1, #8
 8005086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800508a:	0202      	lsls	r2, r0, #8
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6849      	ldr	r1, [r1, #4]
 8005090:	0849      	lsrs	r1, r1, #1
 8005092:	4608      	mov	r0, r1
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	1814      	adds	r4, r2, r0
 800509a:	eb43 0501 	adc.w	r5, r3, r1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb fdec 	bl	8000c88 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050be:	d308      	bcc.n	80050d2 <UART_SetConfig+0x396>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c6:	d204      	bcs.n	80050d2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e0b0      	b.n	8005234 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	76bb      	strb	r3, [r7, #26]
 80050d6:	e0ad      	b.n	8005234 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e0:	d15b      	bne.n	800519a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80050e2:	7efb      	ldrb	r3, [r7, #27]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d828      	bhi.n	800513a <UART_SetConfig+0x3fe>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x3b4>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	08005125 	.word	0x08005125
 80050fc:	0800513b 	.word	0x0800513b
 8005100:	0800512b 	.word	0x0800512b
 8005104:	0800513b 	.word	0x0800513b
 8005108:	0800513b 	.word	0x0800513b
 800510c:	0800513b 	.word	0x0800513b
 8005110:	08005133 	.word	0x08005133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe fca2 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8005118:	6178      	str	r0, [r7, #20]
        break;
 800511a:	e013      	b.n	8005144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7fe fcb4 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 8005120:	6178      	str	r0, [r7, #20]
        break;
 8005122:	e00f      	b.n	8005144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b49      	ldr	r3, [pc, #292]	; (800524c <UART_SetConfig+0x510>)
 8005126:	617b      	str	r3, [r7, #20]
        break;
 8005128:	e00c      	b.n	8005144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fe fbff 	bl	800392c <HAL_RCC_GetSysClockFreq>
 800512e:	6178      	str	r0, [r7, #20]
        break;
 8005130:	e008      	b.n	8005144 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005136:	617b      	str	r3, [r7, #20]
        break;
 8005138:	e004      	b.n	8005144 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	76bb      	strb	r3, [r7, #26]
        break;
 8005142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d074      	beq.n	8005234 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	005a      	lsls	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d916      	bls.n	8005194 <UART_SetConfig+0x458>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516c:	d212      	bcs.n	8005194 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f023 030f 	bic.w	r3, r3, #15
 8005176:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	b29a      	uxth	r2, r3
 8005184:	89fb      	ldrh	r3, [r7, #14]
 8005186:	4313      	orrs	r3, r2
 8005188:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	89fa      	ldrh	r2, [r7, #14]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e04f      	b.n	8005234 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	76bb      	strb	r3, [r7, #26]
 8005198:	e04c      	b.n	8005234 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800519a:	7efb      	ldrb	r3, [r7, #27]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x4b6>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x46c>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe fc46 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 80051d0:	6178      	str	r0, [r7, #20]
        break;
 80051d2:	e013      	b.n	80051fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fe fc58 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 80051d8:	6178      	str	r0, [r7, #20]
        break;
 80051da:	e00f      	b.n	80051fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <UART_SetConfig+0x510>)
 80051de:	617b      	str	r3, [r7, #20]
        break;
 80051e0:	e00c      	b.n	80051fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fe fba3 	bl	800392c <HAL_RCC_GetSysClockFreq>
 80051e6:	6178      	str	r0, [r7, #20]
        break;
 80051e8:	e008      	b.n	80051fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	617b      	str	r3, [r7, #20]
        break;
 80051f0:	e004      	b.n	80051fc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	76bb      	strb	r3, [r7, #26]
        break;
 80051fa:	bf00      	nop
    }

    if (pclk != 0U)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	085a      	lsrs	r2, r3, #1
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	441a      	add	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b0f      	cmp	r3, #15
 800521a:	d909      	bls.n	8005230 <UART_SetConfig+0x4f4>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005222:	d205      	bcs.n	8005230 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e001      	b.n	8005234 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005240:	7ebb      	ldrb	r3, [r7, #26]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bdb0      	pop	{r4, r5, r7, pc}
 800524a:	bf00      	nop
 800524c:	00f42400 	.word	0x00f42400

08005250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534e:	d10a      	bne.n	8005366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]
  }
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a4:	f7fc fd84 	bl	8001eb0 <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d10e      	bne.n	80053d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f82d 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e023      	b.n	800541e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d10e      	bne.n	8005402 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f817 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e00d      	b.n	800541e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b09c      	sub	sp, #112	; 0x70
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	e0a5      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	f000 80a1 	beq.w	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fc fd35 	bl	8001eb0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x32>
 8005452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13e      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800546c:	667b      	str	r3, [r7, #100]	; 0x64
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005478:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800547c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	663b      	str	r3, [r7, #96]	; 0x60
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e067      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04f      	beq.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d147      	bne.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	66bb      	str	r3, [r7, #104]	; 0x68
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005550:	623a      	str	r2, [r7, #32]
 8005552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	69f9      	ldr	r1, [r7, #28]
 8005556:	6a3a      	ldr	r2, [r7, #32]
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	61bb      	str	r3, [r7, #24]
   return(result);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e5      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e010      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	429a      	cmp	r2, r3
 80055a0:	f43f af4a 	beq.w	8005438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3770      	adds	r7, #112	; 0x70
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <__errno>:
 80055b0:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <__errno+0x8>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	2000000c 	.word	0x2000000c

080055bc <__libc_init_array>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4d0d      	ldr	r5, [pc, #52]	; (80055f4 <__libc_init_array+0x38>)
 80055c0:	4c0d      	ldr	r4, [pc, #52]	; (80055f8 <__libc_init_array+0x3c>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	2600      	movs	r6, #0
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d109      	bne.n	80055e0 <__libc_init_array+0x24>
 80055cc:	4d0b      	ldr	r5, [pc, #44]	; (80055fc <__libc_init_array+0x40>)
 80055ce:	4c0c      	ldr	r4, [pc, #48]	; (8005600 <__libc_init_array+0x44>)
 80055d0:	f004 fc46 	bl	8009e60 <_init>
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	2600      	movs	r6, #0
 80055da:	42a6      	cmp	r6, r4
 80055dc:	d105      	bne.n	80055ea <__libc_init_array+0x2e>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e4:	4798      	blx	r3
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7ee      	b.n	80055c8 <__libc_init_array+0xc>
 80055ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ee:	4798      	blx	r3
 80055f0:	3601      	adds	r6, #1
 80055f2:	e7f2      	b.n	80055da <__libc_init_array+0x1e>
 80055f4:	0800a3a4 	.word	0x0800a3a4
 80055f8:	0800a3a4 	.word	0x0800a3a4
 80055fc:	0800a3a4 	.word	0x0800a3a4
 8005600:	0800a3a8 	.word	0x0800a3a8

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <__cvt>:
 8005614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	ec55 4b10 	vmov	r4, r5, d0
 800561c:	2d00      	cmp	r5, #0
 800561e:	460e      	mov	r6, r1
 8005620:	4619      	mov	r1, r3
 8005622:	462b      	mov	r3, r5
 8005624:	bfbb      	ittet	lt
 8005626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800562a:	461d      	movlt	r5, r3
 800562c:	2300      	movge	r3, #0
 800562e:	232d      	movlt	r3, #45	; 0x2d
 8005630:	700b      	strb	r3, [r1, #0]
 8005632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005638:	4691      	mov	r9, r2
 800563a:	f023 0820 	bic.w	r8, r3, #32
 800563e:	bfbc      	itt	lt
 8005640:	4622      	movlt	r2, r4
 8005642:	4614      	movlt	r4, r2
 8005644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005648:	d005      	beq.n	8005656 <__cvt+0x42>
 800564a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800564e:	d100      	bne.n	8005652 <__cvt+0x3e>
 8005650:	3601      	adds	r6, #1
 8005652:	2102      	movs	r1, #2
 8005654:	e000      	b.n	8005658 <__cvt+0x44>
 8005656:	2103      	movs	r1, #3
 8005658:	ab03      	add	r3, sp, #12
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	ab02      	add	r3, sp, #8
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	ec45 4b10 	vmov	d0, r4, r5
 8005664:	4653      	mov	r3, sl
 8005666:	4632      	mov	r2, r6
 8005668:	f001 fdb6 	bl	80071d8 <_dtoa_r>
 800566c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005670:	4607      	mov	r7, r0
 8005672:	d102      	bne.n	800567a <__cvt+0x66>
 8005674:	f019 0f01 	tst.w	r9, #1
 8005678:	d022      	beq.n	80056c0 <__cvt+0xac>
 800567a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800567e:	eb07 0906 	add.w	r9, r7, r6
 8005682:	d110      	bne.n	80056a6 <__cvt+0x92>
 8005684:	783b      	ldrb	r3, [r7, #0]
 8005686:	2b30      	cmp	r3, #48	; 0x30
 8005688:	d10a      	bne.n	80056a0 <__cvt+0x8c>
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	4620      	mov	r0, r4
 8005690:	4629      	mov	r1, r5
 8005692:	f7fb fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005696:	b918      	cbnz	r0, 80056a0 <__cvt+0x8c>
 8005698:	f1c6 0601 	rsb	r6, r6, #1
 800569c:	f8ca 6000 	str.w	r6, [sl]
 80056a0:	f8da 3000 	ldr.w	r3, [sl]
 80056a4:	4499      	add	r9, r3
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fb fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b2:	b108      	cbz	r0, 80056b8 <__cvt+0xa4>
 80056b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80056b8:	2230      	movs	r2, #48	; 0x30
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	454b      	cmp	r3, r9
 80056be:	d307      	bcc.n	80056d0 <__cvt+0xbc>
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056c4:	1bdb      	subs	r3, r3, r7
 80056c6:	4638      	mov	r0, r7
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	b004      	add	sp, #16
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	9103      	str	r1, [sp, #12]
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e7f0      	b.n	80056ba <__cvt+0xa6>

080056d8 <__exponent>:
 80056d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056da:	4603      	mov	r3, r0
 80056dc:	2900      	cmp	r1, #0
 80056de:	bfb8      	it	lt
 80056e0:	4249      	neglt	r1, r1
 80056e2:	f803 2b02 	strb.w	r2, [r3], #2
 80056e6:	bfb4      	ite	lt
 80056e8:	222d      	movlt	r2, #45	; 0x2d
 80056ea:	222b      	movge	r2, #43	; 0x2b
 80056ec:	2909      	cmp	r1, #9
 80056ee:	7042      	strb	r2, [r0, #1]
 80056f0:	dd2a      	ble.n	8005748 <__exponent+0x70>
 80056f2:	f10d 0407 	add.w	r4, sp, #7
 80056f6:	46a4      	mov	ip, r4
 80056f8:	270a      	movs	r7, #10
 80056fa:	46a6      	mov	lr, r4
 80056fc:	460a      	mov	r2, r1
 80056fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005702:	fb07 1516 	mls	r5, r7, r6, r1
 8005706:	3530      	adds	r5, #48	; 0x30
 8005708:	2a63      	cmp	r2, #99	; 0x63
 800570a:	f104 34ff 	add.w	r4, r4, #4294967295
 800570e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005712:	4631      	mov	r1, r6
 8005714:	dcf1      	bgt.n	80056fa <__exponent+0x22>
 8005716:	3130      	adds	r1, #48	; 0x30
 8005718:	f1ae 0502 	sub.w	r5, lr, #2
 800571c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005720:	1c44      	adds	r4, r0, #1
 8005722:	4629      	mov	r1, r5
 8005724:	4561      	cmp	r1, ip
 8005726:	d30a      	bcc.n	800573e <__exponent+0x66>
 8005728:	f10d 0209 	add.w	r2, sp, #9
 800572c:	eba2 020e 	sub.w	r2, r2, lr
 8005730:	4565      	cmp	r5, ip
 8005732:	bf88      	it	hi
 8005734:	2200      	movhi	r2, #0
 8005736:	4413      	add	r3, r2
 8005738:	1a18      	subs	r0, r3, r0
 800573a:	b003      	add	sp, #12
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005742:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005746:	e7ed      	b.n	8005724 <__exponent+0x4c>
 8005748:	2330      	movs	r3, #48	; 0x30
 800574a:	3130      	adds	r1, #48	; 0x30
 800574c:	7083      	strb	r3, [r0, #2]
 800574e:	70c1      	strb	r1, [r0, #3]
 8005750:	1d03      	adds	r3, r0, #4
 8005752:	e7f1      	b.n	8005738 <__exponent+0x60>

08005754 <_printf_float>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	ed2d 8b02 	vpush	{d8}
 800575c:	b08d      	sub	sp, #52	; 0x34
 800575e:	460c      	mov	r4, r1
 8005760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005764:	4616      	mov	r6, r2
 8005766:	461f      	mov	r7, r3
 8005768:	4605      	mov	r5, r0
 800576a:	f002 fe91 	bl	8008490 <_localeconv_r>
 800576e:	f8d0 a000 	ldr.w	sl, [r0]
 8005772:	4650      	mov	r0, sl
 8005774:	f7fa fd2c 	bl	80001d0 <strlen>
 8005778:	2300      	movs	r3, #0
 800577a:	930a      	str	r3, [sp, #40]	; 0x28
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	9305      	str	r3, [sp, #20]
 8005780:	f8d8 3000 	ldr.w	r3, [r8]
 8005784:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005788:	3307      	adds	r3, #7
 800578a:	f023 0307 	bic.w	r3, r3, #7
 800578e:	f103 0208 	add.w	r2, r3, #8
 8005792:	f8c8 2000 	str.w	r2, [r8]
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800579e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80057ac:	ee08 0a10 	vmov	s16, r0
 80057b0:	4b9f      	ldr	r3, [pc, #636]	; (8005a30 <_printf_float+0x2dc>)
 80057b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	f7fb f9b7 	bl	8000b2c <__aeabi_dcmpun>
 80057be:	bb88      	cbnz	r0, 8005824 <_printf_float+0xd0>
 80057c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057c4:	4b9a      	ldr	r3, [pc, #616]	; (8005a30 <_printf_float+0x2dc>)
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ca:	f7fb f991 	bl	8000af0 <__aeabi_dcmple>
 80057ce:	bb48      	cbnz	r0, 8005824 <_printf_float+0xd0>
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fb f980 	bl	8000adc <__aeabi_dcmplt>
 80057dc:	b110      	cbz	r0, 80057e4 <_printf_float+0x90>
 80057de:	232d      	movs	r3, #45	; 0x2d
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e4:	4b93      	ldr	r3, [pc, #588]	; (8005a34 <_printf_float+0x2e0>)
 80057e6:	4894      	ldr	r0, [pc, #592]	; (8005a38 <_printf_float+0x2e4>)
 80057e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057ec:	bf94      	ite	ls
 80057ee:	4698      	movls	r8, r3
 80057f0:	4680      	movhi	r8, r0
 80057f2:	2303      	movs	r3, #3
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	f023 0204 	bic.w	r2, r3, #4
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	9700      	str	r7, [sp, #0]
 8005804:	4633      	mov	r3, r6
 8005806:	aa0b      	add	r2, sp, #44	; 0x2c
 8005808:	4621      	mov	r1, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f9d8 	bl	8005bc0 <_printf_common>
 8005810:	3001      	adds	r0, #1
 8005812:	f040 8090 	bne.w	8005936 <_printf_float+0x1e2>
 8005816:	f04f 30ff 	mov.w	r0, #4294967295
 800581a:	b00d      	add	sp, #52	; 0x34
 800581c:	ecbd 8b02 	vpop	{d8}
 8005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fb f97e 	bl	8000b2c <__aeabi_dcmpun>
 8005830:	b140      	cbz	r0, 8005844 <_printf_float+0xf0>
 8005832:	464b      	mov	r3, r9
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfbc      	itt	lt
 8005838:	232d      	movlt	r3, #45	; 0x2d
 800583a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800583e:	487f      	ldr	r0, [pc, #508]	; (8005a3c <_printf_float+0x2e8>)
 8005840:	4b7f      	ldr	r3, [pc, #508]	; (8005a40 <_printf_float+0x2ec>)
 8005842:	e7d1      	b.n	80057e8 <_printf_float+0x94>
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800584a:	9206      	str	r2, [sp, #24]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	d13f      	bne.n	80058d0 <_printf_float+0x17c>
 8005850:	2306      	movs	r3, #6
 8005852:	6063      	str	r3, [r4, #4]
 8005854:	9b05      	ldr	r3, [sp, #20]
 8005856:	6861      	ldr	r1, [r4, #4]
 8005858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800585c:	2300      	movs	r3, #0
 800585e:	9303      	str	r3, [sp, #12]
 8005860:	ab0a      	add	r3, sp, #40	; 0x28
 8005862:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005866:	ab09      	add	r3, sp, #36	; 0x24
 8005868:	ec49 8b10 	vmov	d0, r8, r9
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005874:	4628      	mov	r0, r5
 8005876:	f7ff fecd 	bl	8005614 <__cvt>
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800587e:	2b47      	cmp	r3, #71	; 0x47
 8005880:	4680      	mov	r8, r0
 8005882:	d108      	bne.n	8005896 <_printf_float+0x142>
 8005884:	1cc8      	adds	r0, r1, #3
 8005886:	db02      	blt.n	800588e <_printf_float+0x13a>
 8005888:	6863      	ldr	r3, [r4, #4]
 800588a:	4299      	cmp	r1, r3
 800588c:	dd41      	ble.n	8005912 <_printf_float+0x1be>
 800588e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005892:	fa5f fb8b 	uxtb.w	fp, fp
 8005896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800589a:	d820      	bhi.n	80058de <_printf_float+0x18a>
 800589c:	3901      	subs	r1, #1
 800589e:	465a      	mov	r2, fp
 80058a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058a4:	9109      	str	r1, [sp, #36]	; 0x24
 80058a6:	f7ff ff17 	bl	80056d8 <__exponent>
 80058aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ac:	1813      	adds	r3, r2, r0
 80058ae:	2a01      	cmp	r2, #1
 80058b0:	4681      	mov	r9, r0
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	dc02      	bgt.n	80058bc <_printf_float+0x168>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	07d2      	lsls	r2, r2, #31
 80058ba:	d501      	bpl.n	80058c0 <_printf_float+0x16c>
 80058bc:	3301      	adds	r3, #1
 80058be:	6123      	str	r3, [r4, #16]
 80058c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d09c      	beq.n	8005802 <_printf_float+0xae>
 80058c8:	232d      	movs	r3, #45	; 0x2d
 80058ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ce:	e798      	b.n	8005802 <_printf_float+0xae>
 80058d0:	9a06      	ldr	r2, [sp, #24]
 80058d2:	2a47      	cmp	r2, #71	; 0x47
 80058d4:	d1be      	bne.n	8005854 <_printf_float+0x100>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1bc      	bne.n	8005854 <_printf_float+0x100>
 80058da:	2301      	movs	r3, #1
 80058dc:	e7b9      	b.n	8005852 <_printf_float+0xfe>
 80058de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058e2:	d118      	bne.n	8005916 <_printf_float+0x1c2>
 80058e4:	2900      	cmp	r1, #0
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	dd0b      	ble.n	8005902 <_printf_float+0x1ae>
 80058ea:	6121      	str	r1, [r4, #16]
 80058ec:	b913      	cbnz	r3, 80058f4 <_printf_float+0x1a0>
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	07d0      	lsls	r0, r2, #31
 80058f2:	d502      	bpl.n	80058fa <_printf_float+0x1a6>
 80058f4:	3301      	adds	r3, #1
 80058f6:	440b      	add	r3, r1
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80058fc:	f04f 0900 	mov.w	r9, #0
 8005900:	e7de      	b.n	80058c0 <_printf_float+0x16c>
 8005902:	b913      	cbnz	r3, 800590a <_printf_float+0x1b6>
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	07d2      	lsls	r2, r2, #31
 8005908:	d501      	bpl.n	800590e <_printf_float+0x1ba>
 800590a:	3302      	adds	r3, #2
 800590c:	e7f4      	b.n	80058f8 <_printf_float+0x1a4>
 800590e:	2301      	movs	r3, #1
 8005910:	e7f2      	b.n	80058f8 <_printf_float+0x1a4>
 8005912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005918:	4299      	cmp	r1, r3
 800591a:	db05      	blt.n	8005928 <_printf_float+0x1d4>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	6121      	str	r1, [r4, #16]
 8005920:	07d8      	lsls	r0, r3, #31
 8005922:	d5ea      	bpl.n	80058fa <_printf_float+0x1a6>
 8005924:	1c4b      	adds	r3, r1, #1
 8005926:	e7e7      	b.n	80058f8 <_printf_float+0x1a4>
 8005928:	2900      	cmp	r1, #0
 800592a:	bfd4      	ite	le
 800592c:	f1c1 0202 	rsble	r2, r1, #2
 8005930:	2201      	movgt	r2, #1
 8005932:	4413      	add	r3, r2
 8005934:	e7e0      	b.n	80058f8 <_printf_float+0x1a4>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	055a      	lsls	r2, r3, #21
 800593a:	d407      	bmi.n	800594c <_printf_float+0x1f8>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	4642      	mov	r2, r8
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	d12c      	bne.n	80059a4 <_printf_float+0x250>
 800594a:	e764      	b.n	8005816 <_printf_float+0xc2>
 800594c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005950:	f240 80e0 	bls.w	8005b14 <_printf_float+0x3c0>
 8005954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	f7fb f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005960:	2800      	cmp	r0, #0
 8005962:	d034      	beq.n	80059ce <_printf_float+0x27a>
 8005964:	4a37      	ldr	r2, [pc, #220]	; (8005a44 <_printf_float+0x2f0>)
 8005966:	2301      	movs	r3, #1
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f af51 	beq.w	8005816 <_printf_float+0xc2>
 8005974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005978:	429a      	cmp	r2, r3
 800597a:	db02      	blt.n	8005982 <_printf_float+0x22e>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	07d8      	lsls	r0, r3, #31
 8005980:	d510      	bpl.n	80059a4 <_printf_float+0x250>
 8005982:	ee18 3a10 	vmov	r3, s16
 8005986:	4652      	mov	r2, sl
 8005988:	4631      	mov	r1, r6
 800598a:	4628      	mov	r0, r5
 800598c:	47b8      	blx	r7
 800598e:	3001      	adds	r0, #1
 8005990:	f43f af41 	beq.w	8005816 <_printf_float+0xc2>
 8005994:	f04f 0800 	mov.w	r8, #0
 8005998:	f104 091a 	add.w	r9, r4, #26
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	3b01      	subs	r3, #1
 80059a0:	4543      	cmp	r3, r8
 80059a2:	dc09      	bgt.n	80059b8 <_printf_float+0x264>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	f100 8105 	bmi.w	8005bb6 <_printf_float+0x462>
 80059ac:	68e0      	ldr	r0, [r4, #12]
 80059ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b0:	4298      	cmp	r0, r3
 80059b2:	bfb8      	it	lt
 80059b4:	4618      	movlt	r0, r3
 80059b6:	e730      	b.n	800581a <_printf_float+0xc6>
 80059b8:	2301      	movs	r3, #1
 80059ba:	464a      	mov	r2, r9
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af27 	beq.w	8005816 <_printf_float+0xc2>
 80059c8:	f108 0801 	add.w	r8, r8, #1
 80059cc:	e7e6      	b.n	800599c <_printf_float+0x248>
 80059ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dc39      	bgt.n	8005a48 <_printf_float+0x2f4>
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <_printf_float+0x2f0>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af19 	beq.w	8005816 <_printf_float+0xc2>
 80059e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e8:	4313      	orrs	r3, r2
 80059ea:	d102      	bne.n	80059f2 <_printf_float+0x29e>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	07d9      	lsls	r1, r3, #31
 80059f0:	d5d8      	bpl.n	80059a4 <_printf_float+0x250>
 80059f2:	ee18 3a10 	vmov	r3, s16
 80059f6:	4652      	mov	r2, sl
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	f43f af09 	beq.w	8005816 <_printf_float+0xc2>
 8005a04:	f04f 0900 	mov.w	r9, #0
 8005a08:	f104 0a1a 	add.w	sl, r4, #26
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	425b      	negs	r3, r3
 8005a10:	454b      	cmp	r3, r9
 8005a12:	dc01      	bgt.n	8005a18 <_printf_float+0x2c4>
 8005a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a16:	e792      	b.n	800593e <_printf_float+0x1ea>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4652      	mov	r2, sl
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f43f aef7 	beq.w	8005816 <_printf_float+0xc2>
 8005a28:	f109 0901 	add.w	r9, r9, #1
 8005a2c:	e7ee      	b.n	8005a0c <_printf_float+0x2b8>
 8005a2e:	bf00      	nop
 8005a30:	7fefffff 	.word	0x7fefffff
 8005a34:	08009eec 	.word	0x08009eec
 8005a38:	08009ef0 	.word	0x08009ef0
 8005a3c:	08009ef8 	.word	0x08009ef8
 8005a40:	08009ef4 	.word	0x08009ef4
 8005a44:	08009efc 	.word	0x08009efc
 8005a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bfa8      	it	ge
 8005a50:	461a      	movge	r2, r3
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	4691      	mov	r9, r2
 8005a56:	dc37      	bgt.n	8005ac8 <_printf_float+0x374>
 8005a58:	f04f 0b00 	mov.w	fp, #0
 8005a5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a60:	f104 021a 	add.w	r2, r4, #26
 8005a64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	eba3 0309 	sub.w	r3, r3, r9
 8005a6c:	455b      	cmp	r3, fp
 8005a6e:	dc33      	bgt.n	8005ad8 <_printf_float+0x384>
 8005a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a74:	429a      	cmp	r2, r3
 8005a76:	db3b      	blt.n	8005af0 <_printf_float+0x39c>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	d438      	bmi.n	8005af0 <_printf_float+0x39c>
 8005a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a80:	9b05      	ldr	r3, [sp, #20]
 8005a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	eba2 0901 	sub.w	r9, r2, r1
 8005a8a:	4599      	cmp	r9, r3
 8005a8c:	bfa8      	it	ge
 8005a8e:	4699      	movge	r9, r3
 8005a90:	f1b9 0f00 	cmp.w	r9, #0
 8005a94:	dc35      	bgt.n	8005b02 <_printf_float+0x3ae>
 8005a96:	f04f 0800 	mov.w	r8, #0
 8005a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a9e:	f104 0a1a 	add.w	sl, r4, #26
 8005aa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	eba3 0309 	sub.w	r3, r3, r9
 8005aac:	4543      	cmp	r3, r8
 8005aae:	f77f af79 	ble.w	80059a4 <_printf_float+0x250>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f aeaa 	beq.w	8005816 <_printf_float+0xc2>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	e7ec      	b.n	8005aa2 <_printf_float+0x34e>
 8005ac8:	4613      	mov	r3, r2
 8005aca:	4631      	mov	r1, r6
 8005acc:	4642      	mov	r2, r8
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d1c0      	bne.n	8005a58 <_printf_float+0x304>
 8005ad6:	e69e      	b.n	8005816 <_printf_float+0xc2>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	9205      	str	r2, [sp, #20]
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	f43f ae97 	beq.w	8005816 <_printf_float+0xc2>
 8005ae8:	9a05      	ldr	r2, [sp, #20]
 8005aea:	f10b 0b01 	add.w	fp, fp, #1
 8005aee:	e7b9      	b.n	8005a64 <_printf_float+0x310>
 8005af0:	ee18 3a10 	vmov	r3, s16
 8005af4:	4652      	mov	r2, sl
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	d1be      	bne.n	8005a7e <_printf_float+0x32a>
 8005b00:	e689      	b.n	8005816 <_printf_float+0xc2>
 8005b02:	9a05      	ldr	r2, [sp, #20]
 8005b04:	464b      	mov	r3, r9
 8005b06:	4442      	add	r2, r8
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d1c1      	bne.n	8005a96 <_printf_float+0x342>
 8005b12:	e680      	b.n	8005816 <_printf_float+0xc2>
 8005b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b16:	2a01      	cmp	r2, #1
 8005b18:	dc01      	bgt.n	8005b1e <_printf_float+0x3ca>
 8005b1a:	07db      	lsls	r3, r3, #31
 8005b1c:	d538      	bpl.n	8005b90 <_printf_float+0x43c>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4642      	mov	r2, r8
 8005b22:	4631      	mov	r1, r6
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f ae74 	beq.w	8005816 <_printf_float+0xc2>
 8005b2e:	ee18 3a10 	vmov	r3, s16
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f ae6b 	beq.w	8005816 <_printf_float+0xc2>
 8005b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	f7fa ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4c:	b9d8      	cbnz	r0, 8005b86 <_printf_float+0x432>
 8005b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b50:	f108 0201 	add.w	r2, r8, #1
 8005b54:	3b01      	subs	r3, #1
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d10e      	bne.n	8005b7e <_printf_float+0x42a>
 8005b60:	e659      	b.n	8005816 <_printf_float+0xc2>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae52 	beq.w	8005816 <_printf_float+0xc2>
 8005b72:	f108 0801 	add.w	r8, r8, #1
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	4543      	cmp	r3, r8
 8005b7c:	dcf1      	bgt.n	8005b62 <_printf_float+0x40e>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b84:	e6dc      	b.n	8005940 <_printf_float+0x1ec>
 8005b86:	f04f 0800 	mov.w	r8, #0
 8005b8a:	f104 0a1a 	add.w	sl, r4, #26
 8005b8e:	e7f2      	b.n	8005b76 <_printf_float+0x422>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4642      	mov	r2, r8
 8005b94:	e7df      	b.n	8005b56 <_printf_float+0x402>
 8005b96:	2301      	movs	r3, #1
 8005b98:	464a      	mov	r2, r9
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f ae38 	beq.w	8005816 <_printf_float+0xc2>
 8005ba6:	f108 0801 	add.w	r8, r8, #1
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bae:	1a5b      	subs	r3, r3, r1
 8005bb0:	4543      	cmp	r3, r8
 8005bb2:	dcf0      	bgt.n	8005b96 <_printf_float+0x442>
 8005bb4:	e6fa      	b.n	80059ac <_printf_float+0x258>
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	f104 0919 	add.w	r9, r4, #25
 8005bbe:	e7f4      	b.n	8005baa <_printf_float+0x456>

08005bc0 <_printf_common>:
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	4699      	mov	r9, r3
 8005bc8:	688a      	ldr	r2, [r1, #8]
 8005bca:	690b      	ldr	r3, [r1, #16]
 8005bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	bfb8      	it	lt
 8005bd4:	4613      	movlt	r3, r2
 8005bd6:	6033      	str	r3, [r6, #0]
 8005bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bdc:	4607      	mov	r7, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	b10a      	cbz	r2, 8005be6 <_printf_common+0x26>
 8005be2:	3301      	adds	r3, #1
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	0699      	lsls	r1, r3, #26
 8005bea:	bf42      	ittt	mi
 8005bec:	6833      	ldrmi	r3, [r6, #0]
 8005bee:	3302      	addmi	r3, #2
 8005bf0:	6033      	strmi	r3, [r6, #0]
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	f015 0506 	ands.w	r5, r5, #6
 8005bf8:	d106      	bne.n	8005c08 <_printf_common+0x48>
 8005bfa:	f104 0a19 	add.w	sl, r4, #25
 8005bfe:	68e3      	ldr	r3, [r4, #12]
 8005c00:	6832      	ldr	r2, [r6, #0]
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	42ab      	cmp	r3, r5
 8005c06:	dc26      	bgt.n	8005c56 <_printf_common+0x96>
 8005c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c0c:	1e13      	subs	r3, r2, #0
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	bf18      	it	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	0692      	lsls	r2, r2, #26
 8005c16:	d42b      	bmi.n	8005c70 <_printf_common+0xb0>
 8005c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	4638      	mov	r0, r7
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d01e      	beq.n	8005c64 <_printf_common+0xa4>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	68e5      	ldr	r5, [r4, #12]
 8005c2a:	6832      	ldr	r2, [r6, #0]
 8005c2c:	f003 0306 	and.w	r3, r3, #6
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	bf08      	it	eq
 8005c34:	1aad      	subeq	r5, r5, r2
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	6922      	ldr	r2, [r4, #16]
 8005c3a:	bf0c      	ite	eq
 8005c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c40:	2500      	movne	r5, #0
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bfc4      	itt	gt
 8005c46:	1a9b      	subgt	r3, r3, r2
 8005c48:	18ed      	addgt	r5, r5, r3
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	341a      	adds	r4, #26
 8005c4e:	42b5      	cmp	r5, r6
 8005c50:	d11a      	bne.n	8005c88 <_printf_common+0xc8>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e008      	b.n	8005c68 <_printf_common+0xa8>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4652      	mov	r2, sl
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	47c0      	blx	r8
 8005c60:	3001      	adds	r0, #1
 8005c62:	d103      	bne.n	8005c6c <_printf_common+0xac>
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	e7c6      	b.n	8005bfe <_printf_common+0x3e>
 8005c70:	18e1      	adds	r1, r4, r3
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	2030      	movs	r0, #48	; 0x30
 8005c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c7a:	4422      	add	r2, r4
 8005c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c84:	3302      	adds	r3, #2
 8005c86:	e7c7      	b.n	8005c18 <_printf_common+0x58>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c0      	blx	r8
 8005c92:	3001      	adds	r0, #1
 8005c94:	d0e6      	beq.n	8005c64 <_printf_common+0xa4>
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7d9      	b.n	8005c4e <_printf_common+0x8e>
	...

08005c9c <_printf_i>:
 8005c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	7e27      	ldrb	r7, [r4, #24]
 8005ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ca8:	2f78      	cmp	r7, #120	; 0x78
 8005caa:	4680      	mov	r8, r0
 8005cac:	469a      	mov	sl, r3
 8005cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb2:	d807      	bhi.n	8005cc4 <_printf_i+0x28>
 8005cb4:	2f62      	cmp	r7, #98	; 0x62
 8005cb6:	d80a      	bhi.n	8005cce <_printf_i+0x32>
 8005cb8:	2f00      	cmp	r7, #0
 8005cba:	f000 80d8 	beq.w	8005e6e <_printf_i+0x1d2>
 8005cbe:	2f58      	cmp	r7, #88	; 0x58
 8005cc0:	f000 80a3 	beq.w	8005e0a <_printf_i+0x16e>
 8005cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ccc:	e03a      	b.n	8005d44 <_printf_i+0xa8>
 8005cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cd2:	2b15      	cmp	r3, #21
 8005cd4:	d8f6      	bhi.n	8005cc4 <_printf_i+0x28>
 8005cd6:	a001      	add	r0, pc, #4	; (adr r0, 8005cdc <_printf_i+0x40>)
 8005cd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d49 	.word	0x08005d49
 8005ce4:	08005cc5 	.word	0x08005cc5
 8005ce8:	08005cc5 	.word	0x08005cc5
 8005cec:	08005cc5 	.word	0x08005cc5
 8005cf0:	08005cc5 	.word	0x08005cc5
 8005cf4:	08005d49 	.word	0x08005d49
 8005cf8:	08005cc5 	.word	0x08005cc5
 8005cfc:	08005cc5 	.word	0x08005cc5
 8005d00:	08005cc5 	.word	0x08005cc5
 8005d04:	08005cc5 	.word	0x08005cc5
 8005d08:	08005e55 	.word	0x08005e55
 8005d0c:	08005d79 	.word	0x08005d79
 8005d10:	08005e37 	.word	0x08005e37
 8005d14:	08005cc5 	.word	0x08005cc5
 8005d18:	08005cc5 	.word	0x08005cc5
 8005d1c:	08005e77 	.word	0x08005e77
 8005d20:	08005cc5 	.word	0x08005cc5
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005cc5 	.word	0x08005cc5
 8005d2c:	08005cc5 	.word	0x08005cc5
 8005d30:	08005e3f 	.word	0x08005e3f
 8005d34:	680b      	ldr	r3, [r1, #0]
 8005d36:	1d1a      	adds	r2, r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	600a      	str	r2, [r1, #0]
 8005d3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0a3      	b.n	8005e90 <_printf_i+0x1f4>
 8005d48:	6825      	ldr	r5, [r4, #0]
 8005d4a:	6808      	ldr	r0, [r1, #0]
 8005d4c:	062e      	lsls	r6, r5, #24
 8005d4e:	f100 0304 	add.w	r3, r0, #4
 8005d52:	d50a      	bpl.n	8005d6a <_printf_i+0xce>
 8005d54:	6805      	ldr	r5, [r0, #0]
 8005d56:	600b      	str	r3, [r1, #0]
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	da03      	bge.n	8005d64 <_printf_i+0xc8>
 8005d5c:	232d      	movs	r3, #45	; 0x2d
 8005d5e:	426d      	negs	r5, r5
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	485e      	ldr	r0, [pc, #376]	; (8005ee0 <_printf_i+0x244>)
 8005d66:	230a      	movs	r3, #10
 8005d68:	e019      	b.n	8005d9e <_printf_i+0x102>
 8005d6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d6e:	6805      	ldr	r5, [r0, #0]
 8005d70:	600b      	str	r3, [r1, #0]
 8005d72:	bf18      	it	ne
 8005d74:	b22d      	sxthne	r5, r5
 8005d76:	e7ef      	b.n	8005d58 <_printf_i+0xbc>
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	6825      	ldr	r5, [r4, #0]
 8005d7c:	1d18      	adds	r0, r3, #4
 8005d7e:	6008      	str	r0, [r1, #0]
 8005d80:	0628      	lsls	r0, r5, #24
 8005d82:	d501      	bpl.n	8005d88 <_printf_i+0xec>
 8005d84:	681d      	ldr	r5, [r3, #0]
 8005d86:	e002      	b.n	8005d8e <_printf_i+0xf2>
 8005d88:	0669      	lsls	r1, r5, #25
 8005d8a:	d5fb      	bpl.n	8005d84 <_printf_i+0xe8>
 8005d8c:	881d      	ldrh	r5, [r3, #0]
 8005d8e:	4854      	ldr	r0, [pc, #336]	; (8005ee0 <_printf_i+0x244>)
 8005d90:	2f6f      	cmp	r7, #111	; 0x6f
 8005d92:	bf0c      	ite	eq
 8005d94:	2308      	moveq	r3, #8
 8005d96:	230a      	movne	r3, #10
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d9e:	6866      	ldr	r6, [r4, #4]
 8005da0:	60a6      	str	r6, [r4, #8]
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	bfa2      	ittt	ge
 8005da6:	6821      	ldrge	r1, [r4, #0]
 8005da8:	f021 0104 	bicge.w	r1, r1, #4
 8005dac:	6021      	strge	r1, [r4, #0]
 8005dae:	b90d      	cbnz	r5, 8005db4 <_printf_i+0x118>
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	d04d      	beq.n	8005e50 <_printf_i+0x1b4>
 8005db4:	4616      	mov	r6, r2
 8005db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dba:	fb03 5711 	mls	r7, r3, r1, r5
 8005dbe:	5dc7      	ldrb	r7, [r0, r7]
 8005dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc4:	462f      	mov	r7, r5
 8005dc6:	42bb      	cmp	r3, r7
 8005dc8:	460d      	mov	r5, r1
 8005dca:	d9f4      	bls.n	8005db6 <_printf_i+0x11a>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d10b      	bne.n	8005de8 <_printf_i+0x14c>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07df      	lsls	r7, r3, #31
 8005dd4:	d508      	bpl.n	8005de8 <_printf_i+0x14c>
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	6861      	ldr	r1, [r4, #4]
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	bfde      	ittt	le
 8005dde:	2330      	movle	r3, #48	; 0x30
 8005de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005de8:	1b92      	subs	r2, r2, r6
 8005dea:	6122      	str	r2, [r4, #16]
 8005dec:	f8cd a000 	str.w	sl, [sp]
 8005df0:	464b      	mov	r3, r9
 8005df2:	aa03      	add	r2, sp, #12
 8005df4:	4621      	mov	r1, r4
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7ff fee2 	bl	8005bc0 <_printf_common>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d14c      	bne.n	8005e9a <_printf_i+0x1fe>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b004      	add	sp, #16
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	4835      	ldr	r0, [pc, #212]	; (8005ee0 <_printf_i+0x244>)
 8005e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	680e      	ldr	r6, [r1, #0]
 8005e14:	061f      	lsls	r7, r3, #24
 8005e16:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e1a:	600e      	str	r6, [r1, #0]
 8005e1c:	d514      	bpl.n	8005e48 <_printf_i+0x1ac>
 8005e1e:	07d9      	lsls	r1, r3, #31
 8005e20:	bf44      	itt	mi
 8005e22:	f043 0320 	orrmi.w	r3, r3, #32
 8005e26:	6023      	strmi	r3, [r4, #0]
 8005e28:	b91d      	cbnz	r5, 8005e32 <_printf_i+0x196>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f023 0320 	bic.w	r3, r3, #32
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	2310      	movs	r3, #16
 8005e34:	e7b0      	b.n	8005d98 <_printf_i+0xfc>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f043 0320 	orr.w	r3, r3, #32
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	2378      	movs	r3, #120	; 0x78
 8005e40:	4828      	ldr	r0, [pc, #160]	; (8005ee4 <_printf_i+0x248>)
 8005e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e46:	e7e3      	b.n	8005e10 <_printf_i+0x174>
 8005e48:	065e      	lsls	r6, r3, #25
 8005e4a:	bf48      	it	mi
 8005e4c:	b2ad      	uxthmi	r5, r5
 8005e4e:	e7e6      	b.n	8005e1e <_printf_i+0x182>
 8005e50:	4616      	mov	r6, r2
 8005e52:	e7bb      	b.n	8005dcc <_printf_i+0x130>
 8005e54:	680b      	ldr	r3, [r1, #0]
 8005e56:	6826      	ldr	r6, [r4, #0]
 8005e58:	6960      	ldr	r0, [r4, #20]
 8005e5a:	1d1d      	adds	r5, r3, #4
 8005e5c:	600d      	str	r5, [r1, #0]
 8005e5e:	0635      	lsls	r5, r6, #24
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	d501      	bpl.n	8005e68 <_printf_i+0x1cc>
 8005e64:	6018      	str	r0, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <_printf_i+0x1d2>
 8005e68:	0671      	lsls	r1, r6, #25
 8005e6a:	d5fb      	bpl.n	8005e64 <_printf_i+0x1c8>
 8005e6c:	8018      	strh	r0, [r3, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	4616      	mov	r6, r2
 8005e74:	e7ba      	b.n	8005dec <_printf_i+0x150>
 8005e76:	680b      	ldr	r3, [r1, #0]
 8005e78:	1d1a      	adds	r2, r3, #4
 8005e7a:	600a      	str	r2, [r1, #0]
 8005e7c:	681e      	ldr	r6, [r3, #0]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7fa f9ac 	bl	80001e0 <memchr>
 8005e88:	b108      	cbz	r0, 8005e8e <_printf_i+0x1f2>
 8005e8a:	1b80      	subs	r0, r0, r6
 8005e8c:	6060      	str	r0, [r4, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	2300      	movs	r3, #0
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e98:	e7a8      	b.n	8005dec <_printf_i+0x150>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	47d0      	blx	sl
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d0ab      	beq.n	8005e00 <_printf_i+0x164>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	079b      	lsls	r3, r3, #30
 8005eac:	d413      	bmi.n	8005ed6 <_printf_i+0x23a>
 8005eae:	68e0      	ldr	r0, [r4, #12]
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	4298      	cmp	r0, r3
 8005eb4:	bfb8      	it	lt
 8005eb6:	4618      	movlt	r0, r3
 8005eb8:	e7a4      	b.n	8005e04 <_printf_i+0x168>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	47d0      	blx	sl
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d09b      	beq.n	8005e00 <_printf_i+0x164>
 8005ec8:	3501      	adds	r5, #1
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	9903      	ldr	r1, [sp, #12]
 8005ece:	1a5b      	subs	r3, r3, r1
 8005ed0:	42ab      	cmp	r3, r5
 8005ed2:	dcf2      	bgt.n	8005eba <_printf_i+0x21e>
 8005ed4:	e7eb      	b.n	8005eae <_printf_i+0x212>
 8005ed6:	2500      	movs	r5, #0
 8005ed8:	f104 0619 	add.w	r6, r4, #25
 8005edc:	e7f5      	b.n	8005eca <_printf_i+0x22e>
 8005ede:	bf00      	nop
 8005ee0:	08009efe 	.word	0x08009efe
 8005ee4:	08009f0f 	.word	0x08009f0f

08005ee8 <_scanf_float>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	b087      	sub	sp, #28
 8005eee:	4617      	mov	r7, r2
 8005ef0:	9303      	str	r3, [sp, #12]
 8005ef2:	688b      	ldr	r3, [r1, #8]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005efa:	bf83      	ittte	hi
 8005efc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f00:	195b      	addhi	r3, r3, r5
 8005f02:	9302      	strhi	r3, [sp, #8]
 8005f04:	2300      	movls	r3, #0
 8005f06:	bf86      	itte	hi
 8005f08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f0c:	608b      	strhi	r3, [r1, #8]
 8005f0e:	9302      	strls	r3, [sp, #8]
 8005f10:	680b      	ldr	r3, [r1, #0]
 8005f12:	468b      	mov	fp, r1
 8005f14:	2500      	movs	r5, #0
 8005f16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f22:	4680      	mov	r8, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	465e      	mov	r6, fp
 8005f28:	46aa      	mov	sl, r5
 8005f2a:	46a9      	mov	r9, r5
 8005f2c:	9501      	str	r5, [sp, #4]
 8005f2e:	68a2      	ldr	r2, [r4, #8]
 8005f30:	b152      	cbz	r2, 8005f48 <_scanf_float+0x60>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b4e      	cmp	r3, #78	; 0x4e
 8005f38:	d864      	bhi.n	8006004 <_scanf_float+0x11c>
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d83c      	bhi.n	8005fb8 <_scanf_float+0xd0>
 8005f3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f42:	b2c8      	uxtb	r0, r1
 8005f44:	280e      	cmp	r0, #14
 8005f46:	d93a      	bls.n	8005fbe <_scanf_float+0xd6>
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	d003      	beq.n	8005f56 <_scanf_float+0x6e>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f5a:	f1ba 0f01 	cmp.w	sl, #1
 8005f5e:	f200 8113 	bhi.w	8006188 <_scanf_float+0x2a0>
 8005f62:	455e      	cmp	r6, fp
 8005f64:	f200 8105 	bhi.w	8006172 <_scanf_float+0x28a>
 8005f68:	2501      	movs	r5, #1
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	b007      	add	sp, #28
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f76:	2a0d      	cmp	r2, #13
 8005f78:	d8e6      	bhi.n	8005f48 <_scanf_float+0x60>
 8005f7a:	a101      	add	r1, pc, #4	; (adr r1, 8005f80 <_scanf_float+0x98>)
 8005f7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f80:	080060bf 	.word	0x080060bf
 8005f84:	08005f49 	.word	0x08005f49
 8005f88:	08005f49 	.word	0x08005f49
 8005f8c:	08005f49 	.word	0x08005f49
 8005f90:	0800611f 	.word	0x0800611f
 8005f94:	080060f7 	.word	0x080060f7
 8005f98:	08005f49 	.word	0x08005f49
 8005f9c:	08005f49 	.word	0x08005f49
 8005fa0:	080060cd 	.word	0x080060cd
 8005fa4:	08005f49 	.word	0x08005f49
 8005fa8:	08005f49 	.word	0x08005f49
 8005fac:	08005f49 	.word	0x08005f49
 8005fb0:	08005f49 	.word	0x08005f49
 8005fb4:	08006085 	.word	0x08006085
 8005fb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005fbc:	e7db      	b.n	8005f76 <_scanf_float+0x8e>
 8005fbe:	290e      	cmp	r1, #14
 8005fc0:	d8c2      	bhi.n	8005f48 <_scanf_float+0x60>
 8005fc2:	a001      	add	r0, pc, #4	; (adr r0, 8005fc8 <_scanf_float+0xe0>)
 8005fc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005fc8:	08006077 	.word	0x08006077
 8005fcc:	08005f49 	.word	0x08005f49
 8005fd0:	08006077 	.word	0x08006077
 8005fd4:	0800610b 	.word	0x0800610b
 8005fd8:	08005f49 	.word	0x08005f49
 8005fdc:	08006025 	.word	0x08006025
 8005fe0:	08006061 	.word	0x08006061
 8005fe4:	08006061 	.word	0x08006061
 8005fe8:	08006061 	.word	0x08006061
 8005fec:	08006061 	.word	0x08006061
 8005ff0:	08006061 	.word	0x08006061
 8005ff4:	08006061 	.word	0x08006061
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08006061 	.word	0x08006061
 8006000:	08006061 	.word	0x08006061
 8006004:	2b6e      	cmp	r3, #110	; 0x6e
 8006006:	d809      	bhi.n	800601c <_scanf_float+0x134>
 8006008:	2b60      	cmp	r3, #96	; 0x60
 800600a:	d8b2      	bhi.n	8005f72 <_scanf_float+0x8a>
 800600c:	2b54      	cmp	r3, #84	; 0x54
 800600e:	d077      	beq.n	8006100 <_scanf_float+0x218>
 8006010:	2b59      	cmp	r3, #89	; 0x59
 8006012:	d199      	bne.n	8005f48 <_scanf_float+0x60>
 8006014:	2d07      	cmp	r5, #7
 8006016:	d197      	bne.n	8005f48 <_scanf_float+0x60>
 8006018:	2508      	movs	r5, #8
 800601a:	e029      	b.n	8006070 <_scanf_float+0x188>
 800601c:	2b74      	cmp	r3, #116	; 0x74
 800601e:	d06f      	beq.n	8006100 <_scanf_float+0x218>
 8006020:	2b79      	cmp	r3, #121	; 0x79
 8006022:	e7f6      	b.n	8006012 <_scanf_float+0x12a>
 8006024:	6821      	ldr	r1, [r4, #0]
 8006026:	05c8      	lsls	r0, r1, #23
 8006028:	d51a      	bpl.n	8006060 <_scanf_float+0x178>
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006030:	6021      	str	r1, [r4, #0]
 8006032:	f109 0901 	add.w	r9, r9, #1
 8006036:	b11b      	cbz	r3, 8006040 <_scanf_float+0x158>
 8006038:	3b01      	subs	r3, #1
 800603a:	3201      	adds	r2, #1
 800603c:	9302      	str	r3, [sp, #8]
 800603e:	60a2      	str	r2, [r4, #8]
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	3b01      	subs	r3, #1
 8006044:	60a3      	str	r3, [r4, #8]
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	3301      	adds	r3, #1
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	f340 8084 	ble.w	8006160 <_scanf_float+0x278>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	e766      	b.n	8005f2e <_scanf_float+0x46>
 8006060:	eb1a 0f05 	cmn.w	sl, r5
 8006064:	f47f af70 	bne.w	8005f48 <_scanf_float+0x60>
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	f806 3b01 	strb.w	r3, [r6], #1
 8006074:	e7e4      	b.n	8006040 <_scanf_float+0x158>
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	0610      	lsls	r0, r2, #24
 800607a:	f57f af65 	bpl.w	8005f48 <_scanf_float+0x60>
 800607e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006082:	e7f4      	b.n	800606e <_scanf_float+0x186>
 8006084:	f1ba 0f00 	cmp.w	sl, #0
 8006088:	d10e      	bne.n	80060a8 <_scanf_float+0x1c0>
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	d10e      	bne.n	80060ae <_scanf_float+0x1c6>
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006096:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800609a:	d108      	bne.n	80060ae <_scanf_float+0x1c6>
 800609c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060a0:	6022      	str	r2, [r4, #0]
 80060a2:	f04f 0a01 	mov.w	sl, #1
 80060a6:	e7e3      	b.n	8006070 <_scanf_float+0x188>
 80060a8:	f1ba 0f02 	cmp.w	sl, #2
 80060ac:	d055      	beq.n	800615a <_scanf_float+0x272>
 80060ae:	2d01      	cmp	r5, #1
 80060b0:	d002      	beq.n	80060b8 <_scanf_float+0x1d0>
 80060b2:	2d04      	cmp	r5, #4
 80060b4:	f47f af48 	bne.w	8005f48 <_scanf_float+0x60>
 80060b8:	3501      	adds	r5, #1
 80060ba:	b2ed      	uxtb	r5, r5
 80060bc:	e7d8      	b.n	8006070 <_scanf_float+0x188>
 80060be:	f1ba 0f01 	cmp.w	sl, #1
 80060c2:	f47f af41 	bne.w	8005f48 <_scanf_float+0x60>
 80060c6:	f04f 0a02 	mov.w	sl, #2
 80060ca:	e7d1      	b.n	8006070 <_scanf_float+0x188>
 80060cc:	b97d      	cbnz	r5, 80060ee <_scanf_float+0x206>
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	f47f af3c 	bne.w	8005f4e <_scanf_float+0x66>
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060e0:	f47f af39 	bne.w	8005f56 <_scanf_float+0x6e>
 80060e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	2501      	movs	r5, #1
 80060ec:	e7c0      	b.n	8006070 <_scanf_float+0x188>
 80060ee:	2d03      	cmp	r5, #3
 80060f0:	d0e2      	beq.n	80060b8 <_scanf_float+0x1d0>
 80060f2:	2d05      	cmp	r5, #5
 80060f4:	e7de      	b.n	80060b4 <_scanf_float+0x1cc>
 80060f6:	2d02      	cmp	r5, #2
 80060f8:	f47f af26 	bne.w	8005f48 <_scanf_float+0x60>
 80060fc:	2503      	movs	r5, #3
 80060fe:	e7b7      	b.n	8006070 <_scanf_float+0x188>
 8006100:	2d06      	cmp	r5, #6
 8006102:	f47f af21 	bne.w	8005f48 <_scanf_float+0x60>
 8006106:	2507      	movs	r5, #7
 8006108:	e7b2      	b.n	8006070 <_scanf_float+0x188>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	0591      	lsls	r1, r2, #22
 800610e:	f57f af1b 	bpl.w	8005f48 <_scanf_float+0x60>
 8006112:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	f8cd 9004 	str.w	r9, [sp, #4]
 800611c:	e7a8      	b.n	8006070 <_scanf_float+0x188>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006124:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006128:	d006      	beq.n	8006138 <_scanf_float+0x250>
 800612a:	0550      	lsls	r0, r2, #21
 800612c:	f57f af0c 	bpl.w	8005f48 <_scanf_float+0x60>
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	f43f af0f 	beq.w	8005f56 <_scanf_float+0x6e>
 8006138:	0591      	lsls	r1, r2, #22
 800613a:	bf58      	it	pl
 800613c:	9901      	ldrpl	r1, [sp, #4]
 800613e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006142:	bf58      	it	pl
 8006144:	eba9 0101 	subpl.w	r1, r9, r1
 8006148:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800614c:	bf58      	it	pl
 800614e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	f04f 0900 	mov.w	r9, #0
 8006158:	e78a      	b.n	8006070 <_scanf_float+0x188>
 800615a:	f04f 0a03 	mov.w	sl, #3
 800615e:	e787      	b.n	8006070 <_scanf_float+0x188>
 8006160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006164:	4639      	mov	r1, r7
 8006166:	4640      	mov	r0, r8
 8006168:	4798      	blx	r3
 800616a:	2800      	cmp	r0, #0
 800616c:	f43f aedf 	beq.w	8005f2e <_scanf_float+0x46>
 8006170:	e6ea      	b.n	8005f48 <_scanf_float+0x60>
 8006172:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800617a:	463a      	mov	r2, r7
 800617c:	4640      	mov	r0, r8
 800617e:	4798      	blx	r3
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	3b01      	subs	r3, #1
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	e6ec      	b.n	8005f62 <_scanf_float+0x7a>
 8006188:	1e6b      	subs	r3, r5, #1
 800618a:	2b06      	cmp	r3, #6
 800618c:	d825      	bhi.n	80061da <_scanf_float+0x2f2>
 800618e:	2d02      	cmp	r5, #2
 8006190:	d836      	bhi.n	8006200 <_scanf_float+0x318>
 8006192:	455e      	cmp	r6, fp
 8006194:	f67f aee8 	bls.w	8005f68 <_scanf_float+0x80>
 8006198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800619c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061a0:	463a      	mov	r2, r7
 80061a2:	4640      	mov	r0, r8
 80061a4:	4798      	blx	r3
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	e7f1      	b.n	8006192 <_scanf_float+0x2aa>
 80061ae:	9802      	ldr	r0, [sp, #8]
 80061b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061b8:	9002      	str	r0, [sp, #8]
 80061ba:	463a      	mov	r2, r7
 80061bc:	4640      	mov	r0, r8
 80061be:	4798      	blx	r3
 80061c0:	6923      	ldr	r3, [r4, #16]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061ca:	fa5f fa8a 	uxtb.w	sl, sl
 80061ce:	f1ba 0f02 	cmp.w	sl, #2
 80061d2:	d1ec      	bne.n	80061ae <_scanf_float+0x2c6>
 80061d4:	3d03      	subs	r5, #3
 80061d6:	b2ed      	uxtb	r5, r5
 80061d8:	1b76      	subs	r6, r6, r5
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	05da      	lsls	r2, r3, #23
 80061de:	d52f      	bpl.n	8006240 <_scanf_float+0x358>
 80061e0:	055b      	lsls	r3, r3, #21
 80061e2:	d510      	bpl.n	8006206 <_scanf_float+0x31e>
 80061e4:	455e      	cmp	r6, fp
 80061e6:	f67f aebf 	bls.w	8005f68 <_scanf_float+0x80>
 80061ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061f2:	463a      	mov	r2, r7
 80061f4:	4640      	mov	r0, r8
 80061f6:	4798      	blx	r3
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	e7f1      	b.n	80061e4 <_scanf_float+0x2fc>
 8006200:	46aa      	mov	sl, r5
 8006202:	9602      	str	r6, [sp, #8]
 8006204:	e7df      	b.n	80061c6 <_scanf_float+0x2de>
 8006206:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	2965      	cmp	r1, #101	; 0x65
 800620e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006212:	f106 35ff 	add.w	r5, r6, #4294967295
 8006216:	6123      	str	r3, [r4, #16]
 8006218:	d00c      	beq.n	8006234 <_scanf_float+0x34c>
 800621a:	2945      	cmp	r1, #69	; 0x45
 800621c:	d00a      	beq.n	8006234 <_scanf_float+0x34c>
 800621e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006222:	463a      	mov	r2, r7
 8006224:	4640      	mov	r0, r8
 8006226:	4798      	blx	r3
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800622e:	3b01      	subs	r3, #1
 8006230:	1eb5      	subs	r5, r6, #2
 8006232:	6123      	str	r3, [r4, #16]
 8006234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006238:	463a      	mov	r2, r7
 800623a:	4640      	mov	r0, r8
 800623c:	4798      	blx	r3
 800623e:	462e      	mov	r6, r5
 8006240:	6825      	ldr	r5, [r4, #0]
 8006242:	f015 0510 	ands.w	r5, r5, #16
 8006246:	d158      	bne.n	80062fa <_scanf_float+0x412>
 8006248:	7035      	strb	r5, [r6, #0]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006254:	d11c      	bne.n	8006290 <_scanf_float+0x3a8>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	454b      	cmp	r3, r9
 800625a:	eba3 0209 	sub.w	r2, r3, r9
 800625e:	d124      	bne.n	80062aa <_scanf_float+0x3c2>
 8006260:	2200      	movs	r2, #0
 8006262:	4659      	mov	r1, fp
 8006264:	4640      	mov	r0, r8
 8006266:	f000 fe9d 	bl	8006fa4 <_strtod_r>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f011 0f02 	tst.w	r1, #2
 8006274:	ec57 6b10 	vmov	r6, r7, d0
 8006278:	f103 0204 	add.w	r2, r3, #4
 800627c:	d020      	beq.n	80062c0 <_scanf_float+0x3d8>
 800627e:	9903      	ldr	r1, [sp, #12]
 8006280:	600a      	str	r2, [r1, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	e9c3 6700 	strd	r6, r7, [r3]
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60e3      	str	r3, [r4, #12]
 800628e:	e66c      	b.n	8005f6a <_scanf_float+0x82>
 8006290:	9b04      	ldr	r3, [sp, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0e4      	beq.n	8006260 <_scanf_float+0x378>
 8006296:	9905      	ldr	r1, [sp, #20]
 8006298:	230a      	movs	r3, #10
 800629a:	462a      	mov	r2, r5
 800629c:	3101      	adds	r1, #1
 800629e:	4640      	mov	r0, r8
 80062a0:	f000 ff0a 	bl	80070b8 <_strtol_r>
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	9e05      	ldr	r6, [sp, #20]
 80062a8:	1ac2      	subs	r2, r0, r3
 80062aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062ae:	429e      	cmp	r6, r3
 80062b0:	bf28      	it	cs
 80062b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062b6:	4912      	ldr	r1, [pc, #72]	; (8006300 <_scanf_float+0x418>)
 80062b8:	4630      	mov	r0, r6
 80062ba:	f000 f82b 	bl	8006314 <siprintf>
 80062be:	e7cf      	b.n	8006260 <_scanf_float+0x378>
 80062c0:	f011 0f04 	tst.w	r1, #4
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	600a      	str	r2, [r1, #0]
 80062c8:	d1db      	bne.n	8006282 <_scanf_float+0x39a>
 80062ca:	f8d3 8000 	ldr.w	r8, [r3]
 80062ce:	ee10 2a10 	vmov	r2, s0
 80062d2:	ee10 0a10 	vmov	r0, s0
 80062d6:	463b      	mov	r3, r7
 80062d8:	4639      	mov	r1, r7
 80062da:	f7fa fc27 	bl	8000b2c <__aeabi_dcmpun>
 80062de:	b128      	cbz	r0, 80062ec <_scanf_float+0x404>
 80062e0:	4808      	ldr	r0, [pc, #32]	; (8006304 <_scanf_float+0x41c>)
 80062e2:	f000 f811 	bl	8006308 <nanf>
 80062e6:	ed88 0a00 	vstr	s0, [r8]
 80062ea:	e7cd      	b.n	8006288 <_scanf_float+0x3a0>
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fc7a 	bl	8000be8 <__aeabi_d2f>
 80062f4:	f8c8 0000 	str.w	r0, [r8]
 80062f8:	e7c6      	b.n	8006288 <_scanf_float+0x3a0>
 80062fa:	2500      	movs	r5, #0
 80062fc:	e635      	b.n	8005f6a <_scanf_float+0x82>
 80062fe:	bf00      	nop
 8006300:	08009f20 	.word	0x08009f20
 8006304:	0800a338 	.word	0x0800a338

08006308 <nanf>:
 8006308:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006310 <nanf+0x8>
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	7fc00000 	.word	0x7fc00000

08006314 <siprintf>:
 8006314:	b40e      	push	{r1, r2, r3}
 8006316:	b500      	push	{lr}
 8006318:	b09c      	sub	sp, #112	; 0x70
 800631a:	ab1d      	add	r3, sp, #116	; 0x74
 800631c:	9002      	str	r0, [sp, #8]
 800631e:	9006      	str	r0, [sp, #24]
 8006320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006324:	4809      	ldr	r0, [pc, #36]	; (800634c <siprintf+0x38>)
 8006326:	9107      	str	r1, [sp, #28]
 8006328:	9104      	str	r1, [sp, #16]
 800632a:	4909      	ldr	r1, [pc, #36]	; (8006350 <siprintf+0x3c>)
 800632c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006330:	9105      	str	r1, [sp, #20]
 8006332:	6800      	ldr	r0, [r0, #0]
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	a902      	add	r1, sp, #8
 8006338:	f002 fea6 	bl	8009088 <_svfiprintf_r>
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	b01c      	add	sp, #112	; 0x70
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	2000000c 	.word	0x2000000c
 8006350:	ffff0208 	.word	0xffff0208

08006354 <sulp>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4604      	mov	r4, r0
 8006358:	460d      	mov	r5, r1
 800635a:	ec45 4b10 	vmov	d0, r4, r5
 800635e:	4616      	mov	r6, r2
 8006360:	f002 fc2e 	bl	8008bc0 <__ulp>
 8006364:	ec51 0b10 	vmov	r0, r1, d0
 8006368:	b17e      	cbz	r6, 800638a <sulp+0x36>
 800636a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800636e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006372:	2b00      	cmp	r3, #0
 8006374:	dd09      	ble.n	800638a <sulp+0x36>
 8006376:	051b      	lsls	r3, r3, #20
 8006378:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800637c:	2400      	movs	r4, #0
 800637e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006382:	4622      	mov	r2, r4
 8006384:	462b      	mov	r3, r5
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	0000      	movs	r0, r0
	...

08006390 <_strtod_l>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	b0a3      	sub	sp, #140	; 0x8c
 8006396:	461f      	mov	r7, r3
 8006398:	2300      	movs	r3, #0
 800639a:	931e      	str	r3, [sp, #120]	; 0x78
 800639c:	4ba4      	ldr	r3, [pc, #656]	; (8006630 <_strtod_l+0x2a0>)
 800639e:	9219      	str	r2, [sp, #100]	; 0x64
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9307      	str	r3, [sp, #28]
 80063a4:	4604      	mov	r4, r0
 80063a6:	4618      	mov	r0, r3
 80063a8:	4688      	mov	r8, r1
 80063aa:	f7f9 ff11 	bl	80001d0 <strlen>
 80063ae:	f04f 0a00 	mov.w	sl, #0
 80063b2:	4605      	mov	r5, r0
 80063b4:	f04f 0b00 	mov.w	fp, #0
 80063b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80063bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	2a2b      	cmp	r2, #43	; 0x2b
 80063c2:	d04c      	beq.n	800645e <_strtod_l+0xce>
 80063c4:	d839      	bhi.n	800643a <_strtod_l+0xaa>
 80063c6:	2a0d      	cmp	r2, #13
 80063c8:	d832      	bhi.n	8006430 <_strtod_l+0xa0>
 80063ca:	2a08      	cmp	r2, #8
 80063cc:	d832      	bhi.n	8006434 <_strtod_l+0xa4>
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d03c      	beq.n	800644c <_strtod_l+0xbc>
 80063d2:	2300      	movs	r3, #0
 80063d4:	930e      	str	r3, [sp, #56]	; 0x38
 80063d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80063d8:	7833      	ldrb	r3, [r6, #0]
 80063da:	2b30      	cmp	r3, #48	; 0x30
 80063dc:	f040 80b4 	bne.w	8006548 <_strtod_l+0x1b8>
 80063e0:	7873      	ldrb	r3, [r6, #1]
 80063e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063e6:	2b58      	cmp	r3, #88	; 0x58
 80063e8:	d16c      	bne.n	80064c4 <_strtod_l+0x134>
 80063ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	ab1e      	add	r3, sp, #120	; 0x78
 80063f0:	9702      	str	r7, [sp, #8]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	4a8f      	ldr	r2, [pc, #572]	; (8006634 <_strtod_l+0x2a4>)
 80063f6:	ab1f      	add	r3, sp, #124	; 0x7c
 80063f8:	a91d      	add	r1, sp, #116	; 0x74
 80063fa:	4620      	mov	r0, r4
 80063fc:	f001 fd40 	bl	8007e80 <__gethex>
 8006400:	f010 0707 	ands.w	r7, r0, #7
 8006404:	4605      	mov	r5, r0
 8006406:	d005      	beq.n	8006414 <_strtod_l+0x84>
 8006408:	2f06      	cmp	r7, #6
 800640a:	d12a      	bne.n	8006462 <_strtod_l+0xd2>
 800640c:	3601      	adds	r6, #1
 800640e:	2300      	movs	r3, #0
 8006410:	961d      	str	r6, [sp, #116]	; 0x74
 8006412:	930e      	str	r3, [sp, #56]	; 0x38
 8006414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 8596 	bne.w	8006f48 <_strtod_l+0xbb8>
 800641c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800641e:	b1db      	cbz	r3, 8006458 <_strtod_l+0xc8>
 8006420:	4652      	mov	r2, sl
 8006422:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006426:	ec43 2b10 	vmov	d0, r2, r3
 800642a:	b023      	add	sp, #140	; 0x8c
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	2a20      	cmp	r2, #32
 8006432:	d1ce      	bne.n	80063d2 <_strtod_l+0x42>
 8006434:	3301      	adds	r3, #1
 8006436:	931d      	str	r3, [sp, #116]	; 0x74
 8006438:	e7c0      	b.n	80063bc <_strtod_l+0x2c>
 800643a:	2a2d      	cmp	r2, #45	; 0x2d
 800643c:	d1c9      	bne.n	80063d2 <_strtod_l+0x42>
 800643e:	2201      	movs	r2, #1
 8006440:	920e      	str	r2, [sp, #56]	; 0x38
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	921d      	str	r2, [sp, #116]	; 0x74
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1c4      	bne.n	80063d6 <_strtod_l+0x46>
 800644c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800644e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8576 	bne.w	8006f44 <_strtod_l+0xbb4>
 8006458:	4652      	mov	r2, sl
 800645a:	465b      	mov	r3, fp
 800645c:	e7e3      	b.n	8006426 <_strtod_l+0x96>
 800645e:	2200      	movs	r2, #0
 8006460:	e7ee      	b.n	8006440 <_strtod_l+0xb0>
 8006462:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006464:	b13a      	cbz	r2, 8006476 <_strtod_l+0xe6>
 8006466:	2135      	movs	r1, #53	; 0x35
 8006468:	a820      	add	r0, sp, #128	; 0x80
 800646a:	f002 fcb4 	bl	8008dd6 <__copybits>
 800646e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006470:	4620      	mov	r0, r4
 8006472:	f002 f879 	bl	8008568 <_Bfree>
 8006476:	3f01      	subs	r7, #1
 8006478:	2f05      	cmp	r7, #5
 800647a:	d807      	bhi.n	800648c <_strtod_l+0xfc>
 800647c:	e8df f007 	tbb	[pc, r7]
 8006480:	1d180b0e 	.word	0x1d180b0e
 8006484:	030e      	.short	0x030e
 8006486:	f04f 0b00 	mov.w	fp, #0
 800648a:	46da      	mov	sl, fp
 800648c:	0728      	lsls	r0, r5, #28
 800648e:	d5c1      	bpl.n	8006414 <_strtod_l+0x84>
 8006490:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006494:	e7be      	b.n	8006414 <_strtod_l+0x84>
 8006496:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800649a:	e7f7      	b.n	800648c <_strtod_l+0xfc>
 800649c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80064a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80064a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80064aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80064ae:	e7ed      	b.n	800648c <_strtod_l+0xfc>
 80064b0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006638 <_strtod_l+0x2a8>
 80064b4:	f04f 0a00 	mov.w	sl, #0
 80064b8:	e7e8      	b.n	800648c <_strtod_l+0xfc>
 80064ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80064be:	f04f 3aff 	mov.w	sl, #4294967295
 80064c2:	e7e3      	b.n	800648c <_strtod_l+0xfc>
 80064c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	921d      	str	r2, [sp, #116]	; 0x74
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b30      	cmp	r3, #48	; 0x30
 80064ce:	d0f9      	beq.n	80064c4 <_strtod_l+0x134>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d09f      	beq.n	8006414 <_strtod_l+0x84>
 80064d4:	2301      	movs	r3, #1
 80064d6:	f04f 0900 	mov.w	r9, #0
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064de:	930a      	str	r3, [sp, #40]	; 0x28
 80064e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80064e4:	464f      	mov	r7, r9
 80064e6:	220a      	movs	r2, #10
 80064e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80064ea:	7806      	ldrb	r6, [r0, #0]
 80064ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80064f0:	b2d9      	uxtb	r1, r3
 80064f2:	2909      	cmp	r1, #9
 80064f4:	d92a      	bls.n	800654c <_strtod_l+0x1bc>
 80064f6:	9907      	ldr	r1, [sp, #28]
 80064f8:	462a      	mov	r2, r5
 80064fa:	f002 fedd 	bl	80092b8 <strncmp>
 80064fe:	b398      	cbz	r0, 8006568 <_strtod_l+0x1d8>
 8006500:	2000      	movs	r0, #0
 8006502:	4633      	mov	r3, r6
 8006504:	463d      	mov	r5, r7
 8006506:	9007      	str	r0, [sp, #28]
 8006508:	4602      	mov	r2, r0
 800650a:	2b65      	cmp	r3, #101	; 0x65
 800650c:	d001      	beq.n	8006512 <_strtod_l+0x182>
 800650e:	2b45      	cmp	r3, #69	; 0x45
 8006510:	d118      	bne.n	8006544 <_strtod_l+0x1b4>
 8006512:	b91d      	cbnz	r5, 800651c <_strtod_l+0x18c>
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	4303      	orrs	r3, r0
 8006518:	d098      	beq.n	800644c <_strtod_l+0xbc>
 800651a:	2500      	movs	r5, #0
 800651c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006520:	f108 0301 	add.w	r3, r8, #1
 8006524:	931d      	str	r3, [sp, #116]	; 0x74
 8006526:	f898 3001 	ldrb.w	r3, [r8, #1]
 800652a:	2b2b      	cmp	r3, #43	; 0x2b
 800652c:	d075      	beq.n	800661a <_strtod_l+0x28a>
 800652e:	2b2d      	cmp	r3, #45	; 0x2d
 8006530:	d07b      	beq.n	800662a <_strtod_l+0x29a>
 8006532:	f04f 0c00 	mov.w	ip, #0
 8006536:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800653a:	2909      	cmp	r1, #9
 800653c:	f240 8082 	bls.w	8006644 <_strtod_l+0x2b4>
 8006540:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006544:	2600      	movs	r6, #0
 8006546:	e09d      	b.n	8006684 <_strtod_l+0x2f4>
 8006548:	2300      	movs	r3, #0
 800654a:	e7c4      	b.n	80064d6 <_strtod_l+0x146>
 800654c:	2f08      	cmp	r7, #8
 800654e:	bfd8      	it	le
 8006550:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006552:	f100 0001 	add.w	r0, r0, #1
 8006556:	bfda      	itte	le
 8006558:	fb02 3301 	mlale	r3, r2, r1, r3
 800655c:	9309      	strle	r3, [sp, #36]	; 0x24
 800655e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006562:	3701      	adds	r7, #1
 8006564:	901d      	str	r0, [sp, #116]	; 0x74
 8006566:	e7bf      	b.n	80064e8 <_strtod_l+0x158>
 8006568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800656a:	195a      	adds	r2, r3, r5
 800656c:	921d      	str	r2, [sp, #116]	; 0x74
 800656e:	5d5b      	ldrb	r3, [r3, r5]
 8006570:	2f00      	cmp	r7, #0
 8006572:	d037      	beq.n	80065e4 <_strtod_l+0x254>
 8006574:	9007      	str	r0, [sp, #28]
 8006576:	463d      	mov	r5, r7
 8006578:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800657c:	2a09      	cmp	r2, #9
 800657e:	d912      	bls.n	80065a6 <_strtod_l+0x216>
 8006580:	2201      	movs	r2, #1
 8006582:	e7c2      	b.n	800650a <_strtod_l+0x17a>
 8006584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	921d      	str	r2, [sp, #116]	; 0x74
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	3001      	adds	r0, #1
 800658e:	2b30      	cmp	r3, #48	; 0x30
 8006590:	d0f8      	beq.n	8006584 <_strtod_l+0x1f4>
 8006592:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006596:	2a08      	cmp	r2, #8
 8006598:	f200 84db 	bhi.w	8006f52 <_strtod_l+0xbc2>
 800659c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800659e:	9007      	str	r0, [sp, #28]
 80065a0:	2000      	movs	r0, #0
 80065a2:	920a      	str	r2, [sp, #40]	; 0x28
 80065a4:	4605      	mov	r5, r0
 80065a6:	3b30      	subs	r3, #48	; 0x30
 80065a8:	f100 0201 	add.w	r2, r0, #1
 80065ac:	d014      	beq.n	80065d8 <_strtod_l+0x248>
 80065ae:	9907      	ldr	r1, [sp, #28]
 80065b0:	4411      	add	r1, r2
 80065b2:	9107      	str	r1, [sp, #28]
 80065b4:	462a      	mov	r2, r5
 80065b6:	eb00 0e05 	add.w	lr, r0, r5
 80065ba:	210a      	movs	r1, #10
 80065bc:	4572      	cmp	r2, lr
 80065be:	d113      	bne.n	80065e8 <_strtod_l+0x258>
 80065c0:	182a      	adds	r2, r5, r0
 80065c2:	2a08      	cmp	r2, #8
 80065c4:	f105 0501 	add.w	r5, r5, #1
 80065c8:	4405      	add	r5, r0
 80065ca:	dc1c      	bgt.n	8006606 <_strtod_l+0x276>
 80065cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ce:	220a      	movs	r2, #10
 80065d0:	fb02 3301 	mla	r3, r2, r1, r3
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	2200      	movs	r2, #0
 80065d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065da:	1c59      	adds	r1, r3, #1
 80065dc:	911d      	str	r1, [sp, #116]	; 0x74
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	4610      	mov	r0, r2
 80065e2:	e7c9      	b.n	8006578 <_strtod_l+0x1e8>
 80065e4:	4638      	mov	r0, r7
 80065e6:	e7d2      	b.n	800658e <_strtod_l+0x1fe>
 80065e8:	2a08      	cmp	r2, #8
 80065ea:	dc04      	bgt.n	80065f6 <_strtod_l+0x266>
 80065ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065ee:	434e      	muls	r6, r1
 80065f0:	9609      	str	r6, [sp, #36]	; 0x24
 80065f2:	3201      	adds	r2, #1
 80065f4:	e7e2      	b.n	80065bc <_strtod_l+0x22c>
 80065f6:	f102 0c01 	add.w	ip, r2, #1
 80065fa:	f1bc 0f10 	cmp.w	ip, #16
 80065fe:	bfd8      	it	le
 8006600:	fb01 f909 	mulle.w	r9, r1, r9
 8006604:	e7f5      	b.n	80065f2 <_strtod_l+0x262>
 8006606:	2d10      	cmp	r5, #16
 8006608:	bfdc      	itt	le
 800660a:	220a      	movle	r2, #10
 800660c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006610:	e7e1      	b.n	80065d6 <_strtod_l+0x246>
 8006612:	2300      	movs	r3, #0
 8006614:	9307      	str	r3, [sp, #28]
 8006616:	2201      	movs	r2, #1
 8006618:	e77c      	b.n	8006514 <_strtod_l+0x184>
 800661a:	f04f 0c00 	mov.w	ip, #0
 800661e:	f108 0302 	add.w	r3, r8, #2
 8006622:	931d      	str	r3, [sp, #116]	; 0x74
 8006624:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006628:	e785      	b.n	8006536 <_strtod_l+0x1a6>
 800662a:	f04f 0c01 	mov.w	ip, #1
 800662e:	e7f6      	b.n	800661e <_strtod_l+0x28e>
 8006630:	0800a178 	.word	0x0800a178
 8006634:	08009f28 	.word	0x08009f28
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	911d      	str	r1, [sp, #116]	; 0x74
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d0f9      	beq.n	800663c <_strtod_l+0x2ac>
 8006648:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800664c:	2908      	cmp	r1, #8
 800664e:	f63f af79 	bhi.w	8006544 <_strtod_l+0x1b4>
 8006652:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006656:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006658:	9308      	str	r3, [sp, #32]
 800665a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	911d      	str	r1, [sp, #116]	; 0x74
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006666:	2e09      	cmp	r6, #9
 8006668:	d937      	bls.n	80066da <_strtod_l+0x34a>
 800666a:	9e08      	ldr	r6, [sp, #32]
 800666c:	1b89      	subs	r1, r1, r6
 800666e:	2908      	cmp	r1, #8
 8006670:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006674:	dc02      	bgt.n	800667c <_strtod_l+0x2ec>
 8006676:	4576      	cmp	r6, lr
 8006678:	bfa8      	it	ge
 800667a:	4676      	movge	r6, lr
 800667c:	f1bc 0f00 	cmp.w	ip, #0
 8006680:	d000      	beq.n	8006684 <_strtod_l+0x2f4>
 8006682:	4276      	negs	r6, r6
 8006684:	2d00      	cmp	r5, #0
 8006686:	d14f      	bne.n	8006728 <_strtod_l+0x398>
 8006688:	9904      	ldr	r1, [sp, #16]
 800668a:	4301      	orrs	r1, r0
 800668c:	f47f aec2 	bne.w	8006414 <_strtod_l+0x84>
 8006690:	2a00      	cmp	r2, #0
 8006692:	f47f aedb 	bne.w	800644c <_strtod_l+0xbc>
 8006696:	2b69      	cmp	r3, #105	; 0x69
 8006698:	d027      	beq.n	80066ea <_strtod_l+0x35a>
 800669a:	dc24      	bgt.n	80066e6 <_strtod_l+0x356>
 800669c:	2b49      	cmp	r3, #73	; 0x49
 800669e:	d024      	beq.n	80066ea <_strtod_l+0x35a>
 80066a0:	2b4e      	cmp	r3, #78	; 0x4e
 80066a2:	f47f aed3 	bne.w	800644c <_strtod_l+0xbc>
 80066a6:	499e      	ldr	r1, [pc, #632]	; (8006920 <_strtod_l+0x590>)
 80066a8:	a81d      	add	r0, sp, #116	; 0x74
 80066aa:	f001 fe41 	bl	8008330 <__match>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f43f aecc 	beq.w	800644c <_strtod_l+0xbc>
 80066b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b28      	cmp	r3, #40	; 0x28
 80066ba:	d12d      	bne.n	8006718 <_strtod_l+0x388>
 80066bc:	4999      	ldr	r1, [pc, #612]	; (8006924 <_strtod_l+0x594>)
 80066be:	aa20      	add	r2, sp, #128	; 0x80
 80066c0:	a81d      	add	r0, sp, #116	; 0x74
 80066c2:	f001 fe49 	bl	8008358 <__hexnan>
 80066c6:	2805      	cmp	r0, #5
 80066c8:	d126      	bne.n	8006718 <_strtod_l+0x388>
 80066ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066cc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80066d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80066d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80066d8:	e69c      	b.n	8006414 <_strtod_l+0x84>
 80066da:	210a      	movs	r1, #10
 80066dc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80066e0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80066e4:	e7b9      	b.n	800665a <_strtod_l+0x2ca>
 80066e6:	2b6e      	cmp	r3, #110	; 0x6e
 80066e8:	e7db      	b.n	80066a2 <_strtod_l+0x312>
 80066ea:	498f      	ldr	r1, [pc, #572]	; (8006928 <_strtod_l+0x598>)
 80066ec:	a81d      	add	r0, sp, #116	; 0x74
 80066ee:	f001 fe1f 	bl	8008330 <__match>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	f43f aeaa 	beq.w	800644c <_strtod_l+0xbc>
 80066f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066fa:	498c      	ldr	r1, [pc, #560]	; (800692c <_strtod_l+0x59c>)
 80066fc:	3b01      	subs	r3, #1
 80066fe:	a81d      	add	r0, sp, #116	; 0x74
 8006700:	931d      	str	r3, [sp, #116]	; 0x74
 8006702:	f001 fe15 	bl	8008330 <__match>
 8006706:	b910      	cbnz	r0, 800670e <_strtod_l+0x37e>
 8006708:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800670a:	3301      	adds	r3, #1
 800670c:	931d      	str	r3, [sp, #116]	; 0x74
 800670e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800693c <_strtod_l+0x5ac>
 8006712:	f04f 0a00 	mov.w	sl, #0
 8006716:	e67d      	b.n	8006414 <_strtod_l+0x84>
 8006718:	4885      	ldr	r0, [pc, #532]	; (8006930 <_strtod_l+0x5a0>)
 800671a:	f002 fdb5 	bl	8009288 <nan>
 800671e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006722:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006726:	e675      	b.n	8006414 <_strtod_l+0x84>
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800672c:	1af3      	subs	r3, r6, r3
 800672e:	2f00      	cmp	r7, #0
 8006730:	bf08      	it	eq
 8006732:	462f      	moveq	r7, r5
 8006734:	2d10      	cmp	r5, #16
 8006736:	9308      	str	r3, [sp, #32]
 8006738:	46a8      	mov	r8, r5
 800673a:	bfa8      	it	ge
 800673c:	f04f 0810 	movge.w	r8, #16
 8006740:	f7f9 fee0 	bl	8000504 <__aeabi_ui2d>
 8006744:	2d09      	cmp	r5, #9
 8006746:	4682      	mov	sl, r0
 8006748:	468b      	mov	fp, r1
 800674a:	dd13      	ble.n	8006774 <_strtod_l+0x3e4>
 800674c:	4b79      	ldr	r3, [pc, #484]	; (8006934 <_strtod_l+0x5a4>)
 800674e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006752:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	4682      	mov	sl, r0
 800675c:	4648      	mov	r0, r9
 800675e:	468b      	mov	fp, r1
 8006760:	f7f9 fed0 	bl	8000504 <__aeabi_ui2d>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4650      	mov	r0, sl
 800676a:	4659      	mov	r1, fp
 800676c:	f7f9 fd8e 	bl	800028c <__adddf3>
 8006770:	4682      	mov	sl, r0
 8006772:	468b      	mov	fp, r1
 8006774:	2d0f      	cmp	r5, #15
 8006776:	dc38      	bgt.n	80067ea <_strtod_l+0x45a>
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f43f ae4a 	beq.w	8006414 <_strtod_l+0x84>
 8006780:	dd24      	ble.n	80067cc <_strtod_l+0x43c>
 8006782:	2b16      	cmp	r3, #22
 8006784:	dc0b      	bgt.n	800679e <_strtod_l+0x40e>
 8006786:	4d6b      	ldr	r5, [pc, #428]	; (8006934 <_strtod_l+0x5a4>)
 8006788:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800678c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006790:	4652      	mov	r2, sl
 8006792:	465b      	mov	r3, fp
 8006794:	f7f9 ff30 	bl	80005f8 <__aeabi_dmul>
 8006798:	4682      	mov	sl, r0
 800679a:	468b      	mov	fp, r1
 800679c:	e63a      	b.n	8006414 <_strtod_l+0x84>
 800679e:	9a08      	ldr	r2, [sp, #32]
 80067a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80067a4:	4293      	cmp	r3, r2
 80067a6:	db20      	blt.n	80067ea <_strtod_l+0x45a>
 80067a8:	4c62      	ldr	r4, [pc, #392]	; (8006934 <_strtod_l+0x5a4>)
 80067aa:	f1c5 050f 	rsb	r5, r5, #15
 80067ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067b2:	4652      	mov	r2, sl
 80067b4:	465b      	mov	r3, fp
 80067b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ba:	f7f9 ff1d 	bl	80005f8 <__aeabi_dmul>
 80067be:	9b08      	ldr	r3, [sp, #32]
 80067c0:	1b5d      	subs	r5, r3, r5
 80067c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067ca:	e7e3      	b.n	8006794 <_strtod_l+0x404>
 80067cc:	9b08      	ldr	r3, [sp, #32]
 80067ce:	3316      	adds	r3, #22
 80067d0:	db0b      	blt.n	80067ea <_strtod_l+0x45a>
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	4a57      	ldr	r2, [pc, #348]	; (8006934 <_strtod_l+0x5a4>)
 80067d6:	1b9e      	subs	r6, r3, r6
 80067d8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80067dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067e0:	4650      	mov	r0, sl
 80067e2:	4659      	mov	r1, fp
 80067e4:	f7fa f832 	bl	800084c <__aeabi_ddiv>
 80067e8:	e7d6      	b.n	8006798 <_strtod_l+0x408>
 80067ea:	9b08      	ldr	r3, [sp, #32]
 80067ec:	eba5 0808 	sub.w	r8, r5, r8
 80067f0:	4498      	add	r8, r3
 80067f2:	f1b8 0f00 	cmp.w	r8, #0
 80067f6:	dd71      	ble.n	80068dc <_strtod_l+0x54c>
 80067f8:	f018 030f 	ands.w	r3, r8, #15
 80067fc:	d00a      	beq.n	8006814 <_strtod_l+0x484>
 80067fe:	494d      	ldr	r1, [pc, #308]	; (8006934 <_strtod_l+0x5a4>)
 8006800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006804:	4652      	mov	r2, sl
 8006806:	465b      	mov	r3, fp
 8006808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	4682      	mov	sl, r0
 8006812:	468b      	mov	fp, r1
 8006814:	f038 080f 	bics.w	r8, r8, #15
 8006818:	d04d      	beq.n	80068b6 <_strtod_l+0x526>
 800681a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800681e:	dd22      	ble.n	8006866 <_strtod_l+0x4d6>
 8006820:	2500      	movs	r5, #0
 8006822:	462e      	mov	r6, r5
 8006824:	9509      	str	r5, [sp, #36]	; 0x24
 8006826:	9507      	str	r5, [sp, #28]
 8006828:	2322      	movs	r3, #34	; 0x22
 800682a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800693c <_strtod_l+0x5ac>
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	f04f 0a00 	mov.w	sl, #0
 8006834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	f43f adec 	beq.w	8006414 <_strtod_l+0x84>
 800683c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800683e:	4620      	mov	r0, r4
 8006840:	f001 fe92 	bl	8008568 <_Bfree>
 8006844:	9907      	ldr	r1, [sp, #28]
 8006846:	4620      	mov	r0, r4
 8006848:	f001 fe8e 	bl	8008568 <_Bfree>
 800684c:	4631      	mov	r1, r6
 800684e:	4620      	mov	r0, r4
 8006850:	f001 fe8a 	bl	8008568 <_Bfree>
 8006854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006856:	4620      	mov	r0, r4
 8006858:	f001 fe86 	bl	8008568 <_Bfree>
 800685c:	4629      	mov	r1, r5
 800685e:	4620      	mov	r0, r4
 8006860:	f001 fe82 	bl	8008568 <_Bfree>
 8006864:	e5d6      	b.n	8006414 <_strtod_l+0x84>
 8006866:	2300      	movs	r3, #0
 8006868:	ea4f 1828 	mov.w	r8, r8, asr #4
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	4699      	mov	r9, r3
 8006872:	f1b8 0f01 	cmp.w	r8, #1
 8006876:	dc21      	bgt.n	80068bc <_strtod_l+0x52c>
 8006878:	b10b      	cbz	r3, 800687e <_strtod_l+0x4ee>
 800687a:	4682      	mov	sl, r0
 800687c:	468b      	mov	fp, r1
 800687e:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <_strtod_l+0x5a8>)
 8006880:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006884:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006888:	4652      	mov	r2, sl
 800688a:	465b      	mov	r3, fp
 800688c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	4b29      	ldr	r3, [pc, #164]	; (800693c <_strtod_l+0x5ac>)
 8006896:	460a      	mov	r2, r1
 8006898:	400b      	ands	r3, r1
 800689a:	4929      	ldr	r1, [pc, #164]	; (8006940 <_strtod_l+0x5b0>)
 800689c:	428b      	cmp	r3, r1
 800689e:	4682      	mov	sl, r0
 80068a0:	d8be      	bhi.n	8006820 <_strtod_l+0x490>
 80068a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80068a6:	428b      	cmp	r3, r1
 80068a8:	bf86      	itte	hi
 80068aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006944 <_strtod_l+0x5b4>
 80068ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80068b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80068b6:	2300      	movs	r3, #0
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	e081      	b.n	80069c0 <_strtod_l+0x630>
 80068bc:	f018 0f01 	tst.w	r8, #1
 80068c0:	d007      	beq.n	80068d2 <_strtod_l+0x542>
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <_strtod_l+0x5a8>)
 80068c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	2301      	movs	r3, #1
 80068d2:	f109 0901 	add.w	r9, r9, #1
 80068d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068da:	e7ca      	b.n	8006872 <_strtod_l+0x4e2>
 80068dc:	d0eb      	beq.n	80068b6 <_strtod_l+0x526>
 80068de:	f1c8 0800 	rsb	r8, r8, #0
 80068e2:	f018 020f 	ands.w	r2, r8, #15
 80068e6:	d00a      	beq.n	80068fe <_strtod_l+0x56e>
 80068e8:	4b12      	ldr	r3, [pc, #72]	; (8006934 <_strtod_l+0x5a4>)
 80068ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ee:	4650      	mov	r0, sl
 80068f0:	4659      	mov	r1, fp
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 ffa9 	bl	800084c <__aeabi_ddiv>
 80068fa:	4682      	mov	sl, r0
 80068fc:	468b      	mov	fp, r1
 80068fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006902:	d0d8      	beq.n	80068b6 <_strtod_l+0x526>
 8006904:	f1b8 0f1f 	cmp.w	r8, #31
 8006908:	dd1e      	ble.n	8006948 <_strtod_l+0x5b8>
 800690a:	2500      	movs	r5, #0
 800690c:	462e      	mov	r6, r5
 800690e:	9509      	str	r5, [sp, #36]	; 0x24
 8006910:	9507      	str	r5, [sp, #28]
 8006912:	2322      	movs	r3, #34	; 0x22
 8006914:	f04f 0a00 	mov.w	sl, #0
 8006918:	f04f 0b00 	mov.w	fp, #0
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	e789      	b.n	8006834 <_strtod_l+0x4a4>
 8006920:	08009ef9 	.word	0x08009ef9
 8006924:	08009f3c 	.word	0x08009f3c
 8006928:	08009ef1 	.word	0x08009ef1
 800692c:	0800a07c 	.word	0x0800a07c
 8006930:	0800a338 	.word	0x0800a338
 8006934:	0800a218 	.word	0x0800a218
 8006938:	0800a1f0 	.word	0x0800a1f0
 800693c:	7ff00000 	.word	0x7ff00000
 8006940:	7ca00000 	.word	0x7ca00000
 8006944:	7fefffff 	.word	0x7fefffff
 8006948:	f018 0310 	ands.w	r3, r8, #16
 800694c:	bf18      	it	ne
 800694e:	236a      	movne	r3, #106	; 0x6a
 8006950:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006d08 <_strtod_l+0x978>
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	2300      	movs	r3, #0
 800695c:	f018 0f01 	tst.w	r8, #1
 8006960:	d004      	beq.n	800696c <_strtod_l+0x5dc>
 8006962:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006966:	f7f9 fe47 	bl	80005f8 <__aeabi_dmul>
 800696a:	2301      	movs	r3, #1
 800696c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006970:	f109 0908 	add.w	r9, r9, #8
 8006974:	d1f2      	bne.n	800695c <_strtod_l+0x5cc>
 8006976:	b10b      	cbz	r3, 800697c <_strtod_l+0x5ec>
 8006978:	4682      	mov	sl, r0
 800697a:	468b      	mov	fp, r1
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	b1bb      	cbz	r3, 80069b0 <_strtod_l+0x620>
 8006980:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006984:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006988:	2b00      	cmp	r3, #0
 800698a:	4659      	mov	r1, fp
 800698c:	dd10      	ble.n	80069b0 <_strtod_l+0x620>
 800698e:	2b1f      	cmp	r3, #31
 8006990:	f340 8128 	ble.w	8006be4 <_strtod_l+0x854>
 8006994:	2b34      	cmp	r3, #52	; 0x34
 8006996:	bfde      	ittt	le
 8006998:	3b20      	suble	r3, #32
 800699a:	f04f 32ff 	movle.w	r2, #4294967295
 800699e:	fa02 f303 	lslle.w	r3, r2, r3
 80069a2:	f04f 0a00 	mov.w	sl, #0
 80069a6:	bfcc      	ite	gt
 80069a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80069ac:	ea03 0b01 	andle.w	fp, r3, r1
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7fa f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1a4      	bne.n	800690a <_strtod_l+0x57a>
 80069c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069c6:	462b      	mov	r3, r5
 80069c8:	463a      	mov	r2, r7
 80069ca:	4620      	mov	r0, r4
 80069cc:	f001 fe38 	bl	8008640 <__s2b>
 80069d0:	9009      	str	r0, [sp, #36]	; 0x24
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f43f af24 	beq.w	8006820 <_strtod_l+0x490>
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	1b9e      	subs	r6, r3, r6
 80069dc:	9b08      	ldr	r3, [sp, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfb4      	ite	lt
 80069e2:	4633      	movlt	r3, r6
 80069e4:	2300      	movge	r3, #0
 80069e6:	9310      	str	r3, [sp, #64]	; 0x40
 80069e8:	9b08      	ldr	r3, [sp, #32]
 80069ea:	2500      	movs	r5, #0
 80069ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80069f0:	9318      	str	r3, [sp, #96]	; 0x60
 80069f2:	462e      	mov	r6, r5
 80069f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f6:	4620      	mov	r0, r4
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	f001 fd75 	bl	80084e8 <_Balloc>
 80069fe:	9007      	str	r0, [sp, #28]
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f43f af11 	beq.w	8006828 <_strtod_l+0x498>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	3202      	adds	r2, #2
 8006a0c:	f103 010c 	add.w	r1, r3, #12
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	300c      	adds	r0, #12
 8006a14:	f001 fd5a 	bl	80084cc <memcpy>
 8006a18:	ec4b ab10 	vmov	d0, sl, fp
 8006a1c:	aa20      	add	r2, sp, #128	; 0x80
 8006a1e:	a91f      	add	r1, sp, #124	; 0x7c
 8006a20:	4620      	mov	r0, r4
 8006a22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006a26:	f002 f947 	bl	8008cb8 <__d2b>
 8006a2a:	901e      	str	r0, [sp, #120]	; 0x78
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f43f aefb 	beq.w	8006828 <_strtod_l+0x498>
 8006a32:	2101      	movs	r1, #1
 8006a34:	4620      	mov	r0, r4
 8006a36:	f001 fe9d 	bl	8008774 <__i2b>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f43f aef3 	beq.w	8006828 <_strtod_l+0x498>
 8006a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a44:	9904      	ldr	r1, [sp, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfab      	itete	ge
 8006a4a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006a4c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006a4e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006a50:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006a54:	bfac      	ite	ge
 8006a56:	eb03 0902 	addge.w	r9, r3, r2
 8006a5a:	1ad7      	sublt	r7, r2, r3
 8006a5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a5e:	eba3 0801 	sub.w	r8, r3, r1
 8006a62:	4490      	add	r8, r2
 8006a64:	4ba3      	ldr	r3, [pc, #652]	; (8006cf4 <_strtod_l+0x964>)
 8006a66:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a6a:	4598      	cmp	r8, r3
 8006a6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a70:	f280 80cc 	bge.w	8006c0c <_strtod_l+0x87c>
 8006a74:	eba3 0308 	sub.w	r3, r3, r8
 8006a78:	2b1f      	cmp	r3, #31
 8006a7a:	eba2 0203 	sub.w	r2, r2, r3
 8006a7e:	f04f 0101 	mov.w	r1, #1
 8006a82:	f300 80b6 	bgt.w	8006bf2 <_strtod_l+0x862>
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a90:	eb09 0802 	add.w	r8, r9, r2
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	45c1      	cmp	r9, r8
 8006a98:	4417      	add	r7, r2
 8006a9a:	441f      	add	r7, r3
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	bfa8      	it	ge
 8006aa0:	4643      	movge	r3, r8
 8006aa2:	42bb      	cmp	r3, r7
 8006aa4:	bfa8      	it	ge
 8006aa6:	463b      	movge	r3, r7
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfc2      	ittt	gt
 8006aac:	eba8 0803 	subgt.w	r8, r8, r3
 8006ab0:	1aff      	subgt	r7, r7, r3
 8006ab2:	eba9 0903 	subgt.w	r9, r9, r3
 8006ab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dd17      	ble.n	8006aec <_strtod_l+0x75c>
 8006abc:	4631      	mov	r1, r6
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f001 ff13 	bl	80088ec <__pow5mult>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f43f aead 	beq.w	8006828 <_strtod_l+0x498>
 8006ace:	4601      	mov	r1, r0
 8006ad0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f001 fe64 	bl	80087a0 <__multiply>
 8006ad8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ada:	2800      	cmp	r0, #0
 8006adc:	f43f aea4 	beq.w	8006828 <_strtod_l+0x498>
 8006ae0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f001 fd40 	bl	8008568 <_Bfree>
 8006ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aea:	931e      	str	r3, [sp, #120]	; 0x78
 8006aec:	f1b8 0f00 	cmp.w	r8, #0
 8006af0:	f300 8091 	bgt.w	8006c16 <_strtod_l+0x886>
 8006af4:	9b08      	ldr	r3, [sp, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	dd08      	ble.n	8006b0c <_strtod_l+0x77c>
 8006afa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006afc:	9907      	ldr	r1, [sp, #28]
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fef4 	bl	80088ec <__pow5mult>
 8006b04:	9007      	str	r0, [sp, #28]
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f ae8e 	beq.w	8006828 <_strtod_l+0x498>
 8006b0c:	2f00      	cmp	r7, #0
 8006b0e:	dd08      	ble.n	8006b22 <_strtod_l+0x792>
 8006b10:	9907      	ldr	r1, [sp, #28]
 8006b12:	463a      	mov	r2, r7
 8006b14:	4620      	mov	r0, r4
 8006b16:	f001 ff43 	bl	80089a0 <__lshift>
 8006b1a:	9007      	str	r0, [sp, #28]
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f43f ae83 	beq.w	8006828 <_strtod_l+0x498>
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	dd08      	ble.n	8006b3a <_strtod_l+0x7aa>
 8006b28:	4631      	mov	r1, r6
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f001 ff37 	bl	80089a0 <__lshift>
 8006b32:	4606      	mov	r6, r0
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f43f ae77 	beq.w	8006828 <_strtod_l+0x498>
 8006b3a:	9a07      	ldr	r2, [sp, #28]
 8006b3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f001 ffb6 	bl	8008ab0 <__mdiff>
 8006b44:	4605      	mov	r5, r0
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f43f ae6e 	beq.w	8006828 <_strtod_l+0x498>
 8006b4c:	68c3      	ldr	r3, [r0, #12]
 8006b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b50:	2300      	movs	r3, #0
 8006b52:	60c3      	str	r3, [r0, #12]
 8006b54:	4631      	mov	r1, r6
 8006b56:	f001 ff8f 	bl	8008a78 <__mcmp>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	da65      	bge.n	8006c2a <_strtod_l+0x89a>
 8006b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b60:	ea53 030a 	orrs.w	r3, r3, sl
 8006b64:	f040 8087 	bne.w	8006c76 <_strtod_l+0x8e6>
 8006b68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8082 	bne.w	8006c76 <_strtod_l+0x8e6>
 8006b72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b7e:	d97a      	bls.n	8006c76 <_strtod_l+0x8e6>
 8006b80:	696b      	ldr	r3, [r5, #20]
 8006b82:	b913      	cbnz	r3, 8006b8a <_strtod_l+0x7fa>
 8006b84:	692b      	ldr	r3, [r5, #16]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	dd75      	ble.n	8006c76 <_strtod_l+0x8e6>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f001 ff06 	bl	80089a0 <__lshift>
 8006b94:	4631      	mov	r1, r6
 8006b96:	4605      	mov	r5, r0
 8006b98:	f001 ff6e 	bl	8008a78 <__mcmp>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	dd6a      	ble.n	8006c76 <_strtod_l+0x8e6>
 8006ba0:	9904      	ldr	r1, [sp, #16]
 8006ba2:	4a55      	ldr	r2, [pc, #340]	; (8006cf8 <_strtod_l+0x968>)
 8006ba4:	465b      	mov	r3, fp
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	f000 8085 	beq.w	8006cb6 <_strtod_l+0x926>
 8006bac:	ea02 010b 	and.w	r1, r2, fp
 8006bb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006bb4:	dc7f      	bgt.n	8006cb6 <_strtod_l+0x926>
 8006bb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006bba:	f77f aeaa 	ble.w	8006912 <_strtod_l+0x582>
 8006bbe:	4a4f      	ldr	r2, [pc, #316]	; (8006cfc <_strtod_l+0x96c>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006bc6:	4650      	mov	r0, sl
 8006bc8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006bcc:	4659      	mov	r1, fp
 8006bce:	f7f9 fd13 	bl	80005f8 <__aeabi_dmul>
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4303      	orrs	r3, r0
 8006bd6:	bf08      	it	eq
 8006bd8:	2322      	moveq	r3, #34	; 0x22
 8006bda:	4682      	mov	sl, r0
 8006bdc:	468b      	mov	fp, r1
 8006bde:	bf08      	it	eq
 8006be0:	6023      	streq	r3, [r4, #0]
 8006be2:	e62b      	b.n	800683c <_strtod_l+0x4ac>
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	ea03 0a0a 	and.w	sl, r3, sl
 8006bf0:	e6de      	b.n	80069b0 <_strtod_l+0x620>
 8006bf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006bf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006bfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006bfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006c02:	fa01 f308 	lsl.w	r3, r1, r8
 8006c06:	930c      	str	r3, [sp, #48]	; 0x30
 8006c08:	9111      	str	r1, [sp, #68]	; 0x44
 8006c0a:	e741      	b.n	8006a90 <_strtod_l+0x700>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c10:	2301      	movs	r3, #1
 8006c12:	9311      	str	r3, [sp, #68]	; 0x44
 8006c14:	e73c      	b.n	8006a90 <_strtod_l+0x700>
 8006c16:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c18:	4642      	mov	r2, r8
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f001 fec0 	bl	80089a0 <__lshift>
 8006c20:	901e      	str	r0, [sp, #120]	; 0x78
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f47f af66 	bne.w	8006af4 <_strtod_l+0x764>
 8006c28:	e5fe      	b.n	8006828 <_strtod_l+0x498>
 8006c2a:	465f      	mov	r7, fp
 8006c2c:	d16e      	bne.n	8006d0c <_strtod_l+0x97c>
 8006c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c34:	b342      	cbz	r2, 8006c88 <_strtod_l+0x8f8>
 8006c36:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <_strtod_l+0x970>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d128      	bne.n	8006c8e <_strtod_l+0x8fe>
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	b1eb      	cbz	r3, 8006c7e <_strtod_l+0x8ee>
 8006c42:	4a2d      	ldr	r2, [pc, #180]	; (8006cf8 <_strtod_l+0x968>)
 8006c44:	403a      	ands	r2, r7
 8006c46:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c4e:	d819      	bhi.n	8006c84 <_strtod_l+0x8f4>
 8006c50:	0d12      	lsrs	r2, r2, #20
 8006c52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c56:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	d117      	bne.n	8006c8e <_strtod_l+0x8fe>
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <_strtod_l+0x974>)
 8006c60:	429f      	cmp	r7, r3
 8006c62:	d102      	bne.n	8006c6a <_strtod_l+0x8da>
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f addf 	beq.w	8006828 <_strtod_l+0x498>
 8006c6a:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <_strtod_l+0x968>)
 8006c6c:	403b      	ands	r3, r7
 8006c6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006c72:	f04f 0a00 	mov.w	sl, #0
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1a0      	bne.n	8006bbe <_strtod_l+0x82e>
 8006c7c:	e5de      	b.n	800683c <_strtod_l+0x4ac>
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	e7ea      	b.n	8006c5a <_strtod_l+0x8ca>
 8006c84:	460b      	mov	r3, r1
 8006c86:	e7e8      	b.n	8006c5a <_strtod_l+0x8ca>
 8006c88:	ea53 030a 	orrs.w	r3, r3, sl
 8006c8c:	d088      	beq.n	8006ba0 <_strtod_l+0x810>
 8006c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c90:	b1db      	cbz	r3, 8006cca <_strtod_l+0x93a>
 8006c92:	423b      	tst	r3, r7
 8006c94:	d0ef      	beq.n	8006c76 <_strtod_l+0x8e6>
 8006c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c98:	9a04      	ldr	r2, [sp, #16]
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	b1c3      	cbz	r3, 8006cd2 <_strtod_l+0x942>
 8006ca0:	f7ff fb58 	bl	8006354 <sulp>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cac:	f7f9 faee 	bl	800028c <__adddf3>
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	468b      	mov	fp, r1
 8006cb4:	e7df      	b.n	8006c76 <_strtod_l+0x8e6>
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006cbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006cc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006cc4:	f04f 3aff 	mov.w	sl, #4294967295
 8006cc8:	e7d5      	b.n	8006c76 <_strtod_l+0x8e6>
 8006cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ccc:	ea13 0f0a 	tst.w	r3, sl
 8006cd0:	e7e0      	b.n	8006c94 <_strtod_l+0x904>
 8006cd2:	f7ff fb3f 	bl	8006354 <sulp>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	f7f9 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d0c1      	beq.n	8006c76 <_strtod_l+0x8e6>
 8006cf2:	e60e      	b.n	8006912 <_strtod_l+0x582>
 8006cf4:	fffffc02 	.word	0xfffffc02
 8006cf8:	7ff00000 	.word	0x7ff00000
 8006cfc:	39500000 	.word	0x39500000
 8006d00:	000fffff 	.word	0x000fffff
 8006d04:	7fefffff 	.word	0x7fefffff
 8006d08:	08009f50 	.word	0x08009f50
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f002 f82e 	bl	8008d70 <__ratio>
 8006d14:	ec59 8b10 	vmov	r8, r9, d0
 8006d18:	ee10 0a10 	vmov	r0, s0
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fee4 	bl	8000af0 <__aeabi_dcmple>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d07c      	beq.n	8006e26 <_strtod_l+0xa96>
 8006d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d04c      	beq.n	8006dcc <_strtod_l+0xa3c>
 8006d32:	4b95      	ldr	r3, [pc, #596]	; (8006f88 <_strtod_l+0xbf8>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006d3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006f88 <_strtod_l+0xbf8>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	4b92      	ldr	r3, [pc, #584]	; (8006f8c <_strtod_l+0xbfc>)
 8006d44:	403b      	ands	r3, r7
 8006d46:	9311      	str	r3, [sp, #68]	; 0x44
 8006d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d4a:	4b91      	ldr	r3, [pc, #580]	; (8006f90 <_strtod_l+0xc00>)
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	f040 80b2 	bne.w	8006eb6 <_strtod_l+0xb26>
 8006d52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d5a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006d5e:	ec4b ab10 	vmov	d0, sl, fp
 8006d62:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006d66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d6a:	f001 ff29 	bl	8008bc0 <__ulp>
 8006d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d72:	ec53 2b10 	vmov	r2, r3, d0
 8006d76:	f7f9 fc3f 	bl	80005f8 <__aeabi_dmul>
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	f7f9 fa85 	bl	800028c <__adddf3>
 8006d82:	460b      	mov	r3, r1
 8006d84:	4981      	ldr	r1, [pc, #516]	; (8006f8c <_strtod_l+0xbfc>)
 8006d86:	4a83      	ldr	r2, [pc, #524]	; (8006f94 <_strtod_l+0xc04>)
 8006d88:	4019      	ands	r1, r3
 8006d8a:	4291      	cmp	r1, r2
 8006d8c:	4682      	mov	sl, r0
 8006d8e:	d95e      	bls.n	8006e4e <_strtod_l+0xabe>
 8006d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d92:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d103      	bne.n	8006da2 <_strtod_l+0xa12>
 8006d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f43f ad43 	beq.w	8006828 <_strtod_l+0x498>
 8006da2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006fa0 <_strtod_l+0xc10>
 8006da6:	f04f 3aff 	mov.w	sl, #4294967295
 8006daa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006dac:	4620      	mov	r0, r4
 8006dae:	f001 fbdb 	bl	8008568 <_Bfree>
 8006db2:	9907      	ldr	r1, [sp, #28]
 8006db4:	4620      	mov	r0, r4
 8006db6:	f001 fbd7 	bl	8008568 <_Bfree>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f001 fbd3 	bl	8008568 <_Bfree>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f001 fbcf 	bl	8008568 <_Bfree>
 8006dca:	e613      	b.n	80069f4 <_strtod_l+0x664>
 8006dcc:	f1ba 0f00 	cmp.w	sl, #0
 8006dd0:	d11b      	bne.n	8006e0a <_strtod_l+0xa7a>
 8006dd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dd6:	b9f3      	cbnz	r3, 8006e16 <_strtod_l+0xa86>
 8006dd8:	4b6b      	ldr	r3, [pc, #428]	; (8006f88 <_strtod_l+0xbf8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4640      	mov	r0, r8
 8006dde:	4649      	mov	r1, r9
 8006de0:	f7f9 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8006de4:	b9d0      	cbnz	r0, 8006e1c <_strtod_l+0xa8c>
 8006de6:	4640      	mov	r0, r8
 8006de8:	4649      	mov	r1, r9
 8006dea:	4b6b      	ldr	r3, [pc, #428]	; (8006f98 <_strtod_l+0xc08>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dfa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006dfe:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e00:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006e04:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e08:	e79b      	b.n	8006d42 <_strtod_l+0x9b2>
 8006e0a:	f1ba 0f01 	cmp.w	sl, #1
 8006e0e:	d102      	bne.n	8006e16 <_strtod_l+0xa86>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f43f ad7e 	beq.w	8006912 <_strtod_l+0x582>
 8006e16:	4b61      	ldr	r3, [pc, #388]	; (8006f9c <_strtod_l+0xc0c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	e78c      	b.n	8006d36 <_strtod_l+0x9a6>
 8006e1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f98 <_strtod_l+0xc08>
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	e7e7      	b.n	8006df6 <_strtod_l+0xa66>
 8006e26:	4b5c      	ldr	r3, [pc, #368]	; (8006f98 <_strtod_l+0xc08>)
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e34:	4680      	mov	r8, r0
 8006e36:	4689      	mov	r9, r1
 8006e38:	b933      	cbnz	r3, 8006e48 <_strtod_l+0xab8>
 8006e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e3e:	9012      	str	r0, [sp, #72]	; 0x48
 8006e40:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006e46:	e7dd      	b.n	8006e04 <_strtod_l+0xa74>
 8006e48:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006e4c:	e7f9      	b.n	8006e42 <_strtod_l+0xab2>
 8006e4e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006e52:	9b04      	ldr	r3, [sp, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1a8      	bne.n	8006daa <_strtod_l+0xa1a>
 8006e58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e5e:	0d1b      	lsrs	r3, r3, #20
 8006e60:	051b      	lsls	r3, r3, #20
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d1a1      	bne.n	8006daa <_strtod_l+0xa1a>
 8006e66:	4640      	mov	r0, r8
 8006e68:	4649      	mov	r1, r9
 8006e6a:	f7f9 ff25 	bl	8000cb8 <__aeabi_d2lz>
 8006e6e:	f7f9 fb95 	bl	800059c <__aeabi_l2d>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fa05 	bl	8000288 <__aeabi_dsub>
 8006e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e84:	ea43 030a 	orr.w	r3, r3, sl
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	d053      	beq.n	8006f38 <_strtod_l+0xba8>
 8006e90:	a335      	add	r3, pc, #212	; (adr r3, 8006f68 <_strtod_l+0xbd8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 fe21 	bl	8000adc <__aeabi_dcmplt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f47f acce 	bne.w	800683c <_strtod_l+0x4ac>
 8006ea0:	a333      	add	r3, pc, #204	; (adr r3, 8006f70 <_strtod_l+0xbe0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 fe35 	bl	8000b18 <__aeabi_dcmpgt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f af7b 	beq.w	8006daa <_strtod_l+0xa1a>
 8006eb4:	e4c2      	b.n	800683c <_strtod_l+0x4ac>
 8006eb6:	9b04      	ldr	r3, [sp, #16]
 8006eb8:	b333      	cbz	r3, 8006f08 <_strtod_l+0xb78>
 8006eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ebc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ec0:	d822      	bhi.n	8006f08 <_strtod_l+0xb78>
 8006ec2:	a32d      	add	r3, pc, #180	; (adr r3, 8006f78 <_strtod_l+0xbe8>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fe10 	bl	8000af0 <__aeabi_dcmple>
 8006ed0:	b1a0      	cbz	r0, 8006efc <_strtod_l+0xb6c>
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	f7f9 fe67 	bl	8000ba8 <__aeabi_d2uiz>
 8006eda:	2801      	cmp	r0, #1
 8006edc:	bf38      	it	cc
 8006ede:	2001      	movcc	r0, #1
 8006ee0:	f7f9 fb10 	bl	8000504 <__aeabi_ui2d>
 8006ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	4689      	mov	r9, r1
 8006eea:	bb13      	cbnz	r3, 8006f32 <_strtod_l+0xba2>
 8006eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ef0:	9014      	str	r0, [sp, #80]	; 0x50
 8006ef2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ef4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ef8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006efe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	930d      	str	r3, [sp, #52]	; 0x34
 8006f08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f0c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f14:	f001 fe54 	bl	8008bc0 <__ulp>
 8006f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f1c:	ec53 2b10 	vmov	r2, r3, d0
 8006f20:	f7f9 fb6a 	bl	80005f8 <__aeabi_dmul>
 8006f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f28:	f7f9 f9b0 	bl	800028c <__adddf3>
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	468b      	mov	fp, r1
 8006f30:	e78f      	b.n	8006e52 <_strtod_l+0xac2>
 8006f32:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006f36:	e7dd      	b.n	8006ef4 <_strtod_l+0xb64>
 8006f38:	a311      	add	r3, pc, #68	; (adr r3, 8006f80 <_strtod_l+0xbf0>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f7f9 fdcd 	bl	8000adc <__aeabi_dcmplt>
 8006f42:	e7b4      	b.n	8006eae <_strtod_l+0xb1e>
 8006f44:	2300      	movs	r3, #0
 8006f46:	930e      	str	r3, [sp, #56]	; 0x38
 8006f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	f7ff ba65 	b.w	800641c <_strtod_l+0x8c>
 8006f52:	2b65      	cmp	r3, #101	; 0x65
 8006f54:	f43f ab5d 	beq.w	8006612 <_strtod_l+0x282>
 8006f58:	2b45      	cmp	r3, #69	; 0x45
 8006f5a:	f43f ab5a 	beq.w	8006612 <_strtod_l+0x282>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f7ff bb92 	b.w	8006688 <_strtod_l+0x2f8>
 8006f64:	f3af 8000 	nop.w
 8006f68:	94a03595 	.word	0x94a03595
 8006f6c:	3fdfffff 	.word	0x3fdfffff
 8006f70:	35afe535 	.word	0x35afe535
 8006f74:	3fe00000 	.word	0x3fe00000
 8006f78:	ffc00000 	.word	0xffc00000
 8006f7c:	41dfffff 	.word	0x41dfffff
 8006f80:	94a03595 	.word	0x94a03595
 8006f84:	3fcfffff 	.word	0x3fcfffff
 8006f88:	3ff00000 	.word	0x3ff00000
 8006f8c:	7ff00000 	.word	0x7ff00000
 8006f90:	7fe00000 	.word	0x7fe00000
 8006f94:	7c9fffff 	.word	0x7c9fffff
 8006f98:	3fe00000 	.word	0x3fe00000
 8006f9c:	bff00000 	.word	0xbff00000
 8006fa0:	7fefffff 	.word	0x7fefffff

08006fa4 <_strtod_r>:
 8006fa4:	4b01      	ldr	r3, [pc, #4]	; (8006fac <_strtod_r+0x8>)
 8006fa6:	f7ff b9f3 	b.w	8006390 <_strtod_l>
 8006faa:	bf00      	nop
 8006fac:	20000074 	.word	0x20000074

08006fb0 <_strtol_l.isra.0>:
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb6:	d001      	beq.n	8006fbc <_strtol_l.isra.0+0xc>
 8006fb8:	2b24      	cmp	r3, #36	; 0x24
 8006fba:	d906      	bls.n	8006fca <_strtol_l.isra.0+0x1a>
 8006fbc:	f7fe faf8 	bl	80055b0 <__errno>
 8006fc0:	2316      	movs	r3, #22
 8006fc2:	6003      	str	r3, [r0, #0]
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	4f3a      	ldr	r7, [pc, #232]	; (80070b4 <_strtol_l.isra.0+0x104>)
 8006fcc:	468e      	mov	lr, r1
 8006fce:	4676      	mov	r6, lr
 8006fd0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006fd4:	5de5      	ldrb	r5, [r4, r7]
 8006fd6:	f015 0508 	ands.w	r5, r5, #8
 8006fda:	d1f8      	bne.n	8006fce <_strtol_l.isra.0+0x1e>
 8006fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8006fde:	d134      	bne.n	800704a <_strtol_l.isra.0+0x9a>
 8006fe0:	f89e 4000 	ldrb.w	r4, [lr]
 8006fe4:	f04f 0801 	mov.w	r8, #1
 8006fe8:	f106 0e02 	add.w	lr, r6, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <_strtol_l.isra.0+0xfa>
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d10c      	bne.n	800700e <_strtol_l.isra.0+0x5e>
 8006ff4:	2c30      	cmp	r4, #48	; 0x30
 8006ff6:	d10a      	bne.n	800700e <_strtol_l.isra.0+0x5e>
 8006ff8:	f89e 4000 	ldrb.w	r4, [lr]
 8006ffc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007000:	2c58      	cmp	r4, #88	; 0x58
 8007002:	d14d      	bne.n	80070a0 <_strtol_l.isra.0+0xf0>
 8007004:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007008:	2310      	movs	r3, #16
 800700a:	f10e 0e02 	add.w	lr, lr, #2
 800700e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007012:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007016:	2600      	movs	r6, #0
 8007018:	fbbc f9f3 	udiv	r9, ip, r3
 800701c:	4635      	mov	r5, r6
 800701e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007022:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007026:	2f09      	cmp	r7, #9
 8007028:	d818      	bhi.n	800705c <_strtol_l.isra.0+0xac>
 800702a:	463c      	mov	r4, r7
 800702c:	42a3      	cmp	r3, r4
 800702e:	dd24      	ble.n	800707a <_strtol_l.isra.0+0xca>
 8007030:	2e00      	cmp	r6, #0
 8007032:	db1f      	blt.n	8007074 <_strtol_l.isra.0+0xc4>
 8007034:	45a9      	cmp	r9, r5
 8007036:	d31d      	bcc.n	8007074 <_strtol_l.isra.0+0xc4>
 8007038:	d101      	bne.n	800703e <_strtol_l.isra.0+0x8e>
 800703a:	45a2      	cmp	sl, r4
 800703c:	db1a      	blt.n	8007074 <_strtol_l.isra.0+0xc4>
 800703e:	fb05 4503 	mla	r5, r5, r3, r4
 8007042:	2601      	movs	r6, #1
 8007044:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007048:	e7eb      	b.n	8007022 <_strtol_l.isra.0+0x72>
 800704a:	2c2b      	cmp	r4, #43	; 0x2b
 800704c:	bf08      	it	eq
 800704e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007052:	46a8      	mov	r8, r5
 8007054:	bf08      	it	eq
 8007056:	f106 0e02 	addeq.w	lr, r6, #2
 800705a:	e7c7      	b.n	8006fec <_strtol_l.isra.0+0x3c>
 800705c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007060:	2f19      	cmp	r7, #25
 8007062:	d801      	bhi.n	8007068 <_strtol_l.isra.0+0xb8>
 8007064:	3c37      	subs	r4, #55	; 0x37
 8007066:	e7e1      	b.n	800702c <_strtol_l.isra.0+0x7c>
 8007068:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800706c:	2f19      	cmp	r7, #25
 800706e:	d804      	bhi.n	800707a <_strtol_l.isra.0+0xca>
 8007070:	3c57      	subs	r4, #87	; 0x57
 8007072:	e7db      	b.n	800702c <_strtol_l.isra.0+0x7c>
 8007074:	f04f 36ff 	mov.w	r6, #4294967295
 8007078:	e7e4      	b.n	8007044 <_strtol_l.isra.0+0x94>
 800707a:	2e00      	cmp	r6, #0
 800707c:	da05      	bge.n	800708a <_strtol_l.isra.0+0xda>
 800707e:	2322      	movs	r3, #34	; 0x22
 8007080:	6003      	str	r3, [r0, #0]
 8007082:	4665      	mov	r5, ip
 8007084:	b942      	cbnz	r2, 8007098 <_strtol_l.isra.0+0xe8>
 8007086:	4628      	mov	r0, r5
 8007088:	e79d      	b.n	8006fc6 <_strtol_l.isra.0+0x16>
 800708a:	f1b8 0f00 	cmp.w	r8, #0
 800708e:	d000      	beq.n	8007092 <_strtol_l.isra.0+0xe2>
 8007090:	426d      	negs	r5, r5
 8007092:	2a00      	cmp	r2, #0
 8007094:	d0f7      	beq.n	8007086 <_strtol_l.isra.0+0xd6>
 8007096:	b10e      	cbz	r6, 800709c <_strtol_l.isra.0+0xec>
 8007098:	f10e 31ff 	add.w	r1, lr, #4294967295
 800709c:	6011      	str	r1, [r2, #0]
 800709e:	e7f2      	b.n	8007086 <_strtol_l.isra.0+0xd6>
 80070a0:	2430      	movs	r4, #48	; 0x30
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1b3      	bne.n	800700e <_strtol_l.isra.0+0x5e>
 80070a6:	2308      	movs	r3, #8
 80070a8:	e7b1      	b.n	800700e <_strtol_l.isra.0+0x5e>
 80070aa:	2c30      	cmp	r4, #48	; 0x30
 80070ac:	d0a4      	beq.n	8006ff8 <_strtol_l.isra.0+0x48>
 80070ae:	230a      	movs	r3, #10
 80070b0:	e7ad      	b.n	800700e <_strtol_l.isra.0+0x5e>
 80070b2:	bf00      	nop
 80070b4:	08009f79 	.word	0x08009f79

080070b8 <_strtol_r>:
 80070b8:	f7ff bf7a 	b.w	8006fb0 <_strtol_l.isra.0>

080070bc <quorem>:
 80070bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	6903      	ldr	r3, [r0, #16]
 80070c2:	690c      	ldr	r4, [r1, #16]
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	4607      	mov	r7, r0
 80070c8:	f2c0 8081 	blt.w	80071ce <quorem+0x112>
 80070cc:	3c01      	subs	r4, #1
 80070ce:	f101 0814 	add.w	r8, r1, #20
 80070d2:	f100 0514 	add.w	r5, r0, #20
 80070d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070e4:	3301      	adds	r3, #1
 80070e6:	429a      	cmp	r2, r3
 80070e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070f4:	d331      	bcc.n	800715a <quorem+0x9e>
 80070f6:	f04f 0e00 	mov.w	lr, #0
 80070fa:	4640      	mov	r0, r8
 80070fc:	46ac      	mov	ip, r5
 80070fe:	46f2      	mov	sl, lr
 8007100:	f850 2b04 	ldr.w	r2, [r0], #4
 8007104:	b293      	uxth	r3, r2
 8007106:	fb06 e303 	mla	r3, r6, r3, lr
 800710a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800710e:	b29b      	uxth	r3, r3
 8007110:	ebaa 0303 	sub.w	r3, sl, r3
 8007114:	0c12      	lsrs	r2, r2, #16
 8007116:	f8dc a000 	ldr.w	sl, [ip]
 800711a:	fb06 e202 	mla	r2, r6, r2, lr
 800711e:	fa13 f38a 	uxtah	r3, r3, sl
 8007122:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007126:	fa1f fa82 	uxth.w	sl, r2
 800712a:	f8dc 2000 	ldr.w	r2, [ip]
 800712e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007136:	b29b      	uxth	r3, r3
 8007138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800713c:	4581      	cmp	r9, r0
 800713e:	f84c 3b04 	str.w	r3, [ip], #4
 8007142:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007146:	d2db      	bcs.n	8007100 <quorem+0x44>
 8007148:	f855 300b 	ldr.w	r3, [r5, fp]
 800714c:	b92b      	cbnz	r3, 800715a <quorem+0x9e>
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	3b04      	subs	r3, #4
 8007152:	429d      	cmp	r5, r3
 8007154:	461a      	mov	r2, r3
 8007156:	d32e      	bcc.n	80071b6 <quorem+0xfa>
 8007158:	613c      	str	r4, [r7, #16]
 800715a:	4638      	mov	r0, r7
 800715c:	f001 fc8c 	bl	8008a78 <__mcmp>
 8007160:	2800      	cmp	r0, #0
 8007162:	db24      	blt.n	80071ae <quorem+0xf2>
 8007164:	3601      	adds	r6, #1
 8007166:	4628      	mov	r0, r5
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007170:	f8d0 e000 	ldr.w	lr, [r0]
 8007174:	b293      	uxth	r3, r2
 8007176:	ebac 0303 	sub.w	r3, ip, r3
 800717a:	0c12      	lsrs	r2, r2, #16
 800717c:	fa13 f38e 	uxtah	r3, r3, lr
 8007180:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007188:	b29b      	uxth	r3, r3
 800718a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800718e:	45c1      	cmp	r9, r8
 8007190:	f840 3b04 	str.w	r3, [r0], #4
 8007194:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007198:	d2e8      	bcs.n	800716c <quorem+0xb0>
 800719a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800719e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071a2:	b922      	cbnz	r2, 80071ae <quorem+0xf2>
 80071a4:	3b04      	subs	r3, #4
 80071a6:	429d      	cmp	r5, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	d30a      	bcc.n	80071c2 <quorem+0x106>
 80071ac:	613c      	str	r4, [r7, #16]
 80071ae:	4630      	mov	r0, r6
 80071b0:	b003      	add	sp, #12
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1cc      	bne.n	8007158 <quorem+0x9c>
 80071be:	3c01      	subs	r4, #1
 80071c0:	e7c7      	b.n	8007152 <quorem+0x96>
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	3b04      	subs	r3, #4
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d1f0      	bne.n	80071ac <quorem+0xf0>
 80071ca:	3c01      	subs	r4, #1
 80071cc:	e7eb      	b.n	80071a6 <quorem+0xea>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7ee      	b.n	80071b0 <quorem+0xf4>
 80071d2:	0000      	movs	r0, r0
 80071d4:	0000      	movs	r0, r0
	...

080071d8 <_dtoa_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	ed2d 8b02 	vpush	{d8}
 80071e0:	ec57 6b10 	vmov	r6, r7, d0
 80071e4:	b095      	sub	sp, #84	; 0x54
 80071e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071ec:	9105      	str	r1, [sp, #20]
 80071ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80071f2:	4604      	mov	r4, r0
 80071f4:	9209      	str	r2, [sp, #36]	; 0x24
 80071f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071f8:	b975      	cbnz	r5, 8007218 <_dtoa_r+0x40>
 80071fa:	2010      	movs	r0, #16
 80071fc:	f001 f94c 	bl	8008498 <malloc>
 8007200:	4602      	mov	r2, r0
 8007202:	6260      	str	r0, [r4, #36]	; 0x24
 8007204:	b920      	cbnz	r0, 8007210 <_dtoa_r+0x38>
 8007206:	4bb2      	ldr	r3, [pc, #712]	; (80074d0 <_dtoa_r+0x2f8>)
 8007208:	21ea      	movs	r1, #234	; 0xea
 800720a:	48b2      	ldr	r0, [pc, #712]	; (80074d4 <_dtoa_r+0x2fc>)
 800720c:	f002 f874 	bl	80092f8 <__assert_func>
 8007210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007214:	6005      	str	r5, [r0, #0]
 8007216:	60c5      	str	r5, [r0, #12]
 8007218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721a:	6819      	ldr	r1, [r3, #0]
 800721c:	b151      	cbz	r1, 8007234 <_dtoa_r+0x5c>
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	604a      	str	r2, [r1, #4]
 8007222:	2301      	movs	r3, #1
 8007224:	4093      	lsls	r3, r2
 8007226:	608b      	str	r3, [r1, #8]
 8007228:	4620      	mov	r0, r4
 800722a:	f001 f99d 	bl	8008568 <_Bfree>
 800722e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	1e3b      	subs	r3, r7, #0
 8007236:	bfb9      	ittee	lt
 8007238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800723c:	9303      	strlt	r3, [sp, #12]
 800723e:	2300      	movge	r3, #0
 8007240:	f8c8 3000 	strge.w	r3, [r8]
 8007244:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007248:	4ba3      	ldr	r3, [pc, #652]	; (80074d8 <_dtoa_r+0x300>)
 800724a:	bfbc      	itt	lt
 800724c:	2201      	movlt	r2, #1
 800724e:	f8c8 2000 	strlt.w	r2, [r8]
 8007252:	ea33 0309 	bics.w	r3, r3, r9
 8007256:	d11b      	bne.n	8007290 <_dtoa_r+0xb8>
 8007258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800725a:	f242 730f 	movw	r3, #9999	; 0x270f
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007264:	4333      	orrs	r3, r6
 8007266:	f000 857a 	beq.w	8007d5e <_dtoa_r+0xb86>
 800726a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726c:	b963      	cbnz	r3, 8007288 <_dtoa_r+0xb0>
 800726e:	4b9b      	ldr	r3, [pc, #620]	; (80074dc <_dtoa_r+0x304>)
 8007270:	e024      	b.n	80072bc <_dtoa_r+0xe4>
 8007272:	4b9b      	ldr	r3, [pc, #620]	; (80074e0 <_dtoa_r+0x308>)
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	9800      	ldr	r0, [sp, #0]
 800727e:	b015      	add	sp, #84	; 0x54
 8007280:	ecbd 8b02 	vpop	{d8}
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	4b94      	ldr	r3, [pc, #592]	; (80074dc <_dtoa_r+0x304>)
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	3303      	adds	r3, #3
 800728e:	e7f3      	b.n	8007278 <_dtoa_r+0xa0>
 8007290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	ec51 0b17 	vmov	r0, r1, d7
 800729a:	2300      	movs	r3, #0
 800729c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80072a0:	f7f9 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a4:	4680      	mov	r8, r0
 80072a6:	b158      	cbz	r0, 80072c0 <_dtoa_r+0xe8>
 80072a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072aa:	2301      	movs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8551 	beq.w	8007d58 <_dtoa_r+0xb80>
 80072b6:	488b      	ldr	r0, [pc, #556]	; (80074e4 <_dtoa_r+0x30c>)
 80072b8:	6018      	str	r0, [r3, #0]
 80072ba:	1e43      	subs	r3, r0, #1
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	e7dd      	b.n	800727c <_dtoa_r+0xa4>
 80072c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072c4:	aa12      	add	r2, sp, #72	; 0x48
 80072c6:	a913      	add	r1, sp, #76	; 0x4c
 80072c8:	4620      	mov	r0, r4
 80072ca:	f001 fcf5 	bl	8008cb8 <__d2b>
 80072ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072d2:	4683      	mov	fp, r0
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	d07c      	beq.n	80073d2 <_dtoa_r+0x1fa>
 80072d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80072de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80072e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072f2:	4b7d      	ldr	r3, [pc, #500]	; (80074e8 <_dtoa_r+0x310>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f8 ffc5 	bl	8000288 <__aeabi_dsub>
 80072fe:	a36e      	add	r3, pc, #440	; (adr r3, 80074b8 <_dtoa_r+0x2e0>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f7f9 f978 	bl	80005f8 <__aeabi_dmul>
 8007308:	a36d      	add	r3, pc, #436	; (adr r3, 80074c0 <_dtoa_r+0x2e8>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f8 ffbd 	bl	800028c <__adddf3>
 8007312:	4606      	mov	r6, r0
 8007314:	4628      	mov	r0, r5
 8007316:	460f      	mov	r7, r1
 8007318:	f7f9 f904 	bl	8000524 <__aeabi_i2d>
 800731c:	a36a      	add	r3, pc, #424	; (adr r3, 80074c8 <_dtoa_r+0x2f0>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f9 f969 	bl	80005f8 <__aeabi_dmul>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f8 ffad 	bl	800028c <__adddf3>
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	f7f9 fc0f 	bl	8000b58 <__aeabi_d2iz>
 800733a:	2200      	movs	r2, #0
 800733c:	4682      	mov	sl, r0
 800733e:	2300      	movs	r3, #0
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f9 fbca 	bl	8000adc <__aeabi_dcmplt>
 8007348:	b148      	cbz	r0, 800735e <_dtoa_r+0x186>
 800734a:	4650      	mov	r0, sl
 800734c:	f7f9 f8ea 	bl	8000524 <__aeabi_i2d>
 8007350:	4632      	mov	r2, r6
 8007352:	463b      	mov	r3, r7
 8007354:	f7f9 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007358:	b908      	cbnz	r0, 800735e <_dtoa_r+0x186>
 800735a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800735e:	f1ba 0f16 	cmp.w	sl, #22
 8007362:	d854      	bhi.n	800740e <_dtoa_r+0x236>
 8007364:	4b61      	ldr	r3, [pc, #388]	; (80074ec <_dtoa_r+0x314>)
 8007366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007372:	f7f9 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	d04b      	beq.n	8007412 <_dtoa_r+0x23a>
 800737a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737e:	2300      	movs	r3, #0
 8007380:	930e      	str	r3, [sp, #56]	; 0x38
 8007382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007384:	1b5d      	subs	r5, r3, r5
 8007386:	1e6b      	subs	r3, r5, #1
 8007388:	9304      	str	r3, [sp, #16]
 800738a:	bf43      	ittte	mi
 800738c:	2300      	movmi	r3, #0
 800738e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007392:	9304      	strmi	r3, [sp, #16]
 8007394:	f04f 0800 	movpl.w	r8, #0
 8007398:	f1ba 0f00 	cmp.w	sl, #0
 800739c:	db3b      	blt.n	8007416 <_dtoa_r+0x23e>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80073a4:	4453      	add	r3, sl
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	2300      	movs	r3, #0
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	9b05      	ldr	r3, [sp, #20]
 80073ae:	2b09      	cmp	r3, #9
 80073b0:	d869      	bhi.n	8007486 <_dtoa_r+0x2ae>
 80073b2:	2b05      	cmp	r3, #5
 80073b4:	bfc4      	itt	gt
 80073b6:	3b04      	subgt	r3, #4
 80073b8:	9305      	strgt	r3, [sp, #20]
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	f1a3 0302 	sub.w	r3, r3, #2
 80073c0:	bfcc      	ite	gt
 80073c2:	2500      	movgt	r5, #0
 80073c4:	2501      	movle	r5, #1
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d869      	bhi.n	800749e <_dtoa_r+0x2c6>
 80073ca:	e8df f003 	tbb	[pc, r3]
 80073ce:	4e2c      	.short	0x4e2c
 80073d0:	5a4c      	.short	0x5a4c
 80073d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80073d6:	441d      	add	r5, r3
 80073d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073dc:	2b20      	cmp	r3, #32
 80073de:	bfc1      	itttt	gt
 80073e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80073ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073f0:	bfda      	itte	le
 80073f2:	f1c3 0320 	rsble	r3, r3, #32
 80073f6:	fa06 f003 	lslle.w	r0, r6, r3
 80073fa:	4318      	orrgt	r0, r3
 80073fc:	f7f9 f882 	bl	8000504 <__aeabi_ui2d>
 8007400:	2301      	movs	r3, #1
 8007402:	4606      	mov	r6, r0
 8007404:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007408:	3d01      	subs	r5, #1
 800740a:	9310      	str	r3, [sp, #64]	; 0x40
 800740c:	e771      	b.n	80072f2 <_dtoa_r+0x11a>
 800740e:	2301      	movs	r3, #1
 8007410:	e7b6      	b.n	8007380 <_dtoa_r+0x1a8>
 8007412:	900e      	str	r0, [sp, #56]	; 0x38
 8007414:	e7b5      	b.n	8007382 <_dtoa_r+0x1aa>
 8007416:	f1ca 0300 	rsb	r3, sl, #0
 800741a:	9306      	str	r3, [sp, #24]
 800741c:	2300      	movs	r3, #0
 800741e:	eba8 080a 	sub.w	r8, r8, sl
 8007422:	930d      	str	r3, [sp, #52]	; 0x34
 8007424:	e7c2      	b.n	80073ac <_dtoa_r+0x1d4>
 8007426:	2300      	movs	r3, #0
 8007428:	9308      	str	r3, [sp, #32]
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc39      	bgt.n	80074a4 <_dtoa_r+0x2cc>
 8007430:	f04f 0901 	mov.w	r9, #1
 8007434:	f8cd 9004 	str.w	r9, [sp, #4]
 8007438:	464b      	mov	r3, r9
 800743a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800743e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007440:	2200      	movs	r2, #0
 8007442:	6042      	str	r2, [r0, #4]
 8007444:	2204      	movs	r2, #4
 8007446:	f102 0614 	add.w	r6, r2, #20
 800744a:	429e      	cmp	r6, r3
 800744c:	6841      	ldr	r1, [r0, #4]
 800744e:	d92f      	bls.n	80074b0 <_dtoa_r+0x2d8>
 8007450:	4620      	mov	r0, r4
 8007452:	f001 f849 	bl	80084e8 <_Balloc>
 8007456:	9000      	str	r0, [sp, #0]
 8007458:	2800      	cmp	r0, #0
 800745a:	d14b      	bne.n	80074f4 <_dtoa_r+0x31c>
 800745c:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <_dtoa_r+0x318>)
 800745e:	4602      	mov	r2, r0
 8007460:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007464:	e6d1      	b.n	800720a <_dtoa_r+0x32>
 8007466:	2301      	movs	r3, #1
 8007468:	e7de      	b.n	8007428 <_dtoa_r+0x250>
 800746a:	2300      	movs	r3, #0
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	eb0a 0903 	add.w	r9, sl, r3
 8007474:	f109 0301 	add.w	r3, r9, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	bfb8      	it	lt
 800747e:	2301      	movlt	r3, #1
 8007480:	e7dd      	b.n	800743e <_dtoa_r+0x266>
 8007482:	2301      	movs	r3, #1
 8007484:	e7f2      	b.n	800746c <_dtoa_r+0x294>
 8007486:	2501      	movs	r5, #1
 8007488:	2300      	movs	r3, #0
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	9508      	str	r5, [sp, #32]
 800748e:	f04f 39ff 	mov.w	r9, #4294967295
 8007492:	2200      	movs	r2, #0
 8007494:	f8cd 9004 	str.w	r9, [sp, #4]
 8007498:	2312      	movs	r3, #18
 800749a:	9209      	str	r2, [sp, #36]	; 0x24
 800749c:	e7cf      	b.n	800743e <_dtoa_r+0x266>
 800749e:	2301      	movs	r3, #1
 80074a0:	9308      	str	r3, [sp, #32]
 80074a2:	e7f4      	b.n	800748e <_dtoa_r+0x2b6>
 80074a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80074ac:	464b      	mov	r3, r9
 80074ae:	e7c6      	b.n	800743e <_dtoa_r+0x266>
 80074b0:	3101      	adds	r1, #1
 80074b2:	6041      	str	r1, [r0, #4]
 80074b4:	0052      	lsls	r2, r2, #1
 80074b6:	e7c6      	b.n	8007446 <_dtoa_r+0x26e>
 80074b8:	636f4361 	.word	0x636f4361
 80074bc:	3fd287a7 	.word	0x3fd287a7
 80074c0:	8b60c8b3 	.word	0x8b60c8b3
 80074c4:	3fc68a28 	.word	0x3fc68a28
 80074c8:	509f79fb 	.word	0x509f79fb
 80074cc:	3fd34413 	.word	0x3fd34413
 80074d0:	0800a086 	.word	0x0800a086
 80074d4:	0800a09d 	.word	0x0800a09d
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	0800a082 	.word	0x0800a082
 80074e0:	0800a079 	.word	0x0800a079
 80074e4:	08009efd 	.word	0x08009efd
 80074e8:	3ff80000 	.word	0x3ff80000
 80074ec:	0800a218 	.word	0x0800a218
 80074f0:	0800a0fc 	.word	0x0800a0fc
 80074f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f6:	9a00      	ldr	r2, [sp, #0]
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	2b0e      	cmp	r3, #14
 80074fe:	f200 80ad 	bhi.w	800765c <_dtoa_r+0x484>
 8007502:	2d00      	cmp	r5, #0
 8007504:	f000 80aa 	beq.w	800765c <_dtoa_r+0x484>
 8007508:	f1ba 0f00 	cmp.w	sl, #0
 800750c:	dd36      	ble.n	800757c <_dtoa_r+0x3a4>
 800750e:	4ac3      	ldr	r2, [pc, #780]	; (800781c <_dtoa_r+0x644>)
 8007510:	f00a 030f 	and.w	r3, sl, #15
 8007514:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007518:	ed93 7b00 	vldr	d7, [r3]
 800751c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007520:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007524:	eeb0 8a47 	vmov.f32	s16, s14
 8007528:	eef0 8a67 	vmov.f32	s17, s15
 800752c:	d016      	beq.n	800755c <_dtoa_r+0x384>
 800752e:	4bbc      	ldr	r3, [pc, #752]	; (8007820 <_dtoa_r+0x648>)
 8007530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007538:	f7f9 f988 	bl	800084c <__aeabi_ddiv>
 800753c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007540:	f007 070f 	and.w	r7, r7, #15
 8007544:	2503      	movs	r5, #3
 8007546:	4eb6      	ldr	r6, [pc, #728]	; (8007820 <_dtoa_r+0x648>)
 8007548:	b957      	cbnz	r7, 8007560 <_dtoa_r+0x388>
 800754a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754e:	ec53 2b18 	vmov	r2, r3, d8
 8007552:	f7f9 f97b 	bl	800084c <__aeabi_ddiv>
 8007556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755a:	e029      	b.n	80075b0 <_dtoa_r+0x3d8>
 800755c:	2502      	movs	r5, #2
 800755e:	e7f2      	b.n	8007546 <_dtoa_r+0x36e>
 8007560:	07f9      	lsls	r1, r7, #31
 8007562:	d508      	bpl.n	8007576 <_dtoa_r+0x39e>
 8007564:	ec51 0b18 	vmov	r0, r1, d8
 8007568:	e9d6 2300 	ldrd	r2, r3, [r6]
 800756c:	f7f9 f844 	bl	80005f8 <__aeabi_dmul>
 8007570:	ec41 0b18 	vmov	d8, r0, r1
 8007574:	3501      	adds	r5, #1
 8007576:	107f      	asrs	r7, r7, #1
 8007578:	3608      	adds	r6, #8
 800757a:	e7e5      	b.n	8007548 <_dtoa_r+0x370>
 800757c:	f000 80a6 	beq.w	80076cc <_dtoa_r+0x4f4>
 8007580:	f1ca 0600 	rsb	r6, sl, #0
 8007584:	4ba5      	ldr	r3, [pc, #660]	; (800781c <_dtoa_r+0x644>)
 8007586:	4fa6      	ldr	r7, [pc, #664]	; (8007820 <_dtoa_r+0x648>)
 8007588:	f006 020f 	and.w	r2, r6, #15
 800758c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007598:	f7f9 f82e 	bl	80005f8 <__aeabi_dmul>
 800759c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a0:	1136      	asrs	r6, r6, #4
 80075a2:	2300      	movs	r3, #0
 80075a4:	2502      	movs	r5, #2
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	f040 8085 	bne.w	80076b6 <_dtoa_r+0x4de>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1d2      	bne.n	8007556 <_dtoa_r+0x37e>
 80075b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 808c 	beq.w	80076d0 <_dtoa_r+0x4f8>
 80075b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075bc:	4b99      	ldr	r3, [pc, #612]	; (8007824 <_dtoa_r+0x64c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 fa8a 	bl	8000adc <__aeabi_dcmplt>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f000 8081 	beq.w	80076d0 <_dtoa_r+0x4f8>
 80075ce:	9b01      	ldr	r3, [sp, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d07d      	beq.n	80076d0 <_dtoa_r+0x4f8>
 80075d4:	f1b9 0f00 	cmp.w	r9, #0
 80075d8:	dd3c      	ble.n	8007654 <_dtoa_r+0x47c>
 80075da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	2200      	movs	r2, #0
 80075e2:	4b91      	ldr	r3, [pc, #580]	; (8007828 <_dtoa_r+0x650>)
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	f7f9 f806 	bl	80005f8 <__aeabi_dmul>
 80075ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f0:	3501      	adds	r5, #1
 80075f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80075f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075fa:	4628      	mov	r0, r5
 80075fc:	f7f8 ff92 	bl	8000524 <__aeabi_i2d>
 8007600:	4632      	mov	r2, r6
 8007602:	463b      	mov	r3, r7
 8007604:	f7f8 fff8 	bl	80005f8 <__aeabi_dmul>
 8007608:	4b88      	ldr	r3, [pc, #544]	; (800782c <_dtoa_r+0x654>)
 800760a:	2200      	movs	r2, #0
 800760c:	f7f8 fe3e 	bl	800028c <__adddf3>
 8007610:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d15c      	bne.n	80076da <_dtoa_r+0x502>
 8007620:	4b83      	ldr	r3, [pc, #524]	; (8007830 <_dtoa_r+0x658>)
 8007622:	2200      	movs	r2, #0
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f8 fe2e 	bl	8000288 <__aeabi_dsub>
 800762c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007630:	4606      	mov	r6, r0
 8007632:	460f      	mov	r7, r1
 8007634:	f7f9 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 8296 	bne.w	8007b6a <_dtoa_r+0x992>
 800763e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007642:	4630      	mov	r0, r6
 8007644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007648:	4639      	mov	r1, r7
 800764a:	f7f9 fa47 	bl	8000adc <__aeabi_dcmplt>
 800764e:	2800      	cmp	r0, #0
 8007650:	f040 8288 	bne.w	8007b64 <_dtoa_r+0x98c>
 8007654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800765c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800765e:	2b00      	cmp	r3, #0
 8007660:	f2c0 8158 	blt.w	8007914 <_dtoa_r+0x73c>
 8007664:	f1ba 0f0e 	cmp.w	sl, #14
 8007668:	f300 8154 	bgt.w	8007914 <_dtoa_r+0x73c>
 800766c:	4b6b      	ldr	r3, [pc, #428]	; (800781c <_dtoa_r+0x644>)
 800766e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	f280 80e3 	bge.w	8007844 <_dtoa_r+0x66c>
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f300 80df 	bgt.w	8007844 <_dtoa_r+0x66c>
 8007686:	f040 826d 	bne.w	8007b64 <_dtoa_r+0x98c>
 800768a:	4b69      	ldr	r3, [pc, #420]	; (8007830 <_dtoa_r+0x658>)
 800768c:	2200      	movs	r2, #0
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f8 ffb1 	bl	80005f8 <__aeabi_dmul>
 8007696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800769a:	f7f9 fa33 	bl	8000b04 <__aeabi_dcmpge>
 800769e:	9e01      	ldr	r6, [sp, #4]
 80076a0:	4637      	mov	r7, r6
 80076a2:	2800      	cmp	r0, #0
 80076a4:	f040 8243 	bne.w	8007b2e <_dtoa_r+0x956>
 80076a8:	9d00      	ldr	r5, [sp, #0]
 80076aa:	2331      	movs	r3, #49	; 0x31
 80076ac:	f805 3b01 	strb.w	r3, [r5], #1
 80076b0:	f10a 0a01 	add.w	sl, sl, #1
 80076b4:	e23f      	b.n	8007b36 <_dtoa_r+0x95e>
 80076b6:	07f2      	lsls	r2, r6, #31
 80076b8:	d505      	bpl.n	80076c6 <_dtoa_r+0x4ee>
 80076ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076be:	f7f8 ff9b 	bl	80005f8 <__aeabi_dmul>
 80076c2:	3501      	adds	r5, #1
 80076c4:	2301      	movs	r3, #1
 80076c6:	1076      	asrs	r6, r6, #1
 80076c8:	3708      	adds	r7, #8
 80076ca:	e76c      	b.n	80075a6 <_dtoa_r+0x3ce>
 80076cc:	2502      	movs	r5, #2
 80076ce:	e76f      	b.n	80075b0 <_dtoa_r+0x3d8>
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80076d6:	930c      	str	r3, [sp, #48]	; 0x30
 80076d8:	e78d      	b.n	80075f6 <_dtoa_r+0x41e>
 80076da:	9900      	ldr	r1, [sp, #0]
 80076dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076e0:	4b4e      	ldr	r3, [pc, #312]	; (800781c <_dtoa_r+0x644>)
 80076e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076e6:	4401      	add	r1, r0
 80076e8:	9102      	str	r1, [sp, #8]
 80076ea:	9908      	ldr	r1, [sp, #32]
 80076ec:	eeb0 8a47 	vmov.f32	s16, s14
 80076f0:	eef0 8a67 	vmov.f32	s17, s15
 80076f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d045      	beq.n	800778c <_dtoa_r+0x5b4>
 8007700:	494c      	ldr	r1, [pc, #304]	; (8007834 <_dtoa_r+0x65c>)
 8007702:	2000      	movs	r0, #0
 8007704:	f7f9 f8a2 	bl	800084c <__aeabi_ddiv>
 8007708:	ec53 2b18 	vmov	r2, r3, d8
 800770c:	f7f8 fdbc 	bl	8000288 <__aeabi_dsub>
 8007710:	9d00      	ldr	r5, [sp, #0]
 8007712:	ec41 0b18 	vmov	d8, r0, r1
 8007716:	4639      	mov	r1, r7
 8007718:	4630      	mov	r0, r6
 800771a:	f7f9 fa1d 	bl	8000b58 <__aeabi_d2iz>
 800771e:	900c      	str	r0, [sp, #48]	; 0x30
 8007720:	f7f8 ff00 	bl	8000524 <__aeabi_i2d>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f7f8 fdac 	bl	8000288 <__aeabi_dsub>
 8007730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007732:	3330      	adds	r3, #48	; 0x30
 8007734:	f805 3b01 	strb.w	r3, [r5], #1
 8007738:	ec53 2b18 	vmov	r2, r3, d8
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	f7f9 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8007744:	2800      	cmp	r0, #0
 8007746:	d165      	bne.n	8007814 <_dtoa_r+0x63c>
 8007748:	4632      	mov	r2, r6
 800774a:	463b      	mov	r3, r7
 800774c:	4935      	ldr	r1, [pc, #212]	; (8007824 <_dtoa_r+0x64c>)
 800774e:	2000      	movs	r0, #0
 8007750:	f7f8 fd9a 	bl	8000288 <__aeabi_dsub>
 8007754:	ec53 2b18 	vmov	r2, r3, d8
 8007758:	f7f9 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800775c:	2800      	cmp	r0, #0
 800775e:	f040 80b9 	bne.w	80078d4 <_dtoa_r+0x6fc>
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	429d      	cmp	r5, r3
 8007766:	f43f af75 	beq.w	8007654 <_dtoa_r+0x47c>
 800776a:	4b2f      	ldr	r3, [pc, #188]	; (8007828 <_dtoa_r+0x650>)
 800776c:	ec51 0b18 	vmov	r0, r1, d8
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff41 	bl	80005f8 <__aeabi_dmul>
 8007776:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <_dtoa_r+0x650>)
 8007778:	ec41 0b18 	vmov	d8, r0, r1
 800777c:	2200      	movs	r2, #0
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f8 ff39 	bl	80005f8 <__aeabi_dmul>
 8007786:	4606      	mov	r6, r0
 8007788:	460f      	mov	r7, r1
 800778a:	e7c4      	b.n	8007716 <_dtoa_r+0x53e>
 800778c:	ec51 0b17 	vmov	r0, r1, d7
 8007790:	f7f8 ff32 	bl	80005f8 <__aeabi_dmul>
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	9d00      	ldr	r5, [sp, #0]
 8007798:	930c      	str	r3, [sp, #48]	; 0x30
 800779a:	ec41 0b18 	vmov	d8, r0, r1
 800779e:	4639      	mov	r1, r7
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7f9 f9d9 	bl	8000b58 <__aeabi_d2iz>
 80077a6:	9011      	str	r0, [sp, #68]	; 0x44
 80077a8:	f7f8 febc 	bl	8000524 <__aeabi_i2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fd68 	bl	8000288 <__aeabi_dsub>
 80077b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077ba:	3330      	adds	r3, #48	; 0x30
 80077bc:	f805 3b01 	strb.w	r3, [r5], #1
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	429d      	cmp	r5, r3
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	d134      	bne.n	8007838 <_dtoa_r+0x660>
 80077ce:	4b19      	ldr	r3, [pc, #100]	; (8007834 <_dtoa_r+0x65c>)
 80077d0:	ec51 0b18 	vmov	r0, r1, d8
 80077d4:	f7f8 fd5a 	bl	800028c <__adddf3>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f9 f99a 	bl	8000b18 <__aeabi_dcmpgt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d175      	bne.n	80078d4 <_dtoa_r+0x6fc>
 80077e8:	ec53 2b18 	vmov	r2, r3, d8
 80077ec:	4911      	ldr	r1, [pc, #68]	; (8007834 <_dtoa_r+0x65c>)
 80077ee:	2000      	movs	r0, #0
 80077f0:	f7f8 fd4a 	bl	8000288 <__aeabi_dsub>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f9 f96e 	bl	8000adc <__aeabi_dcmplt>
 8007800:	2800      	cmp	r0, #0
 8007802:	f43f af27 	beq.w	8007654 <_dtoa_r+0x47c>
 8007806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007808:	1e6b      	subs	r3, r5, #1
 800780a:	930c      	str	r3, [sp, #48]	; 0x30
 800780c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d0f8      	beq.n	8007806 <_dtoa_r+0x62e>
 8007814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007818:	e04a      	b.n	80078b0 <_dtoa_r+0x6d8>
 800781a:	bf00      	nop
 800781c:	0800a218 	.word	0x0800a218
 8007820:	0800a1f0 	.word	0x0800a1f0
 8007824:	3ff00000 	.word	0x3ff00000
 8007828:	40240000 	.word	0x40240000
 800782c:	401c0000 	.word	0x401c0000
 8007830:	40140000 	.word	0x40140000
 8007834:	3fe00000 	.word	0x3fe00000
 8007838:	4baf      	ldr	r3, [pc, #700]	; (8007af8 <_dtoa_r+0x920>)
 800783a:	f7f8 fedd 	bl	80005f8 <__aeabi_dmul>
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	e7ac      	b.n	800779e <_dtoa_r+0x5c6>
 8007844:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007848:	9d00      	ldr	r5, [sp, #0]
 800784a:	4642      	mov	r2, r8
 800784c:	464b      	mov	r3, r9
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f8 fffb 	bl	800084c <__aeabi_ddiv>
 8007856:	f7f9 f97f 	bl	8000b58 <__aeabi_d2iz>
 800785a:	9002      	str	r0, [sp, #8]
 800785c:	f7f8 fe62 	bl	8000524 <__aeabi_i2d>
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	f7f8 fec8 	bl	80005f8 <__aeabi_dmul>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fd0a 	bl	8000288 <__aeabi_dsub>
 8007874:	9e02      	ldr	r6, [sp, #8]
 8007876:	9f01      	ldr	r7, [sp, #4]
 8007878:	3630      	adds	r6, #48	; 0x30
 800787a:	f805 6b01 	strb.w	r6, [r5], #1
 800787e:	9e00      	ldr	r6, [sp, #0]
 8007880:	1bae      	subs	r6, r5, r6
 8007882:	42b7      	cmp	r7, r6
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	d137      	bne.n	80078fa <_dtoa_r+0x722>
 800788a:	f7f8 fcff 	bl	800028c <__adddf3>
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	f7f9 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800789a:	b9c8      	cbnz	r0, 80078d0 <_dtoa_r+0x6f8>
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a8:	b110      	cbz	r0, 80078b0 <_dtoa_r+0x6d8>
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	d40f      	bmi.n	80078d0 <_dtoa_r+0x6f8>
 80078b0:	4620      	mov	r0, r4
 80078b2:	4659      	mov	r1, fp
 80078b4:	f000 fe58 	bl	8008568 <_Bfree>
 80078b8:	2300      	movs	r3, #0
 80078ba:	702b      	strb	r3, [r5, #0]
 80078bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078be:	f10a 0001 	add.w	r0, sl, #1
 80078c2:	6018      	str	r0, [r3, #0]
 80078c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f43f acd8 	beq.w	800727c <_dtoa_r+0xa4>
 80078cc:	601d      	str	r5, [r3, #0]
 80078ce:	e4d5      	b.n	800727c <_dtoa_r+0xa4>
 80078d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80078d4:	462b      	mov	r3, r5
 80078d6:	461d      	mov	r5, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a39      	cmp	r2, #57	; 0x39
 80078de:	d108      	bne.n	80078f2 <_dtoa_r+0x71a>
 80078e0:	9a00      	ldr	r2, [sp, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d1f7      	bne.n	80078d6 <_dtoa_r+0x6fe>
 80078e6:	9a07      	ldr	r2, [sp, #28]
 80078e8:	9900      	ldr	r1, [sp, #0]
 80078ea:	3201      	adds	r2, #1
 80078ec:	9207      	str	r2, [sp, #28]
 80078ee:	2230      	movs	r2, #48	; 0x30
 80078f0:	700a      	strb	r2, [r1, #0]
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	3201      	adds	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e78c      	b.n	8007814 <_dtoa_r+0x63c>
 80078fa:	4b7f      	ldr	r3, [pc, #508]	; (8007af8 <_dtoa_r+0x920>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	f7f8 fe7b 	bl	80005f8 <__aeabi_dmul>
 8007902:	2200      	movs	r2, #0
 8007904:	2300      	movs	r3, #0
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	f7f9 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800790e:	2800      	cmp	r0, #0
 8007910:	d09b      	beq.n	800784a <_dtoa_r+0x672>
 8007912:	e7cd      	b.n	80078b0 <_dtoa_r+0x6d8>
 8007914:	9a08      	ldr	r2, [sp, #32]
 8007916:	2a00      	cmp	r2, #0
 8007918:	f000 80c4 	beq.w	8007aa4 <_dtoa_r+0x8cc>
 800791c:	9a05      	ldr	r2, [sp, #20]
 800791e:	2a01      	cmp	r2, #1
 8007920:	f300 80a8 	bgt.w	8007a74 <_dtoa_r+0x89c>
 8007924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007926:	2a00      	cmp	r2, #0
 8007928:	f000 80a0 	beq.w	8007a6c <_dtoa_r+0x894>
 800792c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007930:	9e06      	ldr	r6, [sp, #24]
 8007932:	4645      	mov	r5, r8
 8007934:	9a04      	ldr	r2, [sp, #16]
 8007936:	2101      	movs	r1, #1
 8007938:	441a      	add	r2, r3
 800793a:	4620      	mov	r0, r4
 800793c:	4498      	add	r8, r3
 800793e:	9204      	str	r2, [sp, #16]
 8007940:	f000 ff18 	bl	8008774 <__i2b>
 8007944:	4607      	mov	r7, r0
 8007946:	2d00      	cmp	r5, #0
 8007948:	dd0b      	ble.n	8007962 <_dtoa_r+0x78a>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd08      	ble.n	8007962 <_dtoa_r+0x78a>
 8007950:	42ab      	cmp	r3, r5
 8007952:	9a04      	ldr	r2, [sp, #16]
 8007954:	bfa8      	it	ge
 8007956:	462b      	movge	r3, r5
 8007958:	eba8 0803 	sub.w	r8, r8, r3
 800795c:	1aed      	subs	r5, r5, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	9b06      	ldr	r3, [sp, #24]
 8007964:	b1fb      	cbz	r3, 80079a6 <_dtoa_r+0x7ce>
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 809f 	beq.w	8007aac <_dtoa_r+0x8d4>
 800796e:	2e00      	cmp	r6, #0
 8007970:	dd11      	ble.n	8007996 <_dtoa_r+0x7be>
 8007972:	4639      	mov	r1, r7
 8007974:	4632      	mov	r2, r6
 8007976:	4620      	mov	r0, r4
 8007978:	f000 ffb8 	bl	80088ec <__pow5mult>
 800797c:	465a      	mov	r2, fp
 800797e:	4601      	mov	r1, r0
 8007980:	4607      	mov	r7, r0
 8007982:	4620      	mov	r0, r4
 8007984:	f000 ff0c 	bl	80087a0 <__multiply>
 8007988:	4659      	mov	r1, fp
 800798a:	9007      	str	r0, [sp, #28]
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fdeb 	bl	8008568 <_Bfree>
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	469b      	mov	fp, r3
 8007996:	9b06      	ldr	r3, [sp, #24]
 8007998:	1b9a      	subs	r2, r3, r6
 800799a:	d004      	beq.n	80079a6 <_dtoa_r+0x7ce>
 800799c:	4659      	mov	r1, fp
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 ffa4 	bl	80088ec <__pow5mult>
 80079a4:	4683      	mov	fp, r0
 80079a6:	2101      	movs	r1, #1
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fee3 	bl	8008774 <__i2b>
 80079ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	4606      	mov	r6, r0
 80079b4:	dd7c      	ble.n	8007ab0 <_dtoa_r+0x8d8>
 80079b6:	461a      	mov	r2, r3
 80079b8:	4601      	mov	r1, r0
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 ff96 	bl	80088ec <__pow5mult>
 80079c0:	9b05      	ldr	r3, [sp, #20]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	4606      	mov	r6, r0
 80079c6:	dd76      	ble.n	8007ab6 <_dtoa_r+0x8de>
 80079c8:	2300      	movs	r3, #0
 80079ca:	9306      	str	r3, [sp, #24]
 80079cc:	6933      	ldr	r3, [r6, #16]
 80079ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079d2:	6918      	ldr	r0, [r3, #16]
 80079d4:	f000 fe7e 	bl	80086d4 <__hi0bits>
 80079d8:	f1c0 0020 	rsb	r0, r0, #32
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	4418      	add	r0, r3
 80079e0:	f010 001f 	ands.w	r0, r0, #31
 80079e4:	f000 8086 	beq.w	8007af4 <_dtoa_r+0x91c>
 80079e8:	f1c0 0320 	rsb	r3, r0, #32
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	dd7f      	ble.n	8007af0 <_dtoa_r+0x918>
 80079f0:	f1c0 001c 	rsb	r0, r0, #28
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	4403      	add	r3, r0
 80079f8:	4480      	add	r8, r0
 80079fa:	4405      	add	r5, r0
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	f1b8 0f00 	cmp.w	r8, #0
 8007a02:	dd05      	ble.n	8007a10 <_dtoa_r+0x838>
 8007a04:	4659      	mov	r1, fp
 8007a06:	4642      	mov	r2, r8
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 ffc9 	bl	80089a0 <__lshift>
 8007a0e:	4683      	mov	fp, r0
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd05      	ble.n	8007a22 <_dtoa_r+0x84a>
 8007a16:	4631      	mov	r1, r6
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 ffc0 	bl	80089a0 <__lshift>
 8007a20:	4606      	mov	r6, r0
 8007a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d069      	beq.n	8007afc <_dtoa_r+0x924>
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f001 f824 	bl	8008a78 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	da63      	bge.n	8007afc <_dtoa_r+0x924>
 8007a34:	2300      	movs	r3, #0
 8007a36:	4659      	mov	r1, fp
 8007a38:	220a      	movs	r2, #10
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fdb6 	bl	80085ac <__multadd>
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a46:	4683      	mov	fp, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 818f 	beq.w	8007d6c <_dtoa_r+0xb94>
 8007a4e:	4639      	mov	r1, r7
 8007a50:	2300      	movs	r3, #0
 8007a52:	220a      	movs	r2, #10
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 fda9 	bl	80085ac <__multadd>
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	4607      	mov	r7, r0
 8007a60:	f300 808e 	bgt.w	8007b80 <_dtoa_r+0x9a8>
 8007a64:	9b05      	ldr	r3, [sp, #20]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	dc50      	bgt.n	8007b0c <_dtoa_r+0x934>
 8007a6a:	e089      	b.n	8007b80 <_dtoa_r+0x9a8>
 8007a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a72:	e75d      	b.n	8007930 <_dtoa_r+0x758>
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	1e5e      	subs	r6, r3, #1
 8007a78:	9b06      	ldr	r3, [sp, #24]
 8007a7a:	42b3      	cmp	r3, r6
 8007a7c:	bfbf      	itttt	lt
 8007a7e:	9b06      	ldrlt	r3, [sp, #24]
 8007a80:	9606      	strlt	r6, [sp, #24]
 8007a82:	1af2      	sublt	r2, r6, r3
 8007a84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a86:	bfb6      	itet	lt
 8007a88:	189b      	addlt	r3, r3, r2
 8007a8a:	1b9e      	subge	r6, r3, r6
 8007a8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	bfb8      	it	lt
 8007a92:	2600      	movlt	r6, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfb5      	itete	lt
 8007a98:	eba8 0503 	sublt.w	r5, r8, r3
 8007a9c:	9b01      	ldrge	r3, [sp, #4]
 8007a9e:	2300      	movlt	r3, #0
 8007aa0:	4645      	movge	r5, r8
 8007aa2:	e747      	b.n	8007934 <_dtoa_r+0x75c>
 8007aa4:	9e06      	ldr	r6, [sp, #24]
 8007aa6:	9f08      	ldr	r7, [sp, #32]
 8007aa8:	4645      	mov	r5, r8
 8007aaa:	e74c      	b.n	8007946 <_dtoa_r+0x76e>
 8007aac:	9a06      	ldr	r2, [sp, #24]
 8007aae:	e775      	b.n	800799c <_dtoa_r+0x7c4>
 8007ab0:	9b05      	ldr	r3, [sp, #20]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	dc18      	bgt.n	8007ae8 <_dtoa_r+0x910>
 8007ab6:	9b02      	ldr	r3, [sp, #8]
 8007ab8:	b9b3      	cbnz	r3, 8007ae8 <_dtoa_r+0x910>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	b9a3      	cbnz	r3, 8007aec <_dtoa_r+0x914>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac8:	0d1b      	lsrs	r3, r3, #20
 8007aca:	051b      	lsls	r3, r3, #20
 8007acc:	b12b      	cbz	r3, 8007ada <_dtoa_r+0x902>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	f108 0801 	add.w	r8, r8, #1
 8007ad8:	2301      	movs	r3, #1
 8007ada:	9306      	str	r3, [sp, #24]
 8007adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f47f af74 	bne.w	80079cc <_dtoa_r+0x7f4>
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	e779      	b.n	80079dc <_dtoa_r+0x804>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e7f6      	b.n	8007ada <_dtoa_r+0x902>
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	e7f4      	b.n	8007ada <_dtoa_r+0x902>
 8007af0:	d085      	beq.n	80079fe <_dtoa_r+0x826>
 8007af2:	4618      	mov	r0, r3
 8007af4:	301c      	adds	r0, #28
 8007af6:	e77d      	b.n	80079f4 <_dtoa_r+0x81c>
 8007af8:	40240000 	.word	0x40240000
 8007afc:	9b01      	ldr	r3, [sp, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dc38      	bgt.n	8007b74 <_dtoa_r+0x99c>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	dd35      	ble.n	8007b74 <_dtoa_r+0x99c>
 8007b08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b0c:	f1b9 0f00 	cmp.w	r9, #0
 8007b10:	d10d      	bne.n	8007b2e <_dtoa_r+0x956>
 8007b12:	4631      	mov	r1, r6
 8007b14:	464b      	mov	r3, r9
 8007b16:	2205      	movs	r2, #5
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 fd47 	bl	80085ac <__multadd>
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4606      	mov	r6, r0
 8007b22:	4658      	mov	r0, fp
 8007b24:	f000 ffa8 	bl	8008a78 <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f73f adbd 	bgt.w	80076a8 <_dtoa_r+0x4d0>
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	9d00      	ldr	r5, [sp, #0]
 8007b32:	ea6f 0a03 	mvn.w	sl, r3
 8007b36:	f04f 0800 	mov.w	r8, #0
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 fd13 	bl	8008568 <_Bfree>
 8007b42:	2f00      	cmp	r7, #0
 8007b44:	f43f aeb4 	beq.w	80078b0 <_dtoa_r+0x6d8>
 8007b48:	f1b8 0f00 	cmp.w	r8, #0
 8007b4c:	d005      	beq.n	8007b5a <_dtoa_r+0x982>
 8007b4e:	45b8      	cmp	r8, r7
 8007b50:	d003      	beq.n	8007b5a <_dtoa_r+0x982>
 8007b52:	4641      	mov	r1, r8
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fd07 	bl	8008568 <_Bfree>
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fd03 	bl	8008568 <_Bfree>
 8007b62:	e6a5      	b.n	80078b0 <_dtoa_r+0x6d8>
 8007b64:	2600      	movs	r6, #0
 8007b66:	4637      	mov	r7, r6
 8007b68:	e7e1      	b.n	8007b2e <_dtoa_r+0x956>
 8007b6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b70:	4637      	mov	r7, r6
 8007b72:	e599      	b.n	80076a8 <_dtoa_r+0x4d0>
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80fd 	beq.w	8007d7a <_dtoa_r+0xba2>
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	dd05      	ble.n	8007b90 <_dtoa_r+0x9b8>
 8007b84:	4639      	mov	r1, r7
 8007b86:	462a      	mov	r2, r5
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 ff09 	bl	80089a0 <__lshift>
 8007b8e:	4607      	mov	r7, r0
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d05c      	beq.n	8007c50 <_dtoa_r+0xa78>
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fca5 	bl	80084e8 <_Balloc>
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <_dtoa_r+0x9d6>
 8007ba2:	4b80      	ldr	r3, [pc, #512]	; (8007da4 <_dtoa_r+0xbcc>)
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007baa:	f7ff bb2e 	b.w	800720a <_dtoa_r+0x32>
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	3202      	adds	r2, #2
 8007bb2:	0092      	lsls	r2, r2, #2
 8007bb4:	f107 010c 	add.w	r1, r7, #12
 8007bb8:	300c      	adds	r0, #12
 8007bba:	f000 fc87 	bl	80084cc <memcpy>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 feec 	bl	80089a0 <__lshift>
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	444b      	add	r3, r9
 8007bd2:	9307      	str	r3, [sp, #28]
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	46b8      	mov	r8, r7
 8007bdc:	9306      	str	r3, [sp, #24]
 8007bde:	4607      	mov	r7, r0
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	4631      	mov	r1, r6
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4658      	mov	r0, fp
 8007be8:	9302      	str	r3, [sp, #8]
 8007bea:	f7ff fa67 	bl	80070bc <quorem>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	3330      	adds	r3, #48	; 0x30
 8007bf2:	9004      	str	r0, [sp, #16]
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	9308      	str	r3, [sp, #32]
 8007bfa:	f000 ff3d 	bl	8008a78 <__mcmp>
 8007bfe:	463a      	mov	r2, r7
 8007c00:	4681      	mov	r9, r0
 8007c02:	4631      	mov	r1, r6
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 ff53 	bl	8008ab0 <__mdiff>
 8007c0a:	68c2      	ldr	r2, [r0, #12]
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	bb02      	cbnz	r2, 8007c54 <_dtoa_r+0xa7c>
 8007c12:	4601      	mov	r1, r0
 8007c14:	4658      	mov	r0, fp
 8007c16:	f000 ff2f 	bl	8008a78 <__mcmp>
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c26:	f000 fc9f 	bl	8008568 <_Bfree>
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2e:	9d01      	ldr	r5, [sp, #4]
 8007c30:	ea43 0102 	orr.w	r1, r3, r2
 8007c34:	9b06      	ldr	r3, [sp, #24]
 8007c36:	430b      	orrs	r3, r1
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	d10d      	bne.n	8007c58 <_dtoa_r+0xa80>
 8007c3c:	2b39      	cmp	r3, #57	; 0x39
 8007c3e:	d029      	beq.n	8007c94 <_dtoa_r+0xabc>
 8007c40:	f1b9 0f00 	cmp.w	r9, #0
 8007c44:	dd01      	ble.n	8007c4a <_dtoa_r+0xa72>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	3331      	adds	r3, #49	; 0x31
 8007c4a:	9a02      	ldr	r2, [sp, #8]
 8007c4c:	7013      	strb	r3, [r2, #0]
 8007c4e:	e774      	b.n	8007b3a <_dtoa_r+0x962>
 8007c50:	4638      	mov	r0, r7
 8007c52:	e7b9      	b.n	8007bc8 <_dtoa_r+0x9f0>
 8007c54:	2201      	movs	r2, #1
 8007c56:	e7e2      	b.n	8007c1e <_dtoa_r+0xa46>
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	db06      	blt.n	8007c6c <_dtoa_r+0xa94>
 8007c5e:	9905      	ldr	r1, [sp, #20]
 8007c60:	ea41 0909 	orr.w	r9, r1, r9
 8007c64:	9906      	ldr	r1, [sp, #24]
 8007c66:	ea59 0101 	orrs.w	r1, r9, r1
 8007c6a:	d120      	bne.n	8007cae <_dtoa_r+0xad6>
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	ddec      	ble.n	8007c4a <_dtoa_r+0xa72>
 8007c70:	4659      	mov	r1, fp
 8007c72:	2201      	movs	r2, #1
 8007c74:	4620      	mov	r0, r4
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	f000 fe92 	bl	80089a0 <__lshift>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4683      	mov	fp, r0
 8007c80:	f000 fefa 	bl	8008a78 <__mcmp>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	dc02      	bgt.n	8007c90 <_dtoa_r+0xab8>
 8007c8a:	d1de      	bne.n	8007c4a <_dtoa_r+0xa72>
 8007c8c:	07da      	lsls	r2, r3, #31
 8007c8e:	d5dc      	bpl.n	8007c4a <_dtoa_r+0xa72>
 8007c90:	2b39      	cmp	r3, #57	; 0x39
 8007c92:	d1d8      	bne.n	8007c46 <_dtoa_r+0xa6e>
 8007c94:	9a02      	ldr	r2, [sp, #8]
 8007c96:	2339      	movs	r3, #57	; 0x39
 8007c98:	7013      	strb	r3, [r2, #0]
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	461d      	mov	r5, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ca4:	2a39      	cmp	r2, #57	; 0x39
 8007ca6:	d050      	beq.n	8007d4a <_dtoa_r+0xb72>
 8007ca8:	3201      	adds	r2, #1
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e745      	b.n	8007b3a <_dtoa_r+0x962>
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	dd03      	ble.n	8007cba <_dtoa_r+0xae2>
 8007cb2:	2b39      	cmp	r3, #57	; 0x39
 8007cb4:	d0ee      	beq.n	8007c94 <_dtoa_r+0xabc>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	e7c7      	b.n	8007c4a <_dtoa_r+0xa72>
 8007cba:	9a01      	ldr	r2, [sp, #4]
 8007cbc:	9907      	ldr	r1, [sp, #28]
 8007cbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cc2:	428a      	cmp	r2, r1
 8007cc4:	d02a      	beq.n	8007d1c <_dtoa_r+0xb44>
 8007cc6:	4659      	mov	r1, fp
 8007cc8:	2300      	movs	r3, #0
 8007cca:	220a      	movs	r2, #10
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fc6d 	bl	80085ac <__multadd>
 8007cd2:	45b8      	cmp	r8, r7
 8007cd4:	4683      	mov	fp, r0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	f04f 020a 	mov.w	r2, #10
 8007cde:	4641      	mov	r1, r8
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	d107      	bne.n	8007cf4 <_dtoa_r+0xb1c>
 8007ce4:	f000 fc62 	bl	80085ac <__multadd>
 8007ce8:	4680      	mov	r8, r0
 8007cea:	4607      	mov	r7, r0
 8007cec:	9b01      	ldr	r3, [sp, #4]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	e775      	b.n	8007be0 <_dtoa_r+0xa08>
 8007cf4:	f000 fc5a 	bl	80085ac <__multadd>
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	220a      	movs	r2, #10
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fc53 	bl	80085ac <__multadd>
 8007d06:	4607      	mov	r7, r0
 8007d08:	e7f0      	b.n	8007cec <_dtoa_r+0xb14>
 8007d0a:	f1b9 0f00 	cmp.w	r9, #0
 8007d0e:	9a00      	ldr	r2, [sp, #0]
 8007d10:	bfcc      	ite	gt
 8007d12:	464d      	movgt	r5, r9
 8007d14:	2501      	movle	r5, #1
 8007d16:	4415      	add	r5, r2
 8007d18:	f04f 0800 	mov.w	r8, #0
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4620      	mov	r0, r4
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	f000 fe3c 	bl	80089a0 <__lshift>
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4683      	mov	fp, r0
 8007d2c:	f000 fea4 	bl	8008a78 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dcb2      	bgt.n	8007c9a <_dtoa_r+0xac2>
 8007d34:	d102      	bne.n	8007d3c <_dtoa_r+0xb64>
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	07db      	lsls	r3, r3, #31
 8007d3a:	d4ae      	bmi.n	8007c9a <_dtoa_r+0xac2>
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	461d      	mov	r5, r3
 8007d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d44:	2a30      	cmp	r2, #48	; 0x30
 8007d46:	d0fa      	beq.n	8007d3e <_dtoa_r+0xb66>
 8007d48:	e6f7      	b.n	8007b3a <_dtoa_r+0x962>
 8007d4a:	9a00      	ldr	r2, [sp, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d1a5      	bne.n	8007c9c <_dtoa_r+0xac4>
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	2331      	movs	r3, #49	; 0x31
 8007d56:	e779      	b.n	8007c4c <_dtoa_r+0xa74>
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <_dtoa_r+0xbd0>)
 8007d5a:	f7ff baaf 	b.w	80072bc <_dtoa_r+0xe4>
 8007d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f47f aa86 	bne.w	8007272 <_dtoa_r+0x9a>
 8007d66:	4b11      	ldr	r3, [pc, #68]	; (8007dac <_dtoa_r+0xbd4>)
 8007d68:	f7ff baa8 	b.w	80072bc <_dtoa_r+0xe4>
 8007d6c:	f1b9 0f00 	cmp.w	r9, #0
 8007d70:	dc03      	bgt.n	8007d7a <_dtoa_r+0xba2>
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	f73f aec9 	bgt.w	8007b0c <_dtoa_r+0x934>
 8007d7a:	9d00      	ldr	r5, [sp, #0]
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f7ff f99c 	bl	80070bc <quorem>
 8007d84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d88:	f805 3b01 	strb.w	r3, [r5], #1
 8007d8c:	9a00      	ldr	r2, [sp, #0]
 8007d8e:	1aaa      	subs	r2, r5, r2
 8007d90:	4591      	cmp	r9, r2
 8007d92:	ddba      	ble.n	8007d0a <_dtoa_r+0xb32>
 8007d94:	4659      	mov	r1, fp
 8007d96:	2300      	movs	r3, #0
 8007d98:	220a      	movs	r2, #10
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fc06 	bl	80085ac <__multadd>
 8007da0:	4683      	mov	fp, r0
 8007da2:	e7eb      	b.n	8007d7c <_dtoa_r+0xba4>
 8007da4:	0800a0fc 	.word	0x0800a0fc
 8007da8:	08009efc 	.word	0x08009efc
 8007dac:	0800a079 	.word	0x0800a079

08007db0 <rshift>:
 8007db0:	6903      	ldr	r3, [r0, #16]
 8007db2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007db6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dbe:	f100 0414 	add.w	r4, r0, #20
 8007dc2:	dd45      	ble.n	8007e50 <rshift+0xa0>
 8007dc4:	f011 011f 	ands.w	r1, r1, #31
 8007dc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007dcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dd0:	d10c      	bne.n	8007dec <rshift+0x3c>
 8007dd2:	f100 0710 	add.w	r7, r0, #16
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	42b1      	cmp	r1, r6
 8007dda:	d334      	bcc.n	8007e46 <rshift+0x96>
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	1eea      	subs	r2, r5, #3
 8007de2:	4296      	cmp	r6, r2
 8007de4:	bf38      	it	cc
 8007de6:	2300      	movcc	r3, #0
 8007de8:	4423      	add	r3, r4
 8007dea:	e015      	b.n	8007e18 <rshift+0x68>
 8007dec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007df0:	f1c1 0820 	rsb	r8, r1, #32
 8007df4:	40cf      	lsrs	r7, r1
 8007df6:	f105 0e04 	add.w	lr, r5, #4
 8007dfa:	46a1      	mov	r9, r4
 8007dfc:	4576      	cmp	r6, lr
 8007dfe:	46f4      	mov	ip, lr
 8007e00:	d815      	bhi.n	8007e2e <rshift+0x7e>
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	009a      	lsls	r2, r3, #2
 8007e06:	3a04      	subs	r2, #4
 8007e08:	3501      	adds	r5, #1
 8007e0a:	42ae      	cmp	r6, r5
 8007e0c:	bf38      	it	cc
 8007e0e:	2200      	movcc	r2, #0
 8007e10:	18a3      	adds	r3, r4, r2
 8007e12:	50a7      	str	r7, [r4, r2]
 8007e14:	b107      	cbz	r7, 8007e18 <rshift+0x68>
 8007e16:	3304      	adds	r3, #4
 8007e18:	1b1a      	subs	r2, r3, r4
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e20:	bf08      	it	eq
 8007e22:	2300      	moveq	r3, #0
 8007e24:	6102      	str	r2, [r0, #16]
 8007e26:	bf08      	it	eq
 8007e28:	6143      	streq	r3, [r0, #20]
 8007e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	f8dc c000 	ldr.w	ip, [ip]
 8007e32:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e36:	ea4c 0707 	orr.w	r7, ip, r7
 8007e3a:	f849 7b04 	str.w	r7, [r9], #4
 8007e3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e42:	40cf      	lsrs	r7, r1
 8007e44:	e7da      	b.n	8007dfc <rshift+0x4c>
 8007e46:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e4e:	e7c3      	b.n	8007dd8 <rshift+0x28>
 8007e50:	4623      	mov	r3, r4
 8007e52:	e7e1      	b.n	8007e18 <rshift+0x68>

08007e54 <__hexdig_fun>:
 8007e54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e58:	2b09      	cmp	r3, #9
 8007e5a:	d802      	bhi.n	8007e62 <__hexdig_fun+0xe>
 8007e5c:	3820      	subs	r0, #32
 8007e5e:	b2c0      	uxtb	r0, r0
 8007e60:	4770      	bx	lr
 8007e62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d801      	bhi.n	8007e6e <__hexdig_fun+0x1a>
 8007e6a:	3847      	subs	r0, #71	; 0x47
 8007e6c:	e7f7      	b.n	8007e5e <__hexdig_fun+0xa>
 8007e6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	d801      	bhi.n	8007e7a <__hexdig_fun+0x26>
 8007e76:	3827      	subs	r0, #39	; 0x27
 8007e78:	e7f1      	b.n	8007e5e <__hexdig_fun+0xa>
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	4770      	bx	lr
	...

08007e80 <__gethex>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	ed2d 8b02 	vpush	{d8}
 8007e88:	b089      	sub	sp, #36	; 0x24
 8007e8a:	ee08 0a10 	vmov	s16, r0
 8007e8e:	9304      	str	r3, [sp, #16]
 8007e90:	4bbc      	ldr	r3, [pc, #752]	; (8008184 <__gethex+0x304>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	468b      	mov	fp, r1
 8007e9a:	4690      	mov	r8, r2
 8007e9c:	f7f8 f998 	bl	80001d0 <strlen>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	f8db 2000 	ldr.w	r2, [fp]
 8007ea6:	4403      	add	r3, r0
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	1c93      	adds	r3, r2, #2
 8007eb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007eb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007eba:	32fe      	adds	r2, #254	; 0xfe
 8007ebc:	18d1      	adds	r1, r2, r3
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ec4:	9100      	str	r1, [sp, #0]
 8007ec6:	2830      	cmp	r0, #48	; 0x30
 8007ec8:	d0f8      	beq.n	8007ebc <__gethex+0x3c>
 8007eca:	f7ff ffc3 	bl	8007e54 <__hexdig_fun>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d13a      	bne.n	8007f4a <__gethex+0xca>
 8007ed4:	9901      	ldr	r1, [sp, #4]
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f001 f9ed 	bl	80092b8 <strncmp>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d168      	bne.n	8007fb6 <__gethex+0x136>
 8007ee4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ee8:	eb07 060a 	add.w	r6, r7, sl
 8007eec:	f7ff ffb2 	bl	8007e54 <__hexdig_fun>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d062      	beq.n	8007fba <__gethex+0x13a>
 8007ef4:	4633      	mov	r3, r6
 8007ef6:	7818      	ldrb	r0, [r3, #0]
 8007ef8:	2830      	cmp	r0, #48	; 0x30
 8007efa:	461f      	mov	r7, r3
 8007efc:	f103 0301 	add.w	r3, r3, #1
 8007f00:	d0f9      	beq.n	8007ef6 <__gethex+0x76>
 8007f02:	f7ff ffa7 	bl	8007e54 <__hexdig_fun>
 8007f06:	2301      	movs	r3, #1
 8007f08:	fab0 f480 	clz	r4, r0
 8007f0c:	0964      	lsrs	r4, r4, #5
 8007f0e:	4635      	mov	r5, r6
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	463a      	mov	r2, r7
 8007f14:	4616      	mov	r6, r2
 8007f16:	3201      	adds	r2, #1
 8007f18:	7830      	ldrb	r0, [r6, #0]
 8007f1a:	f7ff ff9b 	bl	8007e54 <__hexdig_fun>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d1f8      	bne.n	8007f14 <__gethex+0x94>
 8007f22:	9901      	ldr	r1, [sp, #4]
 8007f24:	4652      	mov	r2, sl
 8007f26:	4630      	mov	r0, r6
 8007f28:	f001 f9c6 	bl	80092b8 <strncmp>
 8007f2c:	b980      	cbnz	r0, 8007f50 <__gethex+0xd0>
 8007f2e:	b94d      	cbnz	r5, 8007f44 <__gethex+0xc4>
 8007f30:	eb06 050a 	add.w	r5, r6, sl
 8007f34:	462a      	mov	r2, r5
 8007f36:	4616      	mov	r6, r2
 8007f38:	3201      	adds	r2, #1
 8007f3a:	7830      	ldrb	r0, [r6, #0]
 8007f3c:	f7ff ff8a 	bl	8007e54 <__hexdig_fun>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1f8      	bne.n	8007f36 <__gethex+0xb6>
 8007f44:	1bad      	subs	r5, r5, r6
 8007f46:	00ad      	lsls	r5, r5, #2
 8007f48:	e004      	b.n	8007f54 <__gethex+0xd4>
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	4625      	mov	r5, r4
 8007f4e:	e7e0      	b.n	8007f12 <__gethex+0x92>
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	d1f7      	bne.n	8007f44 <__gethex+0xc4>
 8007f54:	7833      	ldrb	r3, [r6, #0]
 8007f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f5a:	2b50      	cmp	r3, #80	; 0x50
 8007f5c:	d13b      	bne.n	8007fd6 <__gethex+0x156>
 8007f5e:	7873      	ldrb	r3, [r6, #1]
 8007f60:	2b2b      	cmp	r3, #43	; 0x2b
 8007f62:	d02c      	beq.n	8007fbe <__gethex+0x13e>
 8007f64:	2b2d      	cmp	r3, #45	; 0x2d
 8007f66:	d02e      	beq.n	8007fc6 <__gethex+0x146>
 8007f68:	1c71      	adds	r1, r6, #1
 8007f6a:	f04f 0900 	mov.w	r9, #0
 8007f6e:	7808      	ldrb	r0, [r1, #0]
 8007f70:	f7ff ff70 	bl	8007e54 <__hexdig_fun>
 8007f74:	1e43      	subs	r3, r0, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b18      	cmp	r3, #24
 8007f7a:	d82c      	bhi.n	8007fd6 <__gethex+0x156>
 8007f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8007f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f84:	f7ff ff66 	bl	8007e54 <__hexdig_fun>
 8007f88:	1e43      	subs	r3, r0, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b18      	cmp	r3, #24
 8007f8e:	d91d      	bls.n	8007fcc <__gethex+0x14c>
 8007f90:	f1b9 0f00 	cmp.w	r9, #0
 8007f94:	d000      	beq.n	8007f98 <__gethex+0x118>
 8007f96:	4252      	negs	r2, r2
 8007f98:	4415      	add	r5, r2
 8007f9a:	f8cb 1000 	str.w	r1, [fp]
 8007f9e:	b1e4      	cbz	r4, 8007fda <__gethex+0x15a>
 8007fa0:	9b00      	ldr	r3, [sp, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bf14      	ite	ne
 8007fa6:	2700      	movne	r7, #0
 8007fa8:	2706      	moveq	r7, #6
 8007faa:	4638      	mov	r0, r7
 8007fac:	b009      	add	sp, #36	; 0x24
 8007fae:	ecbd 8b02 	vpop	{d8}
 8007fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb6:	463e      	mov	r6, r7
 8007fb8:	4625      	mov	r5, r4
 8007fba:	2401      	movs	r4, #1
 8007fbc:	e7ca      	b.n	8007f54 <__gethex+0xd4>
 8007fbe:	f04f 0900 	mov.w	r9, #0
 8007fc2:	1cb1      	adds	r1, r6, #2
 8007fc4:	e7d3      	b.n	8007f6e <__gethex+0xee>
 8007fc6:	f04f 0901 	mov.w	r9, #1
 8007fca:	e7fa      	b.n	8007fc2 <__gethex+0x142>
 8007fcc:	230a      	movs	r3, #10
 8007fce:	fb03 0202 	mla	r2, r3, r2, r0
 8007fd2:	3a10      	subs	r2, #16
 8007fd4:	e7d4      	b.n	8007f80 <__gethex+0x100>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	e7df      	b.n	8007f9a <__gethex+0x11a>
 8007fda:	1bf3      	subs	r3, r6, r7
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	4621      	mov	r1, r4
 8007fe0:	2b07      	cmp	r3, #7
 8007fe2:	dc0b      	bgt.n	8007ffc <__gethex+0x17c>
 8007fe4:	ee18 0a10 	vmov	r0, s16
 8007fe8:	f000 fa7e 	bl	80084e8 <_Balloc>
 8007fec:	4604      	mov	r4, r0
 8007fee:	b940      	cbnz	r0, 8008002 <__gethex+0x182>
 8007ff0:	4b65      	ldr	r3, [pc, #404]	; (8008188 <__gethex+0x308>)
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	21de      	movs	r1, #222	; 0xde
 8007ff6:	4865      	ldr	r0, [pc, #404]	; (800818c <__gethex+0x30c>)
 8007ff8:	f001 f97e 	bl	80092f8 <__assert_func>
 8007ffc:	3101      	adds	r1, #1
 8007ffe:	105b      	asrs	r3, r3, #1
 8008000:	e7ee      	b.n	8007fe0 <__gethex+0x160>
 8008002:	f100 0914 	add.w	r9, r0, #20
 8008006:	f04f 0b00 	mov.w	fp, #0
 800800a:	f1ca 0301 	rsb	r3, sl, #1
 800800e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008012:	f8cd b000 	str.w	fp, [sp]
 8008016:	9306      	str	r3, [sp, #24]
 8008018:	42b7      	cmp	r7, r6
 800801a:	d340      	bcc.n	800809e <__gethex+0x21e>
 800801c:	9802      	ldr	r0, [sp, #8]
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	f840 3b04 	str.w	r3, [r0], #4
 8008024:	eba0 0009 	sub.w	r0, r0, r9
 8008028:	1080      	asrs	r0, r0, #2
 800802a:	0146      	lsls	r6, r0, #5
 800802c:	6120      	str	r0, [r4, #16]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fb50 	bl	80086d4 <__hi0bits>
 8008034:	1a30      	subs	r0, r6, r0
 8008036:	f8d8 6000 	ldr.w	r6, [r8]
 800803a:	42b0      	cmp	r0, r6
 800803c:	dd63      	ble.n	8008106 <__gethex+0x286>
 800803e:	1b87      	subs	r7, r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	4620      	mov	r0, r4
 8008044:	f000 feea 	bl	8008e1c <__any_on>
 8008048:	4682      	mov	sl, r0
 800804a:	b1a8      	cbz	r0, 8008078 <__gethex+0x1f8>
 800804c:	1e7b      	subs	r3, r7, #1
 800804e:	1159      	asrs	r1, r3, #5
 8008050:	f003 021f 	and.w	r2, r3, #31
 8008054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008058:	f04f 0a01 	mov.w	sl, #1
 800805c:	fa0a f202 	lsl.w	r2, sl, r2
 8008060:	420a      	tst	r2, r1
 8008062:	d009      	beq.n	8008078 <__gethex+0x1f8>
 8008064:	4553      	cmp	r3, sl
 8008066:	dd05      	ble.n	8008074 <__gethex+0x1f4>
 8008068:	1eb9      	subs	r1, r7, #2
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fed6 	bl	8008e1c <__any_on>
 8008070:	2800      	cmp	r0, #0
 8008072:	d145      	bne.n	8008100 <__gethex+0x280>
 8008074:	f04f 0a02 	mov.w	sl, #2
 8008078:	4639      	mov	r1, r7
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff fe98 	bl	8007db0 <rshift>
 8008080:	443d      	add	r5, r7
 8008082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008086:	42ab      	cmp	r3, r5
 8008088:	da4c      	bge.n	8008124 <__gethex+0x2a4>
 800808a:	ee18 0a10 	vmov	r0, s16
 800808e:	4621      	mov	r1, r4
 8008090:	f000 fa6a 	bl	8008568 <_Bfree>
 8008094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008096:	2300      	movs	r3, #0
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	27a3      	movs	r7, #163	; 0xa3
 800809c:	e785      	b.n	8007faa <__gethex+0x12a>
 800809e:	1e73      	subs	r3, r6, #1
 80080a0:	9a05      	ldr	r2, [sp, #20]
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d019      	beq.n	80080e0 <__gethex+0x260>
 80080ac:	f1bb 0f20 	cmp.w	fp, #32
 80080b0:	d107      	bne.n	80080c2 <__gethex+0x242>
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	9a00      	ldr	r2, [sp, #0]
 80080b6:	f843 2b04 	str.w	r2, [r3], #4
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	2300      	movs	r3, #0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	469b      	mov	fp, r3
 80080c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080c6:	f7ff fec5 	bl	8007e54 <__hexdig_fun>
 80080ca:	9b00      	ldr	r3, [sp, #0]
 80080cc:	f000 000f 	and.w	r0, r0, #15
 80080d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80080d4:	4303      	orrs	r3, r0
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	f10b 0b04 	add.w	fp, fp, #4
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	e00d      	b.n	80080fc <__gethex+0x27c>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	4413      	add	r3, r2
 80080e6:	42bb      	cmp	r3, r7
 80080e8:	d3e0      	bcc.n	80080ac <__gethex+0x22c>
 80080ea:	4618      	mov	r0, r3
 80080ec:	9901      	ldr	r1, [sp, #4]
 80080ee:	9307      	str	r3, [sp, #28]
 80080f0:	4652      	mov	r2, sl
 80080f2:	f001 f8e1 	bl	80092b8 <strncmp>
 80080f6:	9b07      	ldr	r3, [sp, #28]
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d1d7      	bne.n	80080ac <__gethex+0x22c>
 80080fc:	461e      	mov	r6, r3
 80080fe:	e78b      	b.n	8008018 <__gethex+0x198>
 8008100:	f04f 0a03 	mov.w	sl, #3
 8008104:	e7b8      	b.n	8008078 <__gethex+0x1f8>
 8008106:	da0a      	bge.n	800811e <__gethex+0x29e>
 8008108:	1a37      	subs	r7, r6, r0
 800810a:	4621      	mov	r1, r4
 800810c:	ee18 0a10 	vmov	r0, s16
 8008110:	463a      	mov	r2, r7
 8008112:	f000 fc45 	bl	80089a0 <__lshift>
 8008116:	1bed      	subs	r5, r5, r7
 8008118:	4604      	mov	r4, r0
 800811a:	f100 0914 	add.w	r9, r0, #20
 800811e:	f04f 0a00 	mov.w	sl, #0
 8008122:	e7ae      	b.n	8008082 <__gethex+0x202>
 8008124:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008128:	42a8      	cmp	r0, r5
 800812a:	dd72      	ble.n	8008212 <__gethex+0x392>
 800812c:	1b45      	subs	r5, r0, r5
 800812e:	42ae      	cmp	r6, r5
 8008130:	dc36      	bgt.n	80081a0 <__gethex+0x320>
 8008132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d02a      	beq.n	8008190 <__gethex+0x310>
 800813a:	2b03      	cmp	r3, #3
 800813c:	d02c      	beq.n	8008198 <__gethex+0x318>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d115      	bne.n	800816e <__gethex+0x2ee>
 8008142:	42ae      	cmp	r6, r5
 8008144:	d113      	bne.n	800816e <__gethex+0x2ee>
 8008146:	2e01      	cmp	r6, #1
 8008148:	d10b      	bne.n	8008162 <__gethex+0x2e2>
 800814a:	9a04      	ldr	r2, [sp, #16]
 800814c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	2301      	movs	r3, #1
 8008154:	6123      	str	r3, [r4, #16]
 8008156:	f8c9 3000 	str.w	r3, [r9]
 800815a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800815c:	2762      	movs	r7, #98	; 0x62
 800815e:	601c      	str	r4, [r3, #0]
 8008160:	e723      	b.n	8007faa <__gethex+0x12a>
 8008162:	1e71      	subs	r1, r6, #1
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fe59 	bl	8008e1c <__any_on>
 800816a:	2800      	cmp	r0, #0
 800816c:	d1ed      	bne.n	800814a <__gethex+0x2ca>
 800816e:	ee18 0a10 	vmov	r0, s16
 8008172:	4621      	mov	r1, r4
 8008174:	f000 f9f8 	bl	8008568 <_Bfree>
 8008178:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800817a:	2300      	movs	r3, #0
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	2750      	movs	r7, #80	; 0x50
 8008180:	e713      	b.n	8007faa <__gethex+0x12a>
 8008182:	bf00      	nop
 8008184:	0800a178 	.word	0x0800a178
 8008188:	0800a0fc 	.word	0x0800a0fc
 800818c:	0800a10d 	.word	0x0800a10d
 8008190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1eb      	bne.n	800816e <__gethex+0x2ee>
 8008196:	e7d8      	b.n	800814a <__gethex+0x2ca>
 8008198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1d5      	bne.n	800814a <__gethex+0x2ca>
 800819e:	e7e6      	b.n	800816e <__gethex+0x2ee>
 80081a0:	1e6f      	subs	r7, r5, #1
 80081a2:	f1ba 0f00 	cmp.w	sl, #0
 80081a6:	d131      	bne.n	800820c <__gethex+0x38c>
 80081a8:	b127      	cbz	r7, 80081b4 <__gethex+0x334>
 80081aa:	4639      	mov	r1, r7
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fe35 	bl	8008e1c <__any_on>
 80081b2:	4682      	mov	sl, r0
 80081b4:	117b      	asrs	r3, r7, #5
 80081b6:	2101      	movs	r1, #1
 80081b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80081bc:	f007 071f 	and.w	r7, r7, #31
 80081c0:	fa01 f707 	lsl.w	r7, r1, r7
 80081c4:	421f      	tst	r7, r3
 80081c6:	4629      	mov	r1, r5
 80081c8:	4620      	mov	r0, r4
 80081ca:	bf18      	it	ne
 80081cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80081d0:	1b76      	subs	r6, r6, r5
 80081d2:	f7ff fded 	bl	8007db0 <rshift>
 80081d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081da:	2702      	movs	r7, #2
 80081dc:	f1ba 0f00 	cmp.w	sl, #0
 80081e0:	d048      	beq.n	8008274 <__gethex+0x3f4>
 80081e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d015      	beq.n	8008216 <__gethex+0x396>
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d017      	beq.n	800821e <__gethex+0x39e>
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d109      	bne.n	8008206 <__gethex+0x386>
 80081f2:	f01a 0f02 	tst.w	sl, #2
 80081f6:	d006      	beq.n	8008206 <__gethex+0x386>
 80081f8:	f8d9 0000 	ldr.w	r0, [r9]
 80081fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8008200:	f01a 0f01 	tst.w	sl, #1
 8008204:	d10e      	bne.n	8008224 <__gethex+0x3a4>
 8008206:	f047 0710 	orr.w	r7, r7, #16
 800820a:	e033      	b.n	8008274 <__gethex+0x3f4>
 800820c:	f04f 0a01 	mov.w	sl, #1
 8008210:	e7d0      	b.n	80081b4 <__gethex+0x334>
 8008212:	2701      	movs	r7, #1
 8008214:	e7e2      	b.n	80081dc <__gethex+0x35c>
 8008216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008218:	f1c3 0301 	rsb	r3, r3, #1
 800821c:	9315      	str	r3, [sp, #84]	; 0x54
 800821e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0f0      	beq.n	8008206 <__gethex+0x386>
 8008224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008228:	f104 0314 	add.w	r3, r4, #20
 800822c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008230:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008234:	f04f 0c00 	mov.w	ip, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008242:	d01c      	beq.n	800827e <__gethex+0x3fe>
 8008244:	3201      	adds	r2, #1
 8008246:	6002      	str	r2, [r0, #0]
 8008248:	2f02      	cmp	r7, #2
 800824a:	f104 0314 	add.w	r3, r4, #20
 800824e:	d13f      	bne.n	80082d0 <__gethex+0x450>
 8008250:	f8d8 2000 	ldr.w	r2, [r8]
 8008254:	3a01      	subs	r2, #1
 8008256:	42b2      	cmp	r2, r6
 8008258:	d10a      	bne.n	8008270 <__gethex+0x3f0>
 800825a:	1171      	asrs	r1, r6, #5
 800825c:	2201      	movs	r2, #1
 800825e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008262:	f006 061f 	and.w	r6, r6, #31
 8008266:	fa02 f606 	lsl.w	r6, r2, r6
 800826a:	421e      	tst	r6, r3
 800826c:	bf18      	it	ne
 800826e:	4617      	movne	r7, r2
 8008270:	f047 0720 	orr.w	r7, r7, #32
 8008274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008276:	601c      	str	r4, [r3, #0]
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	601d      	str	r5, [r3, #0]
 800827c:	e695      	b.n	8007faa <__gethex+0x12a>
 800827e:	4299      	cmp	r1, r3
 8008280:	f843 cc04 	str.w	ip, [r3, #-4]
 8008284:	d8d8      	bhi.n	8008238 <__gethex+0x3b8>
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	459b      	cmp	fp, r3
 800828a:	db19      	blt.n	80082c0 <__gethex+0x440>
 800828c:	6861      	ldr	r1, [r4, #4]
 800828e:	ee18 0a10 	vmov	r0, s16
 8008292:	3101      	adds	r1, #1
 8008294:	f000 f928 	bl	80084e8 <_Balloc>
 8008298:	4681      	mov	r9, r0
 800829a:	b918      	cbnz	r0, 80082a4 <__gethex+0x424>
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <__gethex+0x488>)
 800829e:	4602      	mov	r2, r0
 80082a0:	2184      	movs	r1, #132	; 0x84
 80082a2:	e6a8      	b.n	8007ff6 <__gethex+0x176>
 80082a4:	6922      	ldr	r2, [r4, #16]
 80082a6:	3202      	adds	r2, #2
 80082a8:	f104 010c 	add.w	r1, r4, #12
 80082ac:	0092      	lsls	r2, r2, #2
 80082ae:	300c      	adds	r0, #12
 80082b0:	f000 f90c 	bl	80084cc <memcpy>
 80082b4:	4621      	mov	r1, r4
 80082b6:	ee18 0a10 	vmov	r0, s16
 80082ba:	f000 f955 	bl	8008568 <_Bfree>
 80082be:	464c      	mov	r4, r9
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082c8:	6122      	str	r2, [r4, #16]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
 80082ce:	e7bb      	b.n	8008248 <__gethex+0x3c8>
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	455a      	cmp	r2, fp
 80082d4:	dd0b      	ble.n	80082ee <__gethex+0x46e>
 80082d6:	2101      	movs	r1, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f7ff fd69 	bl	8007db0 <rshift>
 80082de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e2:	3501      	adds	r5, #1
 80082e4:	42ab      	cmp	r3, r5
 80082e6:	f6ff aed0 	blt.w	800808a <__gethex+0x20a>
 80082ea:	2701      	movs	r7, #1
 80082ec:	e7c0      	b.n	8008270 <__gethex+0x3f0>
 80082ee:	f016 061f 	ands.w	r6, r6, #31
 80082f2:	d0fa      	beq.n	80082ea <__gethex+0x46a>
 80082f4:	449a      	add	sl, r3
 80082f6:	f1c6 0620 	rsb	r6, r6, #32
 80082fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082fe:	f000 f9e9 	bl	80086d4 <__hi0bits>
 8008302:	42b0      	cmp	r0, r6
 8008304:	dbe7      	blt.n	80082d6 <__gethex+0x456>
 8008306:	e7f0      	b.n	80082ea <__gethex+0x46a>
 8008308:	0800a0fc 	.word	0x0800a0fc

0800830c <L_shift>:
 800830c:	f1c2 0208 	rsb	r2, r2, #8
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	f1c2 0620 	rsb	r6, r2, #32
 8008318:	6843      	ldr	r3, [r0, #4]
 800831a:	6804      	ldr	r4, [r0, #0]
 800831c:	fa03 f506 	lsl.w	r5, r3, r6
 8008320:	432c      	orrs	r4, r5
 8008322:	40d3      	lsrs	r3, r2
 8008324:	6004      	str	r4, [r0, #0]
 8008326:	f840 3f04 	str.w	r3, [r0, #4]!
 800832a:	4288      	cmp	r0, r1
 800832c:	d3f4      	bcc.n	8008318 <L_shift+0xc>
 800832e:	bd70      	pop	{r4, r5, r6, pc}

08008330 <__match>:
 8008330:	b530      	push	{r4, r5, lr}
 8008332:	6803      	ldr	r3, [r0, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800833a:	b914      	cbnz	r4, 8008342 <__match+0x12>
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	bd30      	pop	{r4, r5, pc}
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800834a:	2d19      	cmp	r5, #25
 800834c:	bf98      	it	ls
 800834e:	3220      	addls	r2, #32
 8008350:	42a2      	cmp	r2, r4
 8008352:	d0f0      	beq.n	8008336 <__match+0x6>
 8008354:	2000      	movs	r0, #0
 8008356:	e7f3      	b.n	8008340 <__match+0x10>

08008358 <__hexnan>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	6801      	ldr	r1, [r0, #0]
 8008360:	115e      	asrs	r6, r3, #5
 8008362:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008366:	f013 031f 	ands.w	r3, r3, #31
 800836a:	b087      	sub	sp, #28
 800836c:	bf18      	it	ne
 800836e:	3604      	addne	r6, #4
 8008370:	2500      	movs	r5, #0
 8008372:	1f37      	subs	r7, r6, #4
 8008374:	4682      	mov	sl, r0
 8008376:	4690      	mov	r8, r2
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	f846 5c04 	str.w	r5, [r6, #-4]
 800837e:	46b9      	mov	r9, r7
 8008380:	463c      	mov	r4, r7
 8008382:	9502      	str	r5, [sp, #8]
 8008384:	46ab      	mov	fp, r5
 8008386:	784a      	ldrb	r2, [r1, #1]
 8008388:	1c4b      	adds	r3, r1, #1
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	b342      	cbz	r2, 80083e0 <__hexnan+0x88>
 800838e:	4610      	mov	r0, r2
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	9204      	str	r2, [sp, #16]
 8008394:	f7ff fd5e 	bl	8007e54 <__hexdig_fun>
 8008398:	2800      	cmp	r0, #0
 800839a:	d14f      	bne.n	800843c <__hexnan+0xe4>
 800839c:	9a04      	ldr	r2, [sp, #16]
 800839e:	9905      	ldr	r1, [sp, #20]
 80083a0:	2a20      	cmp	r2, #32
 80083a2:	d818      	bhi.n	80083d6 <__hexnan+0x7e>
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	459b      	cmp	fp, r3
 80083a8:	dd13      	ble.n	80083d2 <__hexnan+0x7a>
 80083aa:	454c      	cmp	r4, r9
 80083ac:	d206      	bcs.n	80083bc <__hexnan+0x64>
 80083ae:	2d07      	cmp	r5, #7
 80083b0:	dc04      	bgt.n	80083bc <__hexnan+0x64>
 80083b2:	462a      	mov	r2, r5
 80083b4:	4649      	mov	r1, r9
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff ffa8 	bl	800830c <L_shift>
 80083bc:	4544      	cmp	r4, r8
 80083be:	d950      	bls.n	8008462 <__hexnan+0x10a>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f1a4 0904 	sub.w	r9, r4, #4
 80083c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80083ca:	f8cd b008 	str.w	fp, [sp, #8]
 80083ce:	464c      	mov	r4, r9
 80083d0:	461d      	mov	r5, r3
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	e7d7      	b.n	8008386 <__hexnan+0x2e>
 80083d6:	2a29      	cmp	r2, #41	; 0x29
 80083d8:	d156      	bne.n	8008488 <__hexnan+0x130>
 80083da:	3102      	adds	r1, #2
 80083dc:	f8ca 1000 	str.w	r1, [sl]
 80083e0:	f1bb 0f00 	cmp.w	fp, #0
 80083e4:	d050      	beq.n	8008488 <__hexnan+0x130>
 80083e6:	454c      	cmp	r4, r9
 80083e8:	d206      	bcs.n	80083f8 <__hexnan+0xa0>
 80083ea:	2d07      	cmp	r5, #7
 80083ec:	dc04      	bgt.n	80083f8 <__hexnan+0xa0>
 80083ee:	462a      	mov	r2, r5
 80083f0:	4649      	mov	r1, r9
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff ff8a 	bl	800830c <L_shift>
 80083f8:	4544      	cmp	r4, r8
 80083fa:	d934      	bls.n	8008466 <__hexnan+0x10e>
 80083fc:	f1a8 0204 	sub.w	r2, r8, #4
 8008400:	4623      	mov	r3, r4
 8008402:	f853 1b04 	ldr.w	r1, [r3], #4
 8008406:	f842 1f04 	str.w	r1, [r2, #4]!
 800840a:	429f      	cmp	r7, r3
 800840c:	d2f9      	bcs.n	8008402 <__hexnan+0xaa>
 800840e:	1b3b      	subs	r3, r7, r4
 8008410:	f023 0303 	bic.w	r3, r3, #3
 8008414:	3304      	adds	r3, #4
 8008416:	3401      	adds	r4, #1
 8008418:	3e03      	subs	r6, #3
 800841a:	42b4      	cmp	r4, r6
 800841c:	bf88      	it	hi
 800841e:	2304      	movhi	r3, #4
 8008420:	4443      	add	r3, r8
 8008422:	2200      	movs	r2, #0
 8008424:	f843 2b04 	str.w	r2, [r3], #4
 8008428:	429f      	cmp	r7, r3
 800842a:	d2fb      	bcs.n	8008424 <__hexnan+0xcc>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	b91b      	cbnz	r3, 8008438 <__hexnan+0xe0>
 8008430:	4547      	cmp	r7, r8
 8008432:	d127      	bne.n	8008484 <__hexnan+0x12c>
 8008434:	2301      	movs	r3, #1
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	2005      	movs	r0, #5
 800843a:	e026      	b.n	800848a <__hexnan+0x132>
 800843c:	3501      	adds	r5, #1
 800843e:	2d08      	cmp	r5, #8
 8008440:	f10b 0b01 	add.w	fp, fp, #1
 8008444:	dd06      	ble.n	8008454 <__hexnan+0xfc>
 8008446:	4544      	cmp	r4, r8
 8008448:	d9c3      	bls.n	80083d2 <__hexnan+0x7a>
 800844a:	2300      	movs	r3, #0
 800844c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008450:	2501      	movs	r5, #1
 8008452:	3c04      	subs	r4, #4
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	f000 000f 	and.w	r0, r0, #15
 800845a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	e7b7      	b.n	80083d2 <__hexnan+0x7a>
 8008462:	2508      	movs	r5, #8
 8008464:	e7b5      	b.n	80083d2 <__hexnan+0x7a>
 8008466:	9b01      	ldr	r3, [sp, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0df      	beq.n	800842c <__hexnan+0xd4>
 800846c:	f04f 32ff 	mov.w	r2, #4294967295
 8008470:	f1c3 0320 	rsb	r3, r3, #32
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800847c:	401a      	ands	r2, r3
 800847e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008482:	e7d3      	b.n	800842c <__hexnan+0xd4>
 8008484:	3f04      	subs	r7, #4
 8008486:	e7d1      	b.n	800842c <__hexnan+0xd4>
 8008488:	2004      	movs	r0, #4
 800848a:	b007      	add	sp, #28
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008490 <_localeconv_r>:
 8008490:	4800      	ldr	r0, [pc, #0]	; (8008494 <_localeconv_r+0x4>)
 8008492:	4770      	bx	lr
 8008494:	20000164 	.word	0x20000164

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 bd3d 	b.w	8008f1c <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	2000000c 	.word	0x2000000c

080084a8 <__ascii_mbtowc>:
 80084a8:	b082      	sub	sp, #8
 80084aa:	b901      	cbnz	r1, 80084ae <__ascii_mbtowc+0x6>
 80084ac:	a901      	add	r1, sp, #4
 80084ae:	b142      	cbz	r2, 80084c2 <__ascii_mbtowc+0x1a>
 80084b0:	b14b      	cbz	r3, 80084c6 <__ascii_mbtowc+0x1e>
 80084b2:	7813      	ldrb	r3, [r2, #0]
 80084b4:	600b      	str	r3, [r1, #0]
 80084b6:	7812      	ldrb	r2, [r2, #0]
 80084b8:	1e10      	subs	r0, r2, #0
 80084ba:	bf18      	it	ne
 80084bc:	2001      	movne	r0, #1
 80084be:	b002      	add	sp, #8
 80084c0:	4770      	bx	lr
 80084c2:	4610      	mov	r0, r2
 80084c4:	e7fb      	b.n	80084be <__ascii_mbtowc+0x16>
 80084c6:	f06f 0001 	mvn.w	r0, #1
 80084ca:	e7f8      	b.n	80084be <__ascii_mbtowc+0x16>

080084cc <memcpy>:
 80084cc:	440a      	add	r2, r1
 80084ce:	4291      	cmp	r1, r2
 80084d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d4:	d100      	bne.n	80084d8 <memcpy+0xc>
 80084d6:	4770      	bx	lr
 80084d8:	b510      	push	{r4, lr}
 80084da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e2:	4291      	cmp	r1, r2
 80084e4:	d1f9      	bne.n	80084da <memcpy+0xe>
 80084e6:	bd10      	pop	{r4, pc}

080084e8 <_Balloc>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084ec:	4604      	mov	r4, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	b976      	cbnz	r6, 8008510 <_Balloc+0x28>
 80084f2:	2010      	movs	r0, #16
 80084f4:	f7ff ffd0 	bl	8008498 <malloc>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6260      	str	r0, [r4, #36]	; 0x24
 80084fc:	b920      	cbnz	r0, 8008508 <_Balloc+0x20>
 80084fe:	4b18      	ldr	r3, [pc, #96]	; (8008560 <_Balloc+0x78>)
 8008500:	4818      	ldr	r0, [pc, #96]	; (8008564 <_Balloc+0x7c>)
 8008502:	2166      	movs	r1, #102	; 0x66
 8008504:	f000 fef8 	bl	80092f8 <__assert_func>
 8008508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800850c:	6006      	str	r6, [r0, #0]
 800850e:	60c6      	str	r6, [r0, #12]
 8008510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008512:	68f3      	ldr	r3, [r6, #12]
 8008514:	b183      	cbz	r3, 8008538 <_Balloc+0x50>
 8008516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800851e:	b9b8      	cbnz	r0, 8008550 <_Balloc+0x68>
 8008520:	2101      	movs	r1, #1
 8008522:	fa01 f605 	lsl.w	r6, r1, r5
 8008526:	1d72      	adds	r2, r6, #5
 8008528:	0092      	lsls	r2, r2, #2
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fc97 	bl	8008e5e <_calloc_r>
 8008530:	b160      	cbz	r0, 800854c <_Balloc+0x64>
 8008532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008536:	e00e      	b.n	8008556 <_Balloc+0x6e>
 8008538:	2221      	movs	r2, #33	; 0x21
 800853a:	2104      	movs	r1, #4
 800853c:	4620      	mov	r0, r4
 800853e:	f000 fc8e 	bl	8008e5e <_calloc_r>
 8008542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008544:	60f0      	str	r0, [r6, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e4      	bne.n	8008516 <_Balloc+0x2e>
 800854c:	2000      	movs	r0, #0
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	6802      	ldr	r2, [r0, #0]
 8008552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008556:	2300      	movs	r3, #0
 8008558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800855c:	e7f7      	b.n	800854e <_Balloc+0x66>
 800855e:	bf00      	nop
 8008560:	0800a086 	.word	0x0800a086
 8008564:	0800a18c 	.word	0x0800a18c

08008568 <_Bfree>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	b976      	cbnz	r6, 8008590 <_Bfree+0x28>
 8008572:	2010      	movs	r0, #16
 8008574:	f7ff ff90 	bl	8008498 <malloc>
 8008578:	4602      	mov	r2, r0
 800857a:	6268      	str	r0, [r5, #36]	; 0x24
 800857c:	b920      	cbnz	r0, 8008588 <_Bfree+0x20>
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <_Bfree+0x3c>)
 8008580:	4809      	ldr	r0, [pc, #36]	; (80085a8 <_Bfree+0x40>)
 8008582:	218a      	movs	r1, #138	; 0x8a
 8008584:	f000 feb8 	bl	80092f8 <__assert_func>
 8008588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800858c:	6006      	str	r6, [r0, #0]
 800858e:	60c6      	str	r6, [r0, #12]
 8008590:	b13c      	cbz	r4, 80085a2 <_Bfree+0x3a>
 8008592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008594:	6862      	ldr	r2, [r4, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800859c:	6021      	str	r1, [r4, #0]
 800859e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	0800a086 	.word	0x0800a086
 80085a8:	0800a18c 	.word	0x0800a18c

080085ac <__multadd>:
 80085ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b0:	690e      	ldr	r6, [r1, #16]
 80085b2:	4607      	mov	r7, r0
 80085b4:	4698      	mov	r8, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	f101 0014 	add.w	r0, r1, #20
 80085bc:	2300      	movs	r3, #0
 80085be:	6805      	ldr	r5, [r0, #0]
 80085c0:	b2a9      	uxth	r1, r5
 80085c2:	fb02 8101 	mla	r1, r2, r1, r8
 80085c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80085ca:	0c2d      	lsrs	r5, r5, #16
 80085cc:	fb02 c505 	mla	r5, r2, r5, ip
 80085d0:	b289      	uxth	r1, r1
 80085d2:	3301      	adds	r3, #1
 80085d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80085d8:	429e      	cmp	r6, r3
 80085da:	f840 1b04 	str.w	r1, [r0], #4
 80085de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80085e2:	dcec      	bgt.n	80085be <__multadd+0x12>
 80085e4:	f1b8 0f00 	cmp.w	r8, #0
 80085e8:	d022      	beq.n	8008630 <__multadd+0x84>
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	42b3      	cmp	r3, r6
 80085ee:	dc19      	bgt.n	8008624 <__multadd+0x78>
 80085f0:	6861      	ldr	r1, [r4, #4]
 80085f2:	4638      	mov	r0, r7
 80085f4:	3101      	adds	r1, #1
 80085f6:	f7ff ff77 	bl	80084e8 <_Balloc>
 80085fa:	4605      	mov	r5, r0
 80085fc:	b928      	cbnz	r0, 800860a <__multadd+0x5e>
 80085fe:	4602      	mov	r2, r0
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <__multadd+0x8c>)
 8008602:	480e      	ldr	r0, [pc, #56]	; (800863c <__multadd+0x90>)
 8008604:	21b5      	movs	r1, #181	; 0xb5
 8008606:	f000 fe77 	bl	80092f8 <__assert_func>
 800860a:	6922      	ldr	r2, [r4, #16]
 800860c:	3202      	adds	r2, #2
 800860e:	f104 010c 	add.w	r1, r4, #12
 8008612:	0092      	lsls	r2, r2, #2
 8008614:	300c      	adds	r0, #12
 8008616:	f7ff ff59 	bl	80084cc <memcpy>
 800861a:	4621      	mov	r1, r4
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff ffa3 	bl	8008568 <_Bfree>
 8008622:	462c      	mov	r4, r5
 8008624:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008628:	3601      	adds	r6, #1
 800862a:	f8c3 8014 	str.w	r8, [r3, #20]
 800862e:	6126      	str	r6, [r4, #16]
 8008630:	4620      	mov	r0, r4
 8008632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008636:	bf00      	nop
 8008638:	0800a0fc 	.word	0x0800a0fc
 800863c:	0800a18c 	.word	0x0800a18c

08008640 <__s2b>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	460c      	mov	r4, r1
 8008646:	4615      	mov	r5, r2
 8008648:	461f      	mov	r7, r3
 800864a:	2209      	movs	r2, #9
 800864c:	3308      	adds	r3, #8
 800864e:	4606      	mov	r6, r0
 8008650:	fb93 f3f2 	sdiv	r3, r3, r2
 8008654:	2100      	movs	r1, #0
 8008656:	2201      	movs	r2, #1
 8008658:	429a      	cmp	r2, r3
 800865a:	db09      	blt.n	8008670 <__s2b+0x30>
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff ff43 	bl	80084e8 <_Balloc>
 8008662:	b940      	cbnz	r0, 8008676 <__s2b+0x36>
 8008664:	4602      	mov	r2, r0
 8008666:	4b19      	ldr	r3, [pc, #100]	; (80086cc <__s2b+0x8c>)
 8008668:	4819      	ldr	r0, [pc, #100]	; (80086d0 <__s2b+0x90>)
 800866a:	21ce      	movs	r1, #206	; 0xce
 800866c:	f000 fe44 	bl	80092f8 <__assert_func>
 8008670:	0052      	lsls	r2, r2, #1
 8008672:	3101      	adds	r1, #1
 8008674:	e7f0      	b.n	8008658 <__s2b+0x18>
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	6143      	str	r3, [r0, #20]
 800867a:	2d09      	cmp	r5, #9
 800867c:	f04f 0301 	mov.w	r3, #1
 8008680:	6103      	str	r3, [r0, #16]
 8008682:	dd16      	ble.n	80086b2 <__s2b+0x72>
 8008684:	f104 0909 	add.w	r9, r4, #9
 8008688:	46c8      	mov	r8, r9
 800868a:	442c      	add	r4, r5
 800868c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008690:	4601      	mov	r1, r0
 8008692:	3b30      	subs	r3, #48	; 0x30
 8008694:	220a      	movs	r2, #10
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ff88 	bl	80085ac <__multadd>
 800869c:	45a0      	cmp	r8, r4
 800869e:	d1f5      	bne.n	800868c <__s2b+0x4c>
 80086a0:	f1a5 0408 	sub.w	r4, r5, #8
 80086a4:	444c      	add	r4, r9
 80086a6:	1b2d      	subs	r5, r5, r4
 80086a8:	1963      	adds	r3, r4, r5
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	db04      	blt.n	80086b8 <__s2b+0x78>
 80086ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b2:	340a      	adds	r4, #10
 80086b4:	2509      	movs	r5, #9
 80086b6:	e7f6      	b.n	80086a6 <__s2b+0x66>
 80086b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086bc:	4601      	mov	r1, r0
 80086be:	3b30      	subs	r3, #48	; 0x30
 80086c0:	220a      	movs	r2, #10
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ff72 	bl	80085ac <__multadd>
 80086c8:	e7ee      	b.n	80086a8 <__s2b+0x68>
 80086ca:	bf00      	nop
 80086cc:	0800a0fc 	.word	0x0800a0fc
 80086d0:	0800a18c 	.word	0x0800a18c

080086d4 <__hi0bits>:
 80086d4:	0c03      	lsrs	r3, r0, #16
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	b9d3      	cbnz	r3, 8008710 <__hi0bits+0x3c>
 80086da:	0400      	lsls	r0, r0, #16
 80086dc:	2310      	movs	r3, #16
 80086de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086e2:	bf04      	itt	eq
 80086e4:	0200      	lsleq	r0, r0, #8
 80086e6:	3308      	addeq	r3, #8
 80086e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086ec:	bf04      	itt	eq
 80086ee:	0100      	lsleq	r0, r0, #4
 80086f0:	3304      	addeq	r3, #4
 80086f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086f6:	bf04      	itt	eq
 80086f8:	0080      	lsleq	r0, r0, #2
 80086fa:	3302      	addeq	r3, #2
 80086fc:	2800      	cmp	r0, #0
 80086fe:	db05      	blt.n	800870c <__hi0bits+0x38>
 8008700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008704:	f103 0301 	add.w	r3, r3, #1
 8008708:	bf08      	it	eq
 800870a:	2320      	moveq	r3, #32
 800870c:	4618      	mov	r0, r3
 800870e:	4770      	bx	lr
 8008710:	2300      	movs	r3, #0
 8008712:	e7e4      	b.n	80086de <__hi0bits+0xa>

08008714 <__lo0bits>:
 8008714:	6803      	ldr	r3, [r0, #0]
 8008716:	f013 0207 	ands.w	r2, r3, #7
 800871a:	4601      	mov	r1, r0
 800871c:	d00b      	beq.n	8008736 <__lo0bits+0x22>
 800871e:	07da      	lsls	r2, r3, #31
 8008720:	d424      	bmi.n	800876c <__lo0bits+0x58>
 8008722:	0798      	lsls	r0, r3, #30
 8008724:	bf49      	itett	mi
 8008726:	085b      	lsrmi	r3, r3, #1
 8008728:	089b      	lsrpl	r3, r3, #2
 800872a:	2001      	movmi	r0, #1
 800872c:	600b      	strmi	r3, [r1, #0]
 800872e:	bf5c      	itt	pl
 8008730:	600b      	strpl	r3, [r1, #0]
 8008732:	2002      	movpl	r0, #2
 8008734:	4770      	bx	lr
 8008736:	b298      	uxth	r0, r3
 8008738:	b9b0      	cbnz	r0, 8008768 <__lo0bits+0x54>
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	2010      	movs	r0, #16
 800873e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008742:	bf04      	itt	eq
 8008744:	0a1b      	lsreq	r3, r3, #8
 8008746:	3008      	addeq	r0, #8
 8008748:	071a      	lsls	r2, r3, #28
 800874a:	bf04      	itt	eq
 800874c:	091b      	lsreq	r3, r3, #4
 800874e:	3004      	addeq	r0, #4
 8008750:	079a      	lsls	r2, r3, #30
 8008752:	bf04      	itt	eq
 8008754:	089b      	lsreq	r3, r3, #2
 8008756:	3002      	addeq	r0, #2
 8008758:	07da      	lsls	r2, r3, #31
 800875a:	d403      	bmi.n	8008764 <__lo0bits+0x50>
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	f100 0001 	add.w	r0, r0, #1
 8008762:	d005      	beq.n	8008770 <__lo0bits+0x5c>
 8008764:	600b      	str	r3, [r1, #0]
 8008766:	4770      	bx	lr
 8008768:	4610      	mov	r0, r2
 800876a:	e7e8      	b.n	800873e <__lo0bits+0x2a>
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr
 8008770:	2020      	movs	r0, #32
 8008772:	4770      	bx	lr

08008774 <__i2b>:
 8008774:	b510      	push	{r4, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	2101      	movs	r1, #1
 800877a:	f7ff feb5 	bl	80084e8 <_Balloc>
 800877e:	4602      	mov	r2, r0
 8008780:	b928      	cbnz	r0, 800878e <__i2b+0x1a>
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <__i2b+0x24>)
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <__i2b+0x28>)
 8008786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800878a:	f000 fdb5 	bl	80092f8 <__assert_func>
 800878e:	2301      	movs	r3, #1
 8008790:	6144      	str	r4, [r0, #20]
 8008792:	6103      	str	r3, [r0, #16]
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	0800a0fc 	.word	0x0800a0fc
 800879c:	0800a18c 	.word	0x0800a18c

080087a0 <__multiply>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4614      	mov	r4, r2
 80087a6:	690a      	ldr	r2, [r1, #16]
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	bfb8      	it	lt
 80087ae:	460b      	movlt	r3, r1
 80087b0:	460d      	mov	r5, r1
 80087b2:	bfbc      	itt	lt
 80087b4:	4625      	movlt	r5, r4
 80087b6:	461c      	movlt	r4, r3
 80087b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80087bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087c0:	68ab      	ldr	r3, [r5, #8]
 80087c2:	6869      	ldr	r1, [r5, #4]
 80087c4:	eb0a 0709 	add.w	r7, sl, r9
 80087c8:	42bb      	cmp	r3, r7
 80087ca:	b085      	sub	sp, #20
 80087cc:	bfb8      	it	lt
 80087ce:	3101      	addlt	r1, #1
 80087d0:	f7ff fe8a 	bl	80084e8 <_Balloc>
 80087d4:	b930      	cbnz	r0, 80087e4 <__multiply+0x44>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4b42      	ldr	r3, [pc, #264]	; (80088e4 <__multiply+0x144>)
 80087da:	4843      	ldr	r0, [pc, #268]	; (80088e8 <__multiply+0x148>)
 80087dc:	f240 115d 	movw	r1, #349	; 0x15d
 80087e0:	f000 fd8a 	bl	80092f8 <__assert_func>
 80087e4:	f100 0614 	add.w	r6, r0, #20
 80087e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087ec:	4633      	mov	r3, r6
 80087ee:	2200      	movs	r2, #0
 80087f0:	4543      	cmp	r3, r8
 80087f2:	d31e      	bcc.n	8008832 <__multiply+0x92>
 80087f4:	f105 0c14 	add.w	ip, r5, #20
 80087f8:	f104 0314 	add.w	r3, r4, #20
 80087fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008800:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	ebac 0205 	sub.w	r2, ip, r5
 800880a:	3a15      	subs	r2, #21
 800880c:	f022 0203 	bic.w	r2, r2, #3
 8008810:	3204      	adds	r2, #4
 8008812:	f105 0115 	add.w	r1, r5, #21
 8008816:	458c      	cmp	ip, r1
 8008818:	bf38      	it	cc
 800881a:	2204      	movcc	r2, #4
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9a02      	ldr	r2, [sp, #8]
 8008820:	9303      	str	r3, [sp, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d808      	bhi.n	8008838 <__multiply+0x98>
 8008826:	2f00      	cmp	r7, #0
 8008828:	dc55      	bgt.n	80088d6 <__multiply+0x136>
 800882a:	6107      	str	r7, [r0, #16]
 800882c:	b005      	add	sp, #20
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f843 2b04 	str.w	r2, [r3], #4
 8008836:	e7db      	b.n	80087f0 <__multiply+0x50>
 8008838:	f8b3 a000 	ldrh.w	sl, [r3]
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d020      	beq.n	8008884 <__multiply+0xe4>
 8008842:	f105 0e14 	add.w	lr, r5, #20
 8008846:	46b1      	mov	r9, r6
 8008848:	2200      	movs	r2, #0
 800884a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800884e:	f8d9 b000 	ldr.w	fp, [r9]
 8008852:	b2a1      	uxth	r1, r4
 8008854:	fa1f fb8b 	uxth.w	fp, fp
 8008858:	fb0a b101 	mla	r1, sl, r1, fp
 800885c:	4411      	add	r1, r2
 800885e:	f8d9 2000 	ldr.w	r2, [r9]
 8008862:	0c24      	lsrs	r4, r4, #16
 8008864:	0c12      	lsrs	r2, r2, #16
 8008866:	fb0a 2404 	mla	r4, sl, r4, r2
 800886a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800886e:	b289      	uxth	r1, r1
 8008870:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008874:	45f4      	cmp	ip, lr
 8008876:	f849 1b04 	str.w	r1, [r9], #4
 800887a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800887e:	d8e4      	bhi.n	800884a <__multiply+0xaa>
 8008880:	9901      	ldr	r1, [sp, #4]
 8008882:	5072      	str	r2, [r6, r1]
 8008884:	9a03      	ldr	r2, [sp, #12]
 8008886:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800888a:	3304      	adds	r3, #4
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d01f      	beq.n	80088d2 <__multiply+0x132>
 8008892:	6834      	ldr	r4, [r6, #0]
 8008894:	f105 0114 	add.w	r1, r5, #20
 8008898:	46b6      	mov	lr, r6
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	880a      	ldrh	r2, [r1, #0]
 80088a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088a4:	fb09 b202 	mla	r2, r9, r2, fp
 80088a8:	4492      	add	sl, r2
 80088aa:	b2a4      	uxth	r4, r4
 80088ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80088b0:	f84e 4b04 	str.w	r4, [lr], #4
 80088b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80088b8:	f8be 2000 	ldrh.w	r2, [lr]
 80088bc:	0c24      	lsrs	r4, r4, #16
 80088be:	fb09 2404 	mla	r4, r9, r4, r2
 80088c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088c6:	458c      	cmp	ip, r1
 80088c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088cc:	d8e7      	bhi.n	800889e <__multiply+0xfe>
 80088ce:	9a01      	ldr	r2, [sp, #4]
 80088d0:	50b4      	str	r4, [r6, r2]
 80088d2:	3604      	adds	r6, #4
 80088d4:	e7a3      	b.n	800881e <__multiply+0x7e>
 80088d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1a5      	bne.n	800882a <__multiply+0x8a>
 80088de:	3f01      	subs	r7, #1
 80088e0:	e7a1      	b.n	8008826 <__multiply+0x86>
 80088e2:	bf00      	nop
 80088e4:	0800a0fc 	.word	0x0800a0fc
 80088e8:	0800a18c 	.word	0x0800a18c

080088ec <__pow5mult>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	f012 0203 	ands.w	r2, r2, #3
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	d007      	beq.n	800890c <__pow5mult+0x20>
 80088fc:	4c25      	ldr	r4, [pc, #148]	; (8008994 <__pow5mult+0xa8>)
 80088fe:	3a01      	subs	r2, #1
 8008900:	2300      	movs	r3, #0
 8008902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008906:	f7ff fe51 	bl	80085ac <__multadd>
 800890a:	4607      	mov	r7, r0
 800890c:	10ad      	asrs	r5, r5, #2
 800890e:	d03d      	beq.n	800898c <__pow5mult+0xa0>
 8008910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008912:	b97c      	cbnz	r4, 8008934 <__pow5mult+0x48>
 8008914:	2010      	movs	r0, #16
 8008916:	f7ff fdbf 	bl	8008498 <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	6270      	str	r0, [r6, #36]	; 0x24
 800891e:	b928      	cbnz	r0, 800892c <__pow5mult+0x40>
 8008920:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <__pow5mult+0xac>)
 8008922:	481e      	ldr	r0, [pc, #120]	; (800899c <__pow5mult+0xb0>)
 8008924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008928:	f000 fce6 	bl	80092f8 <__assert_func>
 800892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008930:	6004      	str	r4, [r0, #0]
 8008932:	60c4      	str	r4, [r0, #12]
 8008934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800893c:	b94c      	cbnz	r4, 8008952 <__pow5mult+0x66>
 800893e:	f240 2171 	movw	r1, #625	; 0x271
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff16 	bl	8008774 <__i2b>
 8008948:	2300      	movs	r3, #0
 800894a:	f8c8 0008 	str.w	r0, [r8, #8]
 800894e:	4604      	mov	r4, r0
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	07eb      	lsls	r3, r5, #31
 8008958:	d50a      	bpl.n	8008970 <__pow5mult+0x84>
 800895a:	4639      	mov	r1, r7
 800895c:	4622      	mov	r2, r4
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ff1e 	bl	80087a0 <__multiply>
 8008964:	4639      	mov	r1, r7
 8008966:	4680      	mov	r8, r0
 8008968:	4630      	mov	r0, r6
 800896a:	f7ff fdfd 	bl	8008568 <_Bfree>
 800896e:	4647      	mov	r7, r8
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	d00b      	beq.n	800898c <__pow5mult+0xa0>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	b938      	cbnz	r0, 8008988 <__pow5mult+0x9c>
 8008978:	4622      	mov	r2, r4
 800897a:	4621      	mov	r1, r4
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff ff0f 	bl	80087a0 <__multiply>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f8c0 9000 	str.w	r9, [r0]
 8008988:	4604      	mov	r4, r0
 800898a:	e7e4      	b.n	8008956 <__pow5mult+0x6a>
 800898c:	4638      	mov	r0, r7
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	bf00      	nop
 8008994:	0800a2e0 	.word	0x0800a2e0
 8008998:	0800a086 	.word	0x0800a086
 800899c:	0800a18c 	.word	0x0800a18c

080089a0 <__lshift>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	6849      	ldr	r1, [r1, #4]
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	4607      	mov	r7, r0
 80089b2:	4691      	mov	r9, r2
 80089b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089b8:	f108 0601 	add.w	r6, r8, #1
 80089bc:	42b3      	cmp	r3, r6
 80089be:	db0b      	blt.n	80089d8 <__lshift+0x38>
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff fd91 	bl	80084e8 <_Balloc>
 80089c6:	4605      	mov	r5, r0
 80089c8:	b948      	cbnz	r0, 80089de <__lshift+0x3e>
 80089ca:	4602      	mov	r2, r0
 80089cc:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <__lshift+0xd0>)
 80089ce:	4829      	ldr	r0, [pc, #164]	; (8008a74 <__lshift+0xd4>)
 80089d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089d4:	f000 fc90 	bl	80092f8 <__assert_func>
 80089d8:	3101      	adds	r1, #1
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	e7ee      	b.n	80089bc <__lshift+0x1c>
 80089de:	2300      	movs	r3, #0
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f100 0210 	add.w	r2, r0, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	4553      	cmp	r3, sl
 80089ec:	db33      	blt.n	8008a56 <__lshift+0xb6>
 80089ee:	6920      	ldr	r0, [r4, #16]
 80089f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f4:	f104 0314 	add.w	r3, r4, #20
 80089f8:	f019 091f 	ands.w	r9, r9, #31
 80089fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a04:	d02b      	beq.n	8008a5e <__lshift+0xbe>
 8008a06:	f1c9 0e20 	rsb	lr, r9, #32
 8008a0a:	468a      	mov	sl, r1
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	fa00 f009 	lsl.w	r0, r0, r9
 8008a14:	4302      	orrs	r2, r0
 8008a16:	f84a 2b04 	str.w	r2, [sl], #4
 8008a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1e:	459c      	cmp	ip, r3
 8008a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a24:	d8f3      	bhi.n	8008a0e <__lshift+0x6e>
 8008a26:	ebac 0304 	sub.w	r3, ip, r4
 8008a2a:	3b15      	subs	r3, #21
 8008a2c:	f023 0303 	bic.w	r3, r3, #3
 8008a30:	3304      	adds	r3, #4
 8008a32:	f104 0015 	add.w	r0, r4, #21
 8008a36:	4584      	cmp	ip, r0
 8008a38:	bf38      	it	cc
 8008a3a:	2304      	movcc	r3, #4
 8008a3c:	50ca      	str	r2, [r1, r3]
 8008a3e:	b10a      	cbz	r2, 8008a44 <__lshift+0xa4>
 8008a40:	f108 0602 	add.w	r6, r8, #2
 8008a44:	3e01      	subs	r6, #1
 8008a46:	4638      	mov	r0, r7
 8008a48:	612e      	str	r6, [r5, #16]
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f7ff fd8c 	bl	8008568 <_Bfree>
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	e7c5      	b.n	80089ea <__lshift+0x4a>
 8008a5e:	3904      	subs	r1, #4
 8008a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a68:	459c      	cmp	ip, r3
 8008a6a:	d8f9      	bhi.n	8008a60 <__lshift+0xc0>
 8008a6c:	e7ea      	b.n	8008a44 <__lshift+0xa4>
 8008a6e:	bf00      	nop
 8008a70:	0800a0fc 	.word	0x0800a0fc
 8008a74:	0800a18c 	.word	0x0800a18c

08008a78 <__mcmp>:
 8008a78:	b530      	push	{r4, r5, lr}
 8008a7a:	6902      	ldr	r2, [r0, #16]
 8008a7c:	690c      	ldr	r4, [r1, #16]
 8008a7e:	1b12      	subs	r2, r2, r4
 8008a80:	d10e      	bne.n	8008aa0 <__mcmp+0x28>
 8008a82:	f100 0314 	add.w	r3, r0, #20
 8008a86:	3114      	adds	r1, #20
 8008a88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a98:	42a5      	cmp	r5, r4
 8008a9a:	d003      	beq.n	8008aa4 <__mcmp+0x2c>
 8008a9c:	d305      	bcc.n	8008aaa <__mcmp+0x32>
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	bd30      	pop	{r4, r5, pc}
 8008aa4:	4283      	cmp	r3, r0
 8008aa6:	d3f3      	bcc.n	8008a90 <__mcmp+0x18>
 8008aa8:	e7fa      	b.n	8008aa0 <__mcmp+0x28>
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	e7f7      	b.n	8008aa0 <__mcmp+0x28>

08008ab0 <__mdiff>:
 8008ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4620      	mov	r0, r4
 8008abc:	4617      	mov	r7, r2
 8008abe:	f7ff ffdb 	bl	8008a78 <__mcmp>
 8008ac2:	1e05      	subs	r5, r0, #0
 8008ac4:	d110      	bne.n	8008ae8 <__mdiff+0x38>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff fd0d 	bl	80084e8 <_Balloc>
 8008ace:	b930      	cbnz	r0, 8008ade <__mdiff+0x2e>
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <__mdiff+0x108>)
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	f240 2132 	movw	r1, #562	; 0x232
 8008ad8:	4838      	ldr	r0, [pc, #224]	; (8008bbc <__mdiff+0x10c>)
 8008ada:	f000 fc0d 	bl	80092f8 <__assert_func>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	bfa4      	itt	ge
 8008aea:	463b      	movge	r3, r7
 8008aec:	4627      	movge	r7, r4
 8008aee:	4630      	mov	r0, r6
 8008af0:	6879      	ldr	r1, [r7, #4]
 8008af2:	bfa6      	itte	ge
 8008af4:	461c      	movge	r4, r3
 8008af6:	2500      	movge	r5, #0
 8008af8:	2501      	movlt	r5, #1
 8008afa:	f7ff fcf5 	bl	80084e8 <_Balloc>
 8008afe:	b920      	cbnz	r0, 8008b0a <__mdiff+0x5a>
 8008b00:	4b2d      	ldr	r3, [pc, #180]	; (8008bb8 <__mdiff+0x108>)
 8008b02:	4602      	mov	r2, r0
 8008b04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b08:	e7e6      	b.n	8008ad8 <__mdiff+0x28>
 8008b0a:	693e      	ldr	r6, [r7, #16]
 8008b0c:	60c5      	str	r5, [r0, #12]
 8008b0e:	6925      	ldr	r5, [r4, #16]
 8008b10:	f107 0114 	add.w	r1, r7, #20
 8008b14:	f104 0914 	add.w	r9, r4, #20
 8008b18:	f100 0e14 	add.w	lr, r0, #20
 8008b1c:	f107 0210 	add.w	r2, r7, #16
 8008b20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b28:	46f2      	mov	sl, lr
 8008b2a:	2700      	movs	r7, #0
 8008b2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b34:	fa1f f883 	uxth.w	r8, r3
 8008b38:	fa17 f78b 	uxtah	r7, r7, fp
 8008b3c:	0c1b      	lsrs	r3, r3, #16
 8008b3e:	eba7 0808 	sub.w	r8, r7, r8
 8008b42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b4a:	fa1f f888 	uxth.w	r8, r8
 8008b4e:	141f      	asrs	r7, r3, #16
 8008b50:	454d      	cmp	r5, r9
 8008b52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b56:	f84a 3b04 	str.w	r3, [sl], #4
 8008b5a:	d8e7      	bhi.n	8008b2c <__mdiff+0x7c>
 8008b5c:	1b2b      	subs	r3, r5, r4
 8008b5e:	3b15      	subs	r3, #21
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3304      	adds	r3, #4
 8008b66:	3415      	adds	r4, #21
 8008b68:	42a5      	cmp	r5, r4
 8008b6a:	bf38      	it	cc
 8008b6c:	2304      	movcc	r3, #4
 8008b6e:	4419      	add	r1, r3
 8008b70:	4473      	add	r3, lr
 8008b72:	469e      	mov	lr, r3
 8008b74:	460d      	mov	r5, r1
 8008b76:	4565      	cmp	r5, ip
 8008b78:	d30e      	bcc.n	8008b98 <__mdiff+0xe8>
 8008b7a:	f10c 0203 	add.w	r2, ip, #3
 8008b7e:	1a52      	subs	r2, r2, r1
 8008b80:	f022 0203 	bic.w	r2, r2, #3
 8008b84:	3903      	subs	r1, #3
 8008b86:	458c      	cmp	ip, r1
 8008b88:	bf38      	it	cc
 8008b8a:	2200      	movcc	r2, #0
 8008b8c:	441a      	add	r2, r3
 8008b8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b92:	b17b      	cbz	r3, 8008bb4 <__mdiff+0x104>
 8008b94:	6106      	str	r6, [r0, #16]
 8008b96:	e7a5      	b.n	8008ae4 <__mdiff+0x34>
 8008b98:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b9c:	fa17 f488 	uxtah	r4, r7, r8
 8008ba0:	1422      	asrs	r2, r4, #16
 8008ba2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ba6:	b2a4      	uxth	r4, r4
 8008ba8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008bac:	f84e 4b04 	str.w	r4, [lr], #4
 8008bb0:	1417      	asrs	r7, r2, #16
 8008bb2:	e7e0      	b.n	8008b76 <__mdiff+0xc6>
 8008bb4:	3e01      	subs	r6, #1
 8008bb6:	e7ea      	b.n	8008b8e <__mdiff+0xde>
 8008bb8:	0800a0fc 	.word	0x0800a0fc
 8008bbc:	0800a18c 	.word	0x0800a18c

08008bc0 <__ulp>:
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	ed8d 0b00 	vstr	d0, [sp]
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	4912      	ldr	r1, [pc, #72]	; (8008c14 <__ulp+0x54>)
 8008bca:	4019      	ands	r1, r3
 8008bcc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	dd05      	ble.n	8008be0 <__ulp+0x20>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	ec43 2b10 	vmov	d0, r2, r3
 8008bdc:	b002      	add	sp, #8
 8008bde:	4770      	bx	lr
 8008be0:	4249      	negs	r1, r1
 8008be2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008be6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	da04      	bge.n	8008bfe <__ulp+0x3e>
 8008bf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008bf8:	fa41 f300 	asr.w	r3, r1, r0
 8008bfc:	e7ec      	b.n	8008bd8 <__ulp+0x18>
 8008bfe:	f1a0 0114 	sub.w	r1, r0, #20
 8008c02:	291e      	cmp	r1, #30
 8008c04:	bfda      	itte	le
 8008c06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008c0a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008c0e:	2101      	movgt	r1, #1
 8008c10:	460a      	mov	r2, r1
 8008c12:	e7e1      	b.n	8008bd8 <__ulp+0x18>
 8008c14:	7ff00000 	.word	0x7ff00000

08008c18 <__b2d>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	6905      	ldr	r5, [r0, #16]
 8008c1c:	f100 0714 	add.w	r7, r0, #20
 8008c20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c24:	1f2e      	subs	r6, r5, #4
 8008c26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff fd52 	bl	80086d4 <__hi0bits>
 8008c30:	f1c0 0320 	rsb	r3, r0, #32
 8008c34:	280a      	cmp	r0, #10
 8008c36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008cb4 <__b2d+0x9c>
 8008c3a:	600b      	str	r3, [r1, #0]
 8008c3c:	dc14      	bgt.n	8008c68 <__b2d+0x50>
 8008c3e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c42:	fa24 f10e 	lsr.w	r1, r4, lr
 8008c46:	42b7      	cmp	r7, r6
 8008c48:	ea41 030c 	orr.w	r3, r1, ip
 8008c4c:	bf34      	ite	cc
 8008c4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c52:	2100      	movcs	r1, #0
 8008c54:	3015      	adds	r0, #21
 8008c56:	fa04 f000 	lsl.w	r0, r4, r0
 8008c5a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c5e:	ea40 0201 	orr.w	r2, r0, r1
 8008c62:	ec43 2b10 	vmov	d0, r2, r3
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c68:	42b7      	cmp	r7, r6
 8008c6a:	bf3a      	itte	cc
 8008c6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c70:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c74:	2100      	movcs	r1, #0
 8008c76:	380b      	subs	r0, #11
 8008c78:	d017      	beq.n	8008caa <__b2d+0x92>
 8008c7a:	f1c0 0c20 	rsb	ip, r0, #32
 8008c7e:	fa04 f500 	lsl.w	r5, r4, r0
 8008c82:	42be      	cmp	r6, r7
 8008c84:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c88:	ea45 0504 	orr.w	r5, r5, r4
 8008c8c:	bf8c      	ite	hi
 8008c8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c92:	2400      	movls	r4, #0
 8008c94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c98:	fa01 f000 	lsl.w	r0, r1, r0
 8008c9c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008ca0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ca4:	ea40 0204 	orr.w	r2, r0, r4
 8008ca8:	e7db      	b.n	8008c62 <__b2d+0x4a>
 8008caa:	ea44 030c 	orr.w	r3, r4, ip
 8008cae:	460a      	mov	r2, r1
 8008cb0:	e7d7      	b.n	8008c62 <__b2d+0x4a>
 8008cb2:	bf00      	nop
 8008cb4:	3ff00000 	.word	0x3ff00000

08008cb8 <__d2b>:
 8008cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	4689      	mov	r9, r1
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	ec57 6b10 	vmov	r6, r7, d0
 8008cc4:	4690      	mov	r8, r2
 8008cc6:	f7ff fc0f 	bl	80084e8 <_Balloc>
 8008cca:	4604      	mov	r4, r0
 8008ccc:	b930      	cbnz	r0, 8008cdc <__d2b+0x24>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b25      	ldr	r3, [pc, #148]	; (8008d68 <__d2b+0xb0>)
 8008cd2:	4826      	ldr	r0, [pc, #152]	; (8008d6c <__d2b+0xb4>)
 8008cd4:	f240 310a 	movw	r1, #778	; 0x30a
 8008cd8:	f000 fb0e 	bl	80092f8 <__assert_func>
 8008cdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ce4:	bb35      	cbnz	r5, 8008d34 <__d2b+0x7c>
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	d028      	beq.n	8008d3e <__d2b+0x86>
 8008cec:	4668      	mov	r0, sp
 8008cee:	9600      	str	r6, [sp, #0]
 8008cf0:	f7ff fd10 	bl	8008714 <__lo0bits>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	b300      	cbz	r0, 8008d3a <__d2b+0x82>
 8008cf8:	9a01      	ldr	r2, [sp, #4]
 8008cfa:	f1c0 0320 	rsb	r3, r0, #32
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	430b      	orrs	r3, r1
 8008d04:	40c2      	lsrs	r2, r0
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	9201      	str	r2, [sp, #4]
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	61a3      	str	r3, [r4, #24]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bf14      	ite	ne
 8008d12:	2202      	movne	r2, #2
 8008d14:	2201      	moveq	r2, #1
 8008d16:	6122      	str	r2, [r4, #16]
 8008d18:	b1d5      	cbz	r5, 8008d50 <__d2b+0x98>
 8008d1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d1e:	4405      	add	r5, r0
 8008d20:	f8c9 5000 	str.w	r5, [r9]
 8008d24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d28:	f8c8 0000 	str.w	r0, [r8]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	b003      	add	sp, #12
 8008d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d38:	e7d5      	b.n	8008ce6 <__d2b+0x2e>
 8008d3a:	6161      	str	r1, [r4, #20]
 8008d3c:	e7e5      	b.n	8008d0a <__d2b+0x52>
 8008d3e:	a801      	add	r0, sp, #4
 8008d40:	f7ff fce8 	bl	8008714 <__lo0bits>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	6163      	str	r3, [r4, #20]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	6122      	str	r2, [r4, #16]
 8008d4c:	3020      	adds	r0, #32
 8008d4e:	e7e3      	b.n	8008d18 <__d2b+0x60>
 8008d50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d58:	f8c9 0000 	str.w	r0, [r9]
 8008d5c:	6918      	ldr	r0, [r3, #16]
 8008d5e:	f7ff fcb9 	bl	80086d4 <__hi0bits>
 8008d62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d66:	e7df      	b.n	8008d28 <__d2b+0x70>
 8008d68:	0800a0fc 	.word	0x0800a0fc
 8008d6c:	0800a18c 	.word	0x0800a18c

08008d70 <__ratio>:
 8008d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4688      	mov	r8, r1
 8008d76:	4669      	mov	r1, sp
 8008d78:	4681      	mov	r9, r0
 8008d7a:	f7ff ff4d 	bl	8008c18 <__b2d>
 8008d7e:	a901      	add	r1, sp, #4
 8008d80:	4640      	mov	r0, r8
 8008d82:	ec55 4b10 	vmov	r4, r5, d0
 8008d86:	f7ff ff47 	bl	8008c18 <__b2d>
 8008d8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d92:	eba3 0c02 	sub.w	ip, r3, r2
 8008d96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008da0:	ec51 0b10 	vmov	r0, r1, d0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfd6      	itet	le
 8008da8:	460a      	movle	r2, r1
 8008daa:	462a      	movgt	r2, r5
 8008dac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008db0:	468b      	mov	fp, r1
 8008db2:	462f      	mov	r7, r5
 8008db4:	bfd4      	ite	le
 8008db6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008dba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	ee10 2a10 	vmov	r2, s0
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fd40 	bl	800084c <__aeabi_ddiv>
 8008dcc:	ec41 0b10 	vmov	d0, r0, r1
 8008dd0:	b003      	add	sp, #12
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dd6 <__copybits>:
 8008dd6:	3901      	subs	r1, #1
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	1149      	asrs	r1, r1, #5
 8008ddc:	6914      	ldr	r4, [r2, #16]
 8008dde:	3101      	adds	r1, #1
 8008de0:	f102 0314 	add.w	r3, r2, #20
 8008de4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008de8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dec:	1f05      	subs	r5, r0, #4
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	d30c      	bcc.n	8008e0c <__copybits+0x36>
 8008df2:	1aa3      	subs	r3, r4, r2
 8008df4:	3b11      	subs	r3, #17
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	3211      	adds	r2, #17
 8008dfc:	42a2      	cmp	r2, r4
 8008dfe:	bf88      	it	hi
 8008e00:	2300      	movhi	r3, #0
 8008e02:	4418      	add	r0, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	4288      	cmp	r0, r1
 8008e08:	d305      	bcc.n	8008e16 <__copybits+0x40>
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e10:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e14:	e7eb      	b.n	8008dee <__copybits+0x18>
 8008e16:	f840 3b04 	str.w	r3, [r0], #4
 8008e1a:	e7f4      	b.n	8008e06 <__copybits+0x30>

08008e1c <__any_on>:
 8008e1c:	f100 0214 	add.w	r2, r0, #20
 8008e20:	6900      	ldr	r0, [r0, #16]
 8008e22:	114b      	asrs	r3, r1, #5
 8008e24:	4298      	cmp	r0, r3
 8008e26:	b510      	push	{r4, lr}
 8008e28:	db11      	blt.n	8008e4e <__any_on+0x32>
 8008e2a:	dd0a      	ble.n	8008e42 <__any_on+0x26>
 8008e2c:	f011 011f 	ands.w	r1, r1, #31
 8008e30:	d007      	beq.n	8008e42 <__any_on+0x26>
 8008e32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e36:	fa24 f001 	lsr.w	r0, r4, r1
 8008e3a:	fa00 f101 	lsl.w	r1, r0, r1
 8008e3e:	428c      	cmp	r4, r1
 8008e40:	d10b      	bne.n	8008e5a <__any_on+0x3e>
 8008e42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d803      	bhi.n	8008e52 <__any_on+0x36>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e7f7      	b.n	8008e42 <__any_on+0x26>
 8008e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e56:	2900      	cmp	r1, #0
 8008e58:	d0f5      	beq.n	8008e46 <__any_on+0x2a>
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	e7f6      	b.n	8008e4c <__any_on+0x30>

08008e5e <_calloc_r>:
 8008e5e:	b513      	push	{r0, r1, r4, lr}
 8008e60:	434a      	muls	r2, r1
 8008e62:	4611      	mov	r1, r2
 8008e64:	9201      	str	r2, [sp, #4]
 8008e66:	f000 f859 	bl	8008f1c <_malloc_r>
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	b118      	cbz	r0, 8008e76 <_calloc_r+0x18>
 8008e6e:	9a01      	ldr	r2, [sp, #4]
 8008e70:	2100      	movs	r1, #0
 8008e72:	f7fc fbc7 	bl	8005604 <memset>
 8008e76:	4620      	mov	r0, r4
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <_free_r>:
 8008e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d048      	beq.n	8008f14 <_free_r+0x98>
 8008e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e86:	9001      	str	r0, [sp, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e8e:	bfb8      	it	lt
 8008e90:	18e4      	addlt	r4, r4, r3
 8008e92:	f000 fa7b 	bl	800938c <__malloc_lock>
 8008e96:	4a20      	ldr	r2, [pc, #128]	; (8008f18 <_free_r+0x9c>)
 8008e98:	9801      	ldr	r0, [sp, #4]
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	4615      	mov	r5, r2
 8008e9e:	b933      	cbnz	r3, 8008eae <_free_r+0x32>
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	6014      	str	r4, [r2, #0]
 8008ea4:	b003      	add	sp, #12
 8008ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eaa:	f000 ba75 	b.w	8009398 <__malloc_unlock>
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	d90b      	bls.n	8008eca <_free_r+0x4e>
 8008eb2:	6821      	ldr	r1, [r4, #0]
 8008eb4:	1862      	adds	r2, r4, r1
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	bf04      	itt	eq
 8008eba:	681a      	ldreq	r2, [r3, #0]
 8008ebc:	685b      	ldreq	r3, [r3, #4]
 8008ebe:	6063      	str	r3, [r4, #4]
 8008ec0:	bf04      	itt	eq
 8008ec2:	1852      	addeq	r2, r2, r1
 8008ec4:	6022      	streq	r2, [r4, #0]
 8008ec6:	602c      	str	r4, [r5, #0]
 8008ec8:	e7ec      	b.n	8008ea4 <_free_r+0x28>
 8008eca:	461a      	mov	r2, r3
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	b10b      	cbz	r3, 8008ed4 <_free_r+0x58>
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d9fa      	bls.n	8008eca <_free_r+0x4e>
 8008ed4:	6811      	ldr	r1, [r2, #0]
 8008ed6:	1855      	adds	r5, r2, r1
 8008ed8:	42a5      	cmp	r5, r4
 8008eda:	d10b      	bne.n	8008ef4 <_free_r+0x78>
 8008edc:	6824      	ldr	r4, [r4, #0]
 8008ede:	4421      	add	r1, r4
 8008ee0:	1854      	adds	r4, r2, r1
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	d1dd      	bne.n	8008ea4 <_free_r+0x28>
 8008ee8:	681c      	ldr	r4, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	4421      	add	r1, r4
 8008ef0:	6011      	str	r1, [r2, #0]
 8008ef2:	e7d7      	b.n	8008ea4 <_free_r+0x28>
 8008ef4:	d902      	bls.n	8008efc <_free_r+0x80>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	6003      	str	r3, [r0, #0]
 8008efa:	e7d3      	b.n	8008ea4 <_free_r+0x28>
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf04      	itt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	bf04      	itt	eq
 8008f0c:	1949      	addeq	r1, r1, r5
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	6054      	str	r4, [r2, #4]
 8008f12:	e7c7      	b.n	8008ea4 <_free_r+0x28>
 8008f14:	b003      	add	sp, #12
 8008f16:	bd30      	pop	{r4, r5, pc}
 8008f18:	20000210 	.word	0x20000210

08008f1c <_malloc_r>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	1ccd      	adds	r5, r1, #3
 8008f20:	f025 0503 	bic.w	r5, r5, #3
 8008f24:	3508      	adds	r5, #8
 8008f26:	2d0c      	cmp	r5, #12
 8008f28:	bf38      	it	cc
 8008f2a:	250c      	movcc	r5, #12
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	4606      	mov	r6, r0
 8008f30:	db01      	blt.n	8008f36 <_malloc_r+0x1a>
 8008f32:	42a9      	cmp	r1, r5
 8008f34:	d903      	bls.n	8008f3e <_malloc_r+0x22>
 8008f36:	230c      	movs	r3, #12
 8008f38:	6033      	str	r3, [r6, #0]
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3e:	f000 fa25 	bl	800938c <__malloc_lock>
 8008f42:	4921      	ldr	r1, [pc, #132]	; (8008fc8 <_malloc_r+0xac>)
 8008f44:	680a      	ldr	r2, [r1, #0]
 8008f46:	4614      	mov	r4, r2
 8008f48:	b99c      	cbnz	r4, 8008f72 <_malloc_r+0x56>
 8008f4a:	4f20      	ldr	r7, [pc, #128]	; (8008fcc <_malloc_r+0xb0>)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	b923      	cbnz	r3, 8008f5a <_malloc_r+0x3e>
 8008f50:	4621      	mov	r1, r4
 8008f52:	4630      	mov	r0, r6
 8008f54:	f000 f9a0 	bl	8009298 <_sbrk_r>
 8008f58:	6038      	str	r0, [r7, #0]
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f000 f99b 	bl	8009298 <_sbrk_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d123      	bne.n	8008fae <_malloc_r+0x92>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f000 fa14 	bl	8009398 <__malloc_unlock>
 8008f70:	e7e3      	b.n	8008f3a <_malloc_r+0x1e>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	1b5b      	subs	r3, r3, r5
 8008f76:	d417      	bmi.n	8008fa8 <_malloc_r+0x8c>
 8008f78:	2b0b      	cmp	r3, #11
 8008f7a:	d903      	bls.n	8008f84 <_malloc_r+0x68>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	441c      	add	r4, r3
 8008f80:	6025      	str	r5, [r4, #0]
 8008f82:	e004      	b.n	8008f8e <_malloc_r+0x72>
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	42a2      	cmp	r2, r4
 8008f88:	bf0c      	ite	eq
 8008f8a:	600b      	streq	r3, [r1, #0]
 8008f8c:	6053      	strne	r3, [r2, #4]
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 fa02 	bl	8009398 <__malloc_unlock>
 8008f94:	f104 000b 	add.w	r0, r4, #11
 8008f98:	1d23      	adds	r3, r4, #4
 8008f9a:	f020 0007 	bic.w	r0, r0, #7
 8008f9e:	1ac2      	subs	r2, r0, r3
 8008fa0:	d0cc      	beq.n	8008f3c <_malloc_r+0x20>
 8008fa2:	1a1b      	subs	r3, r3, r0
 8008fa4:	50a3      	str	r3, [r4, r2]
 8008fa6:	e7c9      	b.n	8008f3c <_malloc_r+0x20>
 8008fa8:	4622      	mov	r2, r4
 8008faa:	6864      	ldr	r4, [r4, #4]
 8008fac:	e7cc      	b.n	8008f48 <_malloc_r+0x2c>
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d0e3      	beq.n	8008f80 <_malloc_r+0x64>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f000 f96c 	bl	8009298 <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d1dd      	bne.n	8008f80 <_malloc_r+0x64>
 8008fc4:	e7cf      	b.n	8008f66 <_malloc_r+0x4a>
 8008fc6:	bf00      	nop
 8008fc8:	20000210 	.word	0x20000210
 8008fcc:	20000214 	.word	0x20000214

08008fd0 <__ssputs_r>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	688e      	ldr	r6, [r1, #8]
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	4682      	mov	sl, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4690      	mov	r8, r2
 8008fde:	461f      	mov	r7, r3
 8008fe0:	d838      	bhi.n	8009054 <__ssputs_r+0x84>
 8008fe2:	898a      	ldrh	r2, [r1, #12]
 8008fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fe8:	d032      	beq.n	8009050 <__ssputs_r+0x80>
 8008fea:	6825      	ldr	r5, [r4, #0]
 8008fec:	6909      	ldr	r1, [r1, #16]
 8008fee:	eba5 0901 	sub.w	r9, r5, r1
 8008ff2:	6965      	ldr	r5, [r4, #20]
 8008ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	444b      	add	r3, r9
 8009000:	106d      	asrs	r5, r5, #1
 8009002:	429d      	cmp	r5, r3
 8009004:	bf38      	it	cc
 8009006:	461d      	movcc	r5, r3
 8009008:	0553      	lsls	r3, r2, #21
 800900a:	d531      	bpl.n	8009070 <__ssputs_r+0xa0>
 800900c:	4629      	mov	r1, r5
 800900e:	f7ff ff85 	bl	8008f1c <_malloc_r>
 8009012:	4606      	mov	r6, r0
 8009014:	b950      	cbnz	r0, 800902c <__ssputs_r+0x5c>
 8009016:	230c      	movs	r3, #12
 8009018:	f8ca 3000 	str.w	r3, [sl]
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	6921      	ldr	r1, [r4, #16]
 800902e:	464a      	mov	r2, r9
 8009030:	f7ff fa4c 	bl	80084cc <memcpy>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	6126      	str	r6, [r4, #16]
 8009042:	6165      	str	r5, [r4, #20]
 8009044:	444e      	add	r6, r9
 8009046:	eba5 0509 	sub.w	r5, r5, r9
 800904a:	6026      	str	r6, [r4, #0]
 800904c:	60a5      	str	r5, [r4, #8]
 800904e:	463e      	mov	r6, r7
 8009050:	42be      	cmp	r6, r7
 8009052:	d900      	bls.n	8009056 <__ssputs_r+0x86>
 8009054:	463e      	mov	r6, r7
 8009056:	4632      	mov	r2, r6
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	4641      	mov	r1, r8
 800905c:	f000 f97c 	bl	8009358 <memmove>
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	1b9b      	subs	r3, r3, r6
 8009066:	4432      	add	r2, r6
 8009068:	60a3      	str	r3, [r4, #8]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	2000      	movs	r0, #0
 800906e:	e7db      	b.n	8009028 <__ssputs_r+0x58>
 8009070:	462a      	mov	r2, r5
 8009072:	f000 f997 	bl	80093a4 <_realloc_r>
 8009076:	4606      	mov	r6, r0
 8009078:	2800      	cmp	r0, #0
 800907a:	d1e1      	bne.n	8009040 <__ssputs_r+0x70>
 800907c:	6921      	ldr	r1, [r4, #16]
 800907e:	4650      	mov	r0, sl
 8009080:	f7ff fefc 	bl	8008e7c <_free_r>
 8009084:	e7c7      	b.n	8009016 <__ssputs_r+0x46>
	...

08009088 <_svfiprintf_r>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4698      	mov	r8, r3
 800908e:	898b      	ldrh	r3, [r1, #12]
 8009090:	061b      	lsls	r3, r3, #24
 8009092:	b09d      	sub	sp, #116	; 0x74
 8009094:	4607      	mov	r7, r0
 8009096:	460d      	mov	r5, r1
 8009098:	4614      	mov	r4, r2
 800909a:	d50e      	bpl.n	80090ba <_svfiprintf_r+0x32>
 800909c:	690b      	ldr	r3, [r1, #16]
 800909e:	b963      	cbnz	r3, 80090ba <_svfiprintf_r+0x32>
 80090a0:	2140      	movs	r1, #64	; 0x40
 80090a2:	f7ff ff3b 	bl	8008f1c <_malloc_r>
 80090a6:	6028      	str	r0, [r5, #0]
 80090a8:	6128      	str	r0, [r5, #16]
 80090aa:	b920      	cbnz	r0, 80090b6 <_svfiprintf_r+0x2e>
 80090ac:	230c      	movs	r3, #12
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295
 80090b4:	e0d1      	b.n	800925a <_svfiprintf_r+0x1d2>
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	616b      	str	r3, [r5, #20]
 80090ba:	2300      	movs	r3, #0
 80090bc:	9309      	str	r3, [sp, #36]	; 0x24
 80090be:	2320      	movs	r3, #32
 80090c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c8:	2330      	movs	r3, #48	; 0x30
 80090ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009274 <_svfiprintf_r+0x1ec>
 80090ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090d2:	f04f 0901 	mov.w	r9, #1
 80090d6:	4623      	mov	r3, r4
 80090d8:	469a      	mov	sl, r3
 80090da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090de:	b10a      	cbz	r2, 80090e4 <_svfiprintf_r+0x5c>
 80090e0:	2a25      	cmp	r2, #37	; 0x25
 80090e2:	d1f9      	bne.n	80090d8 <_svfiprintf_r+0x50>
 80090e4:	ebba 0b04 	subs.w	fp, sl, r4
 80090e8:	d00b      	beq.n	8009102 <_svfiprintf_r+0x7a>
 80090ea:	465b      	mov	r3, fp
 80090ec:	4622      	mov	r2, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7ff ff6d 	bl	8008fd0 <__ssputs_r>
 80090f6:	3001      	adds	r0, #1
 80090f8:	f000 80aa 	beq.w	8009250 <_svfiprintf_r+0x1c8>
 80090fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090fe:	445a      	add	r2, fp
 8009100:	9209      	str	r2, [sp, #36]	; 0x24
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b00      	cmp	r3, #0
 8009108:	f000 80a2 	beq.w	8009250 <_svfiprintf_r+0x1c8>
 800910c:	2300      	movs	r3, #0
 800910e:	f04f 32ff 	mov.w	r2, #4294967295
 8009112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009116:	f10a 0a01 	add.w	sl, sl, #1
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	9307      	str	r3, [sp, #28]
 800911e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009122:	931a      	str	r3, [sp, #104]	; 0x68
 8009124:	4654      	mov	r4, sl
 8009126:	2205      	movs	r2, #5
 8009128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912c:	4851      	ldr	r0, [pc, #324]	; (8009274 <_svfiprintf_r+0x1ec>)
 800912e:	f7f7 f857 	bl	80001e0 <memchr>
 8009132:	9a04      	ldr	r2, [sp, #16]
 8009134:	b9d8      	cbnz	r0, 800916e <_svfiprintf_r+0xe6>
 8009136:	06d0      	lsls	r0, r2, #27
 8009138:	bf44      	itt	mi
 800913a:	2320      	movmi	r3, #32
 800913c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009140:	0711      	lsls	r1, r2, #28
 8009142:	bf44      	itt	mi
 8009144:	232b      	movmi	r3, #43	; 0x2b
 8009146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914a:	f89a 3000 	ldrb.w	r3, [sl]
 800914e:	2b2a      	cmp	r3, #42	; 0x2a
 8009150:	d015      	beq.n	800917e <_svfiprintf_r+0xf6>
 8009152:	9a07      	ldr	r2, [sp, #28]
 8009154:	4654      	mov	r4, sl
 8009156:	2000      	movs	r0, #0
 8009158:	f04f 0c0a 	mov.w	ip, #10
 800915c:	4621      	mov	r1, r4
 800915e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009162:	3b30      	subs	r3, #48	; 0x30
 8009164:	2b09      	cmp	r3, #9
 8009166:	d94e      	bls.n	8009206 <_svfiprintf_r+0x17e>
 8009168:	b1b0      	cbz	r0, 8009198 <_svfiprintf_r+0x110>
 800916a:	9207      	str	r2, [sp, #28]
 800916c:	e014      	b.n	8009198 <_svfiprintf_r+0x110>
 800916e:	eba0 0308 	sub.w	r3, r0, r8
 8009172:	fa09 f303 	lsl.w	r3, r9, r3
 8009176:	4313      	orrs	r3, r2
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	46a2      	mov	sl, r4
 800917c:	e7d2      	b.n	8009124 <_svfiprintf_r+0x9c>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	1d19      	adds	r1, r3, #4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	9103      	str	r1, [sp, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfbb      	ittet	lt
 800918a:	425b      	neglt	r3, r3
 800918c:	f042 0202 	orrlt.w	r2, r2, #2
 8009190:	9307      	strge	r3, [sp, #28]
 8009192:	9307      	strlt	r3, [sp, #28]
 8009194:	bfb8      	it	lt
 8009196:	9204      	strlt	r2, [sp, #16]
 8009198:	7823      	ldrb	r3, [r4, #0]
 800919a:	2b2e      	cmp	r3, #46	; 0x2e
 800919c:	d10c      	bne.n	80091b8 <_svfiprintf_r+0x130>
 800919e:	7863      	ldrb	r3, [r4, #1]
 80091a0:	2b2a      	cmp	r3, #42	; 0x2a
 80091a2:	d135      	bne.n	8009210 <_svfiprintf_r+0x188>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	1d1a      	adds	r2, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9203      	str	r2, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfb8      	it	lt
 80091b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80091b4:	3402      	adds	r4, #2
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009284 <_svfiprintf_r+0x1fc>
 80091bc:	7821      	ldrb	r1, [r4, #0]
 80091be:	2203      	movs	r2, #3
 80091c0:	4650      	mov	r0, sl
 80091c2:	f7f7 f80d 	bl	80001e0 <memchr>
 80091c6:	b140      	cbz	r0, 80091da <_svfiprintf_r+0x152>
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	eba0 000a 	sub.w	r0, r0, sl
 80091ce:	fa03 f000 	lsl.w	r0, r3, r0
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	4303      	orrs	r3, r0
 80091d6:	3401      	adds	r4, #1
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091de:	4826      	ldr	r0, [pc, #152]	; (8009278 <_svfiprintf_r+0x1f0>)
 80091e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091e4:	2206      	movs	r2, #6
 80091e6:	f7f6 fffb 	bl	80001e0 <memchr>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d038      	beq.n	8009260 <_svfiprintf_r+0x1d8>
 80091ee:	4b23      	ldr	r3, [pc, #140]	; (800927c <_svfiprintf_r+0x1f4>)
 80091f0:	bb1b      	cbnz	r3, 800923a <_svfiprintf_r+0x1b2>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	3307      	adds	r3, #7
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	3308      	adds	r3, #8
 80091fc:	9303      	str	r3, [sp, #12]
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	4433      	add	r3, r6
 8009202:	9309      	str	r3, [sp, #36]	; 0x24
 8009204:	e767      	b.n	80090d6 <_svfiprintf_r+0x4e>
 8009206:	fb0c 3202 	mla	r2, ip, r2, r3
 800920a:	460c      	mov	r4, r1
 800920c:	2001      	movs	r0, #1
 800920e:	e7a5      	b.n	800915c <_svfiprintf_r+0xd4>
 8009210:	2300      	movs	r3, #0
 8009212:	3401      	adds	r4, #1
 8009214:	9305      	str	r3, [sp, #20]
 8009216:	4619      	mov	r1, r3
 8009218:	f04f 0c0a 	mov.w	ip, #10
 800921c:	4620      	mov	r0, r4
 800921e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009222:	3a30      	subs	r2, #48	; 0x30
 8009224:	2a09      	cmp	r2, #9
 8009226:	d903      	bls.n	8009230 <_svfiprintf_r+0x1a8>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0c5      	beq.n	80091b8 <_svfiprintf_r+0x130>
 800922c:	9105      	str	r1, [sp, #20]
 800922e:	e7c3      	b.n	80091b8 <_svfiprintf_r+0x130>
 8009230:	fb0c 2101 	mla	r1, ip, r1, r2
 8009234:	4604      	mov	r4, r0
 8009236:	2301      	movs	r3, #1
 8009238:	e7f0      	b.n	800921c <_svfiprintf_r+0x194>
 800923a:	ab03      	add	r3, sp, #12
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	462a      	mov	r2, r5
 8009240:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <_svfiprintf_r+0x1f8>)
 8009242:	a904      	add	r1, sp, #16
 8009244:	4638      	mov	r0, r7
 8009246:	f7fc fa85 	bl	8005754 <_printf_float>
 800924a:	1c42      	adds	r2, r0, #1
 800924c:	4606      	mov	r6, r0
 800924e:	d1d6      	bne.n	80091fe <_svfiprintf_r+0x176>
 8009250:	89ab      	ldrh	r3, [r5, #12]
 8009252:	065b      	lsls	r3, r3, #25
 8009254:	f53f af2c 	bmi.w	80090b0 <_svfiprintf_r+0x28>
 8009258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800925a:	b01d      	add	sp, #116	; 0x74
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <_svfiprintf_r+0x1f8>)
 8009268:	a904      	add	r1, sp, #16
 800926a:	4638      	mov	r0, r7
 800926c:	f7fc fd16 	bl	8005c9c <_printf_i>
 8009270:	e7eb      	b.n	800924a <_svfiprintf_r+0x1c2>
 8009272:	bf00      	nop
 8009274:	0800a2ec 	.word	0x0800a2ec
 8009278:	0800a2f6 	.word	0x0800a2f6
 800927c:	08005755 	.word	0x08005755
 8009280:	08008fd1 	.word	0x08008fd1
 8009284:	0800a2f2 	.word	0x0800a2f2

08009288 <nan>:
 8009288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009290 <nan+0x8>
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	00000000 	.word	0x00000000
 8009294:	7ff80000 	.word	0x7ff80000

08009298 <_sbrk_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_sbrk_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f8 fc2a 	bl	8001afc <_sbrk>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_sbrk_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_sbrk_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000438 	.word	0x20000438

080092b8 <strncmp>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	b16a      	cbz	r2, 80092d8 <strncmp+0x20>
 80092bc:	3901      	subs	r1, #1
 80092be:	1884      	adds	r4, r0, r2
 80092c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80092c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d103      	bne.n	80092d4 <strncmp+0x1c>
 80092cc:	42a0      	cmp	r0, r4
 80092ce:	d001      	beq.n	80092d4 <strncmp+0x1c>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1f5      	bne.n	80092c0 <strncmp+0x8>
 80092d4:	1a98      	subs	r0, r3, r2
 80092d6:	bd10      	pop	{r4, pc}
 80092d8:	4610      	mov	r0, r2
 80092da:	e7fc      	b.n	80092d6 <strncmp+0x1e>

080092dc <__ascii_wctomb>:
 80092dc:	b149      	cbz	r1, 80092f2 <__ascii_wctomb+0x16>
 80092de:	2aff      	cmp	r2, #255	; 0xff
 80092e0:	bf85      	ittet	hi
 80092e2:	238a      	movhi	r3, #138	; 0x8a
 80092e4:	6003      	strhi	r3, [r0, #0]
 80092e6:	700a      	strbls	r2, [r1, #0]
 80092e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80092ec:	bf98      	it	ls
 80092ee:	2001      	movls	r0, #1
 80092f0:	4770      	bx	lr
 80092f2:	4608      	mov	r0, r1
 80092f4:	4770      	bx	lr
	...

080092f8 <__assert_func>:
 80092f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092fa:	4614      	mov	r4, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <__assert_func+0x2c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4605      	mov	r5, r0
 8009304:	68d8      	ldr	r0, [r3, #12]
 8009306:	b14c      	cbz	r4, 800931c <__assert_func+0x24>
 8009308:	4b07      	ldr	r3, [pc, #28]	; (8009328 <__assert_func+0x30>)
 800930a:	9100      	str	r1, [sp, #0]
 800930c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009310:	4906      	ldr	r1, [pc, #24]	; (800932c <__assert_func+0x34>)
 8009312:	462b      	mov	r3, r5
 8009314:	f000 f80e 	bl	8009334 <fiprintf>
 8009318:	f000 fa84 	bl	8009824 <abort>
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <__assert_func+0x38>)
 800931e:	461c      	mov	r4, r3
 8009320:	e7f3      	b.n	800930a <__assert_func+0x12>
 8009322:	bf00      	nop
 8009324:	2000000c 	.word	0x2000000c
 8009328:	0800a2fd 	.word	0x0800a2fd
 800932c:	0800a30a 	.word	0x0800a30a
 8009330:	0800a338 	.word	0x0800a338

08009334 <fiprintf>:
 8009334:	b40e      	push	{r1, r2, r3}
 8009336:	b503      	push	{r0, r1, lr}
 8009338:	4601      	mov	r1, r0
 800933a:	ab03      	add	r3, sp, #12
 800933c:	4805      	ldr	r0, [pc, #20]	; (8009354 <fiprintf+0x20>)
 800933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009342:	6800      	ldr	r0, [r0, #0]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	f000 f87d 	bl	8009444 <_vfiprintf_r>
 800934a:	b002      	add	sp, #8
 800934c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009350:	b003      	add	sp, #12
 8009352:	4770      	bx	lr
 8009354:	2000000c 	.word	0x2000000c

08009358 <memmove>:
 8009358:	4288      	cmp	r0, r1
 800935a:	b510      	push	{r4, lr}
 800935c:	eb01 0402 	add.w	r4, r1, r2
 8009360:	d902      	bls.n	8009368 <memmove+0x10>
 8009362:	4284      	cmp	r4, r0
 8009364:	4623      	mov	r3, r4
 8009366:	d807      	bhi.n	8009378 <memmove+0x20>
 8009368:	1e43      	subs	r3, r0, #1
 800936a:	42a1      	cmp	r1, r4
 800936c:	d008      	beq.n	8009380 <memmove+0x28>
 800936e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009376:	e7f8      	b.n	800936a <memmove+0x12>
 8009378:	4402      	add	r2, r0
 800937a:	4601      	mov	r1, r0
 800937c:	428a      	cmp	r2, r1
 800937e:	d100      	bne.n	8009382 <memmove+0x2a>
 8009380:	bd10      	pop	{r4, pc}
 8009382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800938a:	e7f7      	b.n	800937c <memmove+0x24>

0800938c <__malloc_lock>:
 800938c:	4801      	ldr	r0, [pc, #4]	; (8009394 <__malloc_lock+0x8>)
 800938e:	f000 bc09 	b.w	8009ba4 <__retarget_lock_acquire_recursive>
 8009392:	bf00      	nop
 8009394:	20000440 	.word	0x20000440

08009398 <__malloc_unlock>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__malloc_unlock+0x8>)
 800939a:	f000 bc04 	b.w	8009ba6 <__retarget_lock_release_recursive>
 800939e:	bf00      	nop
 80093a0:	20000440 	.word	0x20000440

080093a4 <_realloc_r>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	4607      	mov	r7, r0
 80093a8:	4614      	mov	r4, r2
 80093aa:	460e      	mov	r6, r1
 80093ac:	b921      	cbnz	r1, 80093b8 <_realloc_r+0x14>
 80093ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093b2:	4611      	mov	r1, r2
 80093b4:	f7ff bdb2 	b.w	8008f1c <_malloc_r>
 80093b8:	b922      	cbnz	r2, 80093c4 <_realloc_r+0x20>
 80093ba:	f7ff fd5f 	bl	8008e7c <_free_r>
 80093be:	4625      	mov	r5, r4
 80093c0:	4628      	mov	r0, r5
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	f000 fc54 	bl	8009c70 <_malloc_usable_size_r>
 80093c8:	42a0      	cmp	r0, r4
 80093ca:	d20f      	bcs.n	80093ec <_realloc_r+0x48>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4638      	mov	r0, r7
 80093d0:	f7ff fda4 	bl	8008f1c <_malloc_r>
 80093d4:	4605      	mov	r5, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0f2      	beq.n	80093c0 <_realloc_r+0x1c>
 80093da:	4631      	mov	r1, r6
 80093dc:	4622      	mov	r2, r4
 80093de:	f7ff f875 	bl	80084cc <memcpy>
 80093e2:	4631      	mov	r1, r6
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff fd49 	bl	8008e7c <_free_r>
 80093ea:	e7e9      	b.n	80093c0 <_realloc_r+0x1c>
 80093ec:	4635      	mov	r5, r6
 80093ee:	e7e7      	b.n	80093c0 <_realloc_r+0x1c>

080093f0 <__sfputc_r>:
 80093f0:	6893      	ldr	r3, [r2, #8]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	b410      	push	{r4}
 80093f8:	6093      	str	r3, [r2, #8]
 80093fa:	da08      	bge.n	800940e <__sfputc_r+0x1e>
 80093fc:	6994      	ldr	r4, [r2, #24]
 80093fe:	42a3      	cmp	r3, r4
 8009400:	db01      	blt.n	8009406 <__sfputc_r+0x16>
 8009402:	290a      	cmp	r1, #10
 8009404:	d103      	bne.n	800940e <__sfputc_r+0x1e>
 8009406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940a:	f000 b94b 	b.w	80096a4 <__swbuf_r>
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	1c58      	adds	r0, r3, #1
 8009412:	6010      	str	r0, [r2, #0]
 8009414:	7019      	strb	r1, [r3, #0]
 8009416:	4608      	mov	r0, r1
 8009418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800941c:	4770      	bx	lr

0800941e <__sfputs_r>:
 800941e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009420:	4606      	mov	r6, r0
 8009422:	460f      	mov	r7, r1
 8009424:	4614      	mov	r4, r2
 8009426:	18d5      	adds	r5, r2, r3
 8009428:	42ac      	cmp	r4, r5
 800942a:	d101      	bne.n	8009430 <__sfputs_r+0x12>
 800942c:	2000      	movs	r0, #0
 800942e:	e007      	b.n	8009440 <__sfputs_r+0x22>
 8009430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009434:	463a      	mov	r2, r7
 8009436:	4630      	mov	r0, r6
 8009438:	f7ff ffda 	bl	80093f0 <__sfputc_r>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d1f3      	bne.n	8009428 <__sfputs_r+0xa>
 8009440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009444 <_vfiprintf_r>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	460d      	mov	r5, r1
 800944a:	b09d      	sub	sp, #116	; 0x74
 800944c:	4614      	mov	r4, r2
 800944e:	4698      	mov	r8, r3
 8009450:	4606      	mov	r6, r0
 8009452:	b118      	cbz	r0, 800945c <_vfiprintf_r+0x18>
 8009454:	6983      	ldr	r3, [r0, #24]
 8009456:	b90b      	cbnz	r3, 800945c <_vfiprintf_r+0x18>
 8009458:	f000 fb06 	bl	8009a68 <__sinit>
 800945c:	4b89      	ldr	r3, [pc, #548]	; (8009684 <_vfiprintf_r+0x240>)
 800945e:	429d      	cmp	r5, r3
 8009460:	d11b      	bne.n	800949a <_vfiprintf_r+0x56>
 8009462:	6875      	ldr	r5, [r6, #4]
 8009464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009466:	07d9      	lsls	r1, r3, #31
 8009468:	d405      	bmi.n	8009476 <_vfiprintf_r+0x32>
 800946a:	89ab      	ldrh	r3, [r5, #12]
 800946c:	059a      	lsls	r2, r3, #22
 800946e:	d402      	bmi.n	8009476 <_vfiprintf_r+0x32>
 8009470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009472:	f000 fb97 	bl	8009ba4 <__retarget_lock_acquire_recursive>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	071b      	lsls	r3, r3, #28
 800947a:	d501      	bpl.n	8009480 <_vfiprintf_r+0x3c>
 800947c:	692b      	ldr	r3, [r5, #16]
 800947e:	b9eb      	cbnz	r3, 80094bc <_vfiprintf_r+0x78>
 8009480:	4629      	mov	r1, r5
 8009482:	4630      	mov	r0, r6
 8009484:	f000 f960 	bl	8009748 <__swsetup_r>
 8009488:	b1c0      	cbz	r0, 80094bc <_vfiprintf_r+0x78>
 800948a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948c:	07dc      	lsls	r4, r3, #31
 800948e:	d50e      	bpl.n	80094ae <_vfiprintf_r+0x6a>
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	b01d      	add	sp, #116	; 0x74
 8009496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949a:	4b7b      	ldr	r3, [pc, #492]	; (8009688 <_vfiprintf_r+0x244>)
 800949c:	429d      	cmp	r5, r3
 800949e:	d101      	bne.n	80094a4 <_vfiprintf_r+0x60>
 80094a0:	68b5      	ldr	r5, [r6, #8]
 80094a2:	e7df      	b.n	8009464 <_vfiprintf_r+0x20>
 80094a4:	4b79      	ldr	r3, [pc, #484]	; (800968c <_vfiprintf_r+0x248>)
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bf08      	it	eq
 80094aa:	68f5      	ldreq	r5, [r6, #12]
 80094ac:	e7da      	b.n	8009464 <_vfiprintf_r+0x20>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	0598      	lsls	r0, r3, #22
 80094b2:	d4ed      	bmi.n	8009490 <_vfiprintf_r+0x4c>
 80094b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b6:	f000 fb76 	bl	8009ba6 <__retarget_lock_release_recursive>
 80094ba:	e7e9      	b.n	8009490 <_vfiprintf_r+0x4c>
 80094bc:	2300      	movs	r3, #0
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	2320      	movs	r3, #32
 80094c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ca:	2330      	movs	r3, #48	; 0x30
 80094cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009690 <_vfiprintf_r+0x24c>
 80094d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094d4:	f04f 0901 	mov.w	r9, #1
 80094d8:	4623      	mov	r3, r4
 80094da:	469a      	mov	sl, r3
 80094dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094e0:	b10a      	cbz	r2, 80094e6 <_vfiprintf_r+0xa2>
 80094e2:	2a25      	cmp	r2, #37	; 0x25
 80094e4:	d1f9      	bne.n	80094da <_vfiprintf_r+0x96>
 80094e6:	ebba 0b04 	subs.w	fp, sl, r4
 80094ea:	d00b      	beq.n	8009504 <_vfiprintf_r+0xc0>
 80094ec:	465b      	mov	r3, fp
 80094ee:	4622      	mov	r2, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff ff93 	bl	800941e <__sfputs_r>
 80094f8:	3001      	adds	r0, #1
 80094fa:	f000 80aa 	beq.w	8009652 <_vfiprintf_r+0x20e>
 80094fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009500:	445a      	add	r2, fp
 8009502:	9209      	str	r2, [sp, #36]	; 0x24
 8009504:	f89a 3000 	ldrb.w	r3, [sl]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80a2 	beq.w	8009652 <_vfiprintf_r+0x20e>
 800950e:	2300      	movs	r3, #0
 8009510:	f04f 32ff 	mov.w	r2, #4294967295
 8009514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009518:	f10a 0a01 	add.w	sl, sl, #1
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	9307      	str	r3, [sp, #28]
 8009520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009524:	931a      	str	r3, [sp, #104]	; 0x68
 8009526:	4654      	mov	r4, sl
 8009528:	2205      	movs	r2, #5
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	4858      	ldr	r0, [pc, #352]	; (8009690 <_vfiprintf_r+0x24c>)
 8009530:	f7f6 fe56 	bl	80001e0 <memchr>
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	b9d8      	cbnz	r0, 8009570 <_vfiprintf_r+0x12c>
 8009538:	06d1      	lsls	r1, r2, #27
 800953a:	bf44      	itt	mi
 800953c:	2320      	movmi	r3, #32
 800953e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009542:	0713      	lsls	r3, r2, #28
 8009544:	bf44      	itt	mi
 8009546:	232b      	movmi	r3, #43	; 0x2b
 8009548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800954c:	f89a 3000 	ldrb.w	r3, [sl]
 8009550:	2b2a      	cmp	r3, #42	; 0x2a
 8009552:	d015      	beq.n	8009580 <_vfiprintf_r+0x13c>
 8009554:	9a07      	ldr	r2, [sp, #28]
 8009556:	4654      	mov	r4, sl
 8009558:	2000      	movs	r0, #0
 800955a:	f04f 0c0a 	mov.w	ip, #10
 800955e:	4621      	mov	r1, r4
 8009560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009564:	3b30      	subs	r3, #48	; 0x30
 8009566:	2b09      	cmp	r3, #9
 8009568:	d94e      	bls.n	8009608 <_vfiprintf_r+0x1c4>
 800956a:	b1b0      	cbz	r0, 800959a <_vfiprintf_r+0x156>
 800956c:	9207      	str	r2, [sp, #28]
 800956e:	e014      	b.n	800959a <_vfiprintf_r+0x156>
 8009570:	eba0 0308 	sub.w	r3, r0, r8
 8009574:	fa09 f303 	lsl.w	r3, r9, r3
 8009578:	4313      	orrs	r3, r2
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	46a2      	mov	sl, r4
 800957e:	e7d2      	b.n	8009526 <_vfiprintf_r+0xe2>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	1d19      	adds	r1, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	9103      	str	r1, [sp, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	bfbb      	ittet	lt
 800958c:	425b      	neglt	r3, r3
 800958e:	f042 0202 	orrlt.w	r2, r2, #2
 8009592:	9307      	strge	r3, [sp, #28]
 8009594:	9307      	strlt	r3, [sp, #28]
 8009596:	bfb8      	it	lt
 8009598:	9204      	strlt	r2, [sp, #16]
 800959a:	7823      	ldrb	r3, [r4, #0]
 800959c:	2b2e      	cmp	r3, #46	; 0x2e
 800959e:	d10c      	bne.n	80095ba <_vfiprintf_r+0x176>
 80095a0:	7863      	ldrb	r3, [r4, #1]
 80095a2:	2b2a      	cmp	r3, #42	; 0x2a
 80095a4:	d135      	bne.n	8009612 <_vfiprintf_r+0x1ce>
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	1d1a      	adds	r2, r3, #4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	9203      	str	r2, [sp, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfb8      	it	lt
 80095b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80095b6:	3402      	adds	r4, #2
 80095b8:	9305      	str	r3, [sp, #20]
 80095ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096a0 <_vfiprintf_r+0x25c>
 80095be:	7821      	ldrb	r1, [r4, #0]
 80095c0:	2203      	movs	r2, #3
 80095c2:	4650      	mov	r0, sl
 80095c4:	f7f6 fe0c 	bl	80001e0 <memchr>
 80095c8:	b140      	cbz	r0, 80095dc <_vfiprintf_r+0x198>
 80095ca:	2340      	movs	r3, #64	; 0x40
 80095cc:	eba0 000a 	sub.w	r0, r0, sl
 80095d0:	fa03 f000 	lsl.w	r0, r3, r0
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	4303      	orrs	r3, r0
 80095d8:	3401      	adds	r4, #1
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e0:	482c      	ldr	r0, [pc, #176]	; (8009694 <_vfiprintf_r+0x250>)
 80095e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e6:	2206      	movs	r2, #6
 80095e8:	f7f6 fdfa 	bl	80001e0 <memchr>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d03f      	beq.n	8009670 <_vfiprintf_r+0x22c>
 80095f0:	4b29      	ldr	r3, [pc, #164]	; (8009698 <_vfiprintf_r+0x254>)
 80095f2:	bb1b      	cbnz	r3, 800963c <_vfiprintf_r+0x1f8>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	3307      	adds	r3, #7
 80095f8:	f023 0307 	bic.w	r3, r3, #7
 80095fc:	3308      	adds	r3, #8
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	443b      	add	r3, r7
 8009604:	9309      	str	r3, [sp, #36]	; 0x24
 8009606:	e767      	b.n	80094d8 <_vfiprintf_r+0x94>
 8009608:	fb0c 3202 	mla	r2, ip, r2, r3
 800960c:	460c      	mov	r4, r1
 800960e:	2001      	movs	r0, #1
 8009610:	e7a5      	b.n	800955e <_vfiprintf_r+0x11a>
 8009612:	2300      	movs	r3, #0
 8009614:	3401      	adds	r4, #1
 8009616:	9305      	str	r3, [sp, #20]
 8009618:	4619      	mov	r1, r3
 800961a:	f04f 0c0a 	mov.w	ip, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009624:	3a30      	subs	r2, #48	; 0x30
 8009626:	2a09      	cmp	r2, #9
 8009628:	d903      	bls.n	8009632 <_vfiprintf_r+0x1ee>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0c5      	beq.n	80095ba <_vfiprintf_r+0x176>
 800962e:	9105      	str	r1, [sp, #20]
 8009630:	e7c3      	b.n	80095ba <_vfiprintf_r+0x176>
 8009632:	fb0c 2101 	mla	r1, ip, r1, r2
 8009636:	4604      	mov	r4, r0
 8009638:	2301      	movs	r3, #1
 800963a:	e7f0      	b.n	800961e <_vfiprintf_r+0x1da>
 800963c:	ab03      	add	r3, sp, #12
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	462a      	mov	r2, r5
 8009642:	4b16      	ldr	r3, [pc, #88]	; (800969c <_vfiprintf_r+0x258>)
 8009644:	a904      	add	r1, sp, #16
 8009646:	4630      	mov	r0, r6
 8009648:	f7fc f884 	bl	8005754 <_printf_float>
 800964c:	4607      	mov	r7, r0
 800964e:	1c78      	adds	r0, r7, #1
 8009650:	d1d6      	bne.n	8009600 <_vfiprintf_r+0x1bc>
 8009652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009654:	07d9      	lsls	r1, r3, #31
 8009656:	d405      	bmi.n	8009664 <_vfiprintf_r+0x220>
 8009658:	89ab      	ldrh	r3, [r5, #12]
 800965a:	059a      	lsls	r2, r3, #22
 800965c:	d402      	bmi.n	8009664 <_vfiprintf_r+0x220>
 800965e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009660:	f000 faa1 	bl	8009ba6 <__retarget_lock_release_recursive>
 8009664:	89ab      	ldrh	r3, [r5, #12]
 8009666:	065b      	lsls	r3, r3, #25
 8009668:	f53f af12 	bmi.w	8009490 <_vfiprintf_r+0x4c>
 800966c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800966e:	e711      	b.n	8009494 <_vfiprintf_r+0x50>
 8009670:	ab03      	add	r3, sp, #12
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	462a      	mov	r2, r5
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <_vfiprintf_r+0x258>)
 8009678:	a904      	add	r1, sp, #16
 800967a:	4630      	mov	r0, r6
 800967c:	f7fc fb0e 	bl	8005c9c <_printf_i>
 8009680:	e7e4      	b.n	800964c <_vfiprintf_r+0x208>
 8009682:	bf00      	nop
 8009684:	0800a35c 	.word	0x0800a35c
 8009688:	0800a37c 	.word	0x0800a37c
 800968c:	0800a33c 	.word	0x0800a33c
 8009690:	0800a2ec 	.word	0x0800a2ec
 8009694:	0800a2f6 	.word	0x0800a2f6
 8009698:	08005755 	.word	0x08005755
 800969c:	0800941f 	.word	0x0800941f
 80096a0:	0800a2f2 	.word	0x0800a2f2

080096a4 <__swbuf_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	4614      	mov	r4, r2
 80096aa:	4605      	mov	r5, r0
 80096ac:	b118      	cbz	r0, 80096b6 <__swbuf_r+0x12>
 80096ae:	6983      	ldr	r3, [r0, #24]
 80096b0:	b90b      	cbnz	r3, 80096b6 <__swbuf_r+0x12>
 80096b2:	f000 f9d9 	bl	8009a68 <__sinit>
 80096b6:	4b21      	ldr	r3, [pc, #132]	; (800973c <__swbuf_r+0x98>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	d12b      	bne.n	8009714 <__swbuf_r+0x70>
 80096bc:	686c      	ldr	r4, [r5, #4]
 80096be:	69a3      	ldr	r3, [r4, #24]
 80096c0:	60a3      	str	r3, [r4, #8]
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	071a      	lsls	r2, r3, #28
 80096c6:	d52f      	bpl.n	8009728 <__swbuf_r+0x84>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	b36b      	cbz	r3, 8009728 <__swbuf_r+0x84>
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	1ac0      	subs	r0, r0, r3
 80096d2:	6963      	ldr	r3, [r4, #20]
 80096d4:	b2f6      	uxtb	r6, r6
 80096d6:	4283      	cmp	r3, r0
 80096d8:	4637      	mov	r7, r6
 80096da:	dc04      	bgt.n	80096e6 <__swbuf_r+0x42>
 80096dc:	4621      	mov	r1, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f92e 	bl	8009940 <_fflush_r>
 80096e4:	bb30      	cbnz	r0, 8009734 <__swbuf_r+0x90>
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	60a3      	str	r3, [r4, #8]
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	6022      	str	r2, [r4, #0]
 80096f2:	701e      	strb	r6, [r3, #0]
 80096f4:	6963      	ldr	r3, [r4, #20]
 80096f6:	3001      	adds	r0, #1
 80096f8:	4283      	cmp	r3, r0
 80096fa:	d004      	beq.n	8009706 <__swbuf_r+0x62>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	07db      	lsls	r3, r3, #31
 8009700:	d506      	bpl.n	8009710 <__swbuf_r+0x6c>
 8009702:	2e0a      	cmp	r6, #10
 8009704:	d104      	bne.n	8009710 <__swbuf_r+0x6c>
 8009706:	4621      	mov	r1, r4
 8009708:	4628      	mov	r0, r5
 800970a:	f000 f919 	bl	8009940 <_fflush_r>
 800970e:	b988      	cbnz	r0, 8009734 <__swbuf_r+0x90>
 8009710:	4638      	mov	r0, r7
 8009712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <__swbuf_r+0x9c>)
 8009716:	429c      	cmp	r4, r3
 8009718:	d101      	bne.n	800971e <__swbuf_r+0x7a>
 800971a:	68ac      	ldr	r4, [r5, #8]
 800971c:	e7cf      	b.n	80096be <__swbuf_r+0x1a>
 800971e:	4b09      	ldr	r3, [pc, #36]	; (8009744 <__swbuf_r+0xa0>)
 8009720:	429c      	cmp	r4, r3
 8009722:	bf08      	it	eq
 8009724:	68ec      	ldreq	r4, [r5, #12]
 8009726:	e7ca      	b.n	80096be <__swbuf_r+0x1a>
 8009728:	4621      	mov	r1, r4
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f80c 	bl	8009748 <__swsetup_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	d0cb      	beq.n	80096cc <__swbuf_r+0x28>
 8009734:	f04f 37ff 	mov.w	r7, #4294967295
 8009738:	e7ea      	b.n	8009710 <__swbuf_r+0x6c>
 800973a:	bf00      	nop
 800973c:	0800a35c 	.word	0x0800a35c
 8009740:	0800a37c 	.word	0x0800a37c
 8009744:	0800a33c 	.word	0x0800a33c

08009748 <__swsetup_r>:
 8009748:	4b32      	ldr	r3, [pc, #200]	; (8009814 <__swsetup_r+0xcc>)
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	681d      	ldr	r5, [r3, #0]
 800974e:	4606      	mov	r6, r0
 8009750:	460c      	mov	r4, r1
 8009752:	b125      	cbz	r5, 800975e <__swsetup_r+0x16>
 8009754:	69ab      	ldr	r3, [r5, #24]
 8009756:	b913      	cbnz	r3, 800975e <__swsetup_r+0x16>
 8009758:	4628      	mov	r0, r5
 800975a:	f000 f985 	bl	8009a68 <__sinit>
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <__swsetup_r+0xd0>)
 8009760:	429c      	cmp	r4, r3
 8009762:	d10f      	bne.n	8009784 <__swsetup_r+0x3c>
 8009764:	686c      	ldr	r4, [r5, #4]
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800976c:	0719      	lsls	r1, r3, #28
 800976e:	d42c      	bmi.n	80097ca <__swsetup_r+0x82>
 8009770:	06dd      	lsls	r5, r3, #27
 8009772:	d411      	bmi.n	8009798 <__swsetup_r+0x50>
 8009774:	2309      	movs	r3, #9
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	f04f 30ff 	mov.w	r0, #4294967295
 8009782:	e03e      	b.n	8009802 <__swsetup_r+0xba>
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <__swsetup_r+0xd4>)
 8009786:	429c      	cmp	r4, r3
 8009788:	d101      	bne.n	800978e <__swsetup_r+0x46>
 800978a:	68ac      	ldr	r4, [r5, #8]
 800978c:	e7eb      	b.n	8009766 <__swsetup_r+0x1e>
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <__swsetup_r+0xd8>)
 8009790:	429c      	cmp	r4, r3
 8009792:	bf08      	it	eq
 8009794:	68ec      	ldreq	r4, [r5, #12]
 8009796:	e7e6      	b.n	8009766 <__swsetup_r+0x1e>
 8009798:	0758      	lsls	r0, r3, #29
 800979a:	d512      	bpl.n	80097c2 <__swsetup_r+0x7a>
 800979c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979e:	b141      	cbz	r1, 80097b2 <__swsetup_r+0x6a>
 80097a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a4:	4299      	cmp	r1, r3
 80097a6:	d002      	beq.n	80097ae <__swsetup_r+0x66>
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff fb67 	bl	8008e7c <_free_r>
 80097ae:	2300      	movs	r3, #0
 80097b0:	6363      	str	r3, [r4, #52]	; 0x34
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	2300      	movs	r3, #0
 80097bc:	6063      	str	r3, [r4, #4]
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f043 0308 	orr.w	r3, r3, #8
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	b94b      	cbnz	r3, 80097e2 <__swsetup_r+0x9a>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d8:	d003      	beq.n	80097e2 <__swsetup_r+0x9a>
 80097da:	4621      	mov	r1, r4
 80097dc:	4630      	mov	r0, r6
 80097de:	f000 fa07 	bl	8009bf0 <__smakebuf_r>
 80097e2:	89a0      	ldrh	r0, [r4, #12]
 80097e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e8:	f010 0301 	ands.w	r3, r0, #1
 80097ec:	d00a      	beq.n	8009804 <__swsetup_r+0xbc>
 80097ee:	2300      	movs	r3, #0
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	6963      	ldr	r3, [r4, #20]
 80097f4:	425b      	negs	r3, r3
 80097f6:	61a3      	str	r3, [r4, #24]
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	b943      	cbnz	r3, 800980e <__swsetup_r+0xc6>
 80097fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009800:	d1ba      	bne.n	8009778 <__swsetup_r+0x30>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	0781      	lsls	r1, r0, #30
 8009806:	bf58      	it	pl
 8009808:	6963      	ldrpl	r3, [r4, #20]
 800980a:	60a3      	str	r3, [r4, #8]
 800980c:	e7f4      	b.n	80097f8 <__swsetup_r+0xb0>
 800980e:	2000      	movs	r0, #0
 8009810:	e7f7      	b.n	8009802 <__swsetup_r+0xba>
 8009812:	bf00      	nop
 8009814:	2000000c 	.word	0x2000000c
 8009818:	0800a35c 	.word	0x0800a35c
 800981c:	0800a37c 	.word	0x0800a37c
 8009820:	0800a33c 	.word	0x0800a33c

08009824 <abort>:
 8009824:	b508      	push	{r3, lr}
 8009826:	2006      	movs	r0, #6
 8009828:	f000 fa52 	bl	8009cd0 <raise>
 800982c:	2001      	movs	r0, #1
 800982e:	f7f8 f8ed 	bl	8001a0c <_exit>
	...

08009834 <__sflush_r>:
 8009834:	898a      	ldrh	r2, [r1, #12]
 8009836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983a:	4605      	mov	r5, r0
 800983c:	0710      	lsls	r0, r2, #28
 800983e:	460c      	mov	r4, r1
 8009840:	d458      	bmi.n	80098f4 <__sflush_r+0xc0>
 8009842:	684b      	ldr	r3, [r1, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	dc05      	bgt.n	8009854 <__sflush_r+0x20>
 8009848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	dc02      	bgt.n	8009854 <__sflush_r+0x20>
 800984e:	2000      	movs	r0, #0
 8009850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009856:	2e00      	cmp	r6, #0
 8009858:	d0f9      	beq.n	800984e <__sflush_r+0x1a>
 800985a:	2300      	movs	r3, #0
 800985c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009860:	682f      	ldr	r7, [r5, #0]
 8009862:	602b      	str	r3, [r5, #0]
 8009864:	d032      	beq.n	80098cc <__sflush_r+0x98>
 8009866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	075a      	lsls	r2, r3, #29
 800986c:	d505      	bpl.n	800987a <__sflush_r+0x46>
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	1ac0      	subs	r0, r0, r3
 8009872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009874:	b10b      	cbz	r3, 800987a <__sflush_r+0x46>
 8009876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009878:	1ac0      	subs	r0, r0, r3
 800987a:	2300      	movs	r3, #0
 800987c:	4602      	mov	r2, r0
 800987e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009880:	6a21      	ldr	r1, [r4, #32]
 8009882:	4628      	mov	r0, r5
 8009884:	47b0      	blx	r6
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	d106      	bne.n	800989a <__sflush_r+0x66>
 800988c:	6829      	ldr	r1, [r5, #0]
 800988e:	291d      	cmp	r1, #29
 8009890:	d82c      	bhi.n	80098ec <__sflush_r+0xb8>
 8009892:	4a2a      	ldr	r2, [pc, #168]	; (800993c <__sflush_r+0x108>)
 8009894:	40ca      	lsrs	r2, r1
 8009896:	07d6      	lsls	r6, r2, #31
 8009898:	d528      	bpl.n	80098ec <__sflush_r+0xb8>
 800989a:	2200      	movs	r2, #0
 800989c:	6062      	str	r2, [r4, #4]
 800989e:	04d9      	lsls	r1, r3, #19
 80098a0:	6922      	ldr	r2, [r4, #16]
 80098a2:	6022      	str	r2, [r4, #0]
 80098a4:	d504      	bpl.n	80098b0 <__sflush_r+0x7c>
 80098a6:	1c42      	adds	r2, r0, #1
 80098a8:	d101      	bne.n	80098ae <__sflush_r+0x7a>
 80098aa:	682b      	ldr	r3, [r5, #0]
 80098ac:	b903      	cbnz	r3, 80098b0 <__sflush_r+0x7c>
 80098ae:	6560      	str	r0, [r4, #84]	; 0x54
 80098b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098b2:	602f      	str	r7, [r5, #0]
 80098b4:	2900      	cmp	r1, #0
 80098b6:	d0ca      	beq.n	800984e <__sflush_r+0x1a>
 80098b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098bc:	4299      	cmp	r1, r3
 80098be:	d002      	beq.n	80098c6 <__sflush_r+0x92>
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7ff fadb 	bl	8008e7c <_free_r>
 80098c6:	2000      	movs	r0, #0
 80098c8:	6360      	str	r0, [r4, #52]	; 0x34
 80098ca:	e7c1      	b.n	8009850 <__sflush_r+0x1c>
 80098cc:	6a21      	ldr	r1, [r4, #32]
 80098ce:	2301      	movs	r3, #1
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	1c41      	adds	r1, r0, #1
 80098d6:	d1c7      	bne.n	8009868 <__sflush_r+0x34>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0c4      	beq.n	8009868 <__sflush_r+0x34>
 80098de:	2b1d      	cmp	r3, #29
 80098e0:	d001      	beq.n	80098e6 <__sflush_r+0xb2>
 80098e2:	2b16      	cmp	r3, #22
 80098e4:	d101      	bne.n	80098ea <__sflush_r+0xb6>
 80098e6:	602f      	str	r7, [r5, #0]
 80098e8:	e7b1      	b.n	800984e <__sflush_r+0x1a>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	e7ad      	b.n	8009850 <__sflush_r+0x1c>
 80098f4:	690f      	ldr	r7, [r1, #16]
 80098f6:	2f00      	cmp	r7, #0
 80098f8:	d0a9      	beq.n	800984e <__sflush_r+0x1a>
 80098fa:	0793      	lsls	r3, r2, #30
 80098fc:	680e      	ldr	r6, [r1, #0]
 80098fe:	bf08      	it	eq
 8009900:	694b      	ldreq	r3, [r1, #20]
 8009902:	600f      	str	r7, [r1, #0]
 8009904:	bf18      	it	ne
 8009906:	2300      	movne	r3, #0
 8009908:	eba6 0807 	sub.w	r8, r6, r7
 800990c:	608b      	str	r3, [r1, #8]
 800990e:	f1b8 0f00 	cmp.w	r8, #0
 8009912:	dd9c      	ble.n	800984e <__sflush_r+0x1a>
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009918:	4643      	mov	r3, r8
 800991a:	463a      	mov	r2, r7
 800991c:	4628      	mov	r0, r5
 800991e:	47b0      	blx	r6
 8009920:	2800      	cmp	r0, #0
 8009922:	dc06      	bgt.n	8009932 <__sflush_r+0xfe>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	e78e      	b.n	8009850 <__sflush_r+0x1c>
 8009932:	4407      	add	r7, r0
 8009934:	eba8 0800 	sub.w	r8, r8, r0
 8009938:	e7e9      	b.n	800990e <__sflush_r+0xda>
 800993a:	bf00      	nop
 800993c:	20400001 	.word	0x20400001

08009940 <_fflush_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	690b      	ldr	r3, [r1, #16]
 8009944:	4605      	mov	r5, r0
 8009946:	460c      	mov	r4, r1
 8009948:	b913      	cbnz	r3, 8009950 <_fflush_r+0x10>
 800994a:	2500      	movs	r5, #0
 800994c:	4628      	mov	r0, r5
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	b118      	cbz	r0, 800995a <_fflush_r+0x1a>
 8009952:	6983      	ldr	r3, [r0, #24]
 8009954:	b90b      	cbnz	r3, 800995a <_fflush_r+0x1a>
 8009956:	f000 f887 	bl	8009a68 <__sinit>
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <_fflush_r+0x6c>)
 800995c:	429c      	cmp	r4, r3
 800995e:	d11b      	bne.n	8009998 <_fflush_r+0x58>
 8009960:	686c      	ldr	r4, [r5, #4]
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0ef      	beq.n	800994a <_fflush_r+0xa>
 800996a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800996c:	07d0      	lsls	r0, r2, #31
 800996e:	d404      	bmi.n	800997a <_fflush_r+0x3a>
 8009970:	0599      	lsls	r1, r3, #22
 8009972:	d402      	bmi.n	800997a <_fflush_r+0x3a>
 8009974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009976:	f000 f915 	bl	8009ba4 <__retarget_lock_acquire_recursive>
 800997a:	4628      	mov	r0, r5
 800997c:	4621      	mov	r1, r4
 800997e:	f7ff ff59 	bl	8009834 <__sflush_r>
 8009982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009984:	07da      	lsls	r2, r3, #31
 8009986:	4605      	mov	r5, r0
 8009988:	d4e0      	bmi.n	800994c <_fflush_r+0xc>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	059b      	lsls	r3, r3, #22
 800998e:	d4dd      	bmi.n	800994c <_fflush_r+0xc>
 8009990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009992:	f000 f908 	bl	8009ba6 <__retarget_lock_release_recursive>
 8009996:	e7d9      	b.n	800994c <_fflush_r+0xc>
 8009998:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <_fflush_r+0x70>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d101      	bne.n	80099a2 <_fflush_r+0x62>
 800999e:	68ac      	ldr	r4, [r5, #8]
 80099a0:	e7df      	b.n	8009962 <_fflush_r+0x22>
 80099a2:	4b04      	ldr	r3, [pc, #16]	; (80099b4 <_fflush_r+0x74>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	bf08      	it	eq
 80099a8:	68ec      	ldreq	r4, [r5, #12]
 80099aa:	e7da      	b.n	8009962 <_fflush_r+0x22>
 80099ac:	0800a35c 	.word	0x0800a35c
 80099b0:	0800a37c 	.word	0x0800a37c
 80099b4:	0800a33c 	.word	0x0800a33c

080099b8 <std>:
 80099b8:	2300      	movs	r3, #0
 80099ba:	b510      	push	{r4, lr}
 80099bc:	4604      	mov	r4, r0
 80099be:	e9c0 3300 	strd	r3, r3, [r0]
 80099c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c6:	6083      	str	r3, [r0, #8]
 80099c8:	8181      	strh	r1, [r0, #12]
 80099ca:	6643      	str	r3, [r0, #100]	; 0x64
 80099cc:	81c2      	strh	r2, [r0, #14]
 80099ce:	6183      	str	r3, [r0, #24]
 80099d0:	4619      	mov	r1, r3
 80099d2:	2208      	movs	r2, #8
 80099d4:	305c      	adds	r0, #92	; 0x5c
 80099d6:	f7fb fe15 	bl	8005604 <memset>
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <std+0x38>)
 80099dc:	6263      	str	r3, [r4, #36]	; 0x24
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <std+0x3c>)
 80099e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <std+0x40>)
 80099e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <std+0x44>)
 80099e8:	6224      	str	r4, [r4, #32]
 80099ea:	6323      	str	r3, [r4, #48]	; 0x30
 80099ec:	bd10      	pop	{r4, pc}
 80099ee:	bf00      	nop
 80099f0:	08009d09 	.word	0x08009d09
 80099f4:	08009d2b 	.word	0x08009d2b
 80099f8:	08009d63 	.word	0x08009d63
 80099fc:	08009d87 	.word	0x08009d87

08009a00 <_cleanup_r>:
 8009a00:	4901      	ldr	r1, [pc, #4]	; (8009a08 <_cleanup_r+0x8>)
 8009a02:	f000 b8af 	b.w	8009b64 <_fwalk_reent>
 8009a06:	bf00      	nop
 8009a08:	08009941 	.word	0x08009941

08009a0c <__sfmoreglue>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	1e4a      	subs	r2, r1, #1
 8009a10:	2568      	movs	r5, #104	; 0x68
 8009a12:	4355      	muls	r5, r2
 8009a14:	460e      	mov	r6, r1
 8009a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a1a:	f7ff fa7f 	bl	8008f1c <_malloc_r>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	b140      	cbz	r0, 8009a34 <__sfmoreglue+0x28>
 8009a22:	2100      	movs	r1, #0
 8009a24:	e9c0 1600 	strd	r1, r6, [r0]
 8009a28:	300c      	adds	r0, #12
 8009a2a:	60a0      	str	r0, [r4, #8]
 8009a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a30:	f7fb fde8 	bl	8005604 <memset>
 8009a34:	4620      	mov	r0, r4
 8009a36:	bd70      	pop	{r4, r5, r6, pc}

08009a38 <__sfp_lock_acquire>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__sfp_lock_acquire+0x8>)
 8009a3a:	f000 b8b3 	b.w	8009ba4 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	20000444 	.word	0x20000444

08009a44 <__sfp_lock_release>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__sfp_lock_release+0x8>)
 8009a46:	f000 b8ae 	b.w	8009ba6 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20000444 	.word	0x20000444

08009a50 <__sinit_lock_acquire>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__sinit_lock_acquire+0x8>)
 8009a52:	f000 b8a7 	b.w	8009ba4 <__retarget_lock_acquire_recursive>
 8009a56:	bf00      	nop
 8009a58:	2000043f 	.word	0x2000043f

08009a5c <__sinit_lock_release>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__sinit_lock_release+0x8>)
 8009a5e:	f000 b8a2 	b.w	8009ba6 <__retarget_lock_release_recursive>
 8009a62:	bf00      	nop
 8009a64:	2000043f 	.word	0x2000043f

08009a68 <__sinit>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	f7ff fff0 	bl	8009a50 <__sinit_lock_acquire>
 8009a70:	69a3      	ldr	r3, [r4, #24]
 8009a72:	b11b      	cbz	r3, 8009a7c <__sinit+0x14>
 8009a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a78:	f7ff bff0 	b.w	8009a5c <__sinit_lock_release>
 8009a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a80:	6523      	str	r3, [r4, #80]	; 0x50
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <__sinit+0x68>)
 8009a84:	4a13      	ldr	r2, [pc, #76]	; (8009ad4 <__sinit+0x6c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	bf04      	itt	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	61a3      	streq	r3, [r4, #24]
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 f820 	bl	8009ad8 <__sfp>
 8009a98:	6060      	str	r0, [r4, #4]
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 f81c 	bl	8009ad8 <__sfp>
 8009aa0:	60a0      	str	r0, [r4, #8]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f818 	bl	8009ad8 <__sfp>
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	60e0      	str	r0, [r4, #12]
 8009aac:	2104      	movs	r1, #4
 8009aae:	6860      	ldr	r0, [r4, #4]
 8009ab0:	f7ff ff82 	bl	80099b8 <std>
 8009ab4:	68a0      	ldr	r0, [r4, #8]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	2109      	movs	r1, #9
 8009aba:	f7ff ff7d 	bl	80099b8 <std>
 8009abe:	68e0      	ldr	r0, [r4, #12]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	2112      	movs	r1, #18
 8009ac4:	f7ff ff78 	bl	80099b8 <std>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61a3      	str	r3, [r4, #24]
 8009acc:	e7d2      	b.n	8009a74 <__sinit+0xc>
 8009ace:	bf00      	nop
 8009ad0:	08009ee8 	.word	0x08009ee8
 8009ad4:	08009a01 	.word	0x08009a01

08009ad8 <__sfp>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	4607      	mov	r7, r0
 8009adc:	f7ff ffac 	bl	8009a38 <__sfp_lock_acquire>
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <__sfp+0x84>)
 8009ae2:	681e      	ldr	r6, [r3, #0]
 8009ae4:	69b3      	ldr	r3, [r6, #24]
 8009ae6:	b913      	cbnz	r3, 8009aee <__sfp+0x16>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff ffbd 	bl	8009a68 <__sinit>
 8009aee:	3648      	adds	r6, #72	; 0x48
 8009af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	d503      	bpl.n	8009b00 <__sfp+0x28>
 8009af8:	6833      	ldr	r3, [r6, #0]
 8009afa:	b30b      	cbz	r3, 8009b40 <__sfp+0x68>
 8009afc:	6836      	ldr	r6, [r6, #0]
 8009afe:	e7f7      	b.n	8009af0 <__sfp+0x18>
 8009b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b04:	b9d5      	cbnz	r5, 8009b3c <__sfp+0x64>
 8009b06:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <__sfp+0x88>)
 8009b08:	60e3      	str	r3, [r4, #12]
 8009b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8009b10:	f000 f847 	bl	8009ba2 <__retarget_lock_init_recursive>
 8009b14:	f7ff ff96 	bl	8009a44 <__sfp_lock_release>
 8009b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b20:	6025      	str	r5, [r4, #0]
 8009b22:	61a5      	str	r5, [r4, #24]
 8009b24:	2208      	movs	r2, #8
 8009b26:	4629      	mov	r1, r5
 8009b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b2c:	f7fb fd6a 	bl	8005604 <memset>
 8009b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b38:	4620      	mov	r0, r4
 8009b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3c:	3468      	adds	r4, #104	; 0x68
 8009b3e:	e7d9      	b.n	8009af4 <__sfp+0x1c>
 8009b40:	2104      	movs	r1, #4
 8009b42:	4638      	mov	r0, r7
 8009b44:	f7ff ff62 	bl	8009a0c <__sfmoreglue>
 8009b48:	4604      	mov	r4, r0
 8009b4a:	6030      	str	r0, [r6, #0]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1d5      	bne.n	8009afc <__sfp+0x24>
 8009b50:	f7ff ff78 	bl	8009a44 <__sfp_lock_release>
 8009b54:	230c      	movs	r3, #12
 8009b56:	603b      	str	r3, [r7, #0]
 8009b58:	e7ee      	b.n	8009b38 <__sfp+0x60>
 8009b5a:	bf00      	nop
 8009b5c:	08009ee8 	.word	0x08009ee8
 8009b60:	ffff0001 	.word	0xffff0001

08009b64 <_fwalk_reent>:
 8009b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b68:	4606      	mov	r6, r0
 8009b6a:	4688      	mov	r8, r1
 8009b6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b70:	2700      	movs	r7, #0
 8009b72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b76:	f1b9 0901 	subs.w	r9, r9, #1
 8009b7a:	d505      	bpl.n	8009b88 <_fwalk_reent+0x24>
 8009b7c:	6824      	ldr	r4, [r4, #0]
 8009b7e:	2c00      	cmp	r4, #0
 8009b80:	d1f7      	bne.n	8009b72 <_fwalk_reent+0xe>
 8009b82:	4638      	mov	r0, r7
 8009b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b88:	89ab      	ldrh	r3, [r5, #12]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d907      	bls.n	8009b9e <_fwalk_reent+0x3a>
 8009b8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b92:	3301      	adds	r3, #1
 8009b94:	d003      	beq.n	8009b9e <_fwalk_reent+0x3a>
 8009b96:	4629      	mov	r1, r5
 8009b98:	4630      	mov	r0, r6
 8009b9a:	47c0      	blx	r8
 8009b9c:	4307      	orrs	r7, r0
 8009b9e:	3568      	adds	r5, #104	; 0x68
 8009ba0:	e7e9      	b.n	8009b76 <_fwalk_reent+0x12>

08009ba2 <__retarget_lock_init_recursive>:
 8009ba2:	4770      	bx	lr

08009ba4 <__retarget_lock_acquire_recursive>:
 8009ba4:	4770      	bx	lr

08009ba6 <__retarget_lock_release_recursive>:
 8009ba6:	4770      	bx	lr

08009ba8 <__swhatbuf_r>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	460e      	mov	r6, r1
 8009bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb0:	2900      	cmp	r1, #0
 8009bb2:	b096      	sub	sp, #88	; 0x58
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	461d      	mov	r5, r3
 8009bb8:	da07      	bge.n	8009bca <__swhatbuf_r+0x22>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	89b3      	ldrh	r3, [r6, #12]
 8009bc0:	061a      	lsls	r2, r3, #24
 8009bc2:	d410      	bmi.n	8009be6 <__swhatbuf_r+0x3e>
 8009bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bc8:	e00e      	b.n	8009be8 <__swhatbuf_r+0x40>
 8009bca:	466a      	mov	r2, sp
 8009bcc:	f000 f902 	bl	8009dd4 <_fstat_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	dbf2      	blt.n	8009bba <__swhatbuf_r+0x12>
 8009bd4:	9a01      	ldr	r2, [sp, #4]
 8009bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bde:	425a      	negs	r2, r3
 8009be0:	415a      	adcs	r2, r3
 8009be2:	602a      	str	r2, [r5, #0]
 8009be4:	e7ee      	b.n	8009bc4 <__swhatbuf_r+0x1c>
 8009be6:	2340      	movs	r3, #64	; 0x40
 8009be8:	2000      	movs	r0, #0
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	b016      	add	sp, #88	; 0x58
 8009bee:	bd70      	pop	{r4, r5, r6, pc}

08009bf0 <__smakebuf_r>:
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bf4:	079d      	lsls	r5, r3, #30
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	d507      	bpl.n	8009c0c <__smakebuf_r+0x1c>
 8009bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	466a      	mov	r2, sp
 8009c10:	f7ff ffca 	bl	8009ba8 <__swhatbuf_r>
 8009c14:	9900      	ldr	r1, [sp, #0]
 8009c16:	4605      	mov	r5, r0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff f97f 	bl	8008f1c <_malloc_r>
 8009c1e:	b948      	cbnz	r0, 8009c34 <__smakebuf_r+0x44>
 8009c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c24:	059a      	lsls	r2, r3, #22
 8009c26:	d4ef      	bmi.n	8009c08 <__smakebuf_r+0x18>
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	f043 0302 	orr.w	r3, r3, #2
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	e7e3      	b.n	8009bfc <__smakebuf_r+0xc>
 8009c34:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <__smakebuf_r+0x7c>)
 8009c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	6020      	str	r0, [r4, #0]
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	6163      	str	r3, [r4, #20]
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	6120      	str	r0, [r4, #16]
 8009c4a:	b15b      	cbz	r3, 8009c64 <__smakebuf_r+0x74>
 8009c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c50:	4630      	mov	r0, r6
 8009c52:	f000 f8d1 	bl	8009df8 <_isatty_r>
 8009c56:	b128      	cbz	r0, 8009c64 <__smakebuf_r+0x74>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
 8009c5e:	f043 0301 	orr.w	r3, r3, #1
 8009c62:	81a3      	strh	r3, [r4, #12]
 8009c64:	89a0      	ldrh	r0, [r4, #12]
 8009c66:	4305      	orrs	r5, r0
 8009c68:	81a5      	strh	r5, [r4, #12]
 8009c6a:	e7cd      	b.n	8009c08 <__smakebuf_r+0x18>
 8009c6c:	08009a01 	.word	0x08009a01

08009c70 <_malloc_usable_size_r>:
 8009c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c74:	1f18      	subs	r0, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	bfbc      	itt	lt
 8009c7a:	580b      	ldrlt	r3, [r1, r0]
 8009c7c:	18c0      	addlt	r0, r0, r3
 8009c7e:	4770      	bx	lr

08009c80 <_raise_r>:
 8009c80:	291f      	cmp	r1, #31
 8009c82:	b538      	push	{r3, r4, r5, lr}
 8009c84:	4604      	mov	r4, r0
 8009c86:	460d      	mov	r5, r1
 8009c88:	d904      	bls.n	8009c94 <_raise_r+0x14>
 8009c8a:	2316      	movs	r3, #22
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c96:	b112      	cbz	r2, 8009c9e <_raise_r+0x1e>
 8009c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c9c:	b94b      	cbnz	r3, 8009cb2 <_raise_r+0x32>
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 f830 	bl	8009d04 <_getpid_r>
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	4620      	mov	r0, r4
 8009caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cae:	f000 b817 	b.w	8009ce0 <_kill_r>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d00a      	beq.n	8009ccc <_raise_r+0x4c>
 8009cb6:	1c59      	adds	r1, r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <_raise_r+0x42>
 8009cba:	2316      	movs	r3, #22
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	e7e7      	b.n	8009c92 <_raise_r+0x12>
 8009cc2:	2400      	movs	r4, #0
 8009cc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cc8:	4628      	mov	r0, r5
 8009cca:	4798      	blx	r3
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e7e0      	b.n	8009c92 <_raise_r+0x12>

08009cd0 <raise>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <raise+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f7ff bfd3 	b.w	8009c80 <_raise_r>
 8009cda:	bf00      	nop
 8009cdc:	2000000c 	.word	0x2000000c

08009ce0 <_kill_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	; (8009d00 <_kill_r+0x20>)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	f7f7 fe7d 	bl	80019ec <_kill>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	d102      	bne.n	8009cfc <_kill_r+0x1c>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b103      	cbz	r3, 8009cfc <_kill_r+0x1c>
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000438 	.word	0x20000438

08009d04 <_getpid_r>:
 8009d04:	f7f7 be6a 	b.w	80019dc <_getpid>

08009d08 <__sread>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	f000 f894 	bl	8009e3c <_read_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	bfab      	itete	ge
 8009d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d1c:	181b      	addge	r3, r3, r0
 8009d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d22:	bfac      	ite	ge
 8009d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d26:	81a3      	strhlt	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__swrite>:
 8009d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	461f      	mov	r7, r3
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	05db      	lsls	r3, r3, #23
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	4616      	mov	r6, r2
 8009d3a:	d505      	bpl.n	8009d48 <__swrite+0x1e>
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2302      	movs	r3, #2
 8009d42:	2200      	movs	r2, #0
 8009d44:	f000 f868 	bl	8009e18 <_lseek_r>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	f000 b817 	b.w	8009d90 <_write_r>

08009d62 <__sseek>:
 8009d62:	b510      	push	{r4, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f000 f855 	bl	8009e18 <_lseek_r>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	bf15      	itete	ne
 8009d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d7e:	81a3      	strheq	r3, [r4, #12]
 8009d80:	bf18      	it	ne
 8009d82:	81a3      	strhne	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__sclose>:
 8009d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8a:	f000 b813 	b.w	8009db4 <_close_r>
	...

08009d90 <_write_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	; (8009db0 <_write_r+0x20>)
 8009d94:	4604      	mov	r4, r0
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	602a      	str	r2, [r5, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f7f7 fe5b 	bl	8001a5a <_write>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_write_r+0x1e>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_write_r+0x1e>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20000438 	.word	0x20000438

08009db4 <_close_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d06      	ldr	r5, [pc, #24]	; (8009dd0 <_close_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f7 fe67 	bl	8001a92 <_close>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_close_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_close_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20000438 	.word	0x20000438

08009dd4 <_fstat_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	; (8009df4 <_fstat_r+0x20>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	f7f7 fe62 	bl	8001aaa <_fstat>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d102      	bne.n	8009df0 <_fstat_r+0x1c>
 8009dea:	682b      	ldr	r3, [r5, #0]
 8009dec:	b103      	cbz	r3, 8009df0 <_fstat_r+0x1c>
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	bd38      	pop	{r3, r4, r5, pc}
 8009df2:	bf00      	nop
 8009df4:	20000438 	.word	0x20000438

08009df8 <_isatty_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d06      	ldr	r5, [pc, #24]	; (8009e14 <_isatty_r+0x1c>)
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	f7f7 fe61 	bl	8001aca <_isatty>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_isatty_r+0x1a>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_isatty_r+0x1a>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20000438 	.word	0x20000438

08009e18 <_lseek_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_lseek_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f7 fe5a 	bl	8001ae0 <_lseek>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_lseek_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_lseek_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20000438 	.word	0x20000438

08009e3c <_read_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	; (8009e5c <_read_r+0x20>)
 8009e40:	4604      	mov	r4, r0
 8009e42:	4608      	mov	r0, r1
 8009e44:	4611      	mov	r1, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	602a      	str	r2, [r5, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f7f7 fde8 	bl	8001a20 <_read>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_read_r+0x1e>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_read_r+0x1e>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20000438 	.word	0x20000438

08009e60 <_init>:
 8009e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e62:	bf00      	nop
 8009e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e66:	bc08      	pop	{r3}
 8009e68:	469e      	mov	lr, r3
 8009e6a:	4770      	bx	lr

08009e6c <_fini>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

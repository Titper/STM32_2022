
tp_base_TempHum_I2C_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006470  08006470  00016470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006530  08006530  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006538  08006538  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000074  080065b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080065b4  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001986c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbc  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028655  00000000  00000000  0003e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e8  00000000  00000000  00066ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f547b  00000000  00000000  0007e9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005110  00000000  00000000  00173eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006454 	.word	0x08006454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08006454 	.word	0x08006454

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <Reverse>:
#include "caracter.h"

void Reverse(char *str, int Length)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    int i = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
    int j = Length-1;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
    int Temp;

    while (i<j)
 8000e4c:	e018      	b.n	8000e80 <Reverse+0x48>
    {
        Temp = str[i];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	440b      	add	r3, r1
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	701a      	strb	r2, [r3, #0]
        str[j] = Temp;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbe2      	blt.n	8000e4e <Reverse+0x16>
    }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <IntToStr>:

int IntToStr(int x, char str[], int d)//Conversion entier vers string
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    while (x)
 8000ea8:	e01d      	b.n	8000ee6 <IntToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <IntToStr+0x8c>)
 8000eae:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb2:	1099      	asrs	r1, r3, #2
 8000eb4:	17d3      	asrs	r3, r2, #31
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	1ad1      	subs	r1, r2, r3
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	6179      	str	r1, [r7, #20]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	440b      	add	r3, r1
 8000ed0:	3230      	adds	r2, #48	; 0x30
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <IntToStr+0x8c>)
 8000eda:	fb82 1203 	smull	r1, r2, r2, r3
 8000ede:	1092      	asrs	r2, r2, #2
 8000ee0:	17db      	asrs	r3, r3, #31
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	60fb      	str	r3, [r7, #12]
    while (x)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1de      	bne.n	8000eaa <IntToStr+0x12>
    }

    while (i < d)
 8000eec:	e007      	b.n	8000efe <IntToStr+0x66>
        str[i++] = '0';
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	617a      	str	r2, [r7, #20]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf3      	blt.n	8000eee <IntToStr+0x56>

    Reverse(str, i);
 8000f06:	6979      	ldr	r1, [r7, #20]
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f7ff ff95 	bl	8000e38 <Reverse>
    str[i] = '\0';
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	4413      	add	r3, r2
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    return i;
 8000f18:	697b      	ldr	r3, [r7, #20]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	66666667 	.word	0x66666667

08000f28 <FloatToStr>:

void FloatToStr(float n, char *res, int Decimal)//Conversion réel vers string
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f32:	60b8      	str	r0, [r7, #8]
 8000f34:	6079      	str	r1, [r7, #4]
    int ipart = (int)n;
 8000f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	ee17 3a90 	vmov	r3, s15
 8000f42:	61fb      	str	r3, [r7, #28]
    float fpart = n - (float)ipart;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f56:	edc7 7a06 	vstr	s15, [r7, #24]
    int i = IntToStr(ipart, res, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	69f8      	ldr	r0, [r7, #28]
 8000f60:	f7ff ff9a 	bl	8000e98 <IntToStr>
 8000f64:	6178      	str	r0, [r7, #20]

    if (Decimal != 0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d030      	beq.n	8000fce <FloatToStr+0xa6>
    {
        res[i] = '.';
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	222e      	movs	r2, #46	; 0x2e
 8000f74:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, Decimal);
 8000f76:	69b8      	ldr	r0, [r7, #24]
 8000f78:	f7ff fa8a 	bl	8000490 <__aeabi_f2d>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	ec43 2b11 	vmov	d1, r2, r3
 8000f8e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000fd8 <FloatToStr+0xb0>
 8000f92:	f004 faa9 	bl	80054e8 <pow>
 8000f96:	ec53 2b10 	vmov	r2, r3, d0
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff facf 	bl	8000540 <__aeabi_dmul>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd79 	bl	8000aa0 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
        IntToStr((int)fpart, res + i + 1, Decimal);
 8000fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	ee17 0a90 	vmov	r0, s15
 8000fca:	f7ff ff65 	bl	8000e98 <IntToStr>
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40240000 	.word	0x40240000

08000fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_GPIO_Init+0x74>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <MX_GPIO_Init+0x74>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_GPIO_Init+0x74>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_GPIO_Init+0x74>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <MX_GPIO_Init+0x74>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_GPIO_Init+0x74>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_GPIO_Init+0x74>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <MX_GPIO_Init+0x74>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_GPIO_Init+0x74>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_GPIO_Init+0x74>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <MX_GPIO_Init+0x74>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_GPIO_Init+0x74>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_I2C1_Init+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_I2C1_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_I2C1_Init+0x74>)
 8001064:	f640 6214 	movw	r2, #3604	; 0xe14
 8001068:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_I2C1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_I2C1_Init+0x74>)
 8001072:	2201      	movs	r2, #1
 8001074:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_I2C1_Init+0x74>)
 8001096:	f001 f83f 	bl	8002118 <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f000 fb8a 	bl	80017b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_I2C1_Init+0x74>)
 80010a8:	f001 fe30 	bl	8002d0c <HAL_I2CEx_ConfigAnalogFilter>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010b2:	f000 fb81 	bl	80017b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_I2C1_Init+0x74>)
 80010ba:	f001 fe72 	bl	8002da2 <HAL_I2CEx_ConfigDigitalFilter>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010c4:	f000 fb78 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000094 	.word	0x20000094
 80010d0:	40005400 	.word	0x40005400

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	; 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 f9ef 	bl	80054d8 <memset>
  if(i2cHandle->Instance==I2C1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_I2C_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fcf3 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f000 fb4c 	bl	80017b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115c:	4619      	mov	r1, r3
 800115e:	480b      	ldr	r0, [pc, #44]	; (800118c <HAL_I2C_MspInit+0xb8>)
 8001160:	f000 fe30 	bl	8001dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0xb4>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	; 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <lcd_init>:
#include "main.h"
#include "string.h"
#include "i2c.h"

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f043 030c 	orr.w	r3, r3, #12
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80011bc:	f107 0118 	add.w	r1, r7, #24
 80011c0:	230a      	movs	r3, #10
 80011c2:	2202      	movs	r2, #2
 80011c4:	486c      	ldr	r0, [pc, #432]	; (8001378 <lcd_init+0x1e8>)
 80011c6:	f003 fc8f 	bl	8004ae8 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80011ca:	f640 230d 	movw	r3, #2573	; 0xa0d
 80011ce:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80011d0:	f107 0114 	add.w	r1, r7, #20
 80011d4:	230a      	movs	r3, #10
 80011d6:	2202      	movs	r2, #2
 80011d8:	4867      	ldr	r0, [pc, #412]	; (8001378 <lcd_init+0x1e8>)
 80011da:	f003 fc85 	bl	8004ae8 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80011de:	2364      	movs	r3, #100	; 0x64
 80011e0:	2205      	movs	r2, #5
 80011e2:	217c      	movs	r1, #124	; 0x7c
 80011e4:	69f8      	ldr	r0, [r7, #28]
 80011e6:	f001 fa11 	bl	800260c <HAL_I2C_IsDeviceReady>
 80011ea:	4603      	mov	r3, r0
 80011ec:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80011ee:	f107 0113 	add.w	r1, r7, #19
 80011f2:	230a      	movs	r3, #10
 80011f4:	2201      	movs	r2, #1
 80011f6:	4860      	ldr	r0, [pc, #384]	; (8001378 <lcd_init+0x1e8>)
 80011f8:	f003 fc76 	bl	8004ae8 <HAL_UART_Transmit>
	HAL_Delay(50);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f000 fcd7 	bl	8001bb0 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001202:	f107 0218 	add.w	r2, r7, #24
 8001206:	f241 3388 	movw	r3, #5000	; 0x1388
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2302      	movs	r3, #2
 800120e:	217c      	movs	r1, #124	; 0x7c
 8001210:	69f8      	ldr	r0, [r7, #28]
 8001212:	f001 f811 	bl	8002238 <HAL_I2C_Master_Transmit>
 8001216:	4603      	mov	r3, r0
 8001218:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800121a:	f107 0112 	add.w	r1, r7, #18
 800121e:	230a      	movs	r3, #10
 8001220:	2201      	movs	r2, #1
 8001222:	4855      	ldr	r0, [pc, #340]	; (8001378 <lcd_init+0x1e8>)
 8001224:	f003 fc60 	bl	8004ae8 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f000 fcc1 	bl	8001bb0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800122e:	f107 0218 	add.w	r2, r7, #24
 8001232:	f241 3388 	movw	r3, #5000	; 0x1388
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2302      	movs	r3, #2
 800123a:	217c      	movs	r1, #124	; 0x7c
 800123c:	69f8      	ldr	r0, [r7, #28]
 800123e:	f000 fffb 	bl	8002238 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001242:	2005      	movs	r0, #5
 8001244:	f000 fcb4 	bl	8001bb0 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001248:	f107 0218 	add.w	r2, r7, #24
 800124c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2302      	movs	r3, #2
 8001254:	217c      	movs	r1, #124	; 0x7c
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	f000 ffee 	bl	8002238 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2204      	movs	r2, #4
 8001260:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	b2db      	uxtb	r3, r3
 800126c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800126e:	f107 0218 	add.w	r2, r7, #24
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	217c      	movs	r1, #124	; 0x7c
 800127c:	69f8      	ldr	r0, [r7, #28]
 800127e:	f000 ffdb 	bl	8002238 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001282:	2301      	movs	r3, #1
 8001284:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001286:	f107 0218 	add.w	r2, r7, #24
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	217c      	movs	r1, #124	; 0x7c
 8001294:	69f8      	ldr	r0, [r7, #28]
 8001296:	f000 ffcf 	bl	8002238 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 fc88 	bl	8001bb0 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80012b2:	f107 0218 	add.w	r2, r7, #24
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2302      	movs	r3, #2
 80012be:	217c      	movs	r1, #124	; 0x7c
 80012c0:	69f8      	ldr	r0, [r7, #28]
 80012c2:	f000 ffb9 	bl	8002238 <HAL_I2C_Master_Transmit>

	//Initialisation du lcd_rgb_Backlight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012ce:	f107 0210 	add.w	r2, r7, #16
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2302      	movs	r3, #2
 80012da:	21c4      	movs	r1, #196	; 0xc4
 80012dc:	69f8      	ldr	r0, [r7, #28]
 80012de:	f000 ffab 	bl	8002238 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80012e2:	2308      	movs	r3, #8
 80012e4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80012e6:	23ff      	movs	r3, #255	; 0xff
 80012e8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012ea:	f107 0210 	add.w	r2, r7, #16
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2302      	movs	r3, #2
 80012f6:	21c4      	movs	r1, #196	; 0xc4
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f000 ff9d 	bl	8002238 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80012fe:	2301      	movs	r3, #1
 8001300:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001302:	2320      	movs	r3, #32
 8001304:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001306:	f107 0210 	add.w	r2, r7, #16
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2302      	movs	r3, #2
 8001312:	21c4      	movs	r1, #196	; 0xc4
 8001314:	69f8      	ldr	r0, [r7, #28]
 8001316:	f000 ff8f 	bl	8002238 <HAL_I2C_Master_Transmit>

	//Couleur LCD (Blanc)
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800131a:	2304      	movs	r3, #4
 800131c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2302      	movs	r3, #2
 800132e:	21c4      	movs	r1, #196	; 0xc4
 8001330:	69f8      	ldr	r0, [r7, #28]
 8001332:	f000 ff81 	bl	8002238 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001336:	2303      	movs	r3, #3
 8001338:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800133a:	23ff      	movs	r3, #255	; 0xff
 800133c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2302      	movs	r3, #2
 800134a:	21c4      	movs	r1, #196	; 0xc4
 800134c:	69f8      	ldr	r0, [r7, #28]
 800134e:	f000 ff73 	bl	8002238 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001352:	2302      	movs	r3, #2
 8001354:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2302      	movs	r3, #2
 8001366:	21c4      	movs	r1, #196	; 0xc4
 8001368:	69f8      	ldr	r0, [r7, #28]
 800136a:	f000 ff65 	bl	8002238 <HAL_I2C_Master_Transmit>


}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000012c 	.word	0x2000012c

0800137c <clearlcd>:

void clearlcd(void) //Vide l'écran
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <clearlcd+0x2c>)
 8001386:	f000 f856 	bl	8001436 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <clearlcd+0x30>)
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <clearlcd+0x2c>)
 800138e:	f000 f829 	bl	80013e4 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8001392:	2201      	movs	r2, #1
 8001394:	2100      	movs	r1, #0
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <clearlcd+0x2c>)
 8001398:	f000 f84d 	bl	8001436 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <clearlcd+0x30>)
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <clearlcd+0x2c>)
 80013a0:	f000 f820 	bl	80013e4 <lcd_print>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000094 	.word	0x20000094
 80013ac:	08006470 	.word	0x08006470

080013b0 <lcd_write>:

void lcd_write(I2C_HandleTypeDef* I2Cx, uint8_t value) //Ecrit sur l'écran
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60fb      	str	r3, [r7, #12]
    unsigned char data[2] = {0x40, value};
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	723b      	strb	r3, [r7, #8]
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80013c8:	f107 0208 	add.w	r2, r7, #8
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2302      	movs	r3, #2
 80013d4:	217c      	movs	r1, #124	; 0x7c
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 ff2e 	bl	8002238 <HAL_I2C_Master_Transmit>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <lcd_print>:

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	733b      	strb	r3, [r7, #12]
    int i=0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80013fa:	e011      	b.n	8001420 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001406:	f107 020c 	add.w	r2, r7, #12
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2302      	movs	r3, #2
 8001412:	217c      	movs	r1, #124	; 0x7c
 8001414:	6938      	ldr	r0, [r7, #16]
 8001416:	f000 ff0f 	bl	8002238 <HAL_I2C_Master_Transmit>
            i++;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e7      	bne.n	80013fc <lcd_print+0x18>
   }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af02      	add	r7, sp, #8
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
 8001442:	4613      	mov	r3, r2
 8001444:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800144a:	78bb      	ldrb	r3, [r7, #2]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <lcd_position+0x24>
    {
        col = col | 0x80;
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001456:	70fb      	strb	r3, [r7, #3]
 8001458:	e003      	b.n	8001462 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001460:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800146a:	f107 0208 	add.w	r2, r7, #8
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2302      	movs	r3, #2
 8001476:	217c      	movs	r1, #124	; 0x7c
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fedd 	bl	8002238 <HAL_I2C_Master_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af02      	add	r7, sp, #8
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	460b      	mov	r3, r1
 8001494:	71bb      	strb	r3, [r7, #6]
 8001496:	4613      	mov	r3, r2
 8001498:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <reglagecouleur+0x74>)
 800149c:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 800149e:	2304      	movs	r3, #4
 80014a0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 80014a6:	f107 0210 	add.w	r2, r7, #16
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2302      	movs	r3, #2
 80014b2:	21c4      	movs	r1, #196	; 0xc4
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f000 febf 	bl	8002238 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80014ba:	2303      	movs	r3, #3
 80014bc:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	21c4      	movs	r1, #196	; 0xc4
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f000 feb1 	bl	8002238 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80014d6:	2302      	movs	r3, #2
 80014d8:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80014da:	797b      	ldrb	r3, [r7, #5]
 80014dc:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80014de:	f107 0208 	add.w	r2, r7, #8
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2302      	movs	r3, #2
 80014ea:	21c4      	movs	r1, #196	; 0xc4
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f000 fea3 	bl	8002238 <HAL_I2C_Master_Transmit>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000094 	.word	0x20000094

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001506:	f000 fade 	bl	8001ac6 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 800150a:	f000 f821 	bl	8001550 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 800150e:	f7ff fd67 	bl	8000fe0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001512:	f7ff fda1 	bl	8001058 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001516:	f000 f9b5 	bl	8001884 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800151a:	f000 fa1f 	bl	800195c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  double Tab[2] = {0};
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  lcd_init(&hi2c1, &LCD_Data);
 800152a:	4907      	ldr	r1, [pc, #28]	; (8001548 <main+0x48>)
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <main+0x4c>)
 800152e:	f7ff fe2f 	bl	8001190 <lcd_init>
  clearlcd();
 8001532:	f7ff ff23 	bl	800137c <clearlcd>

  while (1)
  {
    /* USER CODE END WHILE */

	  Mesure_Temp_Humi_SHT31(Tab);
 8001536:	463b      	mov	r3, r7
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f861 	bl	8001600 <Mesure_Temp_Humi_SHT31>
	  HAL_Delay(2000);
 800153e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001542:	f000 fb35 	bl	8001bb0 <HAL_Delay>
	  Mesure_Temp_Humi_SHT31(Tab);
 8001546:	e7f6      	b.n	8001536 <main+0x36>
 8001548:	20000090 	.word	0x20000090
 800154c:	20000094 	.word	0x20000094

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b096      	sub	sp, #88	; 0x58
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2244      	movs	r2, #68	; 0x44
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ffba 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001576:	f001 fc7f 	bl	8002e78 <HAL_PWREx_ControlVoltageScaling>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001580:	f000 f91a 	bl	80017b8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001584:	f001 fc5a 	bl	8002e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <SystemClock_Config+0xa8>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <SystemClock_Config+0xa8>)
 8001590:	f023 0318 	bic.w	r3, r3, #24
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001598:	2314      	movs	r3, #20
 800159a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fcb5 	bl	8002f24 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015c0:	f000 f8fa 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f887 	bl	80036f0 <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015e8:	f000 f8e6 	bl	80017b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015ec:	f002 fd70 	bl	80040d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015f0:	bf00      	nop
 80015f2:	3758      	adds	r7, #88	; 0x58
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	00000000 	.word	0x00000000

08001600 <Mesure_Temp_Humi_SHT31>:

/* USER CODE BEGIN 4 */

void Mesure_Temp_Humi_SHT31(double Val[2])
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b08f      	sub	sp, #60	; 0x3c
 8001604:	af02      	add	r7, sp, #8
 8001606:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Ready;

	uint8_t MSB_comm = 0x24;
 8001608:	2324      	movs	r3, #36	; 0x24
 800160a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t LSB_comm = 0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t Info[2] = {MSB_comm,LSB_comm};
 8001614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001618:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800161c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t Converted[6] = {0};
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	2300      	movs	r3, #0
 800162a:	843b      	strh	r3, [r7, #32]

	uint16_t Conca_T = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t Conca_H = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t Sensor_Adress = 0x44<<1;
 8001634:	2388      	movs	r3, #136	; 0x88
 8001636:	853b      	strh	r3, [r7, #40]	; 0x28

	char T_unit[5];
	char H_unit[5];

	//Adressage
	Ready = HAL_I2C_Master_Transmit(&hi2c1, Sensor_Adress, Info, 2, 1000);
 8001638:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800163c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2302      	movs	r3, #2
 8001646:	4856      	ldr	r0, [pc, #344]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001648:	f000 fdf6 	bl	8002238 <HAL_I2C_Master_Transmit>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	HAL_Delay(20); //Attente entre mesures
 8001652:	2014      	movs	r0, #20
 8001654:	f000 faac 	bl	8001bb0 <HAL_Delay>

	//Réponse du capteur
	Ready = HAL_I2C_Master_Receive(&hi2c1, Sensor_Adress, Converted, 6, 1000);
 8001658:	f107 021c 	add.w	r2, r7, #28
 800165c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2306      	movs	r3, #6
 8001666:	484e      	ldr	r0, [pc, #312]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001668:	f000 feda 	bl	8002420 <HAL_I2C_Master_Receive>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Conversion des données

	Conca_T = (Converted[0] << 8) | (Converted[1]);
 8001672:	7f3b      	ldrb	r3, [r7, #28]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	7f7b      	ldrb	r3, [r7, #29]
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21b      	sxth	r3, r3
 8001680:	85bb      	strh	r3, [r7, #44]	; 0x2c
	Val[0] = -45 + (175 *(Conca_T))/(pow(2,16) - 1);
 8001682:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001684:	22af      	movs	r2, #175	; 0xaf
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feee 	bl	800046c <__aeabi_i2d>
 8001690:	a341      	add	r3, pc, #260	; (adr r3, 8001798 <Mesure_Temp_Humi_SHT31+0x198>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7ff f87d 	bl	8000794 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <Mesure_Temp_Humi_SHT31+0x1a4>)
 80016a8:	f7fe fd92 	bl	80001d0 <__aeabi_dsub>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	e9c1 2300 	strd	r2, r3, [r1]

	Conca_H = (Converted[3] << 8) | (Converted[4]);
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	Val[1] = 100 * (Conca_H)/(pow(2,16) - 1);
 80016c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ca:	2264      	movs	r2, #100	; 0x64
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fecb 	bl	800046c <__aeabi_i2d>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 0408 	add.w	r4, r3, #8
 80016dc:	a32e      	add	r3, pc, #184	; (adr r3, 8001798 <Mesure_Temp_Humi_SHT31+0x198>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f857 	bl	8000794 <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c4 2300 	strd	r2, r3, [r4]

	reglagecouleur(100,250,100);
 80016ee:	2264      	movs	r2, #100	; 0x64
 80016f0:	21fa      	movs	r1, #250	; 0xfa
 80016f2:	2064      	movs	r0, #100	; 0x64
 80016f4:	f7ff fec8 	bl	8001488 <reglagecouleur>

	FloatToStr(Val[0],T_unit,2);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f9cd 	bl	8000aa0 <__aeabi_d2f>
 8001706:	4602      	mov	r2, r0
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	ee00 2a10 	vmov	s0, r2
 8001714:	f7ff fc08 	bl	8000f28 <FloatToStr>
	FloatToStr(Val[1],H_unit,2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3308      	adds	r3, #8
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9bc 	bl	8000aa0 <__aeabi_d2f>
 8001728:	4602      	mov	r2, r0
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2102      	movs	r1, #2
 8001730:	4618      	mov	r0, r3
 8001732:	ee00 2a10 	vmov	s0, r2
 8001736:	f7ff fbf7 	bl	8000f28 <FloatToStr>

	//Affichage de la température
	lcd_position(&hi2c1,0,0); //Ligne 1
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	4818      	ldr	r0, [pc, #96]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001740:	f7ff fe79 	bl	8001436 <lcd_position>
	lcd_print(&hi2c1,"Temp. = ");
 8001744:	4918      	ldr	r1, [pc, #96]	; (80017a8 <Mesure_Temp_Humi_SHT31+0x1a8>)
 8001746:	4816      	ldr	r0, [pc, #88]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001748:	f7ff fe4c 	bl	80013e4 <lcd_print>
	lcd_print(&hi2c1,T_unit);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001754:	f7ff fe46 	bl	80013e4 <lcd_print>
	lcd_write(&hi2c1,0xDF); //Correspond au °
 8001758:	21df      	movs	r1, #223	; 0xdf
 800175a:	4811      	ldr	r0, [pc, #68]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 800175c:	f7ff fe28 	bl	80013b0 <lcd_write>
	lcd_print(&hi2c1,"C");
 8001760:	4912      	ldr	r1, [pc, #72]	; (80017ac <Mesure_Temp_Humi_SHT31+0x1ac>)
 8001762:	480f      	ldr	r0, [pc, #60]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001764:	f7ff fe3e 	bl	80013e4 <lcd_print>

	//Affichage de l'humidité
	lcd_position(&hi2c1,0,1); //Ligne 2
 8001768:	2201      	movs	r2, #1
 800176a:	2100      	movs	r1, #0
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 800176e:	f7ff fe62 	bl	8001436 <lcd_position>
	lcd_print(&hi2c1,"Hum. = ");
 8001772:	490f      	ldr	r1, [pc, #60]	; (80017b0 <Mesure_Temp_Humi_SHT31+0x1b0>)
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001776:	f7ff fe35 	bl	80013e4 <lcd_print>
	lcd_print(&hi2c1,H_unit);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 8001782:	f7ff fe2f 	bl	80013e4 <lcd_print>
	lcd_print(&hi2c1," %");
 8001786:	490b      	ldr	r1, [pc, #44]	; (80017b4 <Mesure_Temp_Humi_SHT31+0x1b4>)
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <Mesure_Temp_Humi_SHT31+0x1a0>)
 800178a:	f7ff fe2b 	bl	80013e4 <lcd_print>
}
 800178e:	bf00      	nop
 8001790:	3734      	adds	r7, #52	; 0x34
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	00000000 	.word	0x00000000
 800179c:	40efffe0 	.word	0x40efffe0
 80017a0:	20000094 	.word	0x20000094
 80017a4:	40468000 	.word	0x40468000
 80017a8:	08006484 	.word	0x08006484
 80017ac:	08006490 	.word	0x08006490
 80017b0:	08006494 	.word	0x08006494
 80017b4:	0800649c 	.word	0x0800649c

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler+0x4>

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f98a 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_TIM2_Init+0x98>)
 80018a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_TIM2_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_TIM2_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_TIM2_Init+0x98>)
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_TIM2_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_TIM2_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <MX_TIM2_Init+0x98>)
 80018cc:	f002 fde2 	bl	8004494 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018d6:	f7ff ff6f 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_TIM2_Init+0x98>)
 80018e8:	f002 fe2b 	bl	8004542 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018f2:	f7ff ff61 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_TIM2_Init+0x98>)
 8001904:	f003 f81a 	bl	800493c <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800190e:	f7ff ff53 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200000e0 	.word	0x200000e0

08001920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d10b      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <MX_USART2_UART_Init+0x5c>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 80019a0:	f003 f854 	bl	8004a4c <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019aa:	f7ff ff05 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000012c 	.word	0x2000012c
 80019b8:	40004400 	.word	0x40004400

080019bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0ac      	sub	sp, #176	; 0xb0
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2288      	movs	r2, #136	; 0x88
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fd7b 	bl	80054d8 <memset>
  if(uartHandle->Instance==USART2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_UART_MspInit+0xb0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d13b      	bne.n	8001a64 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 f87f 	bl	8003afc <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a04:	f7ff fed8 	bl	80017b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a12:	6593      	str	r3, [r2, #88]	; 0x58
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f000 f9b0 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a64:	bf00      	nop
 8001a66:	37b0      	adds	r7, #176	; 0xb0
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40021000 	.word	0x40021000

08001a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a78:	f7ff fef2 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	; (8001ac0 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f003 fcf5 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aa6:	f7ff fd2b 	bl	8001500 <main>

08001aaa <LoopForever>:

LoopForever:
    b LoopForever
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ab8:	08006540 	.word	0x08006540
  ldr r2, =_sbss
 8001abc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ac0:	200001b4 	.word	0x200001b4

08001ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_2_IRQHandler>

08001ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f943 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f80e 	bl	8001af8 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e001      	b.n	8001aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae8:	f7ff fe6c 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_InitTick+0x70>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f941 	bl	8001daa <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d809      	bhi.n	8001b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f919 	bl	8001d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_InitTick+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e004      	b.n	8001b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e001      	b.n	8001b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	200001b0 	.word	0x200001b0

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200001b0 	.word	0x200001b0

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff47 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff5c 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffb0 	bl	8001d18 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e17f      	b.n	80020d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8171 	beq.w	80020ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x40>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0201 	and.w	r2, r3, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d118      	bne.n	8001ea4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f003 0201 	and.w	r2, r3, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d017      	beq.n	8001ee0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d123      	bne.n	8001f34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0203 	and.w	r2, r3, #3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80ac 	beq.w	80020ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	4a5e      	ldr	r2, [pc, #376]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6613      	str	r3, [r2, #96]	; 0x60
 8001f82:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_GPIO_Init+0x330>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_GPIO_Init+0x334>)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb8:	d025      	beq.n	8002006 <HAL_GPIO_Init+0x242>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <HAL_GPIO_Init+0x338>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01f      	beq.n	8002002 <HAL_GPIO_Init+0x23e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_GPIO_Init+0x33c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x23a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <HAL_GPIO_Init+0x340>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x236>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_GPIO_Init+0x344>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x232>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	; (800210c <HAL_GPIO_Init+0x348>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x22e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_GPIO_Init+0x34c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x22a>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x244>
 8002006:	2300      	movs	r3, #0
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_GPIO_Init+0x334>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_GPIO_Init+0x350>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x350>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x350>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_GPIO_Init+0x350>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x350>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x350>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x350>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_GPIO_Init+0x350>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa22 f303 	lsr.w	r3, r2, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f47f ae78 	bne.w	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000
 80020fc:	48000400 	.word	0x48000400
 8002100:	48000800 	.word	0x48000800
 8002104:	48000c00 	.word	0x48000c00
 8002108:	48001000 	.word	0x48001000
 800210c:	48001400 	.word	0x48001400
 8002110:	48001800 	.word	0x48001800
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e081      	b.n	800222e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe ffc8 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002168:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002178:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	e006      	b.n	80021a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800219e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d104      	bne.n	80021b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
 8002248:	4613      	mov	r3, r2
 800224a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	f040 80da 	bne.w	800240e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2C_Master_Transmit+0x30>
 8002264:	2302      	movs	r3, #2
 8002266:	e0d3      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002270:	f7ff fc92 	bl	8001b98 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2319      	movs	r3, #25
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 faed 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0be      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	; 0x21
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2210      	movs	r2, #16
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	893a      	ldrh	r2, [r7, #8]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2bff      	cmp	r3, #255	; 0xff
 80022c2:	d90e      	bls.n	80022e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	8979      	ldrh	r1, [r7, #10]
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_I2C_Master_Transmit+0x1e0>)
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fce4 	bl	8002ca8 <I2C_TransferConfig>
 80022e0:	e06c      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	4b48      	ldr	r3, [pc, #288]	; (8002418 <HAL_I2C_Master_Transmit+0x1e0>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fcd3 	bl	8002ca8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002302:	e05b      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	6a39      	ldr	r1, [r7, #32]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 faea 	bl	80028e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e07b      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d034      	beq.n	80023bc <HAL_I2C_Master_Transmit+0x184>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d130      	bne.n	80023bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fa7c 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04d      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d90e      	bls.n	800239c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	22ff      	movs	r2, #255	; 0xff
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	8979      	ldrh	r1, [r7, #10]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fc87 	bl	8002ca8 <I2C_TransferConfig>
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fc76 	bl	8002ca8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d19e      	bne.n	8002304 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fac9 	bl	8002962 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01a      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2220      	movs	r2, #32
 80023e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_I2C_Master_Transmit+0x1e4>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800240e:	2302      	movs	r3, #2
  }
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	80002000 	.word	0x80002000
 800241c:	fe00e800 	.word	0xfe00e800

08002420 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	817b      	strh	r3, [r7, #10]
 8002430:	4613      	mov	r3, r2
 8002432:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b20      	cmp	r3, #32
 800243e:	f040 80db 	bne.w	80025f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_I2C_Master_Receive+0x30>
 800244c:	2302      	movs	r3, #2
 800244e:	e0d4      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002458:	f7ff fb9e 	bl	8001b98 <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2319      	movs	r3, #25
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f9f9 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0bf      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2222      	movs	r2, #34	; 0x22
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2210      	movs	r2, #16
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d90e      	bls.n	80024ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_I2C_Master_Receive+0x1e4>)
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fbf0 	bl	8002ca8 <I2C_TransferConfig>
 80024c8:	e06d      	b.n	80025a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	8979      	ldrh	r1, [r7, #10]
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_I2C_Master_Receive+0x1e4>)
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fbdf 	bl	8002ca8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024ea:	e05c      	b.n	80025a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6a39      	ldr	r1, [r7, #32]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fa73 	bl	80029dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e07c      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d034      	beq.n	80025a6 <HAL_I2C_Master_Receive+0x186>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d130      	bne.n	80025a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	2200      	movs	r2, #0
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f987 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e04d      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2bff      	cmp	r3, #255	; 0xff
 8002566:	d90e      	bls.n	8002586 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	22ff      	movs	r2, #255	; 0xff
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	b2da      	uxtb	r2, r3
 8002574:	8979      	ldrh	r1, [r7, #10]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fb92 	bl	8002ca8 <I2C_TransferConfig>
 8002584:	e00f      	b.n	80025a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fb81 	bl	8002ca8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d19d      	bne.n	80024ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f9d4 	bl	8002962 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e01a      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_I2C_Master_Receive+0x1e8>)
 80025d8:	400b      	ands	r3, r1
 80025da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	80002400 	.word	0x80002400
 8002608:	fe00e800 	.word	0xfe00e800

0800260c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	460b      	mov	r3, r1
 800261a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	f040 80f1 	bne.w	8002810 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263c:	d101      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e0e7      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_IsDeviceReady+0x44>
 800264c:	2302      	movs	r3, #2
 800264e:	e0e0      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_I2C_IsDeviceReady+0x72>
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002678:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800267c:	e004      	b.n	8002688 <HAL_I2C_IsDeviceReady+0x7c>
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002684:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800268e:	f7ff fa83 	bl	8001b98 <HAL_GetTick>
 8002692:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026c0:	e034      	b.n	800272c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d01a      	beq.n	8002700 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff fa65 	bl	8001b98 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <HAL_I2C_IsDeviceReady+0xd4>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e088      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b20      	cmp	r3, #32
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_I2C_IsDeviceReady+0x12c>
 8002732:	7fbb      	ldrb	r3, [r7, #30]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0c4      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d01a      	beq.n	800277c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	2120      	movs	r1, #32
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f886 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e058      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e04a      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	2120      	movs	r1, #32
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f86b 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e03d      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d118      	bne.n	80027e0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027bc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f84a 	bl	8002862 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01c      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f63f af3b 	bhi.w	8002666 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d103      	bne.n	8002838 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d007      	beq.n	8002856 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699a      	ldr	r2, [r3, #24]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	619a      	str	r2, [r3, #24]
  }
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002872:	e022      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d01e      	beq.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287c:	f7ff f98c 	bl	8001b98 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d302      	bcc.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d113      	bne.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d0cd      	beq.n	8002874 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ee:	e02c      	b.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f8eb 	bl	8002ad0 <I2C_IsErrorOccurred>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e02a      	b.n	800295a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d01e      	beq.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7ff f944 	bl	8001b98 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d113      	bne.n	800294a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d1cb      	bne.n	80028f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800296e:	e028      	b.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8ab 	bl	8002ad0 <I2C_IsErrorOccurred>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e026      	b.n	80029d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	f7ff f908 	bl	8001b98 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d113      	bne.n	80029c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e007      	b.n	80029d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d1cf      	bne.n	8002970 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e8:	e064      	b.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f86e 	bl	8002ad0 <I2C_IsErrorOccurred>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e062      	b.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d138      	bne.n	8002a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d105      	bne.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e04e      	b.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d107      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
 8002a42:	e002      	b.n	8002a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002a5e:	400b      	ands	r3, r1
 8002a60:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f88b 	bl	8001b98 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e007      	b.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d193      	bne.n	80029ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	fe00e800 	.word	0xfe00e800

08002ad0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d075      	beq.n	8002be8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2210      	movs	r2, #16
 8002b02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b04:	e056      	b.n	8002bb4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d052      	beq.n	8002bb4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7ff f843 	bl	8001b98 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_IsErrorOccurred+0x54>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d147      	bne.n	8002bb4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b46:	d12e      	bne.n	8002ba6 <I2C_IsErrorOccurred+0xd6>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4e:	d02a      	beq.n	8002ba6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d027      	beq.n	8002ba6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b64:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b66:	f7ff f817 	bl	8001b98 <HAL_GetTick>
 8002b6a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b6c:	e01b      	b.n	8002ba6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b6e:	f7ff f813 	bl	8001b98 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b19      	cmp	r3, #25
 8002b7a:	d914      	bls.n	8002ba6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d1dc      	bne.n	8002b6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d003      	beq.n	8002bca <I2C_IsErrorOccurred+0xfa>
 8002bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d09d      	beq.n	8002b06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
 8002c22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01c      	beq.n	8002c98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff fddb 	bl	800281a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <I2C_IsErrorOccurred+0x1d4>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	fe00e800 	.word	0xfe00e800

08002ca8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cc0:	7a7b      	ldrb	r3, [r7, #9]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cd6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	0d5b      	lsrs	r3, r3, #21
 8002ce2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <I2C_TransferConfig+0x60>)
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	43db      	mvns	r3, r3
 8002cec:	ea02 0103 	and.w	r1, r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	03ff63ff 	.word	0x03ff63ff

08002d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d138      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e032      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d139      	bne.n	8002e2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e033      	b.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2224      	movs	r2, #36	; 0x24
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40007000 	.word	0x40007000

08002e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e86:	d130      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d038      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2232      	movs	r2, #50	; 0x32
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebc:	e002      	b.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f2      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d110      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d007      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	431bde83 	.word	0x431bde83

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3d4      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4ba1      	ldr	r3, [pc, #644]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b9e      	ldr	r3, [pc, #632]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80e4 	beq.w	8003120 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4a>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	f040 808b 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 8087 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6e:	4b93      	ldr	r3, [pc, #588]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e3ac      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	4b8c      	ldr	r3, [pc, #560]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x7c>
 8002f96:	4b89      	ldr	r3, [pc, #548]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_OscConfig+0x88>
 8002fa0:	4b86      	ldr	r3, [pc, #536]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d223      	bcs.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd41 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e38d      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc4:	4b7d      	ldr	r3, [pc, #500]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7c      	ldr	r2, [pc, #496]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b7a      	ldr	r3, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4977      	ldr	r1, [pc, #476]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	4972      	ldr	r1, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
 8002ff6:	e025      	b.n	8003044 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff8:	4b70      	ldr	r3, [pc, #448]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6f      	ldr	r2, [pc, #444]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	496a      	ldr	r1, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003016:	4b69      	ldr	r3, [pc, #420]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4965      	ldr	r1, [pc, #404]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd01 	bl	8003a3c <RCC_SetFlashLatencyFromMSIRange>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e34d      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 fc36 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	495a      	ldr	r1, [pc, #360]	; (80031c0 <HAL_RCC_OscConfig+0x29c>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_OscConfig+0x2a0>)
 8003062:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003064:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <HAL_RCC_OscConfig+0x2a4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fd45 	bl	8001af8 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d052      	beq.n	800311e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	e331      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d032      	beq.n	80030ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003090:	f7fe fd82 	bl	8001b98 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003098:	f7fe fd7e 	bl	8001b98 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e31a      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030aa:	4b44      	ldr	r3, [pc, #272]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a40      	ldr	r2, [pc, #256]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	493b      	ldr	r1, [pc, #236]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	e01a      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fd4f 	bl	8001b98 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fe:	f7fe fd4b 	bl	8001b98 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e2e7      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x1da>
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d074      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x21a>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d10e      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d064      	beq.n	8003214 <HAL_RCC_OscConfig+0x2f0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d160      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e2c4      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x24a>
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e01d      	b.n	80031aa <HAL_RCC_OscConfig+0x286>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x26e>
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 800317e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x286>
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 8003198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a06      	ldr	r2, [pc, #24]	; (80031bc <HAL_RCC_OscConfig+0x298>)
 80031a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01c      	beq.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fe fcf1 	bl	8001b98 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b8:	e011      	b.n	80031de <HAL_RCC_OscConfig+0x2ba>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	080064a0 	.word	0x080064a0
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fce4 	bl	8001b98 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e280      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	4baf      	ldr	r3, [pc, #700]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2a8>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fcd4 	bl	8001b98 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fcd0 	bl	8001b98 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e26c      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003206:	4ba5      	ldr	r3, [pc, #660]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2d0>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x310>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d119      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d116      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	4b99      	ldr	r3, [pc, #612]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x328>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e249      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b93      	ldr	r3, [pc, #588]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	4990      	ldr	r1, [pc, #576]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a8b      	ldr	r2, [pc, #556]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fc8f 	bl	8001b98 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe fc8b 	bl	8001b98 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e227      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b82      	ldr	r3, [pc, #520]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b7f      	ldr	r3, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	497c      	ldr	r1, [pc, #496]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a79      	ldr	r2, [pc, #484]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fc6b 	bl	8001b98 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fc67 	bl	8001b98 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e203      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fe:	4a67      	ldr	r2, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fc46 	bl	8001b98 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe fc42 	bl	8001b98 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1de      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x3ec>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b5a      	ldr	r3, [pc, #360]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fc29 	bl	8001b98 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe fc25 	bl	8001b98 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1c1      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800337c:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b44      	ldr	r3, [pc, #272]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a43      	ldr	r2, [pc, #268]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a4:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_OscConfig+0x57c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x57c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <HAL_RCC_OscConfig+0x57c>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fbec 	bl	8001b98 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe fbe8 	bl	8001b98 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e184      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d6:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <HAL_RCC_OscConfig+0x57c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d8>
 80033ea:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	4a2a      	ldr	r2, [pc, #168]	; (800349c <HAL_RCC_OscConfig+0x578>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033fa:	e024      	b.n	8003446 <HAL_RCC_OscConfig+0x522>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d110      	bne.n	8003426 <HAL_RCC_OscConfig+0x502>
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	4a24      	ldr	r2, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	4a20      	ldr	r2, [pc, #128]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003424:	e00f      	b.n	8003446 <HAL_RCC_OscConfig+0x522>
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_OscConfig+0x578>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800343e:	f023 0304 	bic.w	r3, r3, #4
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe fba3 	bl	8001b98 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fb9f 	bl	8001b98 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e139      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x578>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0ed      	beq.n	8003456 <HAL_RCC_OscConfig+0x532>
 800347a:	e01a      	b.n	80034b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe fb8c 	bl	8001b98 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003482:	e00f      	b.n	80034a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fe fb88 	bl	8001b98 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d906      	bls.n	80034a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e122      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a4:	4b90      	ldr	r3, [pc, #576]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e8      	bne.n	8003484 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b8b      	ldr	r3, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	4a8a      	ldr	r2, [pc, #552]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8108 	beq.w	80036de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f040 80d0 	bne.w	8003678 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034d8:	4b83      	ldr	r3, [pc, #524]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d130      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	3b01      	subs	r3, #1
 80034f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d127      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11f      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003518:	2a07      	cmp	r2, #7
 800351a:	bf14      	ite	ne
 800351c:	2201      	movne	r2, #1
 800351e:	2200      	moveq	r2, #0
 8003520:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d109      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	3b01      	subs	r3, #1
 8003548:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d06e      	beq.n	800362c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d069      	beq.n	8003628 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003554:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0b7      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003570:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800357c:	f7fe fb0c 	bl	8001b98 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fb08 	bl	8001b98 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0a4      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	4b51      	ldr	r3, [pc, #324]	; (80036ec <HAL_RCC_OscConfig+0x7c8>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035bc:	0212      	lsls	r2, r2, #8
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0552      	lsls	r2, r2, #21
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0652      	lsls	r2, r2, #25
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035dc:	0912      	lsrs	r2, r2, #4
 80035de:	0452      	lsls	r2, r2, #17
 80035e0:	430a      	orrs	r2, r1
 80035e2:	4941      	ldr	r1, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035e8:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3e      	ldr	r2, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f4:	4b3c      	ldr	r3, [pc, #240]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003600:	f7fe faca 	bl	8001b98 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fac6 	bl	8001b98 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e062      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003626:	e05a      	b.n	80036de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e059      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d152      	bne.n	80036de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003644:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003650:	f7fe faa2 	bl	8001b98 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe fa9e 	bl	8001b98 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e03a      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x734>
 8003676:	e032      	b.n	80036de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d02d      	beq.n	80036da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003688:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a13      	ldr	r2, [pc, #76]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 800369c:	f023 0303 	bic.w	r3, r3, #3
 80036a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80036a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe fa71 	bl	8001b98 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe fa6d 	bl	8001b98 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e009      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x7c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x796>
 80036d8:	e001      	b.n	80036de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	f99d808c 	.word	0xf99d808c

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d910      	bls.n	8003734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 0207 	bic.w	r2, r3, #7
 800371a:	4961      	ldr	r1, [pc, #388]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b5f      	ldr	r3, [pc, #380]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b0      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d04c      	beq.n	80037da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d107      	bne.n	8003758 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d121      	bne.n	8003798 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e09e      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d115      	bne.n	8003798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e092      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003778:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e086      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e07e      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003798:	4b42      	ldr	r3, [pc, #264]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	493f      	ldr	r1, [pc, #252]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fe f9f5 	bl	8001b98 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b2:	f7fe f9f1 	bl	8001b98 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e066      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 020c 	and.w	r2, r3, #12
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d1eb      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	492c      	ldr	r1, [pc, #176]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d210      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	4924      	ldr	r1, [pc, #144]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_RCC_ClockConfig+0x1b0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e036      	b.n	8003896 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4918      	ldr	r1, [pc, #96]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4910      	ldr	r1, [pc, #64]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003866:	f000 f825 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_ClockConfig+0x1b4>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490c      	ldr	r1, [pc, #48]	; (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe f934 	bl	8001af8 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
 8003892:	72fb      	strb	r3, [r7, #11]

  return status;
 8003894:	7afb      	ldrb	r3, [r7, #11]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	080064a0 	.word	0x080064a0
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x34>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11e      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e005      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003924:	e00a      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d102      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e004      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d101      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800393a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d134      	bne.n	80039ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0xa6>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d003      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0xac>
 8003958:	e005      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395c:	617b      	str	r3, [r7, #20]
      break;
 800395e:	e005      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003962:	617b      	str	r3, [r7, #20]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	617b      	str	r3, [r7, #20]
      break;
 800396a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	fb02 f203 	mul.w	r2, r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	0e5b      	lsrs	r3, r3, #25
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	3301      	adds	r3, #1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	080064b8 	.word	0x080064b8
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000000 	.word	0x20000000

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	080064b0 	.word	0x080064b0

08003a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a14:	f7ff ffda 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0adb      	lsrs	r3, r3, #11
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	080064b0 	.word	0x080064b0

08003a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a54:	f7ff fa02 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003a58:	6178      	str	r0, [r7, #20]
 8003a5a:	e014      	b.n	8003a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a74:	f7ff f9f2 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d10b      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d919      	bls.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2ba0      	cmp	r3, #160	; 0xa0
 8003a98:	d902      	bls.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e013      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e010      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d902      	bls.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003aac:	2303      	movs	r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e00a      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d102      	bne.n	8003abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ab8:	2302      	movs	r3, #2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e004      	b.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b70      	cmp	r3, #112	; 0x70
 8003ac2:	d101      	bne.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 0207 	bic.w	r2, r3, #7
 8003ad0:	4909      	ldr	r1, [pc, #36]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40022000 	.word	0x40022000

08003afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b04:	2300      	movs	r3, #0
 8003b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d041      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b20:	d02a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b26:	d824      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b32:	d81e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b3e:	e018      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b40:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a85      	ldr	r2, [pc, #532]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b4c:	e015      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 facb 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3320      	adds	r3, #32
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fbb6 	bl	80042d8 <RCCEx_PLLSAI2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	74fb      	strb	r3, [r7, #19]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b80:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8e:	4973      	ldr	r1, [pc, #460]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d041      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb0:	d02a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bb6:	d824      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bc2:	d81e      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bce:	e018      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a61      	ldr	r2, [pc, #388]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bdc:	e015      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa83 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bee:	e00c      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fb6e 	bl	80042d8 <RCCEx_PLLSAI2_Config>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	74fb      	strb	r3, [r7, #19]
      break;
 8003c06:	e000      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c10:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1e:	494f      	ldr	r1, [pc, #316]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c26:	e001      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80a0 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3a      	ldr	r2, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7c:	f7fd ff8c 	bl	8001b98 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c82:	e009      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fd ff88 	bl	8001b98 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	74fb      	strb	r3, [r7, #19]
        break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d15c      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cc8:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd ff47 	bl	8001b98 <HAL_GetTick>
 8003d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd ff43 	bl	8001b98 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d902      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	74fb      	strb	r3, [r7, #19]
            break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ec      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4a:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d52:	e009      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d68:	7c7b      	ldrb	r3, [r7, #17]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d105      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b9e      	ldr	r3, [pc, #632]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a9d      	ldr	r2, [pc, #628]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d86:	4b98      	ldr	r3, [pc, #608]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 0203 	bic.w	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	4994      	ldr	r1, [pc, #592]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da8:	4b8f      	ldr	r3, [pc, #572]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 020c 	bic.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	498c      	ldr	r1, [pc, #560]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dca:	4b87      	ldr	r3, [pc, #540]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4983      	ldr	r1, [pc, #524]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dec:	4b7e      	ldr	r3, [pc, #504]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	497b      	ldr	r1, [pc, #492]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	4972      	ldr	r1, [pc, #456]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e30:	4b6d      	ldr	r3, [pc, #436]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	496a      	ldr	r1, [pc, #424]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e52:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	4961      	ldr	r1, [pc, #388]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e74:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	4959      	ldr	r1, [pc, #356]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e96:	4b54      	ldr	r3, [pc, #336]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea4:	4950      	ldr	r1, [pc, #320]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	4948      	ldr	r1, [pc, #288]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	493f      	ldr	r1, [pc, #252]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d028      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efc:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0a:	4937      	ldr	r1, [pc, #220]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	60d3      	str	r3, [r2, #12]
 8003f28:	e011      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f32:	d10c      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8d8 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d028      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	491f      	ldr	r1, [pc, #124]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f84:	60d3      	str	r3, [r2, #12]
 8003f86:	e011      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f8a9 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a02      	ldr	r2, [pc, #8]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
 8003fe4:	e014      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f877 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402a:	4928      	ldr	r1, [pc, #160]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403a:	d10d      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f854 	bl	80040f0 <RCCEx_PLLSAI1_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d014      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	74bb      	strb	r3, [r7, #18]
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3320      	adds	r3, #32
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f935 	bl	80042d8 <RCCEx_PLLSAI2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004096:	490d      	ldr	r1, [pc, #52]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ba:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000

080040f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040fe:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800410a:	4b72      	ldr	r3, [pc, #456]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0203 	and.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d10d      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
       ||
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
       ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d047      	beq.n	80041c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	e044      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d018      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x86>
 8004144:	2b03      	cmp	r3, #3
 8004146:	d825      	bhi.n	8004194 <RCCEx_PLLSAI1_Config+0xa4>
 8004148:	2b01      	cmp	r3, #1
 800414a:	d002      	beq.n	8004152 <RCCEx_PLLSAI1_Config+0x62>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d009      	beq.n	8004164 <RCCEx_PLLSAI1_Config+0x74>
 8004150:	e020      	b.n	8004194 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004152:	4b60      	ldr	r3, [pc, #384]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11d      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004162:	e01a      	b.n	800419a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004164:	4b5b      	ldr	r3, [pc, #364]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004174:	e013      	b.n	800419e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004176:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004182:	4b54      	ldr	r3, [pc, #336]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004192:	e006      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      break;
 8004198:	e004      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	430b      	orrs	r3, r1
 80041c0:	4944      	ldr	r1, [pc, #272]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d17d      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd fcde 	bl	8001b98 <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041de:	e009      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e0:	f7fd fcda 	bl	8001b98 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d902      	bls.n	80041f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	73fb      	strb	r3, [r7, #15]
        break;
 80041f2:	e005      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f4:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ef      	bne.n	80041e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d160      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d111      	bne.n	8004230 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6892      	ldr	r2, [r2, #8]
 800421c:	0211      	lsls	r1, r2, #8
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	0912      	lsrs	r2, r2, #4
 8004224:	0452      	lsls	r2, r2, #17
 8004226:	430a      	orrs	r2, r1
 8004228:	492a      	ldr	r1, [pc, #168]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	610b      	str	r3, [r1, #16]
 800422e:	e027      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d112      	bne.n	800425c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800423e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6892      	ldr	r2, [r2, #8]
 8004246:	0211      	lsls	r1, r2, #8
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6912      	ldr	r2, [r2, #16]
 800424c:	0852      	lsrs	r2, r2, #1
 800424e:	3a01      	subs	r2, #1
 8004250:	0552      	lsls	r2, r2, #21
 8004252:	430a      	orrs	r2, r1
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
 800425a:	e011      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6952      	ldr	r2, [r2, #20]
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0652      	lsls	r2, r2, #25
 8004278:	430a      	orrs	r2, r1
 800427a:	4916      	ldr	r1, [pc, #88]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800428a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fc84 	bl	8001b98 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004294:	f7fd fc80 	bl	8001b98 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
          break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000

080042d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e6:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042f2:	4b67      	ldr	r3, [pc, #412]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0203 	and.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10d      	bne.n	800431e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
       ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800430a:	4b61      	ldr	r3, [pc, #388]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
       ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d047      	beq.n	80043ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e044      	b.n	80043ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d018      	beq.n	800435e <RCCEx_PLLSAI2_Config+0x86>
 800432c:	2b03      	cmp	r3, #3
 800432e:	d825      	bhi.n	800437c <RCCEx_PLLSAI2_Config+0xa4>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <RCCEx_PLLSAI2_Config+0x62>
 8004334:	2b02      	cmp	r3, #2
 8004336:	d009      	beq.n	800434c <RCCEx_PLLSAI2_Config+0x74>
 8004338:	e020      	b.n	800437c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800433a:	4b55      	ldr	r3, [pc, #340]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11d      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e01a      	b.n	8004382 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e013      	b.n	8004386 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435e:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800436a:	4b49      	ldr	r3, [pc, #292]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800437a:	e006      	b.n	800438a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e004      	b.n	800438c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800438a:	bf00      	nop
    }

    if(status == HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10d      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004392:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6819      	ldr	r1, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	430b      	orrs	r3, r1
 80043a8:	4939      	ldr	r1, [pc, #228]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d167      	bne.n	8004484 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043b4:	4b36      	ldr	r3, [pc, #216]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a35      	ldr	r2, [pc, #212]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fbea 	bl	8001b98 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c8:	f7fd fbe6 	bl	8001b98 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
        break;
 80043da:	e005      	b.n	80043e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ef      	bne.n	80043c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d14a      	bne.n	8004484 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043f4:	4b26      	ldr	r3, [pc, #152]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	0912      	lsrs	r2, r2, #4
 800440c:	0452      	lsls	r2, r2, #17
 800440e:	430a      	orrs	r2, r1
 8004410:	491f      	ldr	r1, [pc, #124]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	614b      	str	r3, [r1, #20]
 8004416:	e011      	b.n	800443c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004420:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	0211      	lsls	r1, r2, #8
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6912      	ldr	r2, [r2, #16]
 800442e:	0852      	lsrs	r2, r2, #1
 8004430:	3a01      	subs	r2, #1
 8004432:	0652      	lsls	r2, r2, #25
 8004434:	430a      	orrs	r2, r1
 8004436:	4916      	ldr	r1, [pc, #88]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004446:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fd fba6 	bl	8001b98 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444e:	e009      	b.n	8004464 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004450:	f7fd fba2 	bl	8001b98 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d902      	bls.n	8004464 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	73fb      	strb	r3, [r7, #15]
          break;
 8004462:	e005      	b.n	8004470 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ef      	beq.n	8004450 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e049      	b.n	800453a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fa30 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 f8fe 	bl	80046d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_TIM_ConfigClockSource+0x1c>
 800455a:	2302      	movs	r3, #2
 800455c:	e0b6      	b.n	80046cc <HAL_TIM_ConfigClockSource+0x18a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004580:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004588:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d03e      	beq.n	800461a <HAL_TIM_ConfigClockSource+0xd8>
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	f200 8087 	bhi.w	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	f000 8086 	beq.w	80046b8 <HAL_TIM_ConfigClockSource+0x176>
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d87f      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045b2:	2b70      	cmp	r3, #112	; 0x70
 80045b4:	d01a      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xaa>
 80045b6:	2b70      	cmp	r3, #112	; 0x70
 80045b8:	d87b      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045ba:	2b60      	cmp	r3, #96	; 0x60
 80045bc:	d050      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0x11e>
 80045be:	2b60      	cmp	r3, #96	; 0x60
 80045c0:	d877      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045c2:	2b50      	cmp	r3, #80	; 0x50
 80045c4:	d03c      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0xfe>
 80045c6:	2b50      	cmp	r3, #80	; 0x50
 80045c8:	d873      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d058      	beq.n	8004680 <HAL_TIM_ConfigClockSource+0x13e>
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d86f      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045d2:	2b30      	cmp	r3, #48	; 0x30
 80045d4:	d064      	beq.n	80046a0 <HAL_TIM_ConfigClockSource+0x15e>
 80045d6:	2b30      	cmp	r3, #48	; 0x30
 80045d8:	d86b      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d060      	beq.n	80046a0 <HAL_TIM_ConfigClockSource+0x15e>
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d867      	bhi.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d05c      	beq.n	80046a0 <HAL_TIM_ConfigClockSource+0x15e>
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d05a      	beq.n	80046a0 <HAL_TIM_ConfigClockSource+0x15e>
 80045ea:	e062      	b.n	80046b2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f000 f97e 	bl	80048fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800460e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]
      break;
 8004618:	e04f      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f000 f967 	bl	80048fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463c:	609a      	str	r2, [r3, #8]
      break;
 800463e:	e03c      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	461a      	mov	r2, r3
 800464e:	f000 f8db 	bl	8004808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2150      	movs	r1, #80	; 0x50
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f934 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 800465e:	e02c      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	461a      	mov	r2, r3
 800466e:	f000 f8fa 	bl	8004866 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2160      	movs	r1, #96	; 0x60
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f924 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 800467e:	e01c      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	461a      	mov	r2, r3
 800468e:	f000 f8bb 	bl	8004808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2140      	movs	r1, #64	; 0x40
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f914 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 800469e:	e00c      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 f90b 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e003      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      break;
 80046b6:	e000      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a40      	ldr	r2, [pc, #256]	; (80047e8 <TIM_Base_SetConfig+0x114>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d00f      	beq.n	8004714 <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3d      	ldr	r2, [pc, #244]	; (80047ec <TIM_Base_SetConfig+0x118>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <TIM_Base_SetConfig+0x11c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <TIM_Base_SetConfig+0x120>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3a      	ldr	r2, [pc, #232]	; (80047f8 <TIM_Base_SetConfig+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <TIM_Base_SetConfig+0x114>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d01b      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2c      	ldr	r2, [pc, #176]	; (80047ec <TIM_Base_SetConfig+0x118>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d017      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2b      	ldr	r2, [pc, #172]	; (80047f0 <TIM_Base_SetConfig+0x11c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <TIM_Base_SetConfig+0x120>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <TIM_Base_SetConfig+0x124>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a28      	ldr	r2, [pc, #160]	; (80047fc <TIM_Base_SetConfig+0x128>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a27      	ldr	r2, [pc, #156]	; (8004800 <TIM_Base_SetConfig+0x12c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a26      	ldr	r2, [pc, #152]	; (8004804 <TIM_Base_SetConfig+0x130>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00f      	beq.n	80047cc <TIM_Base_SetConfig+0xf8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_Base_SetConfig+0xf8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <TIM_Base_SetConfig+0x128>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_Base_SetConfig+0xf8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <TIM_Base_SetConfig+0x12c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_Base_SetConfig+0xf8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <TIM_Base_SetConfig+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d103      	bne.n	80047d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	615a      	str	r2, [r3, #20]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40014400 	.word	0x40014400
 8004804:	40014800 	.word	0x40014800

08004808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f043 0307 	orr.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	609a      	str	r2, [r3, #8]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e068      	b.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2e      	ldr	r2, [pc, #184]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800498e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01d      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d018      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10c      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40013400 	.word	0x40013400
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40014000 	.word	0x40014000

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e040      	b.n	8004ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc ffa4 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8c0 	bl	8004c10 <UART_SetConfig>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e022      	b.n	8004ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb3e 	bl	8005124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fbc5 	bl	8005268 <UART_CheckIdleState>
 8004ade:	4603      	mov	r3, r0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	f040 8082 	bne.w	8004c06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_UART_Transmit+0x26>
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07a      	b.n	8004c08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x38>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e073      	b.n	8004c08 <HAL_UART_Transmit+0x120>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2221      	movs	r2, #33	; 0x21
 8004b34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b36:	f7fd f82f 	bl	8001b98 <HAL_GetTick>
 8004b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b54:	d108      	bne.n	8004b68 <HAL_UART_Transmit+0x80>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b78:	e02d      	b.n	8004bd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fbb8 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e039      	b.n	8004c08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	3302      	adds	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e008      	b.n	8004bc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1cb      	bne.n	8004b7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2140      	movs	r1, #64	; 0x40
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fb84 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e005      	b.n	8004c08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b5b0      	push	{r4, r5, r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4bad      	ldr	r3, [pc, #692]	; (8004ef0 <UART_SetConfig+0x2e0>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	69f9      	ldr	r1, [r7, #28]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4aa2      	ldr	r2, [pc, #648]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a99      	ldr	r2, [pc, #612]	; (8004ef8 <UART_SetConfig+0x2e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d121      	bne.n	8004cda <UART_SetConfig+0xca>
 8004c96:	4b99      	ldr	r3, [pc, #612]	; (8004efc <UART_SetConfig+0x2ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d817      	bhi.n	8004cd4 <UART_SetConfig+0xc4>
 8004ca4:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x9c>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cc3 	.word	0x08004cc3
 8004cb8:	08004ccf 	.word	0x08004ccf
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	76fb      	strb	r3, [r7, #27]
 8004cc0:	e0e7      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	76fb      	strb	r3, [r7, #27]
 8004cc6:	e0e4      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	76fb      	strb	r3, [r7, #27]
 8004ccc:	e0e1      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	76fb      	strb	r3, [r7, #27]
 8004cd2:	e0de      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	76fb      	strb	r3, [r7, #27]
 8004cd8:	e0db      	b.n	8004e92 <UART_SetConfig+0x282>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a88      	ldr	r2, [pc, #544]	; (8004f00 <UART_SetConfig+0x2f0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d132      	bne.n	8004d4a <UART_SetConfig+0x13a>
 8004ce4:	4b85      	ldr	r3, [pc, #532]	; (8004efc <UART_SetConfig+0x2ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d828      	bhi.n	8004d44 <UART_SetConfig+0x134>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xe8>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d45 	.word	0x08004d45
 8004d00:	08004d45 	.word	0x08004d45
 8004d04:	08004d45 	.word	0x08004d45
 8004d08:	08004d39 	.word	0x08004d39
 8004d0c:	08004d45 	.word	0x08004d45
 8004d10:	08004d45 	.word	0x08004d45
 8004d14:	08004d45 	.word	0x08004d45
 8004d18:	08004d33 	.word	0x08004d33
 8004d1c:	08004d45 	.word	0x08004d45
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d3f 	.word	0x08004d3f
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	e0af      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d32:	2302      	movs	r3, #2
 8004d34:	76fb      	strb	r3, [r7, #27]
 8004d36:	e0ac      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	76fb      	strb	r3, [r7, #27]
 8004d3c:	e0a9      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	76fb      	strb	r3, [r7, #27]
 8004d42:	e0a6      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d44:	2310      	movs	r3, #16
 8004d46:	76fb      	strb	r3, [r7, #27]
 8004d48:	e0a3      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6d      	ldr	r2, [pc, #436]	; (8004f04 <UART_SetConfig+0x2f4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d120      	bne.n	8004d96 <UART_SetConfig+0x186>
 8004d54:	4b69      	ldr	r3, [pc, #420]	; (8004efc <UART_SetConfig+0x2ec>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d5e:	2b30      	cmp	r3, #48	; 0x30
 8004d60:	d013      	beq.n	8004d8a <UART_SetConfig+0x17a>
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d814      	bhi.n	8004d90 <UART_SetConfig+0x180>
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d009      	beq.n	8004d7e <UART_SetConfig+0x16e>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d810      	bhi.n	8004d90 <UART_SetConfig+0x180>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <UART_SetConfig+0x168>
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d006      	beq.n	8004d84 <UART_SetConfig+0x174>
 8004d76:	e00b      	b.n	8004d90 <UART_SetConfig+0x180>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	e089      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	76fb      	strb	r3, [r7, #27]
 8004d82:	e086      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d84:	2304      	movs	r3, #4
 8004d86:	76fb      	strb	r3, [r7, #27]
 8004d88:	e083      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	76fb      	strb	r3, [r7, #27]
 8004d8e:	e080      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d90:	2310      	movs	r3, #16
 8004d92:	76fb      	strb	r3, [r7, #27]
 8004d94:	e07d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5b      	ldr	r2, [pc, #364]	; (8004f08 <UART_SetConfig+0x2f8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d120      	bne.n	8004de2 <UART_SetConfig+0x1d2>
 8004da0:	4b56      	ldr	r3, [pc, #344]	; (8004efc <UART_SetConfig+0x2ec>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004daa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dac:	d013      	beq.n	8004dd6 <UART_SetConfig+0x1c6>
 8004dae:	2bc0      	cmp	r3, #192	; 0xc0
 8004db0:	d814      	bhi.n	8004ddc <UART_SetConfig+0x1cc>
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d009      	beq.n	8004dca <UART_SetConfig+0x1ba>
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d810      	bhi.n	8004ddc <UART_SetConfig+0x1cc>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <UART_SetConfig+0x1b4>
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d006      	beq.n	8004dd0 <UART_SetConfig+0x1c0>
 8004dc2:	e00b      	b.n	8004ddc <UART_SetConfig+0x1cc>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e063      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	76fb      	strb	r3, [r7, #27]
 8004dce:	e060      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	76fb      	strb	r3, [r7, #27]
 8004dd4:	e05d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	76fb      	strb	r3, [r7, #27]
 8004dda:	e05a      	b.n	8004e92 <UART_SetConfig+0x282>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	76fb      	strb	r3, [r7, #27]
 8004de0:	e057      	b.n	8004e92 <UART_SetConfig+0x282>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a49      	ldr	r2, [pc, #292]	; (8004f0c <UART_SetConfig+0x2fc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d125      	bne.n	8004e38 <UART_SetConfig+0x228>
 8004dec:	4b43      	ldr	r3, [pc, #268]	; (8004efc <UART_SetConfig+0x2ec>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfa:	d017      	beq.n	8004e2c <UART_SetConfig+0x21c>
 8004dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e00:	d817      	bhi.n	8004e32 <UART_SetConfig+0x222>
 8004e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e06:	d00b      	beq.n	8004e20 <UART_SetConfig+0x210>
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0c:	d811      	bhi.n	8004e32 <UART_SetConfig+0x222>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <UART_SetConfig+0x20a>
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e16:	d006      	beq.n	8004e26 <UART_SetConfig+0x216>
 8004e18:	e00b      	b.n	8004e32 <UART_SetConfig+0x222>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e038      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e20:	2302      	movs	r3, #2
 8004e22:	76fb      	strb	r3, [r7, #27]
 8004e24:	e035      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e26:	2304      	movs	r3, #4
 8004e28:	76fb      	strb	r3, [r7, #27]
 8004e2a:	e032      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	76fb      	strb	r3, [r7, #27]
 8004e30:	e02f      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e32:	2310      	movs	r3, #16
 8004e34:	76fb      	strb	r3, [r7, #27]
 8004e36:	e02c      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d125      	bne.n	8004e8e <UART_SetConfig+0x27e>
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <UART_SetConfig+0x2ec>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e50:	d017      	beq.n	8004e82 <UART_SetConfig+0x272>
 8004e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e56:	d817      	bhi.n	8004e88 <UART_SetConfig+0x278>
 8004e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5c:	d00b      	beq.n	8004e76 <UART_SetConfig+0x266>
 8004e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e62:	d811      	bhi.n	8004e88 <UART_SetConfig+0x278>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <UART_SetConfig+0x260>
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d006      	beq.n	8004e7c <UART_SetConfig+0x26c>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x278>
 8004e70:	2300      	movs	r3, #0
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e00d      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e76:	2302      	movs	r3, #2
 8004e78:	76fb      	strb	r3, [r7, #27]
 8004e7a:	e00a      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	e007      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e82:	2308      	movs	r3, #8
 8004e84:	76fb      	strb	r3, [r7, #27]
 8004e86:	e004      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	76fb      	strb	r3, [r7, #27]
 8004e8c:	e001      	b.n	8004e92 <UART_SetConfig+0x282>
 8004e8e:	2310      	movs	r3, #16
 8004e90:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <UART_SetConfig+0x2e4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f040 8087 	bne.w	8004fac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9e:	7efb      	ldrb	r3, [r7, #27]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d837      	bhi.n	8004f14 <UART_SetConfig+0x304>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0x29c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ed1 	.word	0x08004ed1
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004edf 	.word	0x08004edf
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004f15 	.word	0x08004f15
 8004ecc:	08004ee7 	.word	0x08004ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed0:	f7fe fd88 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8004ed4:	6178      	str	r0, [r7, #20]
        break;
 8004ed6:	e022      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <UART_SetConfig+0x300>)
 8004eda:	617b      	str	r3, [r7, #20]
        break;
 8004edc:	e01f      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7fe fce9 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8004ee2:	6178      	str	r0, [r7, #20]
        break;
 8004ee4:	e01b      	b.n	8004f1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	617b      	str	r3, [r7, #20]
        break;
 8004eec:	e017      	b.n	8004f1e <UART_SetConfig+0x30e>
 8004eee:	bf00      	nop
 8004ef0:	efff69f3 	.word	0xefff69f3
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
 8004f10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	76bb      	strb	r3, [r7, #26]
        break;
 8004f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80f1 	beq.w	8005108 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d305      	bcc.n	8004f42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d902      	bls.n	8004f48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	76bb      	strb	r3, [r7, #26]
 8004f46:	e0df      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	020b      	lsls	r3, r1, #8
 8004f5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f5e:	0202      	lsls	r2, r0, #8
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	6849      	ldr	r1, [r1, #4]
 8004f64:	0849      	lsrs	r1, r1, #1
 8004f66:	4608      	mov	r0, r1
 8004f68:	f04f 0100 	mov.w	r1, #0
 8004f6c:	1814      	adds	r4, r2, r0
 8004f6e:	eb43 0501 	adc.w	r5, r3, r1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb fdde 	bl	8000b40 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f92:	d308      	bcc.n	8004fa6 <UART_SetConfig+0x396>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d204      	bcs.n	8004fa6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e0b0      	b.n	8005108 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	76bb      	strb	r3, [r7, #26]
 8004faa:	e0ad      	b.n	8005108 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb4:	d15b      	bne.n	800506e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004fb6:	7efb      	ldrb	r3, [r7, #27]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d828      	bhi.n	800500e <UART_SetConfig+0x3fe>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x3b4>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	0800500f 	.word	0x0800500f
 8004fd4:	08004fff 	.word	0x08004fff
 8004fd8:	0800500f 	.word	0x0800500f
 8004fdc:	0800500f 	.word	0x0800500f
 8004fe0:	0800500f 	.word	0x0800500f
 8004fe4:	08005007 	.word	0x08005007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fcfc 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8004fec:	6178      	str	r0, [r7, #20]
        break;
 8004fee:	e013      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fd0e 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 8004ff4:	6178      	str	r0, [r7, #20]
        break;
 8004ff6:	e00f      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <UART_SetConfig+0x510>)
 8004ffa:	617b      	str	r3, [r7, #20]
        break;
 8004ffc:	e00c      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffe:	f7fe fc59 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8005002:	6178      	str	r0, [r7, #20]
        break;
 8005004:	e008      	b.n	8005018 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	617b      	str	r3, [r7, #20]
        break;
 800500c:	e004      	b.n	8005018 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	76bb      	strb	r3, [r7, #26]
        break;
 8005016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d074      	beq.n	8005108 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005a      	lsls	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d916      	bls.n	8005068 <UART_SetConfig+0x458>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d212      	bcs.n	8005068 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f023 030f 	bic.w	r3, r3, #15
 800504a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	b29b      	uxth	r3, r3
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	b29a      	uxth	r2, r3
 8005058:	89fb      	ldrh	r3, [r7, #14]
 800505a:	4313      	orrs	r3, r2
 800505c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	89fa      	ldrh	r2, [r7, #14]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	e04f      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	76bb      	strb	r3, [r7, #26]
 800506c:	e04c      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800506e:	7efb      	ldrb	r3, [r7, #27]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d828      	bhi.n	80050c6 <UART_SetConfig+0x4b6>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x46c>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050b7 	.word	0x080050b7
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050c7 	.word	0x080050c7
 800509c:	080050bf 	.word	0x080050bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe fca0 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 80050a4:	6178      	str	r0, [r7, #20]
        break;
 80050a6:	e013      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe fcb2 	bl	8003a10 <HAL_RCC_GetPCLK2Freq>
 80050ac:	6178      	str	r0, [r7, #20]
        break;
 80050ae:	e00f      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <UART_SetConfig+0x510>)
 80050b2:	617b      	str	r3, [r7, #20]
        break;
 80050b4:	e00c      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe fbfd 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80050ba:	6178      	str	r0, [r7, #20]
        break;
 80050bc:	e008      	b.n	80050d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e004      	b.n	80050d0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	76bb      	strb	r3, [r7, #26]
        break;
 80050ce:	bf00      	nop
    }

    if (pclk != 0U)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085a      	lsrs	r2, r3, #1
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d909      	bls.n	8005104 <UART_SetConfig+0x4f4>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d205      	bcs.n	8005104 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60da      	str	r2, [r3, #12]
 8005102:	e001      	b.n	8005108 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005114:	7ebb      	ldrb	r3, [r7, #26]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bdb0      	pop	{r4, r5, r7, pc}
 800511e:	bf00      	nop
 8005120:	00f42400 	.word	0x00f42400

08005124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005222:	d10a      	bne.n	800523a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	605a      	str	r2, [r3, #4]
  }
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005278:	f7fc fc8e 	bl	8001b98 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10e      	bne.n	80052aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f82d 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e023      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f817 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00d      	b.n	80052f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b09c      	sub	sp, #112	; 0x70
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e0a5      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	f000 80a1 	beq.w	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc fc3f 	bl	8001b98 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
 8005326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005328:	2b00      	cmp	r3, #0
 800532a:	d13e      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	667b      	str	r3, [r7, #100]	; 0x64
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	663b      	str	r3, [r7, #96]	; 0x60
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e067      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d04f      	beq.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c6:	d147      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	66bb      	str	r3, [r7, #104]	; 0x68
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005424:	623a      	str	r2, [r7, #32]
 8005426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69f9      	ldr	r1, [r7, #28]
 800542a:	6a3a      	ldr	r2, [r7, #32]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	61bb      	str	r3, [r7, #24]
   return(result);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e010      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	429a      	cmp	r2, r3
 8005474:	f43f af4a 	beq.w	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3770      	adds	r7, #112	; 0x70
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <__errno>:
 8005484:	4b01      	ldr	r3, [pc, #4]	; (800548c <__errno+0x8>)
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	2000000c 	.word	0x2000000c

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	; (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	; (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	; (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 ffd6 	bl	8006454 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08006538 	.word	0x08006538
 80054cc:	08006538 	.word	0x08006538
 80054d0:	08006538 	.word	0x08006538
 80054d4:	0800653c 	.word	0x0800653c

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <pow>:
 80054e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ec:	ec59 8b10 	vmov	r8, r9, d0
 80054f0:	ec57 6b11 	vmov	r6, r7, d1
 80054f4:	f000 f8a8 	bl	8005648 <__ieee754_pow>
 80054f8:	4b4e      	ldr	r3, [pc, #312]	; (8005634 <pow+0x14c>)
 80054fa:	f993 3000 	ldrsb.w	r3, [r3]
 80054fe:	3301      	adds	r3, #1
 8005500:	ec55 4b10 	vmov	r4, r5, d0
 8005504:	d015      	beq.n	8005532 <pow+0x4a>
 8005506:	4632      	mov	r2, r6
 8005508:	463b      	mov	r3, r7
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fb fab1 	bl	8000a74 <__aeabi_dcmpun>
 8005512:	b970      	cbnz	r0, 8005532 <pow+0x4a>
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fb faaa 	bl	8000a74 <__aeabi_dcmpun>
 8005520:	2200      	movs	r2, #0
 8005522:	2300      	movs	r3, #0
 8005524:	b148      	cbz	r0, 800553a <pow+0x52>
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fb fa71 	bl	8000a10 <__aeabi_dcmpeq>
 800552e:	2800      	cmp	r0, #0
 8005530:	d17d      	bne.n	800562e <pow+0x146>
 8005532:	ec45 4b10 	vmov	d0, r4, r5
 8005536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb fa67 	bl	8000a10 <__aeabi_dcmpeq>
 8005542:	b1e0      	cbz	r0, 800557e <pow+0x96>
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb fa60 	bl	8000a10 <__aeabi_dcmpeq>
 8005550:	2800      	cmp	r0, #0
 8005552:	d16c      	bne.n	800562e <pow+0x146>
 8005554:	ec47 6b10 	vmov	d0, r6, r7
 8005558:	f000 fe55 	bl	8006206 <finite>
 800555c:	2800      	cmp	r0, #0
 800555e:	d0e8      	beq.n	8005532 <pow+0x4a>
 8005560:	2200      	movs	r2, #0
 8005562:	2300      	movs	r3, #0
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fb fa5c 	bl	8000a24 <__aeabi_dcmplt>
 800556c:	2800      	cmp	r0, #0
 800556e:	d0e0      	beq.n	8005532 <pow+0x4a>
 8005570:	f7ff ff88 	bl	8005484 <__errno>
 8005574:	2321      	movs	r3, #33	; 0x21
 8005576:	6003      	str	r3, [r0, #0]
 8005578:	2400      	movs	r4, #0
 800557a:	4d2f      	ldr	r5, [pc, #188]	; (8005638 <pow+0x150>)
 800557c:	e7d9      	b.n	8005532 <pow+0x4a>
 800557e:	ec45 4b10 	vmov	d0, r4, r5
 8005582:	f000 fe40 	bl	8006206 <finite>
 8005586:	bbb8      	cbnz	r0, 80055f8 <pow+0x110>
 8005588:	ec49 8b10 	vmov	d0, r8, r9
 800558c:	f000 fe3b 	bl	8006206 <finite>
 8005590:	b390      	cbz	r0, 80055f8 <pow+0x110>
 8005592:	ec47 6b10 	vmov	d0, r6, r7
 8005596:	f000 fe36 	bl	8006206 <finite>
 800559a:	b368      	cbz	r0, 80055f8 <pow+0x110>
 800559c:	4622      	mov	r2, r4
 800559e:	462b      	mov	r3, r5
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fb fa66 	bl	8000a74 <__aeabi_dcmpun>
 80055a8:	b160      	cbz	r0, 80055c4 <pow+0xdc>
 80055aa:	f7ff ff6b 	bl	8005484 <__errno>
 80055ae:	2321      	movs	r3, #33	; 0x21
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2300      	movs	r3, #0
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7fb f8eb 	bl	8000794 <__aeabi_ddiv>
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	e7b6      	b.n	8005532 <pow+0x4a>
 80055c4:	f7ff ff5e 	bl	8005484 <__errno>
 80055c8:	2322      	movs	r3, #34	; 0x22
 80055ca:	6003      	str	r3, [r0, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fa26 	bl	8000a24 <__aeabi_dcmplt>
 80055d8:	2400      	movs	r4, #0
 80055da:	b158      	cbz	r0, 80055f4 <pow+0x10c>
 80055dc:	ec47 6b10 	vmov	d0, r6, r7
 80055e0:	f000 fe26 	bl	8006230 <rint>
 80055e4:	4632      	mov	r2, r6
 80055e6:	ec51 0b10 	vmov	r0, r1, d0
 80055ea:	463b      	mov	r3, r7
 80055ec:	f7fb fa10 	bl	8000a10 <__aeabi_dcmpeq>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d0c2      	beq.n	800557a <pow+0x92>
 80055f4:	4d11      	ldr	r5, [pc, #68]	; (800563c <pow+0x154>)
 80055f6:	e79c      	b.n	8005532 <pow+0x4a>
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fb fa06 	bl	8000a10 <__aeabi_dcmpeq>
 8005604:	2800      	cmp	r0, #0
 8005606:	d094      	beq.n	8005532 <pow+0x4a>
 8005608:	ec49 8b10 	vmov	d0, r8, r9
 800560c:	f000 fdfb 	bl	8006206 <finite>
 8005610:	2800      	cmp	r0, #0
 8005612:	d08e      	beq.n	8005532 <pow+0x4a>
 8005614:	ec47 6b10 	vmov	d0, r6, r7
 8005618:	f000 fdf5 	bl	8006206 <finite>
 800561c:	2800      	cmp	r0, #0
 800561e:	d088      	beq.n	8005532 <pow+0x4a>
 8005620:	f7ff ff30 	bl	8005484 <__errno>
 8005624:	2322      	movs	r3, #34	; 0x22
 8005626:	6003      	str	r3, [r0, #0]
 8005628:	2400      	movs	r4, #0
 800562a:	2500      	movs	r5, #0
 800562c:	e781      	b.n	8005532 <pow+0x4a>
 800562e:	4d04      	ldr	r5, [pc, #16]	; (8005640 <pow+0x158>)
 8005630:	2400      	movs	r4, #0
 8005632:	e77e      	b.n	8005532 <pow+0x4a>
 8005634:	20000070 	.word	0x20000070
 8005638:	fff00000 	.word	0xfff00000
 800563c:	7ff00000 	.word	0x7ff00000
 8005640:	3ff00000 	.word	0x3ff00000
 8005644:	00000000 	.word	0x00000000

08005648 <__ieee754_pow>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	ed2d 8b06 	vpush	{d8-d10}
 8005650:	b08d      	sub	sp, #52	; 0x34
 8005652:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005656:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800565a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800565e:	ea56 0100 	orrs.w	r1, r6, r0
 8005662:	ec53 2b10 	vmov	r2, r3, d0
 8005666:	f000 84d1 	beq.w	800600c <__ieee754_pow+0x9c4>
 800566a:	497f      	ldr	r1, [pc, #508]	; (8005868 <__ieee754_pow+0x220>)
 800566c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005670:	428c      	cmp	r4, r1
 8005672:	ee10 8a10 	vmov	r8, s0
 8005676:	4699      	mov	r9, r3
 8005678:	dc09      	bgt.n	800568e <__ieee754_pow+0x46>
 800567a:	d103      	bne.n	8005684 <__ieee754_pow+0x3c>
 800567c:	b97a      	cbnz	r2, 800569e <__ieee754_pow+0x56>
 800567e:	42a6      	cmp	r6, r4
 8005680:	dd02      	ble.n	8005688 <__ieee754_pow+0x40>
 8005682:	e00c      	b.n	800569e <__ieee754_pow+0x56>
 8005684:	428e      	cmp	r6, r1
 8005686:	dc02      	bgt.n	800568e <__ieee754_pow+0x46>
 8005688:	428e      	cmp	r6, r1
 800568a:	d110      	bne.n	80056ae <__ieee754_pow+0x66>
 800568c:	b178      	cbz	r0, 80056ae <__ieee754_pow+0x66>
 800568e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005692:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005696:	ea54 0308 	orrs.w	r3, r4, r8
 800569a:	f000 84b7 	beq.w	800600c <__ieee754_pow+0x9c4>
 800569e:	4873      	ldr	r0, [pc, #460]	; (800586c <__ieee754_pow+0x224>)
 80056a0:	b00d      	add	sp, #52	; 0x34
 80056a2:	ecbd 8b06 	vpop	{d8-d10}
 80056a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	f000 bdb9 	b.w	8006220 <nan>
 80056ae:	f1b9 0f00 	cmp.w	r9, #0
 80056b2:	da36      	bge.n	8005722 <__ieee754_pow+0xda>
 80056b4:	496e      	ldr	r1, [pc, #440]	; (8005870 <__ieee754_pow+0x228>)
 80056b6:	428e      	cmp	r6, r1
 80056b8:	dc51      	bgt.n	800575e <__ieee754_pow+0x116>
 80056ba:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80056be:	428e      	cmp	r6, r1
 80056c0:	f340 84af 	ble.w	8006022 <__ieee754_pow+0x9da>
 80056c4:	1531      	asrs	r1, r6, #20
 80056c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80056ca:	2914      	cmp	r1, #20
 80056cc:	dd0f      	ble.n	80056ee <__ieee754_pow+0xa6>
 80056ce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80056d2:	fa20 fc01 	lsr.w	ip, r0, r1
 80056d6:	fa0c f101 	lsl.w	r1, ip, r1
 80056da:	4281      	cmp	r1, r0
 80056dc:	f040 84a1 	bne.w	8006022 <__ieee754_pow+0x9da>
 80056e0:	f00c 0c01 	and.w	ip, ip, #1
 80056e4:	f1cc 0102 	rsb	r1, ip, #2
 80056e8:	9100      	str	r1, [sp, #0]
 80056ea:	b180      	cbz	r0, 800570e <__ieee754_pow+0xc6>
 80056ec:	e059      	b.n	80057a2 <__ieee754_pow+0x15a>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d155      	bne.n	800579e <__ieee754_pow+0x156>
 80056f2:	f1c1 0114 	rsb	r1, r1, #20
 80056f6:	fa46 fc01 	asr.w	ip, r6, r1
 80056fa:	fa0c f101 	lsl.w	r1, ip, r1
 80056fe:	42b1      	cmp	r1, r6
 8005700:	f040 848c 	bne.w	800601c <__ieee754_pow+0x9d4>
 8005704:	f00c 0c01 	and.w	ip, ip, #1
 8005708:	f1cc 0102 	rsb	r1, ip, #2
 800570c:	9100      	str	r1, [sp, #0]
 800570e:	4959      	ldr	r1, [pc, #356]	; (8005874 <__ieee754_pow+0x22c>)
 8005710:	428e      	cmp	r6, r1
 8005712:	d12d      	bne.n	8005770 <__ieee754_pow+0x128>
 8005714:	2f00      	cmp	r7, #0
 8005716:	da79      	bge.n	800580c <__ieee754_pow+0x1c4>
 8005718:	4956      	ldr	r1, [pc, #344]	; (8005874 <__ieee754_pow+0x22c>)
 800571a:	2000      	movs	r0, #0
 800571c:	f7fb f83a 	bl	8000794 <__aeabi_ddiv>
 8005720:	e016      	b.n	8005750 <__ieee754_pow+0x108>
 8005722:	2100      	movs	r1, #0
 8005724:	9100      	str	r1, [sp, #0]
 8005726:	2800      	cmp	r0, #0
 8005728:	d13b      	bne.n	80057a2 <__ieee754_pow+0x15a>
 800572a:	494f      	ldr	r1, [pc, #316]	; (8005868 <__ieee754_pow+0x220>)
 800572c:	428e      	cmp	r6, r1
 800572e:	d1ee      	bne.n	800570e <__ieee754_pow+0xc6>
 8005730:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005734:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005738:	ea53 0308 	orrs.w	r3, r3, r8
 800573c:	f000 8466 	beq.w	800600c <__ieee754_pow+0x9c4>
 8005740:	4b4d      	ldr	r3, [pc, #308]	; (8005878 <__ieee754_pow+0x230>)
 8005742:	429c      	cmp	r4, r3
 8005744:	dd0d      	ble.n	8005762 <__ieee754_pow+0x11a>
 8005746:	2f00      	cmp	r7, #0
 8005748:	f280 8464 	bge.w	8006014 <__ieee754_pow+0x9cc>
 800574c:	2000      	movs	r0, #0
 800574e:	2100      	movs	r1, #0
 8005750:	ec41 0b10 	vmov	d0, r0, r1
 8005754:	b00d      	add	sp, #52	; 0x34
 8005756:	ecbd 8b06 	vpop	{d8-d10}
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	2102      	movs	r1, #2
 8005760:	e7e0      	b.n	8005724 <__ieee754_pow+0xdc>
 8005762:	2f00      	cmp	r7, #0
 8005764:	daf2      	bge.n	800574c <__ieee754_pow+0x104>
 8005766:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800576a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800576e:	e7ef      	b.n	8005750 <__ieee754_pow+0x108>
 8005770:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005774:	d104      	bne.n	8005780 <__ieee754_pow+0x138>
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	f7fa fee1 	bl	8000540 <__aeabi_dmul>
 800577e:	e7e7      	b.n	8005750 <__ieee754_pow+0x108>
 8005780:	493e      	ldr	r1, [pc, #248]	; (800587c <__ieee754_pow+0x234>)
 8005782:	428f      	cmp	r7, r1
 8005784:	d10d      	bne.n	80057a2 <__ieee754_pow+0x15a>
 8005786:	f1b9 0f00 	cmp.w	r9, #0
 800578a:	db0a      	blt.n	80057a2 <__ieee754_pow+0x15a>
 800578c:	ec43 2b10 	vmov	d0, r2, r3
 8005790:	b00d      	add	sp, #52	; 0x34
 8005792:	ecbd 8b06 	vpop	{d8-d10}
 8005796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	f000 bc77 	b.w	800608c <__ieee754_sqrt>
 800579e:	2100      	movs	r1, #0
 80057a0:	9100      	str	r1, [sp, #0]
 80057a2:	ec43 2b10 	vmov	d0, r2, r3
 80057a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057aa:	f000 fd23 	bl	80061f4 <fabs>
 80057ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b2:	ec51 0b10 	vmov	r0, r1, d0
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	d12a      	bne.n	8005812 <__ieee754_pow+0x1ca>
 80057bc:	b12c      	cbz	r4, 80057ca <__ieee754_pow+0x182>
 80057be:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005874 <__ieee754_pow+0x22c>
 80057c2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80057c6:	45e6      	cmp	lr, ip
 80057c8:	d123      	bne.n	8005812 <__ieee754_pow+0x1ca>
 80057ca:	2f00      	cmp	r7, #0
 80057cc:	da05      	bge.n	80057da <__ieee754_pow+0x192>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	2000      	movs	r0, #0
 80057d4:	4927      	ldr	r1, [pc, #156]	; (8005874 <__ieee754_pow+0x22c>)
 80057d6:	f7fa ffdd 	bl	8000794 <__aeabi_ddiv>
 80057da:	f1b9 0f00 	cmp.w	r9, #0
 80057de:	dab7      	bge.n	8005750 <__ieee754_pow+0x108>
 80057e0:	9b00      	ldr	r3, [sp, #0]
 80057e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80057e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80057ea:	4323      	orrs	r3, r4
 80057ec:	d108      	bne.n	8005800 <__ieee754_pow+0x1b8>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fa fceb 	bl	80001d0 <__aeabi_dsub>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	e78d      	b.n	800571c <__ieee754_pow+0xd4>
 8005800:	9b00      	ldr	r3, [sp, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d1a4      	bne.n	8005750 <__ieee754_pow+0x108>
 8005806:	4602      	mov	r2, r0
 8005808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	e79e      	b.n	8005750 <__ieee754_pow+0x108>
 8005812:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005816:	f10c 35ff 	add.w	r5, ip, #4294967295
 800581a:	950a      	str	r5, [sp, #40]	; 0x28
 800581c:	9d00      	ldr	r5, [sp, #0]
 800581e:	46ac      	mov	ip, r5
 8005820:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005822:	ea5c 0505 	orrs.w	r5, ip, r5
 8005826:	d0e4      	beq.n	80057f2 <__ieee754_pow+0x1aa>
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <__ieee754_pow+0x238>)
 800582a:	429e      	cmp	r6, r3
 800582c:	f340 80fc 	ble.w	8005a28 <__ieee754_pow+0x3e0>
 8005830:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005834:	429e      	cmp	r6, r3
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <__ieee754_pow+0x230>)
 8005838:	dd07      	ble.n	800584a <__ieee754_pow+0x202>
 800583a:	429c      	cmp	r4, r3
 800583c:	dc0a      	bgt.n	8005854 <__ieee754_pow+0x20c>
 800583e:	2f00      	cmp	r7, #0
 8005840:	da84      	bge.n	800574c <__ieee754_pow+0x104>
 8005842:	a307      	add	r3, pc, #28	; (adr r3, 8005860 <__ieee754_pow+0x218>)
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	e795      	b.n	8005776 <__ieee754_pow+0x12e>
 800584a:	429c      	cmp	r4, r3
 800584c:	dbf7      	blt.n	800583e <__ieee754_pow+0x1f6>
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <__ieee754_pow+0x22c>)
 8005850:	429c      	cmp	r4, r3
 8005852:	dd17      	ble.n	8005884 <__ieee754_pow+0x23c>
 8005854:	2f00      	cmp	r7, #0
 8005856:	dcf4      	bgt.n	8005842 <__ieee754_pow+0x1fa>
 8005858:	e778      	b.n	800574c <__ieee754_pow+0x104>
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w
 8005860:	8800759c 	.word	0x8800759c
 8005864:	7e37e43c 	.word	0x7e37e43c
 8005868:	7ff00000 	.word	0x7ff00000
 800586c:	080064e8 	.word	0x080064e8
 8005870:	433fffff 	.word	0x433fffff
 8005874:	3ff00000 	.word	0x3ff00000
 8005878:	3fefffff 	.word	0x3fefffff
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	41e00000 	.word	0x41e00000
 8005884:	4b64      	ldr	r3, [pc, #400]	; (8005a18 <__ieee754_pow+0x3d0>)
 8005886:	2200      	movs	r2, #0
 8005888:	f7fa fca2 	bl	80001d0 <__aeabi_dsub>
 800588c:	a356      	add	r3, pc, #344	; (adr r3, 80059e8 <__ieee754_pow+0x3a0>)
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	4604      	mov	r4, r0
 8005894:	460d      	mov	r5, r1
 8005896:	f7fa fe53 	bl	8000540 <__aeabi_dmul>
 800589a:	a355      	add	r3, pc, #340	; (adr r3, 80059f0 <__ieee754_pow+0x3a8>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	4620      	mov	r0, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	f7fa fe4a 	bl	8000540 <__aeabi_dmul>
 80058ac:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <__ieee754_pow+0x3d4>)
 80058ae:	4682      	mov	sl, r0
 80058b0:	468b      	mov	fp, r1
 80058b2:	2200      	movs	r2, #0
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fe42 	bl	8000540 <__aeabi_dmul>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	a14d      	add	r1, pc, #308	; (adr r1, 80059f8 <__ieee754_pow+0x3b0>)
 80058c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c6:	f7fa fc83 	bl	80001d0 <__aeabi_dsub>
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	f7fa fe37 	bl	8000540 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	2000      	movs	r0, #0
 80058d8:	4951      	ldr	r1, [pc, #324]	; (8005a20 <__ieee754_pow+0x3d8>)
 80058da:	f7fa fc79 	bl	80001d0 <__aeabi_dsub>
 80058de:	4622      	mov	r2, r4
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	462b      	mov	r3, r5
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fe29 	bl	8000540 <__aeabi_dmul>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fa fe23 	bl	8000540 <__aeabi_dmul>
 80058fa:	a341      	add	r3, pc, #260	; (adr r3, 8005a00 <__ieee754_pow+0x3b8>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f7fa fe1e 	bl	8000540 <__aeabi_dmul>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4650      	mov	r0, sl
 800590a:	4659      	mov	r1, fp
 800590c:	f7fa fc60 	bl	80001d0 <__aeabi_dsub>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4680      	mov	r8, r0
 8005916:	4689      	mov	r9, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fc5a 	bl	80001d4 <__adddf3>
 8005920:	2400      	movs	r4, #0
 8005922:	4632      	mov	r2, r6
 8005924:	463b      	mov	r3, r7
 8005926:	4620      	mov	r0, r4
 8005928:	460d      	mov	r5, r1
 800592a:	f7fa fc51 	bl	80001d0 <__aeabi_dsub>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4640      	mov	r0, r8
 8005934:	4649      	mov	r1, r9
 8005936:	f7fa fc4b 	bl	80001d0 <__aeabi_dsub>
 800593a:	9b00      	ldr	r3, [sp, #0]
 800593c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	4313      	orrs	r3, r2
 8005942:	4682      	mov	sl, r0
 8005944:	468b      	mov	fp, r1
 8005946:	f040 81f1 	bne.w	8005d2c <__ieee754_pow+0x6e4>
 800594a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005a08 <__ieee754_pow+0x3c0>
 800594e:	eeb0 8a47 	vmov.f32	s16, s14
 8005952:	eef0 8a67 	vmov.f32	s17, s15
 8005956:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800595a:	2600      	movs	r6, #0
 800595c:	4632      	mov	r2, r6
 800595e:	463b      	mov	r3, r7
 8005960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005964:	f7fa fc34 	bl	80001d0 <__aeabi_dsub>
 8005968:	4622      	mov	r2, r4
 800596a:	462b      	mov	r3, r5
 800596c:	f7fa fde8 	bl	8000540 <__aeabi_dmul>
 8005970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	4650      	mov	r0, sl
 800597a:	4659      	mov	r1, fp
 800597c:	f7fa fde0 	bl	8000540 <__aeabi_dmul>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fa fc24 	bl	80001d4 <__adddf3>
 800598c:	4632      	mov	r2, r6
 800598e:	463b      	mov	r3, r7
 8005990:	4680      	mov	r8, r0
 8005992:	4689      	mov	r9, r1
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fdd2 	bl	8000540 <__aeabi_dmul>
 800599c:	460b      	mov	r3, r1
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	4602      	mov	r2, r0
 80059a4:	4649      	mov	r1, r9
 80059a6:	4640      	mov	r0, r8
 80059a8:	f7fa fc14 	bl	80001d4 <__adddf3>
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <__ieee754_pow+0x3dc>)
 80059ae:	4299      	cmp	r1, r3
 80059b0:	ec45 4b19 	vmov	d9, r4, r5
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	468b      	mov	fp, r1
 80059ba:	f340 82fe 	ble.w	8005fba <__ieee754_pow+0x972>
 80059be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80059c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80059c6:	4303      	orrs	r3, r0
 80059c8:	f000 81f0 	beq.w	8005dac <__ieee754_pow+0x764>
 80059cc:	a310      	add	r3, pc, #64	; (adr r3, 8005a10 <__ieee754_pow+0x3c8>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	ec51 0b18 	vmov	r0, r1, d8
 80059d6:	f7fa fdb3 	bl	8000540 <__aeabi_dmul>
 80059da:	a30d      	add	r3, pc, #52	; (adr r3, 8005a10 <__ieee754_pow+0x3c8>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	e6cb      	b.n	800577a <__ieee754_pow+0x132>
 80059e2:	bf00      	nop
 80059e4:	f3af 8000 	nop.w
 80059e8:	60000000 	.word	0x60000000
 80059ec:	3ff71547 	.word	0x3ff71547
 80059f0:	f85ddf44 	.word	0xf85ddf44
 80059f4:	3e54ae0b 	.word	0x3e54ae0b
 80059f8:	55555555 	.word	0x55555555
 80059fc:	3fd55555 	.word	0x3fd55555
 8005a00:	652b82fe 	.word	0x652b82fe
 8005a04:	3ff71547 	.word	0x3ff71547
 8005a08:	00000000 	.word	0x00000000
 8005a0c:	bff00000 	.word	0xbff00000
 8005a10:	8800759c 	.word	0x8800759c
 8005a14:	7e37e43c 	.word	0x7e37e43c
 8005a18:	3ff00000 	.word	0x3ff00000
 8005a1c:	3fd00000 	.word	0x3fd00000
 8005a20:	3fe00000 	.word	0x3fe00000
 8005a24:	408fffff 	.word	0x408fffff
 8005a28:	4bd7      	ldr	r3, [pc, #860]	; (8005d88 <__ieee754_pow+0x740>)
 8005a2a:	ea03 0309 	and.w	r3, r3, r9
 8005a2e:	2200      	movs	r2, #0
 8005a30:	b92b      	cbnz	r3, 8005a3e <__ieee754_pow+0x3f6>
 8005a32:	4bd6      	ldr	r3, [pc, #856]	; (8005d8c <__ieee754_pow+0x744>)
 8005a34:	f7fa fd84 	bl	8000540 <__aeabi_dmul>
 8005a38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	1523      	asrs	r3, r4, #20
 8005a40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a44:	4413      	add	r3, r2
 8005a46:	9309      	str	r3, [sp, #36]	; 0x24
 8005a48:	4bd1      	ldr	r3, [pc, #836]	; (8005d90 <__ieee754_pow+0x748>)
 8005a4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005a52:	429c      	cmp	r4, r3
 8005a54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005a58:	dd08      	ble.n	8005a6c <__ieee754_pow+0x424>
 8005a5a:	4bce      	ldr	r3, [pc, #824]	; (8005d94 <__ieee754_pow+0x74c>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	f340 8163 	ble.w	8005d28 <__ieee754_pow+0x6e0>
 8005a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a64:	3301      	adds	r3, #1
 8005a66:	9309      	str	r3, [sp, #36]	; 0x24
 8005a68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005a6c:	2400      	movs	r4, #0
 8005a6e:	00e3      	lsls	r3, r4, #3
 8005a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a72:	4bc9      	ldr	r3, [pc, #804]	; (8005d98 <__ieee754_pow+0x750>)
 8005a74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a78:	ed93 7b00 	vldr	d7, [r3]
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	ec53 2b17 	vmov	r2, r3, d7
 8005a82:	eeb0 8a47 	vmov.f32	s16, s14
 8005a86:	eef0 8a67 	vmov.f32	s17, s15
 8005a8a:	4682      	mov	sl, r0
 8005a8c:	f7fa fba0 	bl	80001d0 <__aeabi_dsub>
 8005a90:	4652      	mov	r2, sl
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	462b      	mov	r3, r5
 8005a98:	ec51 0b18 	vmov	r0, r1, d8
 8005a9c:	f7fa fb9a 	bl	80001d4 <__adddf3>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	49bd      	ldr	r1, [pc, #756]	; (8005d9c <__ieee754_pow+0x754>)
 8005aa8:	f7fa fe74 	bl	8000794 <__aeabi_ddiv>
 8005aac:	ec41 0b19 	vmov	d9, r0, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f7fa fd42 	bl	8000540 <__aeabi_dmul>
 8005abc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ac0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9304      	str	r3, [sp, #16]
 8005acc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ad0:	46ab      	mov	fp, r5
 8005ad2:	106d      	asrs	r5, r5, #1
 8005ad4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005ad8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005adc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	461d      	mov	r5, r3
 8005aea:	f7fa fd29 	bl	8000540 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4630      	mov	r0, r6
 8005af4:	4639      	mov	r1, r7
 8005af6:	f7fa fb6b 	bl	80001d0 <__aeabi_dsub>
 8005afa:	ec53 2b18 	vmov	r2, r3, d8
 8005afe:	4606      	mov	r6, r0
 8005b00:	460f      	mov	r7, r1
 8005b02:	4620      	mov	r0, r4
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7fa fb63 	bl	80001d0 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4650      	mov	r0, sl
 8005b10:	4659      	mov	r1, fp
 8005b12:	f7fa fb5d 	bl	80001d0 <__aeabi_dsub>
 8005b16:	4642      	mov	r2, r8
 8005b18:	464b      	mov	r3, r9
 8005b1a:	f7fa fd11 	bl	8000540 <__aeabi_dmul>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4630      	mov	r0, r6
 8005b24:	4639      	mov	r1, r7
 8005b26:	f7fa fb53 	bl	80001d0 <__aeabi_dsub>
 8005b2a:	ec53 2b19 	vmov	r2, r3, d9
 8005b2e:	f7fa fd07 	bl	8000540 <__aeabi_dmul>
 8005b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b36:	ec41 0b18 	vmov	d8, r0, r1
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f7fa fcff 	bl	8000540 <__aeabi_dmul>
 8005b42:	a37d      	add	r3, pc, #500	; (adr r3, 8005d38 <__ieee754_pow+0x6f0>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	f7fa fcf8 	bl	8000540 <__aeabi_dmul>
 8005b50:	a37b      	add	r3, pc, #492	; (adr r3, 8005d40 <__ieee754_pow+0x6f8>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fb3d 	bl	80001d4 <__adddf3>
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	f7fa fcef 	bl	8000540 <__aeabi_dmul>
 8005b62:	a379      	add	r3, pc, #484	; (adr r3, 8005d48 <__ieee754_pow+0x700>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fb34 	bl	80001d4 <__adddf3>
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	f7fa fce6 	bl	8000540 <__aeabi_dmul>
 8005b74:	a376      	add	r3, pc, #472	; (adr r3, 8005d50 <__ieee754_pow+0x708>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fb2b 	bl	80001d4 <__adddf3>
 8005b7e:	4622      	mov	r2, r4
 8005b80:	462b      	mov	r3, r5
 8005b82:	f7fa fcdd 	bl	8000540 <__aeabi_dmul>
 8005b86:	a374      	add	r3, pc, #464	; (adr r3, 8005d58 <__ieee754_pow+0x710>)
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f7fa fb22 	bl	80001d4 <__adddf3>
 8005b90:	4622      	mov	r2, r4
 8005b92:	462b      	mov	r3, r5
 8005b94:	f7fa fcd4 	bl	8000540 <__aeabi_dmul>
 8005b98:	a371      	add	r3, pc, #452	; (adr r3, 8005d60 <__ieee754_pow+0x718>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fb19 	bl	80001d4 <__adddf3>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	462b      	mov	r3, r5
 8005baa:	4620      	mov	r0, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	f7fa fcc7 	bl	8000540 <__aeabi_dmul>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fcc1 	bl	8000540 <__aeabi_dmul>
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	460d      	mov	r5, r1
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bca:	f7fa fb03 	bl	80001d4 <__adddf3>
 8005bce:	ec53 2b18 	vmov	r2, r3, d8
 8005bd2:	f7fa fcb5 	bl	8000540 <__aeabi_dmul>
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	462b      	mov	r3, r5
 8005bda:	f7fa fafb 	bl	80001d4 <__adddf3>
 8005bde:	4642      	mov	r2, r8
 8005be0:	4682      	mov	sl, r0
 8005be2:	468b      	mov	fp, r1
 8005be4:	464b      	mov	r3, r9
 8005be6:	4640      	mov	r0, r8
 8005be8:	4649      	mov	r1, r9
 8005bea:	f7fa fca9 	bl	8000540 <__aeabi_dmul>
 8005bee:	4b6c      	ldr	r3, [pc, #432]	; (8005da0 <__ieee754_pow+0x758>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	f7fa faed 	bl	80001d4 <__adddf3>
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	465b      	mov	r3, fp
 8005bfe:	f7fa fae9 	bl	80001d4 <__adddf3>
 8005c02:	9c04      	ldr	r4, [sp, #16]
 8005c04:	460d      	mov	r5, r1
 8005c06:	4622      	mov	r2, r4
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa fc97 	bl	8000540 <__aeabi_dmul>
 8005c12:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <__ieee754_pow+0x758>)
 8005c14:	4680      	mov	r8, r0
 8005c16:	4689      	mov	r9, r1
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa fad7 	bl	80001d0 <__aeabi_dsub>
 8005c22:	4632      	mov	r2, r6
 8005c24:	463b      	mov	r3, r7
 8005c26:	f7fa fad3 	bl	80001d0 <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4650      	mov	r0, sl
 8005c30:	4659      	mov	r1, fp
 8005c32:	f7fa facd 	bl	80001d0 <__aeabi_dsub>
 8005c36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c3a:	f7fa fc81 	bl	8000540 <__aeabi_dmul>
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	462b      	mov	r3, r5
 8005c46:	ec51 0b18 	vmov	r0, r1, d8
 8005c4a:	f7fa fc79 	bl	8000540 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fabd 	bl	80001d4 <__adddf3>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4640      	mov	r0, r8
 8005c64:	4649      	mov	r1, r9
 8005c66:	f7fa fab5 	bl	80001d4 <__adddf3>
 8005c6a:	9c04      	ldr	r4, [sp, #16]
 8005c6c:	a33e      	add	r3, pc, #248	; (adr r3, 8005d68 <__ieee754_pow+0x720>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	4620      	mov	r0, r4
 8005c74:	460d      	mov	r5, r1
 8005c76:	f7fa fc63 	bl	8000540 <__aeabi_dmul>
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	ec41 0b18 	vmov	d8, r0, r1
 8005c80:	464b      	mov	r3, r9
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa faa3 	bl	80001d0 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fa9d 	bl	80001d0 <__aeabi_dsub>
 8005c96:	a336      	add	r3, pc, #216	; (adr r3, 8005d70 <__ieee754_pow+0x728>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fc50 	bl	8000540 <__aeabi_dmul>
 8005ca0:	a335      	add	r3, pc, #212	; (adr r3, 8005d78 <__ieee754_pow+0x730>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa fc47 	bl	8000540 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	f7fa fa8b 	bl	80001d4 <__adddf3>
 8005cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <__ieee754_pow+0x75c>)
 8005cc2:	4413      	add	r3, r2
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f7fa fa84 	bl	80001d4 <__adddf3>
 8005ccc:	4682      	mov	sl, r0
 8005cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd0:	468b      	mov	fp, r1
 8005cd2:	f7fa fbcb 	bl	800046c <__aeabi_i2d>
 8005cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cd8:	4b33      	ldr	r3, [pc, #204]	; (8005da8 <__ieee754_pow+0x760>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	465b      	mov	r3, fp
 8005ce8:	ec51 0b18 	vmov	r0, r1, d8
 8005cec:	f7fa fa72 	bl	80001d4 <__adddf3>
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	f7fa fa6e 	bl	80001d4 <__adddf3>
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	f7fa fa6a 	bl	80001d4 <__adddf3>
 8005d00:	9c04      	ldr	r4, [sp, #16]
 8005d02:	4632      	mov	r2, r6
 8005d04:	463b      	mov	r3, r7
 8005d06:	4620      	mov	r0, r4
 8005d08:	460d      	mov	r5, r1
 8005d0a:	f7fa fa61 	bl	80001d0 <__aeabi_dsub>
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	f7fa fa5d 	bl	80001d0 <__aeabi_dsub>
 8005d16:	ec53 2b18 	vmov	r2, r3, d8
 8005d1a:	f7fa fa59 	bl	80001d0 <__aeabi_dsub>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4650      	mov	r0, sl
 8005d24:	4659      	mov	r1, fp
 8005d26:	e606      	b.n	8005936 <__ieee754_pow+0x2ee>
 8005d28:	2401      	movs	r4, #1
 8005d2a:	e6a0      	b.n	8005a6e <__ieee754_pow+0x426>
 8005d2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005d80 <__ieee754_pow+0x738>
 8005d30:	e60d      	b.n	800594e <__ieee754_pow+0x306>
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	4a454eef 	.word	0x4a454eef
 8005d3c:	3fca7e28 	.word	0x3fca7e28
 8005d40:	93c9db65 	.word	0x93c9db65
 8005d44:	3fcd864a 	.word	0x3fcd864a
 8005d48:	a91d4101 	.word	0xa91d4101
 8005d4c:	3fd17460 	.word	0x3fd17460
 8005d50:	518f264d 	.word	0x518f264d
 8005d54:	3fd55555 	.word	0x3fd55555
 8005d58:	db6fabff 	.word	0xdb6fabff
 8005d5c:	3fdb6db6 	.word	0x3fdb6db6
 8005d60:	33333303 	.word	0x33333303
 8005d64:	3fe33333 	.word	0x3fe33333
 8005d68:	e0000000 	.word	0xe0000000
 8005d6c:	3feec709 	.word	0x3feec709
 8005d70:	dc3a03fd 	.word	0xdc3a03fd
 8005d74:	3feec709 	.word	0x3feec709
 8005d78:	145b01f5 	.word	0x145b01f5
 8005d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8005d80:	00000000 	.word	0x00000000
 8005d84:	3ff00000 	.word	0x3ff00000
 8005d88:	7ff00000 	.word	0x7ff00000
 8005d8c:	43400000 	.word	0x43400000
 8005d90:	0003988e 	.word	0x0003988e
 8005d94:	000bb679 	.word	0x000bb679
 8005d98:	080064f0 	.word	0x080064f0
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	40080000 	.word	0x40080000
 8005da4:	08006510 	.word	0x08006510
 8005da8:	08006500 	.word	0x08006500
 8005dac:	a3b5      	add	r3, pc, #724	; (adr r3, 8006084 <__ieee754_pow+0xa3c>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fa0d 	bl	80001d4 <__adddf3>
 8005dba:	4622      	mov	r2, r4
 8005dbc:	ec41 0b1a 	vmov	d10, r0, r1
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	f7fa fa03 	bl	80001d0 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	ec51 0b1a 	vmov	r0, r1, d10
 8005dd2:	f7fa fe45 	bl	8000a60 <__aeabi_dcmpgt>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	f47f adf8 	bne.w	80059cc <__ieee754_pow+0x384>
 8005ddc:	4aa4      	ldr	r2, [pc, #656]	; (8006070 <__ieee754_pow+0xa28>)
 8005dde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005de2:	4293      	cmp	r3, r2
 8005de4:	f340 810b 	ble.w	8005ffe <__ieee754_pow+0x9b6>
 8005de8:	151b      	asrs	r3, r3, #20
 8005dea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005dee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005df2:	fa4a f303 	asr.w	r3, sl, r3
 8005df6:	445b      	add	r3, fp
 8005df8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005dfc:	4e9d      	ldr	r6, [pc, #628]	; (8006074 <__ieee754_pow+0xa2c>)
 8005dfe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005e02:	4116      	asrs	r6, r2
 8005e04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005e08:	2000      	movs	r0, #0
 8005e0a:	ea23 0106 	bic.w	r1, r3, r6
 8005e0e:	f1c2 0214 	rsb	r2, r2, #20
 8005e12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005e16:	fa4a fa02 	asr.w	sl, sl, r2
 8005e1a:	f1bb 0f00 	cmp.w	fp, #0
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4620      	mov	r0, r4
 8005e24:	4629      	mov	r1, r5
 8005e26:	bfb8      	it	lt
 8005e28:	f1ca 0a00 	rsblt	sl, sl, #0
 8005e2c:	f7fa f9d0 	bl	80001d0 <__aeabi_dsub>
 8005e30:	ec41 0b19 	vmov	d9, r0, r1
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	ec51 0b19 	vmov	r0, r1, d9
 8005e3c:	f7fa f9ca 	bl	80001d4 <__adddf3>
 8005e40:	2400      	movs	r4, #0
 8005e42:	a379      	add	r3, pc, #484	; (adr r3, 8006028 <__ieee754_pow+0x9e0>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	4620      	mov	r0, r4
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f7fa fb78 	bl	8000540 <__aeabi_dmul>
 8005e50:	ec53 2b19 	vmov	r2, r3, d9
 8005e54:	4606      	mov	r6, r0
 8005e56:	460f      	mov	r7, r1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa f9b8 	bl	80001d0 <__aeabi_dsub>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4640      	mov	r0, r8
 8005e66:	4649      	mov	r1, r9
 8005e68:	f7fa f9b2 	bl	80001d0 <__aeabi_dsub>
 8005e6c:	a370      	add	r3, pc, #448	; (adr r3, 8006030 <__ieee754_pow+0x9e8>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f7fa fb65 	bl	8000540 <__aeabi_dmul>
 8005e76:	a370      	add	r3, pc, #448	; (adr r3, 8006038 <__ieee754_pow+0x9f0>)
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	4620      	mov	r0, r4
 8005e82:	4629      	mov	r1, r5
 8005e84:	f7fa fb5c 	bl	8000540 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa f9a0 	bl	80001d4 <__adddf3>
 8005e94:	4604      	mov	r4, r0
 8005e96:	460d      	mov	r5, r1
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa f998 	bl	80001d4 <__adddf3>
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	4689      	mov	r9, r1
 8005eac:	f7fa f990 	bl	80001d0 <__aeabi_dsub>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa f98a 	bl	80001d0 <__aeabi_dsub>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460f      	mov	r7, r1
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	f7fa fb3a 	bl	8000540 <__aeabi_dmul>
 8005ecc:	a35c      	add	r3, pc, #368	; (adr r3, 8006040 <__ieee754_pow+0x9f8>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	f7fa fb33 	bl	8000540 <__aeabi_dmul>
 8005eda:	a35b      	add	r3, pc, #364	; (adr r3, 8006048 <__ieee754_pow+0xa00>)
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa f976 	bl	80001d0 <__aeabi_dsub>
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	f7fa fb2a 	bl	8000540 <__aeabi_dmul>
 8005eec:	a358      	add	r3, pc, #352	; (adr r3, 8006050 <__ieee754_pow+0xa08>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f96f 	bl	80001d4 <__adddf3>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	f7fa fb21 	bl	8000540 <__aeabi_dmul>
 8005efe:	a356      	add	r3, pc, #344	; (adr r3, 8006058 <__ieee754_pow+0xa10>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa f964 	bl	80001d0 <__aeabi_dsub>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	f7fa fb18 	bl	8000540 <__aeabi_dmul>
 8005f10:	a353      	add	r3, pc, #332	; (adr r3, 8006060 <__ieee754_pow+0xa18>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa f95d 	bl	80001d4 <__adddf3>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f7fa fb0f 	bl	8000540 <__aeabi_dmul>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa f951 	bl	80001d0 <__aeabi_dsub>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fb01 	bl	8000540 <__aeabi_dmul>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	ec41 0b19 	vmov	d9, r0, r1
 8005f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f48:	4620      	mov	r0, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	f7fa f940 	bl	80001d0 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	ec51 0b19 	vmov	r0, r1, d9
 8005f58:	f7fa fc1c 	bl	8000794 <__aeabi_ddiv>
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	4604      	mov	r4, r0
 8005f60:	460d      	mov	r5, r1
 8005f62:	463b      	mov	r3, r7
 8005f64:	4640      	mov	r0, r8
 8005f66:	4649      	mov	r1, r9
 8005f68:	f7fa faea 	bl	8000540 <__aeabi_dmul>
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	463b      	mov	r3, r7
 8005f70:	f7fa f930 	bl	80001d4 <__adddf3>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f7fa f928 	bl	80001d0 <__aeabi_dsub>
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	f7fa f924 	bl	80001d0 <__aeabi_dsub>
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	493a      	ldr	r1, [pc, #232]	; (8006078 <__ieee754_pow+0xa30>)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fa f91e 	bl	80001d0 <__aeabi_dsub>
 8005f94:	e9cd 0100 	strd	r0, r1, [sp]
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa2:	da2f      	bge.n	8006004 <__ieee754_pow+0x9bc>
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	ed9d 0b00 	vldr	d0, [sp]
 8005faa:	f000 f9cd 	bl	8006348 <scalbn>
 8005fae:	ec51 0b10 	vmov	r0, r1, d0
 8005fb2:	ec53 2b18 	vmov	r2, r3, d8
 8005fb6:	f7ff bbe0 	b.w	800577a <__ieee754_pow+0x132>
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <__ieee754_pow+0xa34>)
 8005fbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005fc0:	429e      	cmp	r6, r3
 8005fc2:	f77f af0b 	ble.w	8005ddc <__ieee754_pow+0x794>
 8005fc6:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <__ieee754_pow+0xa38>)
 8005fc8:	440b      	add	r3, r1
 8005fca:	4303      	orrs	r3, r0
 8005fcc:	d00b      	beq.n	8005fe6 <__ieee754_pow+0x99e>
 8005fce:	a326      	add	r3, pc, #152	; (adr r3, 8006068 <__ieee754_pow+0xa20>)
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	ec51 0b18 	vmov	r0, r1, d8
 8005fd8:	f7fa fab2 	bl	8000540 <__aeabi_dmul>
 8005fdc:	a322      	add	r3, pc, #136	; (adr r3, 8006068 <__ieee754_pow+0xa20>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f7ff bbca 	b.w	800577a <__ieee754_pow+0x132>
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f7fa f8f1 	bl	80001d0 <__aeabi_dsub>
 8005fee:	4642      	mov	r2, r8
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	f7fa fd2b 	bl	8000a4c <__aeabi_dcmpge>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f43f aef0 	beq.w	8005ddc <__ieee754_pow+0x794>
 8005ffc:	e7e7      	b.n	8005fce <__ieee754_pow+0x986>
 8005ffe:	f04f 0a00 	mov.w	sl, #0
 8006002:	e717      	b.n	8005e34 <__ieee754_pow+0x7ec>
 8006004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006008:	4619      	mov	r1, r3
 800600a:	e7d2      	b.n	8005fb2 <__ieee754_pow+0x96a>
 800600c:	491a      	ldr	r1, [pc, #104]	; (8006078 <__ieee754_pow+0xa30>)
 800600e:	2000      	movs	r0, #0
 8006010:	f7ff bb9e 	b.w	8005750 <__ieee754_pow+0x108>
 8006014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006018:	f7ff bb9a 	b.w	8005750 <__ieee754_pow+0x108>
 800601c:	9000      	str	r0, [sp, #0]
 800601e:	f7ff bb76 	b.w	800570e <__ieee754_pow+0xc6>
 8006022:	2100      	movs	r1, #0
 8006024:	f7ff bb60 	b.w	80056e8 <__ieee754_pow+0xa0>
 8006028:	00000000 	.word	0x00000000
 800602c:	3fe62e43 	.word	0x3fe62e43
 8006030:	fefa39ef 	.word	0xfefa39ef
 8006034:	3fe62e42 	.word	0x3fe62e42
 8006038:	0ca86c39 	.word	0x0ca86c39
 800603c:	be205c61 	.word	0xbe205c61
 8006040:	72bea4d0 	.word	0x72bea4d0
 8006044:	3e663769 	.word	0x3e663769
 8006048:	c5d26bf1 	.word	0xc5d26bf1
 800604c:	3ebbbd41 	.word	0x3ebbbd41
 8006050:	af25de2c 	.word	0xaf25de2c
 8006054:	3f11566a 	.word	0x3f11566a
 8006058:	16bebd93 	.word	0x16bebd93
 800605c:	3f66c16c 	.word	0x3f66c16c
 8006060:	5555553e 	.word	0x5555553e
 8006064:	3fc55555 	.word	0x3fc55555
 8006068:	c2f8f359 	.word	0xc2f8f359
 800606c:	01a56e1f 	.word	0x01a56e1f
 8006070:	3fe00000 	.word	0x3fe00000
 8006074:	000fffff 	.word	0x000fffff
 8006078:	3ff00000 	.word	0x3ff00000
 800607c:	4090cbff 	.word	0x4090cbff
 8006080:	3f6f3400 	.word	0x3f6f3400
 8006084:	652b82fe 	.word	0x652b82fe
 8006088:	3c971547 	.word	0x3c971547

0800608c <__ieee754_sqrt>:
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	ec55 4b10 	vmov	r4, r5, d0
 8006094:	4e56      	ldr	r6, [pc, #344]	; (80061f0 <__ieee754_sqrt+0x164>)
 8006096:	43ae      	bics	r6, r5
 8006098:	ee10 0a10 	vmov	r0, s0
 800609c:	ee10 3a10 	vmov	r3, s0
 80060a0:	4629      	mov	r1, r5
 80060a2:	462a      	mov	r2, r5
 80060a4:	d110      	bne.n	80060c8 <__ieee754_sqrt+0x3c>
 80060a6:	ee10 2a10 	vmov	r2, s0
 80060aa:	462b      	mov	r3, r5
 80060ac:	f7fa fa48 	bl	8000540 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f88c 	bl	80001d4 <__adddf3>
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
 80060c0:	ec45 4b10 	vmov	d0, r4, r5
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	dc10      	bgt.n	80060ee <__ieee754_sqrt+0x62>
 80060cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80060d0:	4330      	orrs	r0, r6
 80060d2:	d0f5      	beq.n	80060c0 <__ieee754_sqrt+0x34>
 80060d4:	b15d      	cbz	r5, 80060ee <__ieee754_sqrt+0x62>
 80060d6:	ee10 2a10 	vmov	r2, s0
 80060da:	462b      	mov	r3, r5
 80060dc:	ee10 0a10 	vmov	r0, s0
 80060e0:	f7fa f876 	bl	80001d0 <__aeabi_dsub>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	f7fa fb54 	bl	8000794 <__aeabi_ddiv>
 80060ec:	e7e6      	b.n	80060bc <__ieee754_sqrt+0x30>
 80060ee:	1509      	asrs	r1, r1, #20
 80060f0:	d076      	beq.n	80061e0 <__ieee754_sqrt+0x154>
 80060f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80060f6:	07ce      	lsls	r6, r1, #31
 80060f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80060fc:	bf5e      	ittt	pl
 80060fe:	0fda      	lsrpl	r2, r3, #31
 8006100:	005b      	lslpl	r3, r3, #1
 8006102:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006106:	0fda      	lsrs	r2, r3, #31
 8006108:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800610c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006110:	2000      	movs	r0, #0
 8006112:	106d      	asrs	r5, r5, #1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	f04f 0e16 	mov.w	lr, #22
 800611a:	4684      	mov	ip, r0
 800611c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006120:	eb0c 0401 	add.w	r4, ip, r1
 8006124:	4294      	cmp	r4, r2
 8006126:	bfde      	ittt	le
 8006128:	1b12      	suble	r2, r2, r4
 800612a:	eb04 0c01 	addle.w	ip, r4, r1
 800612e:	1840      	addle	r0, r0, r1
 8006130:	0052      	lsls	r2, r2, #1
 8006132:	f1be 0e01 	subs.w	lr, lr, #1
 8006136:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800613a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800613e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006142:	d1ed      	bne.n	8006120 <__ieee754_sqrt+0x94>
 8006144:	4671      	mov	r1, lr
 8006146:	2720      	movs	r7, #32
 8006148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800614c:	4562      	cmp	r2, ip
 800614e:	eb04 060e 	add.w	r6, r4, lr
 8006152:	dc02      	bgt.n	800615a <__ieee754_sqrt+0xce>
 8006154:	d113      	bne.n	800617e <__ieee754_sqrt+0xf2>
 8006156:	429e      	cmp	r6, r3
 8006158:	d811      	bhi.n	800617e <__ieee754_sqrt+0xf2>
 800615a:	2e00      	cmp	r6, #0
 800615c:	eb06 0e04 	add.w	lr, r6, r4
 8006160:	da43      	bge.n	80061ea <__ieee754_sqrt+0x15e>
 8006162:	f1be 0f00 	cmp.w	lr, #0
 8006166:	db40      	blt.n	80061ea <__ieee754_sqrt+0x15e>
 8006168:	f10c 0801 	add.w	r8, ip, #1
 800616c:	eba2 020c 	sub.w	r2, r2, ip
 8006170:	429e      	cmp	r6, r3
 8006172:	bf88      	it	hi
 8006174:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006178:	1b9b      	subs	r3, r3, r6
 800617a:	4421      	add	r1, r4
 800617c:	46c4      	mov	ip, r8
 800617e:	0052      	lsls	r2, r2, #1
 8006180:	3f01      	subs	r7, #1
 8006182:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006186:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800618a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800618e:	d1dd      	bne.n	800614c <__ieee754_sqrt+0xc0>
 8006190:	4313      	orrs	r3, r2
 8006192:	d006      	beq.n	80061a2 <__ieee754_sqrt+0x116>
 8006194:	1c4c      	adds	r4, r1, #1
 8006196:	bf13      	iteet	ne
 8006198:	3101      	addne	r1, #1
 800619a:	3001      	addeq	r0, #1
 800619c:	4639      	moveq	r1, r7
 800619e:	f021 0101 	bicne.w	r1, r1, #1
 80061a2:	1043      	asrs	r3, r0, #1
 80061a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80061a8:	0849      	lsrs	r1, r1, #1
 80061aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80061ae:	07c2      	lsls	r2, r0, #31
 80061b0:	bf48      	it	mi
 80061b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80061b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80061ba:	460c      	mov	r4, r1
 80061bc:	463d      	mov	r5, r7
 80061be:	e77f      	b.n	80060c0 <__ieee754_sqrt+0x34>
 80061c0:	0ada      	lsrs	r2, r3, #11
 80061c2:	3815      	subs	r0, #21
 80061c4:	055b      	lsls	r3, r3, #21
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d0fa      	beq.n	80061c0 <__ieee754_sqrt+0x134>
 80061ca:	02d7      	lsls	r7, r2, #11
 80061cc:	d50a      	bpl.n	80061e4 <__ieee754_sqrt+0x158>
 80061ce:	f1c1 0420 	rsb	r4, r1, #32
 80061d2:	fa23 f404 	lsr.w	r4, r3, r4
 80061d6:	1e4d      	subs	r5, r1, #1
 80061d8:	408b      	lsls	r3, r1
 80061da:	4322      	orrs	r2, r4
 80061dc:	1b41      	subs	r1, r0, r5
 80061de:	e788      	b.n	80060f2 <__ieee754_sqrt+0x66>
 80061e0:	4608      	mov	r0, r1
 80061e2:	e7f0      	b.n	80061c6 <__ieee754_sqrt+0x13a>
 80061e4:	0052      	lsls	r2, r2, #1
 80061e6:	3101      	adds	r1, #1
 80061e8:	e7ef      	b.n	80061ca <__ieee754_sqrt+0x13e>
 80061ea:	46e0      	mov	r8, ip
 80061ec:	e7be      	b.n	800616c <__ieee754_sqrt+0xe0>
 80061ee:	bf00      	nop
 80061f0:	7ff00000 	.word	0x7ff00000

080061f4 <fabs>:
 80061f4:	ec51 0b10 	vmov	r0, r1, d0
 80061f8:	ee10 2a10 	vmov	r2, s0
 80061fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006200:	ec43 2b10 	vmov	d0, r2, r3
 8006204:	4770      	bx	lr

08006206 <finite>:
 8006206:	b082      	sub	sp, #8
 8006208:	ed8d 0b00 	vstr	d0, [sp]
 800620c:	9801      	ldr	r0, [sp, #4]
 800620e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006212:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006216:	0fc0      	lsrs	r0, r0, #31
 8006218:	b002      	add	sp, #8
 800621a:	4770      	bx	lr
 800621c:	0000      	movs	r0, r0
	...

08006220 <nan>:
 8006220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006228 <nan+0x8>
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	00000000 	.word	0x00000000
 800622c:	7ff80000 	.word	0x7ff80000

08006230 <rint>:
 8006230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006232:	ec51 0b10 	vmov	r0, r1, d0
 8006236:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800623a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800623e:	2e13      	cmp	r6, #19
 8006240:	ee10 4a10 	vmov	r4, s0
 8006244:	460b      	mov	r3, r1
 8006246:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800624a:	dc58      	bgt.n	80062fe <rint+0xce>
 800624c:	2e00      	cmp	r6, #0
 800624e:	da2b      	bge.n	80062a8 <rint+0x78>
 8006250:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006254:	4302      	orrs	r2, r0
 8006256:	d023      	beq.n	80062a0 <rint+0x70>
 8006258:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800625c:	4302      	orrs	r2, r0
 800625e:	4254      	negs	r4, r2
 8006260:	4314      	orrs	r4, r2
 8006262:	0c4b      	lsrs	r3, r1, #17
 8006264:	0b24      	lsrs	r4, r4, #12
 8006266:	045b      	lsls	r3, r3, #17
 8006268:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800626c:	ea44 0103 	orr.w	r1, r4, r3
 8006270:	4b32      	ldr	r3, [pc, #200]	; (800633c <rint+0x10c>)
 8006272:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006276:	e9d3 6700 	ldrd	r6, r7, [r3]
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4630      	mov	r0, r6
 8006280:	4639      	mov	r1, r7
 8006282:	f7f9 ffa7 	bl	80001d4 <__adddf3>
 8006286:	e9cd 0100 	strd	r0, r1, [sp]
 800628a:	463b      	mov	r3, r7
 800628c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006290:	4632      	mov	r2, r6
 8006292:	f7f9 ff9d 	bl	80001d0 <__aeabi_dsub>
 8006296:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800629a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800629e:	4639      	mov	r1, r7
 80062a0:	ec41 0b10 	vmov	d0, r0, r1
 80062a4:	b003      	add	sp, #12
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a8:	4a25      	ldr	r2, [pc, #148]	; (8006340 <rint+0x110>)
 80062aa:	4132      	asrs	r2, r6
 80062ac:	ea01 0702 	and.w	r7, r1, r2
 80062b0:	4307      	orrs	r7, r0
 80062b2:	d0f5      	beq.n	80062a0 <rint+0x70>
 80062b4:	0851      	lsrs	r1, r2, #1
 80062b6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80062ba:	4314      	orrs	r4, r2
 80062bc:	d00c      	beq.n	80062d8 <rint+0xa8>
 80062be:	ea23 0201 	bic.w	r2, r3, r1
 80062c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062c6:	2e13      	cmp	r6, #19
 80062c8:	fa43 f606 	asr.w	r6, r3, r6
 80062cc:	bf0c      	ite	eq
 80062ce:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80062d2:	2400      	movne	r4, #0
 80062d4:	ea42 0306 	orr.w	r3, r2, r6
 80062d8:	4918      	ldr	r1, [pc, #96]	; (800633c <rint+0x10c>)
 80062da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80062de:	4622      	mov	r2, r4
 80062e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	f7f9 ff74 	bl	80001d4 <__adddf3>
 80062ec:	e9cd 0100 	strd	r0, r1, [sp]
 80062f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062f4:	4622      	mov	r2, r4
 80062f6:	462b      	mov	r3, r5
 80062f8:	f7f9 ff6a 	bl	80001d0 <__aeabi_dsub>
 80062fc:	e7d0      	b.n	80062a0 <rint+0x70>
 80062fe:	2e33      	cmp	r6, #51	; 0x33
 8006300:	dd07      	ble.n	8006312 <rint+0xe2>
 8006302:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006306:	d1cb      	bne.n	80062a0 <rint+0x70>
 8006308:	ee10 2a10 	vmov	r2, s0
 800630c:	f7f9 ff62 	bl	80001d4 <__adddf3>
 8006310:	e7c6      	b.n	80062a0 <rint+0x70>
 8006312:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006316:	f04f 36ff 	mov.w	r6, #4294967295
 800631a:	40d6      	lsrs	r6, r2
 800631c:	4230      	tst	r0, r6
 800631e:	d0bf      	beq.n	80062a0 <rint+0x70>
 8006320:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006324:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006328:	bf1f      	itttt	ne
 800632a:	ea24 0101 	bicne.w	r1, r4, r1
 800632e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006332:	fa44 f202 	asrne.w	r2, r4, r2
 8006336:	ea41 0402 	orrne.w	r4, r1, r2
 800633a:	e7cd      	b.n	80062d8 <rint+0xa8>
 800633c:	08006520 	.word	0x08006520
 8006340:	000fffff 	.word	0x000fffff
 8006344:	00000000 	.word	0x00000000

08006348 <scalbn>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	ec55 4b10 	vmov	r4, r5, d0
 800634e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006352:	4606      	mov	r6, r0
 8006354:	462b      	mov	r3, r5
 8006356:	b99a      	cbnz	r2, 8006380 <scalbn+0x38>
 8006358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800635c:	4323      	orrs	r3, r4
 800635e:	d036      	beq.n	80063ce <scalbn+0x86>
 8006360:	4b39      	ldr	r3, [pc, #228]	; (8006448 <scalbn+0x100>)
 8006362:	4629      	mov	r1, r5
 8006364:	ee10 0a10 	vmov	r0, s0
 8006368:	2200      	movs	r2, #0
 800636a:	f7fa f8e9 	bl	8000540 <__aeabi_dmul>
 800636e:	4b37      	ldr	r3, [pc, #220]	; (800644c <scalbn+0x104>)
 8006370:	429e      	cmp	r6, r3
 8006372:	4604      	mov	r4, r0
 8006374:	460d      	mov	r5, r1
 8006376:	da10      	bge.n	800639a <scalbn+0x52>
 8006378:	a32b      	add	r3, pc, #172	; (adr r3, 8006428 <scalbn+0xe0>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	e03a      	b.n	80063f6 <scalbn+0xae>
 8006380:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006384:	428a      	cmp	r2, r1
 8006386:	d10c      	bne.n	80063a2 <scalbn+0x5a>
 8006388:	ee10 2a10 	vmov	r2, s0
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 ff20 	bl	80001d4 <__adddf3>
 8006394:	4604      	mov	r4, r0
 8006396:	460d      	mov	r5, r1
 8006398:	e019      	b.n	80063ce <scalbn+0x86>
 800639a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800639e:	460b      	mov	r3, r1
 80063a0:	3a36      	subs	r2, #54	; 0x36
 80063a2:	4432      	add	r2, r6
 80063a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80063a8:	428a      	cmp	r2, r1
 80063aa:	dd08      	ble.n	80063be <scalbn+0x76>
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	a120      	add	r1, pc, #128	; (adr r1, 8006430 <scalbn+0xe8>)
 80063b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b4:	da1c      	bge.n	80063f0 <scalbn+0xa8>
 80063b6:	a120      	add	r1, pc, #128	; (adr r1, 8006438 <scalbn+0xf0>)
 80063b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063bc:	e018      	b.n	80063f0 <scalbn+0xa8>
 80063be:	2a00      	cmp	r2, #0
 80063c0:	dd08      	ble.n	80063d4 <scalbn+0x8c>
 80063c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063ce:	ec45 4b10 	vmov	d0, r4, r5
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80063d8:	da19      	bge.n	800640e <scalbn+0xc6>
 80063da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80063de:	429e      	cmp	r6, r3
 80063e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80063e4:	dd0a      	ble.n	80063fc <scalbn+0xb4>
 80063e6:	a112      	add	r1, pc, #72	; (adr r1, 8006430 <scalbn+0xe8>)
 80063e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e2      	bne.n	80063b6 <scalbn+0x6e>
 80063f0:	a30f      	add	r3, pc, #60	; (adr r3, 8006430 <scalbn+0xe8>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7fa f8a3 	bl	8000540 <__aeabi_dmul>
 80063fa:	e7cb      	b.n	8006394 <scalbn+0x4c>
 80063fc:	a10a      	add	r1, pc, #40	; (adr r1, 8006428 <scalbn+0xe0>)
 80063fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0b8      	beq.n	8006378 <scalbn+0x30>
 8006406:	a10e      	add	r1, pc, #56	; (adr r1, 8006440 <scalbn+0xf8>)
 8006408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640c:	e7b4      	b.n	8006378 <scalbn+0x30>
 800640e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006412:	3236      	adds	r2, #54	; 0x36
 8006414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800641c:	4620      	mov	r0, r4
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <scalbn+0x108>)
 8006420:	2200      	movs	r2, #0
 8006422:	e7e8      	b.n	80063f6 <scalbn+0xae>
 8006424:	f3af 8000 	nop.w
 8006428:	c2f8f359 	.word	0xc2f8f359
 800642c:	01a56e1f 	.word	0x01a56e1f
 8006430:	8800759c 	.word	0x8800759c
 8006434:	7e37e43c 	.word	0x7e37e43c
 8006438:	8800759c 	.word	0x8800759c
 800643c:	fe37e43c 	.word	0xfe37e43c
 8006440:	c2f8f359 	.word	0xc2f8f359
 8006444:	81a56e1f 	.word	0x81a56e1f
 8006448:	43500000 	.word	0x43500000
 800644c:	ffff3cb0 	.word	0xffff3cb0
 8006450:	3c900000 	.word	0x3c900000

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

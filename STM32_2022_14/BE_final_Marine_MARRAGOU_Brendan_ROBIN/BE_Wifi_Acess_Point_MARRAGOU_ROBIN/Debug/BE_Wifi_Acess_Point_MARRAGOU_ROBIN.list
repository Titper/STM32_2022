
BE_Wifi_Acess_Point_MARRAGOU_ROBIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a140  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800a2d0  0800a2d0  0001a2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f4  0800a7f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7fc  0800a7fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001e0  0800a9e4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800a9e4  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f55  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfc  00000000  00000000  00039165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ec1  00000000  00000000  0003e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175f2  00000000  00000000  00067171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f71b0  00000000  00000000  0007e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063bc  00000000  00000000  00175968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2b8 	.word	0x0800a2b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a2b8 	.word	0x0800a2b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a32      	ldr	r2, [pc, #200]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_GPIO_Init+0xe4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_GPIO_Init+0xe4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_GPIO_Init+0xe4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2122      	movs	r1, #34	; 0x22
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f001 fab7 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001074:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_GPIO_Init+0xe8>)
 8001086:	f001 f8e7 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 800108a:	2302      	movs	r3, #2
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 f8d8 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a8:	2320      	movs	r3, #32
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f001 f8c9 	bl	8002258 <HAL_GPIO_Init>

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800

080010d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C1_Init+0x74>)
 8001114:	f001 fa7a 	bl	800260c <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fc52 	bl	80019c6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C1_Init+0x74>)
 8001126:	f002 f86b 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 fc49 	bl	80019c6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C1_Init+0x74>)
 8001138:	f002 f8ad 	bl	8003296 <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 fc40 	bl	80019c6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000218 	.word	0x20000218
 8001150:	40005400 	.word	0x40005400
 8001154:	10909cec 	.word	0x10909cec

08001158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	; 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2288      	movs	r2, #136	; 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fc71 	bl	8005a60 <memset>
  if(i2cHandle->Instance==I2C1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_I2C_MspInit+0xb0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13b      	bne.n	8001200 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4618      	mov	r0, r3
 8001196:	f002 ff1b 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f000 fc11 	bl	80019c6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	2304      	movs	r3, #4
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0xb8>)
 80011e4:	f001 f838 	bl	8002258 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_I2C_MspInit+0xb4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	; 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <lcd_init>:
I2C_HandleTypeDef hi2c3;

UART_HandleTypeDef huart3;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af02      	add	r7, sp, #8
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f043 030c 	orr.w	r3, r3, #12
 800122a:	b2da      	uxtb	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	b2db      	uxtb	r3, r3
 800123e:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart3,(uint8_t *)data,2,10);
 8001240:	f107 0118 	add.w	r1, r7, #24
 8001244:	230a      	movs	r3, #10
 8001246:	2202      	movs	r2, #2
 8001248:	486c      	ldr	r0, [pc, #432]	; (80013fc <lcd_init+0x1e8>)
 800124a:	f003 ff11 	bl	8005070 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800124e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001252:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8001254:	f107 0114 	add.w	r1, r7, #20
 8001258:	230a      	movs	r3, #10
 800125a:	2202      	movs	r2, #2
 800125c:	4867      	ldr	r0, [pc, #412]	; (80013fc <lcd_init+0x1e8>)
 800125e:	f003 ff07 	bl	8005070 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	2205      	movs	r2, #5
 8001266:	217c      	movs	r1, #124	; 0x7c
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f001 fc49 	bl	8002b00 <HAL_I2C_IsDeviceReady>
 800126e:	4603      	mov	r3, r0
 8001270:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart3,&status,1,10);
 8001272:	f107 0113 	add.w	r1, r7, #19
 8001276:	230a      	movs	r3, #10
 8001278:	2201      	movs	r2, #1
 800127a:	4860      	ldr	r0, [pc, #384]	; (80013fc <lcd_init+0x1e8>)
 800127c:	f003 fef8 	bl	8005070 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f000 fedf 	bl	8002044 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001286:	f107 0218 	add.w	r2, r7, #24
 800128a:	f241 3388 	movw	r3, #5000	; 0x1388
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2302      	movs	r3, #2
 8001292:	217c      	movs	r1, #124	; 0x7c
 8001294:	69f8      	ldr	r0, [r7, #28]
 8001296:	f001 fa49 	bl	800272c <HAL_I2C_Master_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart3,&status2,1,10);
 800129e:	f107 0112 	add.w	r1, r7, #18
 80012a2:	230a      	movs	r3, #10
 80012a4:	2201      	movs	r2, #1
 80012a6:	4855      	ldr	r0, [pc, #340]	; (80013fc <lcd_init+0x1e8>)
 80012a8:	f003 fee2 	bl	8005070 <HAL_UART_Transmit>
	HAL_Delay(50);
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f000 fec9 	bl	8002044 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80012b2:	f107 0218 	add.w	r2, r7, #24
 80012b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2302      	movs	r3, #2
 80012be:	217c      	movs	r1, #124	; 0x7c
 80012c0:	69f8      	ldr	r0, [r7, #28]
 80012c2:	f001 fa33 	bl	800272c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 febc 	bl	8002044 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80012cc:	f107 0218 	add.w	r2, r7, #24
 80012d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	217c      	movs	r1, #124	; 0x7c
 80012da:	69f8      	ldr	r0, [r7, #28]
 80012dc:	f001 fa26 	bl	800272c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2204      	movs	r2, #4
 80012e4:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80012f2:	f107 0218 	add.w	r2, r7, #24
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2302      	movs	r3, #2
 80012fe:	217c      	movs	r1, #124	; 0x7c
 8001300:	69f8      	ldr	r0, [r7, #28]
 8001302:	f001 fa13 	bl	800272c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001306:	2301      	movs	r3, #1
 8001308:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800130a:	f107 0218 	add.w	r2, r7, #24
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	217c      	movs	r1, #124	; 0x7c
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f001 fa07 	bl	800272c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800131e:	2002      	movs	r0, #2
 8001320:	f000 fe90 	bl	8002044 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2202      	movs	r2, #2
 8001328:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	b2db      	uxtb	r3, r3
 8001334:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001336:	f107 0218 	add.w	r2, r7, #24
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	217c      	movs	r1, #124	; 0x7c
 8001344:	69f8      	ldr	r0, [r7, #28]
 8001346:	f001 f9f1 	bl	800272c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800134a:	2300      	movs	r3, #0
 800134c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001352:	f107 0210 	add.w	r2, r7, #16
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	21c4      	movs	r1, #196	; 0xc4
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f001 f9e3 	bl	800272c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001366:	2308      	movs	r3, #8
 8001368:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800136a:	23ff      	movs	r3, #255	; 0xff
 800136c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800136e:	f107 0210 	add.w	r2, r7, #16
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	21c4      	movs	r1, #196	; 0xc4
 800137c:	69f8      	ldr	r0, [r7, #28]
 800137e:	f001 f9d5 	bl	800272c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001382:	2301      	movs	r3, #1
 8001384:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001386:	2320      	movs	r3, #32
 8001388:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800138a:	f107 0210 	add.w	r2, r7, #16
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	21c4      	movs	r1, #196	; 0xc4
 8001398:	69f8      	ldr	r0, [r7, #28]
 800139a:	f001 f9c7 	bl	800272c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800139e:	2304      	movs	r3, #4
 80013a0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013a2:	23ff      	movs	r3, #255	; 0xff
 80013a4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2302      	movs	r3, #2
 80013b2:	21c4      	movs	r1, #196	; 0xc4
 80013b4:	69f8      	ldr	r0, [r7, #28]
 80013b6:	f001 f9b9 	bl	800272c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80013ba:	2303      	movs	r3, #3
 80013bc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013be:	23ff      	movs	r3, #255	; 0xff
 80013c0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013c2:	f107 020c 	add.w	r2, r7, #12
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	21c4      	movs	r1, #196	; 0xc4
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f001 f9ab 	bl	800272c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80013d6:	2302      	movs	r3, #2
 80013d8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2302      	movs	r3, #2
 80013ea:	21c4      	movs	r1, #196	; 0xc4
 80013ec:	69f8      	ldr	r0, [r7, #28]
 80013ee:	f001 f99d 	bl	800272c <HAL_I2C_Master_Transmit>


}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002b0 	.word	0x200002b0

08001400 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001416:	e011      	b.n	800143c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2302      	movs	r3, #2
 800142e:	217c      	movs	r1, #124	; 0x7c
 8001430:	6938      	ldr	r0, [r7, #16]
 8001432:	f001 f97b 	bl	800272c <HAL_I2C_Master_Transmit>
            i++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e7      	bne.n	8001418 <lcd_print+0x18>
   }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af02      	add	r7, sp, #8
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
 800145e:	4613      	mov	r3, r2
 8001460:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <lcd_position+0x24>
    {
        col = col | 0x80;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	e003      	b.n	800147e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800147c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001486:	f107 0208 	add.w	r2, r7, #8
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2302      	movs	r3, #2
 8001492:	217c      	movs	r1, #124	; 0x7c
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f001 f949 	bl	800272c <HAL_I2C_Master_Transmit>
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <Delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Delay_us(uint16_t us)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Delay_us+0x30>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < us);
 80014b6:	bf00      	nop
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <Delay_us+0x30>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3f9      	bcc.n	80014b8 <Delay_us+0x14>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000364 	.word	0x20000364

080014d8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fea6 	bl	8002258 <HAL_GPIO_Init>
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fe88 	bl	8002258 <HAL_GPIO_Init>
}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <DHT22_start>:

void DHT22_start(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_GPIO_Port, DHT22_Pin);//Mettre broche en sortie pour initialiser DHT22
 8001554:	2102      	movs	r1, #2
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f7ff ffbd 	bl	80014d8 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2102      	movs	r1, #2
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f001 f839 	bl	80025dc <HAL_GPIO_WritePin>
	Delay_us(1200);
 800156a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800156e:	f7ff ff99 	bl	80014a4 <Delay_us>
	HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2102      	movs	r1, #2
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f001 f82f 	bl	80025dc <HAL_GPIO_WritePin>
	Delay_us(30);
 800157e:	201e      	movs	r0, #30
 8001580:	f7ff ff90 	bl	80014a4 <Delay_us>
	Set_Pin_Input(DHT22_GPIO_Port, DHT22_Pin); //Mettre broche en entrée pour recevoir réponse DHT22
 8001584:	2102      	movs	r1, #2
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f7ff ffc3 	bl	8001514 <Set_Pin_Input>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}

08001592 <DHT22_Answer>:

int DHT22_Answer(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
	//Je choisit toujours 10 us de plus pour les temps pour une marge d'erreur
	int temps = 0, reponse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
	//verifier qu'on est bien a 0 pendant 80 us
	while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 90))
 80015a0:	e005      	b.n	80015ae <DHT22_Answer+0x1c>
	{
		Delay_us(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ff7e 	bl	80014a4 <Delay_us>
		temps++;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
	while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 90))
 80015ae:	2102      	movs	r1, #2
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f000 fffa 	bl	80025ac <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <DHT22_Answer+0x32>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b59      	cmp	r3, #89	; 0x59
 80015c2:	ddee      	ble.n	80015a2 <DHT22_Answer+0x10>
	}

	if(temps < 90)//si on est bien rester à 0 pendant de 80 us alors OK
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b59      	cmp	r3, #89	; 0x59
 80015c8:	dc2f      	bgt.n	800162a <DHT22_Answer+0x98>
	{
		temps = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
		//verifier qu'on est bien a 1 pendant 80 us
		while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_SET) && (temps < 90))
 80015ce:	e005      	b.n	80015dc <DHT22_Answer+0x4a>
		{
			Delay_us(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff ff67 	bl	80014a4 <Delay_us>
			temps++;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
		while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_SET) && (temps < 90))
 80015dc:	2102      	movs	r1, #2
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 ffe3 	bl	80025ac <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <DHT22_Answer+0x60>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b59      	cmp	r3, #89	; 0x59
 80015f0:	ddee      	ble.n	80015d0 <DHT22_Answer+0x3e>
		}

		if(temps < 90)//si on est bient rester à 1 pendant 80 us alors OK
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b59      	cmp	r3, #89	; 0x59
 80015f6:	dc18      	bgt.n	800162a <DHT22_Answer+0x98>
		{
			//début de la trame de donnée 50 us à 0 puis 1er bit de donnée
			temps = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]

			//vérifier la reception du premier bit
			while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 60))
 80015fc:	e005      	b.n	800160a <DHT22_Answer+0x78>
			{
				Delay_us(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff ff50 	bl	80014a4 <Delay_us>
				temps++;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3301      	adds	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
			while((HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET) && (temps < 60))
 800160a:	2102      	movs	r1, #2
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f000 ffcc 	bl	80025ac <HAL_GPIO_ReadPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <DHT22_Answer+0x8e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b3b      	cmp	r3, #59	; 0x3b
 800161e:	ddee      	ble.n	80015fe <DHT22_Answer+0x6c>
			}
			if(temps < 60)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b3b      	cmp	r3, #59	; 0x3b
 8001624:	dc01      	bgt.n	800162a <DHT22_Answer+0x98>
			{
				reponse = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	603b      	str	r3, [r7, #0]
			}
		}
	}

	Delay_us(40);
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f7ff ff3a 	bl	80014a4 <Delay_us>

	return reponse;
 8001630:	683b      	ldr	r3, [r7, #0]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <DHT22_Read_Data>:

void DHT22_Read_Data (uint8_t *data)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 	int i, k;
  	for (i=0;i<8;i++)
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e057      	b.n	80016f8 <DHT22_Read_Data+0xbe>
  	{
  		if (HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET)
 8001648:	2102      	movs	r1, #2
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f000 ffad 	bl	80025ac <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11d      	bne.n	8001694 <DHT22_Read_Data+0x5a>
  		{
  			(*data)&= ~(1<<(7-i)); //Mettre bit à 0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25a      	sxtb	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1c3 0307 	rsb	r3, r3, #7
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	b25b      	sxtb	r3, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4013      	ands	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 800167a:	bf00      	nop
 800167c:	2102      	movs	r1, #2
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 ff93 	bl	80025ac <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f7      	beq.n	800167c <DHT22_Read_Data+0x42>
  			Delay_us(40);
 800168c:	2028      	movs	r0, #40	; 0x28
 800168e:	f7ff ff09 	bl	80014a4 <Delay_us>
 8001692:	e02e      	b.n	80016f2 <DHT22_Read_Data+0xb8>
  		}
  		else
  		{
  			(*data)|= (1<<(7-i)); //Mettre bit à 1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1c3 0307 	rsb	r3, r3, #7
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	e00a      	b.n	80016ce <DHT22_Read_Data+0x94>
  			{
  				if (HAL_GPIO_ReadPin (DHT22_GPIO_Port, DHT22_Pin) == GPIO_PIN_RESET)
 80016b8:	2102      	movs	r1, #2
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f000 ff75 	bl	80025ac <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <DHT22_Read_Data+0x9e>
  			for (k=0;k<1000;k++)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d4:	dbf0      	blt.n	80016b8 <DHT22_Read_Data+0x7e>
 80016d6:	e000      	b.n	80016da <DHT22_Read_Data+0xa0>
  				  {
  				  	break;
 80016d8:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)));
 80016da:	bf00      	nop
 80016dc:	2102      	movs	r1, #2
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f000 ff63 	bl	80025ac <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f7      	beq.n	80016dc <DHT22_Read_Data+0xa2>
  			Delay_us(40);
 80016ec:	2028      	movs	r0, #40	; 0x28
 80016ee:	f7ff fed9 	bl	80014a4 <Delay_us>
  	for (i=0;i<8;i++)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	dda4      	ble.n	8001648 <DHT22_Read_Data+0xe>
  		}
  	 }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <DHT22_Display_Data>:

void DHT22_Display_Data(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	sprintf(tabH,"Humidite: %.1f ", Humidite);
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <DHT22_Display_Data+0x60>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4914      	ldr	r1, [pc, #80]	; (800176c <DHT22_Display_Data+0x64>)
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <DHT22_Display_Data+0x68>)
 800171e:	f005 f827 	bl	8006770 <siprintf>
	sprintf(tabT, "Temp.: %.1f C   ", Temperature);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <DHT22_Display_Data+0x6c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff0e 	bl	8000548 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <DHT22_Display_Data+0x70>)
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <DHT22_Display_Data+0x74>)
 8001734:	f005 f81c 	bl	8006770 <siprintf>
	lcd_position(&hi2c1, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <DHT22_Display_Data+0x78>)
 800173e:	f7ff fe88 	bl	8001452 <lcd_position>
	lcd_print(&hi2c1, tabH);
 8001742:	490b      	ldr	r1, [pc, #44]	; (8001770 <DHT22_Display_Data+0x68>)
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <DHT22_Display_Data+0x78>)
 8001746:	f7ff fe5b 	bl	8001400 <lcd_print>
	lcd_print(&hi2c1, "%");
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <DHT22_Display_Data+0x7c>)
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <DHT22_Display_Data+0x78>)
 800174e:	f7ff fe57 	bl	8001400 <lcd_print>
	lcd_position(&hi2c1, 0, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	2100      	movs	r1, #0
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <DHT22_Display_Data+0x78>)
 8001758:	f7ff fe7b 	bl	8001452 <lcd_position>
	lcd_print(&hi2c1, tabT);
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <DHT22_Display_Data+0x74>)
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <DHT22_Display_Data+0x78>)
 8001760:	f7ff fe4e 	bl	8001400 <lcd_print>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000204 	.word	0x20000204
 800176c:	0800a2d0 	.word	0x0800a2d0
 8001770:	2000034c 	.word	0x2000034c
 8001774:	20000200 	.word	0x20000200
 8001778:	0800a2e0 	.word	0x0800a2e0
 800177c:	20000334 	.word	0x20000334
 8001780:	20000218 	.word	0x20000218
 8001784:	0800a2f4 	.word	0x0800a2f4

08001788 <Mesure_Lum_TSL2561>:

void Mesure_Lum_TSL2561(double Val[4])
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Ready;//Afin d'utiliser les fonctions de HAL_I2C

	uint8_t DATALOW0 = 0x8C;//Registre de commande cf Datasheet
 8001790:	238c      	movs	r3, #140	; 0x8c
 8001792:	75fb      	strb	r3, [r7, #23]
	uint8_t DATAHIGH0 = 0x8D;
 8001794:	238d      	movs	r3, #141	; 0x8d
 8001796:	75bb      	strb	r3, [r7, #22]
	uint8_t DATAHIGH1 = 0x8F;
 8001798:	238f      	movs	r3, #143	; 0x8f
 800179a:	757b      	strb	r3, [r7, #21]
	uint8_t DATALOW1 = 0x8E;
 800179c:	238e      	movs	r3, #142	; 0x8e
 800179e:	753b      	strb	r3, [r7, #20]
	uint8_t Info[4] = {DATALOW0, DATAHIGH0, DATALOW1, DATAHIGH1};//Groupement des registres
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	733b      	strb	r3, [r7, #12]
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	737b      	strb	r3, [r7, #13]
 80017a8:	7d3b      	ldrb	r3, [r7, #20]
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	7d7b      	ldrb	r3, [r7, #21]
 80017ae:	73fb      	strb	r3, [r7, #15]
	uint8_t Converted[4] = {0};//Réceptionne la réponse du capteur
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]

	uint16_t Sensor_Adress = 0x39<<1;//Adresse propre du capteur
 80017b4:	2372      	movs	r3, #114	; 0x72
 80017b6:	827b      	strh	r3, [r7, #18]

	//Adressage
	Ready = HAL_I2C_Master_Transmit(&hi2c1, Sensor_Adress, Info, 4, 1000);//Commande
 80017b8:	f107 020c 	add.w	r2, r7, #12
 80017bc:	8a79      	ldrh	r1, [r7, #18]
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2304      	movs	r3, #4
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <Mesure_Lum_TSL2561+0x70>)
 80017c8:	f000 ffb0 	bl	800272c <HAL_I2C_Master_Transmit>
 80017cc:	4603      	mov	r3, r0
 80017ce:	747b      	strb	r3, [r7, #17]
	HAL_Delay(20); //Attente entre mesures
 80017d0:	2014      	movs	r0, #20
 80017d2:	f000 fc37 	bl	8002044 <HAL_Delay>

	//Réponse du capteur
	Ready = HAL_I2C_Master_Receive(&hi2c1, Sensor_Adress, Converted, 1, 1000);//Réception des données
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	8a79      	ldrh	r1, [r7, #18]
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <Mesure_Lum_TSL2561+0x70>)
 80017e6:	f001 f895 	bl	8002914 <HAL_I2C_Master_Receive>
 80017ea:	4603      	mov	r3, r0
 80017ec:	747b      	strb	r3, [r7, #17]
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000218 	.word	0x20000218

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f000 fba3 	bl	8001f4c <HAL_Init>

  /* USER CODE BEGIN Init */
  double Tab[4] = {0};//Tableau pour le main
 8001806:	463b      	mov	r3, r7
 8001808:	2220      	movs	r2, #32
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f004 f927 	bl	8005a60 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001812:	f000 f887 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001816:	f7ff fbe9 	bl	8000fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800181a:	f000 fa9b 	bl	8001d54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800181e:	f7ff fc5b 	bl	80010d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001822:	f000 fa67 	bl	8001cf4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001826:	f000 f9f9 	bl	8001c1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//initialisation timer
 800182a:	4832      	ldr	r0, [pc, #200]	; (80018f4 <main+0xf8>)
 800182c:	f003 f8e4 	bl	80049f8 <HAL_TIM_Base_Start>
  lcd_init(&hi2c1, &lcdData); //initialisation lcd
 8001830:	4931      	ldr	r1, [pc, #196]	; (80018f8 <main+0xfc>)
 8001832:	4832      	ldr	r0, [pc, #200]	; (80018fc <main+0x100>)
 8001834:	f7ff fcee 	bl	8001214 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	 HAL_Delay(1000);//Attente 1s = refaire la boucle toute les secondes
 8001838:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800183c:	f000 fc02 	bl	8002044 <HAL_Delay>
	  	 DHT22_start();
 8001840:	f7ff fe86 	bl	8001550 <DHT22_start>
	  	 reponse = DHT22_Answer();
 8001844:	f7ff fea5 	bl	8001592 <DHT22_Answer>
 8001848:	4603      	mov	r3, r0
 800184a:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <main+0x104>)
 800184c:	6013      	str	r3, [r2, #0]

	  	 /*DHT22 à une trame de 40 bit, 8 premier bit humidité haute HH, 8 bit d'après humidité basse HL,
	  	 8 bit bit d'après température haute, 8 bit d'après température basse, 8 dernier bit pour verification
	  	 de l'acquisition */

	  	 if(reponse == 1)
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <main+0x104>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d148      	bne.n	80018e8 <main+0xec>
	  	 {
	  	 	 //Commencer aquérir les 5 différents octets
	  	 	 DHT22_Read_Data(&HH);
 8001856:	482b      	ldr	r0, [pc, #172]	; (8001904 <main+0x108>)
 8001858:	f7ff feef 	bl	800163a <DHT22_Read_Data>
	  	 	 DHT22_Read_Data(&HL);
 800185c:	482a      	ldr	r0, [pc, #168]	; (8001908 <main+0x10c>)
 800185e:	f7ff feec 	bl	800163a <DHT22_Read_Data>
	  	 	 DHT22_Read_Data(&TH);
 8001862:	482a      	ldr	r0, [pc, #168]	; (800190c <main+0x110>)
 8001864:	f7ff fee9 	bl	800163a <DHT22_Read_Data>
	  	 	 DHT22_Read_Data(&TL);
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <main+0x114>)
 800186a:	f7ff fee6 	bl	800163a <DHT22_Read_Data>
	  	 	 DHT22_Read_Data(&SUM);
 800186e:	4829      	ldr	r0, [pc, #164]	; (8001914 <main+0x118>)
 8001870:	f7ff fee3 	bl	800163a <DHT22_Read_Data>

	  	 	 check = HH + HL + TH + TL;
 8001874:	4b23      	ldr	r3, [pc, #140]	; (8001904 <main+0x108>)
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <main+0x10c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4413      	add	r3, r2
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <main+0x110>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4413      	add	r3, r2
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <main+0x114>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4413      	add	r3, r2
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <main+0x11c>)
 8001892:	701a      	strb	r2, [r3, #0]
	  	 	 if(check == SUM)//vérifier qu'il n'y a pas d'erreur dans les données reçu
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <main+0x11c>)
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <main+0x118>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d123      	bne.n	80018e8 <main+0xec>
	  	 	 {
	  	 	  	//combiner 2 octets d'humité et diviser resultat par 10 pour avoir humidité en %
	  	 	  	Humidite = (float) ((HH<<8) | HL) / 10;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <main+0x108>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <main+0x10c>)
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <main+0x120>)
 80018be:	edc3 7a00 	vstr	s15, [r3]
	  	 	  	//combiner 2 octets de température et diviser resultat par 10 pour avoir température en °C
	  	 	  	Temperature = (float) ((TH<<8) | TL) / 10;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <main+0x110>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <main+0x114>)
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <main+0x124>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]

	  	 	  	DHT22_Display_Data();//afficher température sur LCD
 80018e4:	f7ff ff10 	bl	8001708 <DHT22_Display_Data>
	  	 	 }
	  	 }

	  	 Mesure_Lum_TSL2561(Tab);//Appel de la fonction
 80018e8:	463b      	mov	r3, r7
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff4c 	bl	8001788 <Mesure_Lum_TSL2561>
	  	 HAL_Delay(1000);//Attente 1s = refaire la boucle toute les secondes
 80018f0:	e7a2      	b.n	8001838 <main+0x3c>
 80018f2:	bf00      	nop
 80018f4:	20000364 	.word	0x20000364
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	20000218 	.word	0x20000218
 8001900:	20000208 	.word	0x20000208
 8001904:	20000349 	.word	0x20000349
 8001908:	20000361 	.word	0x20000361
 800190c:	20000360 	.word	0x20000360
 8001910:	2000034a 	.word	0x2000034a
 8001914:	20000362 	.word	0x20000362
 8001918:	20000348 	.word	0x20000348
 800191c:	20000204 	.word	0x20000204
 8001920:	20000200 	.word	0x20000200

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b096      	sub	sp, #88	; 0x58
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2244      	movs	r2, #68	; 0x44
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f004 f894 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800194a:	f001 fcff 	bl	800334c <HAL_PWREx_ControlVoltageScaling>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001954:	f000 f837 	bl	80019c6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001958:	2302      	movs	r3, #2
 800195a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001962:	2310      	movs	r3, #16
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196a:	2302      	movs	r3, #2
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001972:	230a      	movs	r3, #10
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001976:	2307      	movs	r3, #7
 8001978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800197a:	2302      	movs	r3, #2
 800197c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4618      	mov	r0, r3
 8001988:	f001 fd36 	bl	80033f8 <HAL_RCC_OscConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001992:	f000 f818 	bl	80019c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001996:	230f      	movs	r3, #15
 8001998:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199a:	2303      	movs	r3, #3
 800199c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2104      	movs	r1, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f908 	bl	8003bc4 <HAL_RCC_ClockConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ba:	f000 f804 	bl	80019c6 <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3758      	adds	r7, #88	; 0x58
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ca:	b672      	cpsid	i
}
 80019cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ce:	e7fe      	b.n	80019ce <Error_Handler+0x8>

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x44>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_MspInit+0x44>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6613      	str	r3, [r2, #96]	; 0x60
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x44>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x44>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_MspInit+0x44>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_MspInit+0x44>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 face 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_kill>:

int _kill(int pid, int sig)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a86:	f003 ffc1 	bl	8005a0c <__errno>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2216      	movs	r2, #22
 8001a8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_exit>:

void _exit (int status)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffe7 	bl	8001a7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aae:	e7fe      	b.n	8001aae <_exit+0x12>

08001ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e00a      	b.n	8001ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ac2:	f3af 8000 	nop.w
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf0      	blt.n	8001ac2 <_read+0x12>
	}

return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e009      	b.n	8001b10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbf1      	blt.n	8001afc <_write+0x12>
	}
	return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_close>:

int _close(int file)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_isatty>:

int _isatty(int file)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	return 1;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f003 ff26 	bl	8005a0c <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20018000 	.word	0x20018000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	2000020c 	.word	0x2000020c
 8001bf4:	200004d0 	.word	0x200004d0

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c44:	224f      	movs	r2, #79	; 0x4f
 8001c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c64:	f002 fe70 	bl	8004948 <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c6e:	f7ff feaa 	bl	80019c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c80:	f002 ff22 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c8a:	f7ff fe9c 	bl	80019c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c9c:	f003 f912 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ca6:	f7ff fe8e 	bl	80019c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000364 	.word	0x20000364

08001cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_TIM_Base_MspInit+0x38>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_TIM_Base_MspInit+0x38>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_TIM_Base_MspInit+0x38>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <MX_USART1_UART_Init+0x58>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 74880;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <MX_USART1_UART_Init+0x5c>)
 8001d02:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d18:	220c      	movs	r2, #12
 8001d1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <MX_USART1_UART_Init+0x54>)
 8001d36:	f003 f94d 	bl	8004fd4 <HAL_UART_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d40:	f7ff fe41 	bl	80019c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200003b0 	.word	0x200003b0
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	00012480 	.word	0x00012480

08001d54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <MX_USART2_UART_Init+0x5c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART2_UART_Init+0x58>)
 8001d98:	f003 f91c 	bl	8004fd4 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001da2:	f7ff fe10 	bl	80019c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000434 	.word	0x20000434
 8001db0:	40004400 	.word	0x40004400

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0ae      	sub	sp, #184	; 0xb8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2288      	movs	r2, #136	; 0x88
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fe43 	bl	8005a60 <memset>
  if(uartHandle->Instance==USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <HAL_UART_MspInit+0x138>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d13d      	bne.n	8001e60 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001de8:	2300      	movs	r3, #0
 8001dea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 f8ed 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dfc:	f7ff fde3 	bl	80019c6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0c:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f000 f9fd 	bl	8002258 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5e:	e040      	b.n	8001ee2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_UART_MspInit+0x140>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d13b      	bne.n	8001ee2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 f8aa 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001e82:	f7ff fda0 	bl	80019c6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0x13c>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f000 f9bb 	bl	8002258 <HAL_GPIO_Init>
}
 8001ee2:	bf00      	nop
 8001ee4:	37b8      	adds	r7, #184	; 0xb8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001efc:	f7ff fe7c 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopForever+0xe>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopForever+0x16>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f26:	f003 fd77 	bl	8005a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2a:	f7ff fc67 	bl	80017fc <main>

08001f2e <LoopForever>:

LoopForever:
    b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f3c:	0800a804 	.word	0x0800a804
  ldr r2, =_sbss
 8001f40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f44:	200004cc 	.word	0x200004cc

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_Init+0x3c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_Init+0x3c>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f000 f944 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f80f 	bl	8001f8c <HAL_InitTick>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	e001      	b.n	8001f7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f7a:	f7ff fd29 	bl	80019d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_InitTick+0x6c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d023      	beq.n	8001fe8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_InitTick+0x70>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_InitTick+0x6c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f941 	bl	800223e <HAL_SYSTICK_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d809      	bhi.n	8001fdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f919 	bl	8002206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_InitTick+0x74>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e007      	b.n	8001fec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e004      	b.n	8001fec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e001      	b.n	8001fec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008
 8002028:	200004b8 	.word	0x200004b8

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200004b8 	.word	0x200004b8

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff47 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff5c 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffb0 	bl	80021ac <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e17f      	b.n	8002568 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8171 	beq.w	8002562 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_GPIO_Init+0x40>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d118      	bne.n	8002338 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800230c:	2201      	movs	r2, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80ac 	beq.w	8002562 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <HAL_GPIO_Init+0x330>)
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	4a5e      	ldr	r2, [pc, #376]	; (8002588 <HAL_GPIO_Init+0x330>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6613      	str	r3, [r2, #96]	; 0x60
 8002416:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <HAL_GPIO_Init+0x330>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_GPIO_Init+0x334>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x242>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <HAL_GPIO_Init+0x338>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x23e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_GPIO_Init+0x33c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x23a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x340>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x236>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x344>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x232>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_GPIO_Init+0x348>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x22e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_GPIO_Init+0x34c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x22a>
 800247e:	2306      	movs	r3, #6
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002482:	2307      	movs	r3, #7
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x244>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x244>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x244>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x244>
 800249a:	2300      	movs	r3, #0
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ac:	4937      	ldr	r1, [pc, #220]	; (800258c <HAL_GPIO_Init+0x334>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_GPIO_Init+0x350>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_GPIO_Init+0x350>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x350>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <HAL_GPIO_Init+0x350>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f ae78 	bne.w	8002268 <HAL_GPIO_Init+0x10>
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48001000 	.word	0x48001000
 80025a0:	48001400 	.word	0x48001400
 80025a4:	48001800 	.word	0x48001800
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e001      	b.n	80025ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e081      	b.n	8002722 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fd90 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800265c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	e006      	b.n	8002694 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002692:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d104      	bne.n	80026a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69d9      	ldr	r1, [r3, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	461a      	mov	r2, r3
 8002738:	460b      	mov	r3, r1
 800273a:	817b      	strh	r3, [r7, #10]
 800273c:	4613      	mov	r3, r2
 800273e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	f040 80da 	bne.w	8002902 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_I2C_Master_Transmit+0x30>
 8002758:	2302      	movs	r3, #2
 800275a:	e0d3      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002764:	f7ff fc62 	bl	800202c <HAL_GetTick>
 8002768:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2319      	movs	r3, #25
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 faed 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0be      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2221      	movs	r2, #33	; 0x21
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2210      	movs	r2, #16
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	893a      	ldrh	r2, [r7, #8]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2bff      	cmp	r3, #255	; 0xff
 80027b6:	d90e      	bls.n	80027d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	8979      	ldrh	r1, [r7, #10]
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_I2C_Master_Transmit+0x1e0>)
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fce4 	bl	800319c <I2C_TransferConfig>
 80027d4:	e06c      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	4b48      	ldr	r3, [pc, #288]	; (800290c <HAL_I2C_Master_Transmit+0x1e0>)
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fcd3 	bl	800319c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027f6:	e05b      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 faea 	bl	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e07b      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d034      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x184>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d130      	bne.n	80028b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fa7c 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e04d      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2bff      	cmp	r3, #255	; 0xff
 8002870:	d90e      	bls.n	8002890 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	22ff      	movs	r2, #255	; 0xff
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	b2da      	uxtb	r2, r3
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	2300      	movs	r3, #0
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fc87 	bl	800319c <I2C_TransferConfig>
 800288e:	e00f      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	8979      	ldrh	r1, [r7, #10]
 80028a2:	2300      	movs	r3, #0
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fc76 	bl	800319c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d19e      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fac9 	bl	8002e56 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01a      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2220      	movs	r2, #32
 80028d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_I2C_Master_Transmit+0x1e4>)
 80028e2:	400b      	ands	r3, r1
 80028e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	80002000 	.word	0x80002000
 8002910:	fe00e800 	.word	0xfe00e800

08002914 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	461a      	mov	r2, r3
 8002920:	460b      	mov	r3, r1
 8002922:	817b      	strh	r3, [r7, #10]
 8002924:	4613      	mov	r3, r2
 8002926:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	f040 80db 	bne.w	8002aec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2C_Master_Receive+0x30>
 8002940:	2302      	movs	r3, #2
 8002942:	e0d4      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800294c:	f7ff fb6e 	bl	800202c <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2319      	movs	r3, #25
 8002958:	2201      	movs	r2, #1
 800295a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f9f9 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0bf      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2222      	movs	r2, #34	; 0x22
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2210      	movs	r2, #16
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	893a      	ldrh	r2, [r7, #8]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	d90e      	bls.n	80029be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	22ff      	movs	r2, #255	; 0xff
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	8979      	ldrh	r1, [r7, #10]
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_I2C_Master_Receive+0x1e4>)
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fbf0 	bl	800319c <I2C_TransferConfig>
 80029bc:	e06d      	b.n	8002a9a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	8979      	ldrh	r1, [r7, #10]
 80029d0:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <HAL_I2C_Master_Receive+0x1e4>)
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fbdf 	bl	800319c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80029de:	e05c      	b.n	8002a9a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6a39      	ldr	r1, [r7, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fa73 	bl	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e07c      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d034      	beq.n	8002a9a <HAL_I2C_Master_Receive+0x186>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d130      	bne.n	8002a9a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f987 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e04d      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2bff      	cmp	r3, #255	; 0xff
 8002a5a:	d90e      	bls.n	8002a7a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	22ff      	movs	r2, #255	; 0xff
 8002a60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	8979      	ldrh	r1, [r7, #10]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fb92 	bl	800319c <I2C_TransferConfig>
 8002a78:	e00f      	b.n	8002a9a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fb81 	bl	800319c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d19d      	bne.n	80029e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	6a39      	ldr	r1, [r7, #32]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f9d4 	bl	8002e56 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e01a      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2220      	movs	r2, #32
 8002abe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_I2C_Master_Receive+0x1e8>)
 8002acc:	400b      	ands	r3, r1
 8002ace:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	80002400 	.word	0x80002400
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	f040 80f1 	bne.w	8002d04 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0e7      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2C_IsDeviceReady+0x44>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0e0      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_IsDeviceReady+0x72>
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b70:	e004      	b.n	8002b7c <HAL_I2C_IsDeviceReady+0x7c>
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b82:	f7ff fa53 	bl	800202c <HAL_GetTick>
 8002b86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bb4:	e034      	b.n	8002c20 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7ff fa35 	bl	800202c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <HAL_I2C_IsDeviceReady+0xd4>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e088      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_I2C_IsDeviceReady+0x12c>
 8002c26:	7fbb      	ldrb	r3, [r7, #30]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0c4      	beq.n	8002bb6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d01a      	beq.n	8002c70 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2120      	movs	r1, #32
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f886 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e058      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e04a      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	2120      	movs	r1, #32
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f86b 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e03d      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2220      	movs	r2, #32
 8002c98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d118      	bne.n	8002cd4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2120      	movs	r1, #32
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f84a 	bl	8002d56 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e01c      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	f63f af3b 	bhi.w	8002b5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d103      	bne.n	8002d2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d007      	beq.n	8002d4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	619a      	str	r2, [r3, #24]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d66:	e022      	b.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d01e      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d70:	f7ff f95c 	bl	800202c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d302      	bcc.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d0cd      	beq.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de2:	e02c      	b.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f8eb 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e02a      	b.n	8002e4e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d01e      	beq.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7ff f914 	bl	800202c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d113      	bne.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d1cb      	bne.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e62:	e028      	b.n	8002eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f8ab 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e026      	b.n	8002ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e78:	f7ff f8d8 	bl	800202c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d113      	bne.n	8002eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e007      	b.n	8002ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d1cf      	bne.n	8002e64 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002edc:	e064      	b.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f86e 	bl	8002fc4 <I2C_IsErrorOccurred>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e062      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d138      	bne.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d105      	bne.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e04e      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d107      	bne.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2204      	movs	r2, #4
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
 8002f36:	e002      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7ff f85b 	bl	800202c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10f      	bne.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d193      	bne.n	8002ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	fe00e800 	.word	0xfe00e800

08002fc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d075      	beq.n	80030dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff8:	e056      	b.n	80030a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d052      	beq.n	80030a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7ff f813 	bl	800202c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_IsErrorOccurred+0x54>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d147      	bne.n	80030a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800302a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303a:	d12e      	bne.n	800309a <I2C_IsErrorOccurred+0xd6>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003042:	d02a      	beq.n	800309a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b20      	cmp	r3, #32
 8003048:	d027      	beq.n	800309a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003058:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800305a:	f7fe ffe7 	bl	800202c <HAL_GetTick>
 800305e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	e01b      	b.n	800309a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003062:	f7fe ffe3 	bl	800202c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b19      	cmp	r3, #25
 800306e:	d914      	bls.n	800309a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d1dc      	bne.n	8003062 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d003      	beq.n	80030be <I2C_IsErrorOccurred+0xfa>
 80030b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d09d      	beq.n	8002ffa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2220      	movs	r2, #32
 80030cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800314a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01c      	beq.n	800318c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fddb 	bl	8002d0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <I2C_IsErrorOccurred+0x1d4>)
 8003164:	400b      	ands	r3, r1
 8003166:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800318c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	fe00e800 	.word	0xfe00e800

0800319c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	817b      	strh	r3, [r7, #10]
 80031aa:	4613      	mov	r3, r2
 80031ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031b4:	7a7b      	ldrb	r3, [r7, #9]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031bc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ca:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	0d5b      	lsrs	r3, r3, #21
 80031d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <I2C_TransferConfig+0x60>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	43db      	mvns	r3, r3
 80031e0:	ea02 0103 	and.w	r1, r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	03ff63ff 	.word	0x03ff63ff

08003200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d138      	bne.n	8003288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003220:	2302      	movs	r3, #2
 8003222:	e032      	b.n	800328a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d139      	bne.n	8003320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e033      	b.n	8003322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2224      	movs	r2, #36	; 0x24
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <HAL_PWREx_GetVoltageRange+0x18>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40007000 	.word	0x40007000

0800334c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335a:	d130      	bne.n	80033be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800335c:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003368:	d038      	beq.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003372:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2232      	movs	r2, #50	; 0x32
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003390:	e002      	b.n	8003398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3b01      	subs	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d102      	bne.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f2      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d110      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ca:	d007      	beq.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40007000 	.word	0x40007000
 80033f0:	20000000 	.word	0x20000000
 80033f4:	431bde83 	.word	0x431bde83

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e3d4      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340a:	4ba1      	ldr	r3, [pc, #644]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003414:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80e4 	beq.w	80035f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_RCC_OscConfig+0x4a>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	f040 808b 	bne.w	8003550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 8087 	bne.w	8003550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003442:	4b93      	ldr	r3, [pc, #588]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x62>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e3ac      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_RCC_OscConfig+0x7c>
 800346a:	4b89      	ldr	r3, [pc, #548]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003472:	e005      	b.n	8003480 <HAL_RCC_OscConfig+0x88>
 8003474:	4b86      	ldr	r3, [pc, #536]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003480:	4293      	cmp	r3, r2
 8003482:	d223      	bcs.n	80034cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fd41 	bl	8003f10 <RCC_SetFlashLatencyFromMSIRange>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e38d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003498:	4b7d      	ldr	r3, [pc, #500]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7c      	ldr	r2, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800349e:	f043 0308 	orr.w	r3, r3, #8
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b7a      	ldr	r3, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4977      	ldr	r1, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	4972      	ldr	r1, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]
 80034ca:	e025      	b.n	8003518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034cc:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a6f      	ldr	r2, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	496a      	ldr	r1, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b69      	ldr	r3, [pc, #420]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	4965      	ldr	r1, [pc, #404]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fd01 	bl	8003f10 <RCC_SetFlashLatencyFromMSIRange>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e34d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003518:	f000 fc36 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	495a      	ldr	r1, [pc, #360]	; (8003694 <HAL_RCC_OscConfig+0x29c>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_RCC_OscConfig+0x2a0>)
 8003536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003538:	4b58      	ldr	r3, [pc, #352]	; (800369c <HAL_RCC_OscConfig+0x2a4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fd25 	bl	8001f8c <HAL_InitTick>
 8003542:	4603      	mov	r3, r0
 8003544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d052      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	e331      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d032      	beq.n	80035be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003564:	f7fe fd62 	bl	800202c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800356c:	f7fe fd5e 	bl	800202c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e31a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a40      	ldr	r2, [pc, #256]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b3e      	ldr	r3, [pc, #248]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	493b      	ldr	r1, [pc, #236]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a8:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	4936      	ldr	r1, [pc, #216]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	e01a      	b.n	80035f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a33      	ldr	r2, [pc, #204]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fd2f 	bl	800202c <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035d2:	f7fe fd2b 	bl	800202c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e2e7      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x1da>
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d074      	beq.n	80036ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b08      	cmp	r3, #8
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x21a>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b0c      	cmp	r3, #12
 800360a:	d10e      	bne.n	800362a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d10b      	bne.n	800362a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d064      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d160      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e2c4      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x24a>
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e01d      	b.n	800367e <HAL_RCC_OscConfig+0x286>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x26e>
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x286>
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HAL_RCC_OscConfig+0x298>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe fcd1 	bl	800202c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368c:	e011      	b.n	80036b2 <HAL_RCC_OscConfig+0x2ba>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	0800a2f8 	.word	0x0800a2f8
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fcc4 	bl	800202c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e280      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	4baf      	ldr	r3, [pc, #700]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2a8>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fcb4 	bl	800202c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fcb0 	bl	800202c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e26c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	4ba5      	ldr	r3, [pc, #660]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d0>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d060      	beq.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_OscConfig+0x310>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d119      	bne.n	8003736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d116      	bne.n	8003736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003708:	4b99      	ldr	r3, [pc, #612]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_OscConfig+0x328>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e249      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b93      	ldr	r3, [pc, #588]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	4990      	ldr	r1, [pc, #576]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	e040      	b.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d023      	beq.n	8003786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373e:	4b8c      	ldr	r3, [pc, #560]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a8b      	ldr	r2, [pc, #556]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fe fc6f 	bl	800202c <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003752:	f7fe fc6b 	bl	800202c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e227      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	4b82      	ldr	r3, [pc, #520]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b7f      	ldr	r3, [pc, #508]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	497c      	ldr	r1, [pc, #496]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe fc4b 	bl	800202c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe fc47 	bl	800202c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e203      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d03c      	beq.n	800383e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01c      	beq.n	8003806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037cc:	4b68      	ldr	r3, [pc, #416]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fe fc26 	bl	800202c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe fc22 	bl	800202c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1de      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80037f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ef      	beq.n	80037e4 <HAL_RCC_OscConfig+0x3ec>
 8003804:	e01b      	b.n	800383e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fc09 	bl	800202c <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381e:	f7fe fc05 	bl	800202c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e1c1      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1ef      	bne.n	800381e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80a6 	beq.w	8003998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384c:	2300      	movs	r3, #0
 800384e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003850:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385c:	4b44      	ldr	r3, [pc, #272]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	4a43      	ldr	r2, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	; 0x58
 8003868:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003874:	2301      	movs	r3, #1
 8003876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003878:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <HAL_RCC_OscConfig+0x57c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d118      	bne.n	80038b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x57c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <HAL_RCC_OscConfig+0x57c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003890:	f7fe fbcc 	bl	800202c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fe fbc8 	bl	800202c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e184      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038aa:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCC_OscConfig+0x57c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4d8>
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ce:	e024      	b.n	800391a <HAL_RCC_OscConfig+0x522>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d110      	bne.n	80038fa <HAL_RCC_OscConfig+0x502>
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	4a20      	ldr	r2, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f8:	e00f      	b.n	800391a <HAL_RCC_OscConfig+0x522>
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003912:	f023 0304 	bic.w	r3, r3, #4
 8003916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003922:	f7fe fb83 	bl	800202c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fb7f 	bl	800202c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e139      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ed      	beq.n	800392a <HAL_RCC_OscConfig+0x532>
 800394e:	e01a      	b.n	8003986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe fb6c 	bl	800202c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003956:	e00f      	b.n	8003978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fe fb68 	bl	800202c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d906      	bls.n	8003978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e122      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003978:	4b90      	ldr	r3, [pc, #576]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e8      	bne.n	8003958 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003986:	7ffb      	ldrb	r3, [r7, #31]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b8b      	ldr	r3, [pc, #556]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	4a8a      	ldr	r2, [pc, #552]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8108 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	f040 80d0 	bne.w	8003b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039ac:	4b83      	ldr	r3, [pc, #524]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d130      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	3b01      	subs	r3, #1
 80039cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d127      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d11f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039ec:	2a07      	cmp	r2, #7
 80039ee:	bf14      	ite	ne
 80039f0:	2201      	movne	r2, #1
 80039f2:	2200      	moveq	r2, #0
 80039f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d113      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	3b01      	subs	r3, #1
 8003a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d06e      	beq.n	8003b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d069      	beq.n	8003afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a28:	4b64      	ldr	r3, [pc, #400]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b7      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a44:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5c      	ldr	r2, [pc, #368]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a50:	f7fe faec 	bl	800202c <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fae8 	bl	800202c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0a4      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a76:	4b51      	ldr	r3, [pc, #324]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <HAL_RCC_OscConfig+0x7c8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a90:	0212      	lsls	r2, r2, #8
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a98:	0852      	lsrs	r2, r2, #1
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	0552      	lsls	r2, r2, #21
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa4:	0852      	lsrs	r2, r2, #1
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	0652      	lsls	r2, r2, #25
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab0:	0912      	lsrs	r2, r2, #4
 8003ab2:	0452      	lsls	r2, r2, #17
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4941      	ldr	r1, [pc, #260]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003abc:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac8:	4b3c      	ldr	r3, [pc, #240]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a3b      	ldr	r2, [pc, #236]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad4:	f7fe faaa 	bl	800202c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe faa6 	bl	800202c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e062      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003afa:	e05a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e059      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d152      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b24:	f7fe fa82 	bl	800202c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fa7e 	bl	800202c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e03a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x734>
 8003b4a:	e032      	b.n	8003bb2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d02d      	beq.n	8003bae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b6a:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b70:	f023 0303 	bic.w	r3, r3, #3
 8003b74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003b7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe fa51 	bl	800202c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fa4d 	bl	800202c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_OscConfig+0x7c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x796>
 8003bac:	e001      	b.n	8003bb2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	f99d808c 	.word	0xf99d808c

08003bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0c8      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d910      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 0207 	bic.w	r2, r3, #7
 8003bee:	4961      	ldr	r1, [pc, #388]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b5f      	ldr	r3, [pc, #380]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b0      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d04c      	beq.n	8003cae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d121      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e09e      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d115      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e092      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4c:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e086      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e07e      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 0203 	bic.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	493f      	ldr	r1, [pc, #252]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7e:	f7fe f9d5 	bl	800202c <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c86:	f7fe f9d1 	bl	800202c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e066      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 020c 	and.w	r2, r3, #12
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d1eb      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	492c      	ldr	r1, [pc, #176]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d210      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4924      	ldr	r1, [pc, #144]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <HAL_RCC_ClockConfig+0x1b0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e036      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4918      	ldr	r1, [pc, #96]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4910      	ldr	r1, [pc, #64]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d3a:	f000 f825 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_ClockConfig+0x1b4>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490c      	ldr	r1, [pc, #48]	; (8003d7c <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe f914 	bl	8001f8c <HAL_InitTick>
 8003d64:	4603      	mov	r3, r0
 8003d66:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d68:	7afb      	ldrb	r3, [r7, #11]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	0800a2f8 	.word	0x0800a2f8
 8003d80:	20000000 	.word	0x20000000
 8003d84:	20000004 	.word	0x20000004

08003d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d96:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da0:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x34>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d121      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d11e      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dbc:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e005      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d102      	bne.n	8003e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e004      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d134      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d003      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0xac>
 8003e2c:	e005      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e30:	617b      	str	r3, [r7, #20]
      break;
 8003e32:	e005      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e36:	617b      	str	r3, [r7, #20]
      break;
 8003e38:	e002      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	617b      	str	r3, [r7, #20]
      break;
 8003e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	0a1b      	lsrs	r3, r3, #8
 8003e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	fb02 f203 	mul.w	r2, r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	0e5b      	lsrs	r3, r3, #25
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	3301      	adds	r3, #1
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e80:	69bb      	ldr	r3, [r7, #24]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	0800a310 	.word	0x0800a310
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	007a1200 	.word	0x007a1200

08003ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000000 	.word	0x20000000

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ebc:	f7ff fff0 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	0800a308 	.word	0x0800a308

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ee8:	f7ff ffda 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4904      	ldr	r1, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	0800a308 	.word	0x0800a308

08003f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f28:	f7ff fa02 	bl	8003330 <HAL_PWREx_GetVoltageRange>
 8003f2c:	6178      	str	r0, [r7, #20]
 8003f2e:	e014      	b.n	8003f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f48:	f7ff f9f2 	bl	8003330 <HAL_PWREx_GetVoltageRange>
 8003f4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d10b      	bne.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d919      	bls.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f6c:	d902      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f6e:	2302      	movs	r3, #2
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e013      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	e010      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b80      	cmp	r3, #128	; 0x80
 8003f7e:	d902      	bls.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f80:	2303      	movs	r3, #3
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	e00a      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d102      	bne.n	8003f92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e004      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b70      	cmp	r3, #112	; 0x70
 8003f96:	d101      	bne.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f98:	2301      	movs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 0207 	bic.w	r2, r3, #7
 8003fa4:	4909      	ldr	r1, [pc, #36]	; (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d001      	beq.n	8003fbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40022000 	.word	0x40022000

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd8:	2300      	movs	r3, #0
 8003fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d041      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ff4:	d02a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ff6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ffa:	d824      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004006:	d81e      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800400c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004010:	d010      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004012:	e018      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004014:	4b86      	ldr	r3, [pc, #536]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a85      	ldr	r2, [pc, #532]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004020:	e015      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fabb 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3320      	adds	r3, #32
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fba6 	bl	800478c <RCCEx_PLLSAI2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	74fb      	strb	r3, [r7, #19]
      break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800404c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004062:	4973      	ldr	r1, [pc, #460]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800406a:	e001      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d041      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004084:	d02a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800408a:	d824      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800408c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004096:	d81e      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a0:	d010      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040a2:	e018      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a4:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a61      	ldr	r2, [pc, #388]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b0:	e015      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa73 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c2:	e00c      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3320      	adds	r3, #32
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fb5e 	bl	800478c <RCCEx_PLLSAI2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	74fb      	strb	r3, [r7, #19]
      break;
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e4:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f2:	494f      	ldr	r1, [pc, #316]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040fa:	e001      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a0 	beq.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004132:	6593      	str	r3, [r2, #88]	; 0x58
 8004134:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004140:	2301      	movs	r3, #1
 8004142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004150:	f7fd ff6c 	bl	800202c <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004156:	e009      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fd ff68 	bl	800202c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d902      	bls.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	74fb      	strb	r3, [r7, #19]
        break;
 800416a:	e005      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ef      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d15c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d019      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	4a20      	ldr	r2, [pc, #128]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041c8:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041da:	f7fd ff27 	bl	800202c <HAL_GetTick>
 80041de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	e00b      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd ff23 	bl	800202c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d902      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	74fb      	strb	r3, [r7, #19]
            break;
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ec      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004208:	7cfb      	ldrb	r3, [r7, #19]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	4904      	ldr	r1, [pc, #16]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004226:	e009      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
 800422c:	e006      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423c:	7c7b      	ldrb	r3, [r7, #17]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4b9e      	ldr	r3, [pc, #632]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a9d      	ldr	r2, [pc, #628]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800425a:	4b98      	ldr	r3, [pc, #608]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 0203 	bic.w	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	4994      	ldr	r1, [pc, #592]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800427c:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 020c 	bic.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	498c      	ldr	r1, [pc, #560]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800429e:	4b87      	ldr	r3, [pc, #540]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	4983      	ldr	r1, [pc, #524]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042c0:	4b7e      	ldr	r3, [pc, #504]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	497b      	ldr	r1, [pc, #492]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042e2:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	4972      	ldr	r1, [pc, #456]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004304:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	496a      	ldr	r1, [pc, #424]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004326:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	4961      	ldr	r1, [pc, #388]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004348:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004356:	4959      	ldr	r1, [pc, #356]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436a:	4b54      	ldr	r3, [pc, #336]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	4950      	ldr	r1, [pc, #320]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	4948      	ldr	r1, [pc, #288]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	493f      	ldr	r1, [pc, #252]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d028      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d0:	4b3a      	ldr	r3, [pc, #232]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043de:	4937      	ldr	r1, [pc, #220]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ee:	d106      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f0:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a31      	ldr	r2, [pc, #196]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fa:	60d3      	str	r3, [r2, #12]
 80043fc:	e011      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004406:	d10c      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	2101      	movs	r1, #1
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f8c8 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d028      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	491f      	ldr	r1, [pc, #124]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444c:	d106      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004458:	60d3      	str	r3, [r2, #12]
 800445a:	e011      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3304      	adds	r3, #4
 800446a:	2101      	movs	r1, #1
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f899 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02b      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	4908      	ldr	r1, [pc, #32]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044aa:	d109      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a02      	ldr	r2, [pc, #8]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b6:	60d3      	str	r3, [r2, #12]
 80044b8:	e014      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3304      	adds	r3, #4
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 f867 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02f      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fe:	4928      	ldr	r1, [pc, #160]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800450e:	d10d      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	2102      	movs	r1, #2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f844 	bl	80045a4 <RCCEx_PLLSAI1_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d014      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	74bb      	strb	r3, [r7, #18]
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3320      	adds	r3, #32
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f925 	bl	800478c <RCCEx_PLLSAI2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456a:	490d      	ldr	r1, [pc, #52]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004596:	7cbb      	ldrb	r3, [r7, #18]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000

080045a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045b2:	4b75      	ldr	r3, [pc, #468]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045be:	4b72      	ldr	r3, [pc, #456]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0203 	and.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10d      	bne.n	80045ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
       ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045d6:	4b6c      	ldr	r3, [pc, #432]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
       ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d047      	beq.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e044      	b.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d018      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x86>
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d825      	bhi.n	8004648 <RCCEx_PLLSAI1_Config+0xa4>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d002      	beq.n	8004606 <RCCEx_PLLSAI1_Config+0x62>
 8004600:	2b02      	cmp	r3, #2
 8004602:	d009      	beq.n	8004618 <RCCEx_PLLSAI1_Config+0x74>
 8004604:	e020      	b.n	8004648 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004606:	4b60      	ldr	r3, [pc, #384]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d11d      	bne.n	800464e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e01a      	b.n	800464e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004618:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d116      	bne.n	8004652 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e013      	b.n	8004652 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800462a:	4b57      	ldr	r3, [pc, #348]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004636:	4b54      	ldr	r3, [pc, #336]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004646:	e006      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e004      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004656:	bf00      	nop
    }

    if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	430b      	orrs	r3, r1
 8004674:	4944      	ldr	r1, [pc, #272]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d17d      	bne.n	800477c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a40      	ldr	r2, [pc, #256]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fd fcce 	bl	800202c <HAL_GetTick>
 8004690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004692:	e009      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004694:	f7fd fcca 	bl	800202c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d902      	bls.n	80046a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	73fb      	strb	r3, [r7, #15]
        break;
 80046a6:	e005      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046a8:	4b37      	ldr	r3, [pc, #220]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ef      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d160      	bne.n	800477c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d111      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c0:	4b31      	ldr	r3, [pc, #196]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	0211      	lsls	r1, r2, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68d2      	ldr	r2, [r2, #12]
 80046d6:	0912      	lsrs	r2, r2, #4
 80046d8:	0452      	lsls	r2, r2, #17
 80046da:	430a      	orrs	r2, r1
 80046dc:	492a      	ldr	r1, [pc, #168]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	610b      	str	r3, [r1, #16]
 80046e2:	e027      	b.n	8004734 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d112      	bne.n	8004710 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	0211      	lsls	r1, r2, #8
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6912      	ldr	r2, [r2, #16]
 8004700:	0852      	lsrs	r2, r2, #1
 8004702:	3a01      	subs	r2, #1
 8004704:	0552      	lsls	r2, r2, #21
 8004706:	430a      	orrs	r2, r1
 8004708:	491f      	ldr	r1, [pc, #124]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
 800470e:	e011      	b.n	8004734 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004718:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6952      	ldr	r2, [r2, #20]
 8004726:	0852      	lsrs	r2, r2, #1
 8004728:	3a01      	subs	r2, #1
 800472a:	0652      	lsls	r2, r2, #25
 800472c:	430a      	orrs	r2, r1
 800472e:	4916      	ldr	r1, [pc, #88]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd fc74 	bl	800202c <HAL_GetTick>
 8004744:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004746:	e009      	b.n	800475c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004748:	f7fd fc70 	bl	800202c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d902      	bls.n	800475c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	73fb      	strb	r3, [r7, #15]
          break;
 800475a:	e005      	b.n	8004768 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ef      	beq.n	8004748 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000

0800478c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800479a:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d018      	beq.n	80047d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047a6:	4b67      	ldr	r3, [pc, #412]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d10d      	bne.n	80047d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047be:	4b61      	ldr	r3, [pc, #388]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
       ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d047      	beq.n	8004862 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	e044      	b.n	8004862 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d018      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0x86>
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d825      	bhi.n	8004830 <RCCEx_PLLSAI2_Config+0xa4>
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d002      	beq.n	80047ee <RCCEx_PLLSAI2_Config+0x62>
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d009      	beq.n	8004800 <RCCEx_PLLSAI2_Config+0x74>
 80047ec:	e020      	b.n	8004830 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ee:	4b55      	ldr	r3, [pc, #340]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11d      	bne.n	8004836 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fe:	e01a      	b.n	8004836 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004810:	e013      	b.n	800483a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004812:	4b4c      	ldr	r3, [pc, #304]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800481e:	4b49      	ldr	r3, [pc, #292]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800482e:	e006      	b.n	800483e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      break;
 8004834:	e004      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800483e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10d      	bne.n	8004862 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	430b      	orrs	r3, r1
 800485c:	4939      	ldr	r1, [pc, #228]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d167      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004874:	f7fd fbda 	bl	800202c <HAL_GetTick>
 8004878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800487a:	e009      	b.n	8004890 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800487c:	f7fd fbd6 	bl	800202c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d902      	bls.n	8004890 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	73fb      	strb	r3, [r7, #15]
        break;
 800488e:	e005      	b.n	800489c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004890:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ef      	bne.n	800487c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d14a      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d111      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a8:	4b26      	ldr	r3, [pc, #152]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6892      	ldr	r2, [r2, #8]
 80048b8:	0211      	lsls	r1, r2, #8
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68d2      	ldr	r2, [r2, #12]
 80048be:	0912      	lsrs	r2, r2, #4
 80048c0:	0452      	lsls	r2, r2, #17
 80048c2:	430a      	orrs	r2, r1
 80048c4:	491f      	ldr	r1, [pc, #124]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	614b      	str	r3, [r1, #20]
 80048ca:	e011      	b.n	80048f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6892      	ldr	r2, [r2, #8]
 80048dc:	0211      	lsls	r1, r2, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6912      	ldr	r2, [r2, #16]
 80048e2:	0852      	lsrs	r2, r2, #1
 80048e4:	3a01      	subs	r2, #1
 80048e6:	0652      	lsls	r2, r2, #25
 80048e8:	430a      	orrs	r2, r1
 80048ea:	4916      	ldr	r1, [pc, #88]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fd fb96 	bl	800202c <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004902:	e009      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004904:	f7fd fb92 	bl	800202c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	73fb      	strb	r3, [r7, #15]
          break;
 8004916:	e005      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ef      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4904      	ldr	r1, [pc, #16]	; (8004944 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	4313      	orrs	r3, r2
 8004936:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000

08004948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e049      	b.n	80049ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fd f9a2 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f000 f968 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e047      	b.n	8004aa0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <HAL_TIM_Base_Start+0xb4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d018      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_TIM_Base_Start+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_TIM_Base_Start+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_TIM_Base_Start+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_TIM_Base_Start+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_Base_Start+0x66>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_TIM_Base_Start+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <HAL_TIM_Base_Start+0xcc>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d015      	beq.n	8004a9c <HAL_TIM_Base_Start+0xa4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d011      	beq.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	e008      	b.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	00010007 	.word	0x00010007

08004ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0b6      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x18a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b20:	d03e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0xd8>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	f200 8087 	bhi.w	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2e:	f000 8086 	beq.w	8004c3e <HAL_TIM_ConfigClockSource+0x176>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d87f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b38:	2b70      	cmp	r3, #112	; 0x70
 8004b3a:	d01a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xaa>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d87b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d050      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x11e>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d877      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b48:	2b50      	cmp	r3, #80	; 0x50
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xfe>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d873      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d058      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0x13e>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d86f      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b58:	2b30      	cmp	r3, #48	; 0x30
 8004b5a:	d064      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d86b      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d060      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d867      	bhi.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d05a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x15e>
 8004b70:	e062      	b.n	8004c38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f000 f97f 	bl	8004e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
      break;
 8004b9e:	e04f      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f000 f968 	bl	8004e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
      break;
 8004bc4:	e03c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 f8dc 	bl	8004d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2150      	movs	r1, #80	; 0x50
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f935 	bl	8004e4e <TIM_ITRx_SetConfig>
      break;
 8004be4:	e02c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f000 f8fb 	bl	8004dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2160      	movs	r1, #96	; 0x60
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f925 	bl	8004e4e <TIM_ITRx_SetConfig>
      break;
 8004c04:	e01c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f8bc 	bl	8004d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f915 	bl	8004e4e <TIM_ITRx_SetConfig>
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f90c 	bl	8004e4e <TIM_ITRx_SetConfig>
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a3a      	ldr	r2, [pc, #232]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <TIM_Base_SetConfig+0x118>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <TIM_Base_SetConfig+0x11c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <TIM_Base_SetConfig+0x120>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_Base_SetConfig+0x128>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <TIM_Base_SetConfig+0x130>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <TIM_Base_SetConfig+0x114>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <TIM_Base_SetConfig+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <TIM_Base_SetConfig+0x128>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0f      	ldr	r2, [pc, #60]	; (8004d8c <TIM_Base_SetConfig+0x130>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f023 0201 	bic.w	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 030a 	bic.w	r3, r3, #10
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b087      	sub	sp, #28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0210 	bic.w	r2, r3, #16
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f043 0307 	orr.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	021a      	lsls	r2, r3, #8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e068      	b.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d108      	bne.n	8004f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10c      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40013400 	.word	0x40013400
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40014000 	.word	0x40014000

08004fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e040      	b.n	8005068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fedc 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	; 0x24
 8005000:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8c0 	bl	8005198 <UART_SetConfig>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e022      	b.n	8005068 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fb3e 	bl	80056ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fbc5 	bl	80057f0 <UART_CheckIdleState>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005084:	2b20      	cmp	r3, #32
 8005086:	f040 8082 	bne.w	800518e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_UART_Transmit+0x26>
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e07a      	b.n	8005190 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_UART_Transmit+0x38>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e073      	b.n	8005190 <HAL_UART_Transmit+0x120>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050be:	f7fc ffb5 	bl	800202c <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050dc:	d108      	bne.n	80050f0 <HAL_UART_Transmit+0x80>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e003      	b.n	80050f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005100:	e02d      	b.n	800515e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fbb8 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e039      	b.n	8005190 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512e:	b292      	uxth	r2, r2
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3302      	adds	r3, #2
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	e008      	b.n	800514c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	b292      	uxth	r2, r2
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1cb      	bne.n	8005102 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2140      	movs	r1, #64	; 0x40
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fb84 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e005      	b.n	8005190 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005198:	b5b0      	push	{r4, r5, r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4bad      	ldr	r3, [pc, #692]	; (8005478 <UART_SetConfig+0x2e0>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	69f9      	ldr	r1, [r7, #28]
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4aa2      	ldr	r2, [pc, #648]	; (800547c <UART_SetConfig+0x2e4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a99      	ldr	r2, [pc, #612]	; (8005480 <UART_SetConfig+0x2e8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d121      	bne.n	8005262 <UART_SetConfig+0xca>
 800521e:	4b99      	ldr	r3, [pc, #612]	; (8005484 <UART_SetConfig+0x2ec>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	2b03      	cmp	r3, #3
 800522a:	d817      	bhi.n	800525c <UART_SetConfig+0xc4>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0x9c>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005245 	.word	0x08005245
 8005238:	08005251 	.word	0x08005251
 800523c:	0800524b 	.word	0x0800524b
 8005240:	08005257 	.word	0x08005257
 8005244:	2301      	movs	r3, #1
 8005246:	76fb      	strb	r3, [r7, #27]
 8005248:	e0e7      	b.n	800541a <UART_SetConfig+0x282>
 800524a:	2302      	movs	r3, #2
 800524c:	76fb      	strb	r3, [r7, #27]
 800524e:	e0e4      	b.n	800541a <UART_SetConfig+0x282>
 8005250:	2304      	movs	r3, #4
 8005252:	76fb      	strb	r3, [r7, #27]
 8005254:	e0e1      	b.n	800541a <UART_SetConfig+0x282>
 8005256:	2308      	movs	r3, #8
 8005258:	76fb      	strb	r3, [r7, #27]
 800525a:	e0de      	b.n	800541a <UART_SetConfig+0x282>
 800525c:	2310      	movs	r3, #16
 800525e:	76fb      	strb	r3, [r7, #27]
 8005260:	e0db      	b.n	800541a <UART_SetConfig+0x282>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a88      	ldr	r2, [pc, #544]	; (8005488 <UART_SetConfig+0x2f0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d132      	bne.n	80052d2 <UART_SetConfig+0x13a>
 800526c:	4b85      	ldr	r3, [pc, #532]	; (8005484 <UART_SetConfig+0x2ec>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d828      	bhi.n	80052cc <UART_SetConfig+0x134>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0xe8>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052cd 	.word	0x080052cd
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052cd 	.word	0x080052cd
 800529c:	080052cd 	.word	0x080052cd
 80052a0:	080052bb 	.word	0x080052bb
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	080052c7 	.word	0x080052c7
 80052b4:	2300      	movs	r3, #0
 80052b6:	76fb      	strb	r3, [r7, #27]
 80052b8:	e0af      	b.n	800541a <UART_SetConfig+0x282>
 80052ba:	2302      	movs	r3, #2
 80052bc:	76fb      	strb	r3, [r7, #27]
 80052be:	e0ac      	b.n	800541a <UART_SetConfig+0x282>
 80052c0:	2304      	movs	r3, #4
 80052c2:	76fb      	strb	r3, [r7, #27]
 80052c4:	e0a9      	b.n	800541a <UART_SetConfig+0x282>
 80052c6:	2308      	movs	r3, #8
 80052c8:	76fb      	strb	r3, [r7, #27]
 80052ca:	e0a6      	b.n	800541a <UART_SetConfig+0x282>
 80052cc:	2310      	movs	r3, #16
 80052ce:	76fb      	strb	r3, [r7, #27]
 80052d0:	e0a3      	b.n	800541a <UART_SetConfig+0x282>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6d      	ldr	r2, [pc, #436]	; (800548c <UART_SetConfig+0x2f4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d120      	bne.n	800531e <UART_SetConfig+0x186>
 80052dc:	4b69      	ldr	r3, [pc, #420]	; (8005484 <UART_SetConfig+0x2ec>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d013      	beq.n	8005312 <UART_SetConfig+0x17a>
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	d814      	bhi.n	8005318 <UART_SetConfig+0x180>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d009      	beq.n	8005306 <UART_SetConfig+0x16e>
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d810      	bhi.n	8005318 <UART_SetConfig+0x180>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <UART_SetConfig+0x168>
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d006      	beq.n	800530c <UART_SetConfig+0x174>
 80052fe:	e00b      	b.n	8005318 <UART_SetConfig+0x180>
 8005300:	2300      	movs	r3, #0
 8005302:	76fb      	strb	r3, [r7, #27]
 8005304:	e089      	b.n	800541a <UART_SetConfig+0x282>
 8005306:	2302      	movs	r3, #2
 8005308:	76fb      	strb	r3, [r7, #27]
 800530a:	e086      	b.n	800541a <UART_SetConfig+0x282>
 800530c:	2304      	movs	r3, #4
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e083      	b.n	800541a <UART_SetConfig+0x282>
 8005312:	2308      	movs	r3, #8
 8005314:	76fb      	strb	r3, [r7, #27]
 8005316:	e080      	b.n	800541a <UART_SetConfig+0x282>
 8005318:	2310      	movs	r3, #16
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e07d      	b.n	800541a <UART_SetConfig+0x282>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a5b      	ldr	r2, [pc, #364]	; (8005490 <UART_SetConfig+0x2f8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d120      	bne.n	800536a <UART_SetConfig+0x1d2>
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <UART_SetConfig+0x2ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005332:	2bc0      	cmp	r3, #192	; 0xc0
 8005334:	d013      	beq.n	800535e <UART_SetConfig+0x1c6>
 8005336:	2bc0      	cmp	r3, #192	; 0xc0
 8005338:	d814      	bhi.n	8005364 <UART_SetConfig+0x1cc>
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d009      	beq.n	8005352 <UART_SetConfig+0x1ba>
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d810      	bhi.n	8005364 <UART_SetConfig+0x1cc>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <UART_SetConfig+0x1b4>
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d006      	beq.n	8005358 <UART_SetConfig+0x1c0>
 800534a:	e00b      	b.n	8005364 <UART_SetConfig+0x1cc>
 800534c:	2300      	movs	r3, #0
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	e063      	b.n	800541a <UART_SetConfig+0x282>
 8005352:	2302      	movs	r3, #2
 8005354:	76fb      	strb	r3, [r7, #27]
 8005356:	e060      	b.n	800541a <UART_SetConfig+0x282>
 8005358:	2304      	movs	r3, #4
 800535a:	76fb      	strb	r3, [r7, #27]
 800535c:	e05d      	b.n	800541a <UART_SetConfig+0x282>
 800535e:	2308      	movs	r3, #8
 8005360:	76fb      	strb	r3, [r7, #27]
 8005362:	e05a      	b.n	800541a <UART_SetConfig+0x282>
 8005364:	2310      	movs	r3, #16
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e057      	b.n	800541a <UART_SetConfig+0x282>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a49      	ldr	r2, [pc, #292]	; (8005494 <UART_SetConfig+0x2fc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d125      	bne.n	80053c0 <UART_SetConfig+0x228>
 8005374:	4b43      	ldr	r3, [pc, #268]	; (8005484 <UART_SetConfig+0x2ec>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005382:	d017      	beq.n	80053b4 <UART_SetConfig+0x21c>
 8005384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005388:	d817      	bhi.n	80053ba <UART_SetConfig+0x222>
 800538a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538e:	d00b      	beq.n	80053a8 <UART_SetConfig+0x210>
 8005390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005394:	d811      	bhi.n	80053ba <UART_SetConfig+0x222>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <UART_SetConfig+0x20a>
 800539a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539e:	d006      	beq.n	80053ae <UART_SetConfig+0x216>
 80053a0:	e00b      	b.n	80053ba <UART_SetConfig+0x222>
 80053a2:	2300      	movs	r3, #0
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e038      	b.n	800541a <UART_SetConfig+0x282>
 80053a8:	2302      	movs	r3, #2
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	e035      	b.n	800541a <UART_SetConfig+0x282>
 80053ae:	2304      	movs	r3, #4
 80053b0:	76fb      	strb	r3, [r7, #27]
 80053b2:	e032      	b.n	800541a <UART_SetConfig+0x282>
 80053b4:	2308      	movs	r3, #8
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	e02f      	b.n	800541a <UART_SetConfig+0x282>
 80053ba:	2310      	movs	r3, #16
 80053bc:	76fb      	strb	r3, [r7, #27]
 80053be:	e02c      	b.n	800541a <UART_SetConfig+0x282>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2d      	ldr	r2, [pc, #180]	; (800547c <UART_SetConfig+0x2e4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d125      	bne.n	8005416 <UART_SetConfig+0x27e>
 80053ca:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <UART_SetConfig+0x2ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d8:	d017      	beq.n	800540a <UART_SetConfig+0x272>
 80053da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053de:	d817      	bhi.n	8005410 <UART_SetConfig+0x278>
 80053e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e4:	d00b      	beq.n	80053fe <UART_SetConfig+0x266>
 80053e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ea:	d811      	bhi.n	8005410 <UART_SetConfig+0x278>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <UART_SetConfig+0x260>
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d006      	beq.n	8005404 <UART_SetConfig+0x26c>
 80053f6:	e00b      	b.n	8005410 <UART_SetConfig+0x278>
 80053f8:	2300      	movs	r3, #0
 80053fa:	76fb      	strb	r3, [r7, #27]
 80053fc:	e00d      	b.n	800541a <UART_SetConfig+0x282>
 80053fe:	2302      	movs	r3, #2
 8005400:	76fb      	strb	r3, [r7, #27]
 8005402:	e00a      	b.n	800541a <UART_SetConfig+0x282>
 8005404:	2304      	movs	r3, #4
 8005406:	76fb      	strb	r3, [r7, #27]
 8005408:	e007      	b.n	800541a <UART_SetConfig+0x282>
 800540a:	2308      	movs	r3, #8
 800540c:	76fb      	strb	r3, [r7, #27]
 800540e:	e004      	b.n	800541a <UART_SetConfig+0x282>
 8005410:	2310      	movs	r3, #16
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	e001      	b.n	800541a <UART_SetConfig+0x282>
 8005416:	2310      	movs	r3, #16
 8005418:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <UART_SetConfig+0x2e4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f040 8087 	bne.w	8005534 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005426:	7efb      	ldrb	r3, [r7, #27]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d837      	bhi.n	800549c <UART_SetConfig+0x304>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0x29c>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005459 	.word	0x08005459
 8005438:	0800549d 	.word	0x0800549d
 800543c:	08005461 	.word	0x08005461
 8005440:	0800549d 	.word	0x0800549d
 8005444:	08005467 	.word	0x08005467
 8005448:	0800549d 	.word	0x0800549d
 800544c:	0800549d 	.word	0x0800549d
 8005450:	0800549d 	.word	0x0800549d
 8005454:	0800546f 	.word	0x0800546f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe fd2e 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 800545c:	6178      	str	r0, [r7, #20]
        break;
 800545e:	e022      	b.n	80054a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <UART_SetConfig+0x300>)
 8005462:	617b      	str	r3, [r7, #20]
        break;
 8005464:	e01f      	b.n	80054a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7fe fc8f 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 800546a:	6178      	str	r0, [r7, #20]
        break;
 800546c:	e01b      	b.n	80054a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005472:	617b      	str	r3, [r7, #20]
        break;
 8005474:	e017      	b.n	80054a6 <UART_SetConfig+0x30e>
 8005476:	bf00      	nop
 8005478:	efff69f3 	.word	0xefff69f3
 800547c:	40008000 	.word	0x40008000
 8005480:	40013800 	.word	0x40013800
 8005484:	40021000 	.word	0x40021000
 8005488:	40004400 	.word	0x40004400
 800548c:	40004800 	.word	0x40004800
 8005490:	40004c00 	.word	0x40004c00
 8005494:	40005000 	.word	0x40005000
 8005498:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	76bb      	strb	r3, [r7, #26]
        break;
 80054a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80f1 	beq.w	8005690 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d305      	bcc.n	80054ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d902      	bls.n	80054d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	76bb      	strb	r3, [r7, #26]
 80054ce:	e0df      	b.n	8005690 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	020b      	lsls	r3, r1, #8
 80054e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054e6:	0202      	lsls	r2, r0, #8
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	6849      	ldr	r1, [r1, #4]
 80054ec:	0849      	lsrs	r1, r1, #1
 80054ee:	4608      	mov	r0, r1
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	1814      	adds	r4, r2, r0
 80054f6:	eb43 0501 	adc.w	r5, r3, r1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	461a      	mov	r2, r3
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fb fbbe 	bl	8000c88 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551a:	d308      	bcc.n	800552e <UART_SetConfig+0x396>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005522:	d204      	bcs.n	800552e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	60da      	str	r2, [r3, #12]
 800552c:	e0b0      	b.n	8005690 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	76bb      	strb	r3, [r7, #26]
 8005532:	e0ad      	b.n	8005690 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553c:	d15b      	bne.n	80055f6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800553e:	7efb      	ldrb	r3, [r7, #27]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d828      	bhi.n	8005596 <UART_SetConfig+0x3fe>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <UART_SetConfig+0x3b4>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	08005597 	.word	0x08005597
 800555c:	08005587 	.word	0x08005587
 8005560:	08005597 	.word	0x08005597
 8005564:	08005597 	.word	0x08005597
 8005568:	08005597 	.word	0x08005597
 800556c:	0800558f 	.word	0x0800558f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fe fca2 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8005574:	6178      	str	r0, [r7, #20]
        break;
 8005576:	e013      	b.n	80055a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe fcb4 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 800557c:	6178      	str	r0, [r7, #20]
        break;
 800557e:	e00f      	b.n	80055a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005580:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <UART_SetConfig+0x510>)
 8005582:	617b      	str	r3, [r7, #20]
        break;
 8005584:	e00c      	b.n	80055a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005586:	f7fe fbff 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 800558a:	6178      	str	r0, [r7, #20]
        break;
 800558c:	e008      	b.n	80055a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e004      	b.n	80055a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	76bb      	strb	r3, [r7, #26]
        break;
 800559e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d074      	beq.n	8005690 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	005a      	lsls	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	d916      	bls.n	80055f0 <UART_SetConfig+0x458>
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d212      	bcs.n	80055f0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f023 030f 	bic.w	r3, r3, #15
 80055d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	b29a      	uxth	r2, r3
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	89fa      	ldrh	r2, [r7, #14]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	e04f      	b.n	8005690 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	76bb      	strb	r3, [r7, #26]
 80055f4:	e04c      	b.n	8005690 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055f6:	7efb      	ldrb	r3, [r7, #27]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d828      	bhi.n	800564e <UART_SetConfig+0x4b6>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x46c>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	0800564f 	.word	0x0800564f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800564f 	.word	0x0800564f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fe fc46 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 800562c:	6178      	str	r0, [r7, #20]
        break;
 800562e:	e013      	b.n	8005658 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fe fc58 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8005634:	6178      	str	r0, [r7, #20]
        break;
 8005636:	e00f      	b.n	8005658 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <UART_SetConfig+0x510>)
 800563a:	617b      	str	r3, [r7, #20]
        break;
 800563c:	e00c      	b.n	8005658 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fe fba3 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8005642:	6178      	str	r0, [r7, #20]
        break;
 8005644:	e008      	b.n	8005658 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	617b      	str	r3, [r7, #20]
        break;
 800564c:	e004      	b.n	8005658 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	76bb      	strb	r3, [r7, #26]
        break;
 8005656:	bf00      	nop
    }

    if (pclk != 0U)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085a      	lsrs	r2, r3, #1
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b0f      	cmp	r3, #15
 8005676:	d909      	bls.n	800568c <UART_SetConfig+0x4f4>
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567e:	d205      	bcs.n	800568c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e001      	b.n	8005690 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800569c:	7ebb      	ldrb	r3, [r7, #26]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	00f42400 	.word	0x00f42400

080056ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057aa:	d10a      	bne.n	80057c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005800:	f7fc fc14 	bl	800202c <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b08      	cmp	r3, #8
 8005812:	d10e      	bne.n	8005832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f82d 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e023      	b.n	800587a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d10e      	bne.n	800585e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f817 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00d      	b.n	800587a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b09c      	sub	sp, #112	; 0x70
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	e0a5      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	f000 80a1 	beq.w	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fc fbc5 	bl	800202c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13e      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e6      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	663b      	str	r3, [r7, #96]	; 0x60
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005906:	64ba      	str	r2, [r7, #72]	; 0x48
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800590c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e5      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e067      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d04f      	beq.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594e:	d147      	bne.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005958:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ac:	623a      	str	r2, [r7, #32]
 80059ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e010      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	bf0c      	ite	eq
 80059f0:	2301      	moveq	r3, #1
 80059f2:	2300      	movne	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f43f af4a 	beq.w	8005894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3770      	adds	r7, #112	; 0x70
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <__errno>:
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <__errno+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	2000000c 	.word	0x2000000c

08005a18 <__libc_init_array>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4d0d      	ldr	r5, [pc, #52]	; (8005a50 <__libc_init_array+0x38>)
 8005a1c:	4c0d      	ldr	r4, [pc, #52]	; (8005a54 <__libc_init_array+0x3c>)
 8005a1e:	1b64      	subs	r4, r4, r5
 8005a20:	10a4      	asrs	r4, r4, #2
 8005a22:	2600      	movs	r6, #0
 8005a24:	42a6      	cmp	r6, r4
 8005a26:	d109      	bne.n	8005a3c <__libc_init_array+0x24>
 8005a28:	4d0b      	ldr	r5, [pc, #44]	; (8005a58 <__libc_init_array+0x40>)
 8005a2a:	4c0c      	ldr	r4, [pc, #48]	; (8005a5c <__libc_init_array+0x44>)
 8005a2c:	f004 fc44 	bl	800a2b8 <_init>
 8005a30:	1b64      	subs	r4, r4, r5
 8005a32:	10a4      	asrs	r4, r4, #2
 8005a34:	2600      	movs	r6, #0
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	d105      	bne.n	8005a46 <__libc_init_array+0x2e>
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a40:	4798      	blx	r3
 8005a42:	3601      	adds	r6, #1
 8005a44:	e7ee      	b.n	8005a24 <__libc_init_array+0xc>
 8005a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4a:	4798      	blx	r3
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	e7f2      	b.n	8005a36 <__libc_init_array+0x1e>
 8005a50:	0800a7fc 	.word	0x0800a7fc
 8005a54:	0800a7fc 	.word	0x0800a7fc
 8005a58:	0800a7fc 	.word	0x0800a7fc
 8005a5c:	0800a800 	.word	0x0800a800

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <__cvt>:
 8005a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	ec55 4b10 	vmov	r4, r5, d0
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	462b      	mov	r3, r5
 8005a80:	bfbb      	ittet	lt
 8005a82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a86:	461d      	movlt	r5, r3
 8005a88:	2300      	movge	r3, #0
 8005a8a:	232d      	movlt	r3, #45	; 0x2d
 8005a8c:	700b      	strb	r3, [r1, #0]
 8005a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a94:	4691      	mov	r9, r2
 8005a96:	f023 0820 	bic.w	r8, r3, #32
 8005a9a:	bfbc      	itt	lt
 8005a9c:	4622      	movlt	r2, r4
 8005a9e:	4614      	movlt	r4, r2
 8005aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa4:	d005      	beq.n	8005ab2 <__cvt+0x42>
 8005aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aaa:	d100      	bne.n	8005aae <__cvt+0x3e>
 8005aac:	3601      	adds	r6, #1
 8005aae:	2102      	movs	r1, #2
 8005ab0:	e000      	b.n	8005ab4 <__cvt+0x44>
 8005ab2:	2103      	movs	r1, #3
 8005ab4:	ab03      	add	r3, sp, #12
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	ab02      	add	r3, sp, #8
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	ec45 4b10 	vmov	d0, r4, r5
 8005ac0:	4653      	mov	r3, sl
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	f001 fdb4 	bl	8007630 <_dtoa_r>
 8005ac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005acc:	4607      	mov	r7, r0
 8005ace:	d102      	bne.n	8005ad6 <__cvt+0x66>
 8005ad0:	f019 0f01 	tst.w	r9, #1
 8005ad4:	d022      	beq.n	8005b1c <__cvt+0xac>
 8005ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ada:	eb07 0906 	add.w	r9, r7, r6
 8005ade:	d110      	bne.n	8005b02 <__cvt+0x92>
 8005ae0:	783b      	ldrb	r3, [r7, #0]
 8005ae2:	2b30      	cmp	r3, #48	; 0x30
 8005ae4:	d10a      	bne.n	8005afc <__cvt+0x8c>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005af2:	b918      	cbnz	r0, 8005afc <__cvt+0x8c>
 8005af4:	f1c6 0601 	rsb	r6, r6, #1
 8005af8:	f8ca 6000 	str.w	r6, [sl]
 8005afc:	f8da 3000 	ldr.w	r3, [sl]
 8005b00:	4499      	add	r9, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b0e:	b108      	cbz	r0, 8005b14 <__cvt+0xa4>
 8005b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b14:	2230      	movs	r2, #48	; 0x30
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	454b      	cmp	r3, r9
 8005b1a:	d307      	bcc.n	8005b2c <__cvt+0xbc>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b20:	1bdb      	subs	r3, r3, r7
 8005b22:	4638      	mov	r0, r7
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	b004      	add	sp, #16
 8005b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2c:	1c59      	adds	r1, r3, #1
 8005b2e:	9103      	str	r1, [sp, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e7f0      	b.n	8005b16 <__cvt+0xa6>

08005b34 <__exponent>:
 8005b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b36:	4603      	mov	r3, r0
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	4249      	neglt	r1, r1
 8005b3e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b42:	bfb4      	ite	lt
 8005b44:	222d      	movlt	r2, #45	; 0x2d
 8005b46:	222b      	movge	r2, #43	; 0x2b
 8005b48:	2909      	cmp	r1, #9
 8005b4a:	7042      	strb	r2, [r0, #1]
 8005b4c:	dd2a      	ble.n	8005ba4 <__exponent+0x70>
 8005b4e:	f10d 0407 	add.w	r4, sp, #7
 8005b52:	46a4      	mov	ip, r4
 8005b54:	270a      	movs	r7, #10
 8005b56:	46a6      	mov	lr, r4
 8005b58:	460a      	mov	r2, r1
 8005b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b62:	3530      	adds	r5, #48	; 0x30
 8005b64:	2a63      	cmp	r2, #99	; 0x63
 8005b66:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b6e:	4631      	mov	r1, r6
 8005b70:	dcf1      	bgt.n	8005b56 <__exponent+0x22>
 8005b72:	3130      	adds	r1, #48	; 0x30
 8005b74:	f1ae 0502 	sub.w	r5, lr, #2
 8005b78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b7c:	1c44      	adds	r4, r0, #1
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4561      	cmp	r1, ip
 8005b82:	d30a      	bcc.n	8005b9a <__exponent+0x66>
 8005b84:	f10d 0209 	add.w	r2, sp, #9
 8005b88:	eba2 020e 	sub.w	r2, r2, lr
 8005b8c:	4565      	cmp	r5, ip
 8005b8e:	bf88      	it	hi
 8005b90:	2200      	movhi	r2, #0
 8005b92:	4413      	add	r3, r2
 8005b94:	1a18      	subs	r0, r3, r0
 8005b96:	b003      	add	sp, #12
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ba2:	e7ed      	b.n	8005b80 <__exponent+0x4c>
 8005ba4:	2330      	movs	r3, #48	; 0x30
 8005ba6:	3130      	adds	r1, #48	; 0x30
 8005ba8:	7083      	strb	r3, [r0, #2]
 8005baa:	70c1      	strb	r1, [r0, #3]
 8005bac:	1d03      	adds	r3, r0, #4
 8005bae:	e7f1      	b.n	8005b94 <__exponent+0x60>

08005bb0 <_printf_float>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b02 	vpush	{d8}
 8005bb8:	b08d      	sub	sp, #52	; 0x34
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	461f      	mov	r7, r3
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	f002 fe8f 	bl	80088e8 <_localeconv_r>
 8005bca:	f8d0 a000 	ldr.w	sl, [r0]
 8005bce:	4650      	mov	r0, sl
 8005bd0:	f7fa fafe 	bl	80001d0 <strlen>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8005be0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005be4:	3307      	adds	r3, #7
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	f103 0208 	add.w	r2, r3, #8
 8005bee:	f8c8 2000 	str.w	r2, [r8]
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c02:	9307      	str	r3, [sp, #28]
 8005c04:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c08:	ee08 0a10 	vmov	s16, r0
 8005c0c:	4b9f      	ldr	r3, [pc, #636]	; (8005e8c <_printf_float+0x2dc>)
 8005c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	f7fa ff89 	bl	8000b2c <__aeabi_dcmpun>
 8005c1a:	bb88      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c20:	4b9a      	ldr	r3, [pc, #616]	; (8005e8c <_printf_float+0x2dc>)
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	f7fa ff63 	bl	8000af0 <__aeabi_dcmple>
 8005c2a:	bb48      	cbnz	r0, 8005c80 <_printf_float+0xd0>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa ff52 	bl	8000adc <__aeabi_dcmplt>
 8005c38:	b110      	cbz	r0, 8005c40 <_printf_float+0x90>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <_printf_float+0x2e0>)
 8005c42:	4894      	ldr	r0, [pc, #592]	; (8005e94 <_printf_float+0x2e4>)
 8005c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c48:	bf94      	ite	ls
 8005c4a:	4698      	movls	r8, r3
 8005c4c:	4680      	movhi	r8, r0
 8005c4e:	2303      	movs	r3, #3
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	f023 0204 	bic.w	r2, r3, #4
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	9700      	str	r7, [sp, #0]
 8005c60:	4633      	mov	r3, r6
 8005c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f9d8 	bl	800601c <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 8090 	bne.w	8005d92 <_printf_float+0x1e2>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b00d      	add	sp, #52	; 0x34
 8005c78:	ecbd 8b02 	vpop	{d8}
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa ff50 	bl	8000b2c <__aeabi_dcmpun>
 8005c8c:	b140      	cbz	r0, 8005ca0 <_printf_float+0xf0>
 8005c8e:	464b      	mov	r3, r9
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bfbc      	itt	lt
 8005c94:	232d      	movlt	r3, #45	; 0x2d
 8005c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c9a:	487f      	ldr	r0, [pc, #508]	; (8005e98 <_printf_float+0x2e8>)
 8005c9c:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <_printf_float+0x2ec>)
 8005c9e:	e7d1      	b.n	8005c44 <_printf_float+0x94>
 8005ca0:	6863      	ldr	r3, [r4, #4]
 8005ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ca6:	9206      	str	r2, [sp, #24]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	d13f      	bne.n	8005d2c <_printf_float+0x17c>
 8005cac:	2306      	movs	r3, #6
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	6861      	ldr	r1, [r4, #4]
 8005cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8005cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cc2:	ab09      	add	r3, sp, #36	; 0x24
 8005cc4:	ec49 8b10 	vmov	d0, r8, r9
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fecd 	bl	8005a70 <__cvt>
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cda:	2b47      	cmp	r3, #71	; 0x47
 8005cdc:	4680      	mov	r8, r0
 8005cde:	d108      	bne.n	8005cf2 <_printf_float+0x142>
 8005ce0:	1cc8      	adds	r0, r1, #3
 8005ce2:	db02      	blt.n	8005cea <_printf_float+0x13a>
 8005ce4:	6863      	ldr	r3, [r4, #4]
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	dd41      	ble.n	8005d6e <_printf_float+0x1be>
 8005cea:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cee:	fa5f fb8b 	uxtb.w	fp, fp
 8005cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cf6:	d820      	bhi.n	8005d3a <_printf_float+0x18a>
 8005cf8:	3901      	subs	r1, #1
 8005cfa:	465a      	mov	r2, fp
 8005cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d00:	9109      	str	r1, [sp, #36]	; 0x24
 8005d02:	f7ff ff17 	bl	8005b34 <__exponent>
 8005d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d08:	1813      	adds	r3, r2, r0
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	4681      	mov	r9, r0
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	dc02      	bgt.n	8005d18 <_printf_float+0x168>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d2      	lsls	r2, r2, #31
 8005d16:	d501      	bpl.n	8005d1c <_printf_float+0x16c>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d09c      	beq.n	8005c5e <_printf_float+0xae>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	e798      	b.n	8005c5e <_printf_float+0xae>
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	2a47      	cmp	r2, #71	; 0x47
 8005d30:	d1be      	bne.n	8005cb0 <_printf_float+0x100>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1bc      	bne.n	8005cb0 <_printf_float+0x100>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7b9      	b.n	8005cae <_printf_float+0xfe>
 8005d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d3e:	d118      	bne.n	8005d72 <_printf_float+0x1c2>
 8005d40:	2900      	cmp	r1, #0
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	dd0b      	ble.n	8005d5e <_printf_float+0x1ae>
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	b913      	cbnz	r3, 8005d50 <_printf_float+0x1a0>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d502      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d50:	3301      	adds	r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	e7de      	b.n	8005d1c <_printf_float+0x16c>
 8005d5e:	b913      	cbnz	r3, 8005d66 <_printf_float+0x1b6>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x1ba>
 8005d66:	3302      	adds	r3, #2
 8005d68:	e7f4      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x1a4>
 8005d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	4299      	cmp	r1, r3
 8005d76:	db05      	blt.n	8005d84 <_printf_float+0x1d4>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d5ea      	bpl.n	8005d56 <_printf_float+0x1a6>
 8005d80:	1c4b      	adds	r3, r1, #1
 8005d82:	e7e7      	b.n	8005d54 <_printf_float+0x1a4>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfd4      	ite	le
 8005d88:	f1c1 0202 	rsble	r2, r1, #2
 8005d8c:	2201      	movgt	r2, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	e7e0      	b.n	8005d54 <_printf_float+0x1a4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	055a      	lsls	r2, r3, #21
 8005d96:	d407      	bmi.n	8005da8 <_printf_float+0x1f8>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d12c      	bne.n	8005e00 <_printf_float+0x250>
 8005da6:	e764      	b.n	8005c72 <_printf_float+0xc2>
 8005da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dac:	f240 80e0 	bls.w	8005f70 <_printf_float+0x3c0>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f7fa fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d034      	beq.n	8005e2a <_printf_float+0x27a>
 8005dc0:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <_printf_float+0x2f0>)
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af51 	beq.w	8005c72 <_printf_float+0xc2>
 8005dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x22e>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d8      	lsls	r0, r3, #31
 8005ddc:	d510      	bpl.n	8005e00 <_printf_float+0x250>
 8005dde:	ee18 3a10 	vmov	r3, s16
 8005de2:	4652      	mov	r2, sl
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af41 	beq.w	8005c72 <_printf_float+0xc2>
 8005df0:	f04f 0800 	mov.w	r8, #0
 8005df4:	f104 091a 	add.w	r9, r4, #26
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	4543      	cmp	r3, r8
 8005dfe:	dc09      	bgt.n	8005e14 <_printf_float+0x264>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	f100 8105 	bmi.w	8006012 <_printf_float+0x462>
 8005e08:	68e0      	ldr	r0, [r4, #12]
 8005e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	bfb8      	it	lt
 8005e10:	4618      	movlt	r0, r3
 8005e12:	e730      	b.n	8005c76 <_printf_float+0xc6>
 8005e14:	2301      	movs	r3, #1
 8005e16:	464a      	mov	r2, r9
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af27 	beq.w	8005c72 <_printf_float+0xc2>
 8005e24:	f108 0801 	add.w	r8, r8, #1
 8005e28:	e7e6      	b.n	8005df8 <_printf_float+0x248>
 8005e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dc39      	bgt.n	8005ea4 <_printf_float+0x2f4>
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <_printf_float+0x2f0>)
 8005e32:	2301      	movs	r3, #1
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af19 	beq.w	8005c72 <_printf_float+0xc2>
 8005e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e44:	4313      	orrs	r3, r2
 8005e46:	d102      	bne.n	8005e4e <_printf_float+0x29e>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d5d8      	bpl.n	8005e00 <_printf_float+0x250>
 8005e4e:	ee18 3a10 	vmov	r3, s16
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af09 	beq.w	8005c72 <_printf_float+0xc2>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f104 0a1a 	add.w	sl, r4, #26
 8005e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6a:	425b      	negs	r3, r3
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	dc01      	bgt.n	8005e74 <_printf_float+0x2c4>
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	e792      	b.n	8005d9a <_printf_float+0x1ea>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f aef7 	beq.w	8005c72 <_printf_float+0xc2>
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	e7ee      	b.n	8005e68 <_printf_float+0x2b8>
 8005e8a:	bf00      	nop
 8005e8c:	7fefffff 	.word	0x7fefffff
 8005e90:	0800a344 	.word	0x0800a344
 8005e94:	0800a348 	.word	0x0800a348
 8005e98:	0800a350 	.word	0x0800a350
 8005e9c:	0800a34c 	.word	0x0800a34c
 8005ea0:	0800a354 	.word	0x0800a354
 8005ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bfa8      	it	ge
 8005eac:	461a      	movge	r2, r3
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	4691      	mov	r9, r2
 8005eb2:	dc37      	bgt.n	8005f24 <_printf_float+0x374>
 8005eb4:	f04f 0b00 	mov.w	fp, #0
 8005eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebc:	f104 021a 	add.w	r2, r4, #26
 8005ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	eba3 0309 	sub.w	r3, r3, r9
 8005ec8:	455b      	cmp	r3, fp
 8005eca:	dc33      	bgt.n	8005f34 <_printf_float+0x384>
 8005ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	db3b      	blt.n	8005f4c <_printf_float+0x39c>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	07da      	lsls	r2, r3, #31
 8005ed8:	d438      	bmi.n	8005f4c <_printf_float+0x39c>
 8005eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	eba2 0901 	sub.w	r9, r2, r1
 8005ee6:	4599      	cmp	r9, r3
 8005ee8:	bfa8      	it	ge
 8005eea:	4699      	movge	r9, r3
 8005eec:	f1b9 0f00 	cmp.w	r9, #0
 8005ef0:	dc35      	bgt.n	8005f5e <_printf_float+0x3ae>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efa:	f104 0a1a 	add.w	sl, r4, #26
 8005efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	eba3 0309 	sub.w	r3, r3, r9
 8005f08:	4543      	cmp	r3, r8
 8005f0a:	f77f af79 	ble.w	8005e00 <_printf_float+0x250>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f aeaa 	beq.w	8005c72 <_printf_float+0xc2>
 8005f1e:	f108 0801 	add.w	r8, r8, #1
 8005f22:	e7ec      	b.n	8005efe <_printf_float+0x34e>
 8005f24:	4613      	mov	r3, r2
 8005f26:	4631      	mov	r1, r6
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d1c0      	bne.n	8005eb4 <_printf_float+0x304>
 8005f32:	e69e      	b.n	8005c72 <_printf_float+0xc2>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	9205      	str	r2, [sp, #20]
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f ae97 	beq.w	8005c72 <_printf_float+0xc2>
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	f10b 0b01 	add.w	fp, fp, #1
 8005f4a:	e7b9      	b.n	8005ec0 <_printf_float+0x310>
 8005f4c:	ee18 3a10 	vmov	r3, s16
 8005f50:	4652      	mov	r2, sl
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1be      	bne.n	8005eda <_printf_float+0x32a>
 8005f5c:	e689      	b.n	8005c72 <_printf_float+0xc2>
 8005f5e:	9a05      	ldr	r2, [sp, #20]
 8005f60:	464b      	mov	r3, r9
 8005f62:	4442      	add	r2, r8
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d1c1      	bne.n	8005ef2 <_printf_float+0x342>
 8005f6e:	e680      	b.n	8005c72 <_printf_float+0xc2>
 8005f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	dc01      	bgt.n	8005f7a <_printf_float+0x3ca>
 8005f76:	07db      	lsls	r3, r3, #31
 8005f78:	d538      	bpl.n	8005fec <_printf_float+0x43c>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae74 	beq.w	8005c72 <_printf_float+0xc2>
 8005f8a:	ee18 3a10 	vmov	r3, s16
 8005f8e:	4652      	mov	r2, sl
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f ae6b 	beq.w	8005c72 <_printf_float+0xc2>
 8005f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f7fa fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_printf_float+0x432>
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	f108 0201 	add.w	r2, r8, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d10e      	bne.n	8005fda <_printf_float+0x42a>
 8005fbc:	e659      	b.n	8005c72 <_printf_float+0xc2>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f ae52 	beq.w	8005c72 <_printf_float+0xc2>
 8005fce:	f108 0801 	add.w	r8, r8, #1
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	dcf1      	bgt.n	8005fbe <_printf_float+0x40e>
 8005fda:	464b      	mov	r3, r9
 8005fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe0:	e6dc      	b.n	8005d9c <_printf_float+0x1ec>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 0a1a 	add.w	sl, r4, #26
 8005fea:	e7f2      	b.n	8005fd2 <_printf_float+0x422>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4642      	mov	r2, r8
 8005ff0:	e7df      	b.n	8005fb2 <_printf_float+0x402>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	464a      	mov	r2, r9
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae38 	beq.w	8005c72 <_printf_float+0xc2>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	4543      	cmp	r3, r8
 800600e:	dcf0      	bgt.n	8005ff2 <_printf_float+0x442>
 8006010:	e6fa      	b.n	8005e08 <_printf_float+0x258>
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	f104 0919 	add.w	r9, r4, #25
 800601a:	e7f4      	b.n	8006006 <_printf_float+0x456>

0800601c <_printf_common>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	4616      	mov	r6, r2
 8006022:	4699      	mov	r9, r3
 8006024:	688a      	ldr	r2, [r1, #8]
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800602c:	4293      	cmp	r3, r2
 800602e:	bfb8      	it	lt
 8006030:	4613      	movlt	r3, r2
 8006032:	6033      	str	r3, [r6, #0]
 8006034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006038:	4607      	mov	r7, r0
 800603a:	460c      	mov	r4, r1
 800603c:	b10a      	cbz	r2, 8006042 <_printf_common+0x26>
 800603e:	3301      	adds	r3, #1
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	0699      	lsls	r1, r3, #26
 8006046:	bf42      	ittt	mi
 8006048:	6833      	ldrmi	r3, [r6, #0]
 800604a:	3302      	addmi	r3, #2
 800604c:	6033      	strmi	r3, [r6, #0]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	f015 0506 	ands.w	r5, r5, #6
 8006054:	d106      	bne.n	8006064 <_printf_common+0x48>
 8006056:	f104 0a19 	add.w	sl, r4, #25
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	6832      	ldr	r2, [r6, #0]
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc26      	bgt.n	80060b2 <_printf_common+0x96>
 8006064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006068:	1e13      	subs	r3, r2, #0
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	bf18      	it	ne
 800606e:	2301      	movne	r3, #1
 8006070:	0692      	lsls	r2, r2, #26
 8006072:	d42b      	bmi.n	80060cc <_printf_common+0xb0>
 8006074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d01e      	beq.n	80060c0 <_printf_common+0xa4>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	68e5      	ldr	r5, [r4, #12]
 8006086:	6832      	ldr	r2, [r6, #0]
 8006088:	f003 0306 	and.w	r3, r3, #6
 800608c:	2b04      	cmp	r3, #4
 800608e:	bf08      	it	eq
 8006090:	1aad      	subeq	r5, r5, r2
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	bf0c      	ite	eq
 8006098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800609c:	2500      	movne	r5, #0
 800609e:	4293      	cmp	r3, r2
 80060a0:	bfc4      	itt	gt
 80060a2:	1a9b      	subgt	r3, r3, r2
 80060a4:	18ed      	addgt	r5, r5, r3
 80060a6:	2600      	movs	r6, #0
 80060a8:	341a      	adds	r4, #26
 80060aa:	42b5      	cmp	r5, r6
 80060ac:	d11a      	bne.n	80060e4 <_printf_common+0xc8>
 80060ae:	2000      	movs	r0, #0
 80060b0:	e008      	b.n	80060c4 <_printf_common+0xa8>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4652      	mov	r2, sl
 80060b6:	4649      	mov	r1, r9
 80060b8:	4638      	mov	r0, r7
 80060ba:	47c0      	blx	r8
 80060bc:	3001      	adds	r0, #1
 80060be:	d103      	bne.n	80060c8 <_printf_common+0xac>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c8:	3501      	adds	r5, #1
 80060ca:	e7c6      	b.n	800605a <_printf_common+0x3e>
 80060cc:	18e1      	adds	r1, r4, r3
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	2030      	movs	r0, #48	; 0x30
 80060d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d6:	4422      	add	r2, r4
 80060d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e0:	3302      	adds	r3, #2
 80060e2:	e7c7      	b.n	8006074 <_printf_common+0x58>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4622      	mov	r2, r4
 80060e8:	4649      	mov	r1, r9
 80060ea:	4638      	mov	r0, r7
 80060ec:	47c0      	blx	r8
 80060ee:	3001      	adds	r0, #1
 80060f0:	d0e6      	beq.n	80060c0 <_printf_common+0xa4>
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7d9      	b.n	80060aa <_printf_common+0x8e>
	...

080060f8 <_printf_i>:
 80060f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	460c      	mov	r4, r1
 80060fe:	4691      	mov	r9, r2
 8006100:	7e27      	ldrb	r7, [r4, #24]
 8006102:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006104:	2f78      	cmp	r7, #120	; 0x78
 8006106:	4680      	mov	r8, r0
 8006108:	469a      	mov	sl, r3
 800610a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610e:	d807      	bhi.n	8006120 <_printf_i+0x28>
 8006110:	2f62      	cmp	r7, #98	; 0x62
 8006112:	d80a      	bhi.n	800612a <_printf_i+0x32>
 8006114:	2f00      	cmp	r7, #0
 8006116:	f000 80d8 	beq.w	80062ca <_printf_i+0x1d2>
 800611a:	2f58      	cmp	r7, #88	; 0x58
 800611c:	f000 80a3 	beq.w	8006266 <_printf_i+0x16e>
 8006120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006128:	e03a      	b.n	80061a0 <_printf_i+0xa8>
 800612a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800612e:	2b15      	cmp	r3, #21
 8006130:	d8f6      	bhi.n	8006120 <_printf_i+0x28>
 8006132:	a001      	add	r0, pc, #4	; (adr r0, 8006138 <_printf_i+0x40>)
 8006134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006138:	08006191 	.word	0x08006191
 800613c:	080061a5 	.word	0x080061a5
 8006140:	08006121 	.word	0x08006121
 8006144:	08006121 	.word	0x08006121
 8006148:	08006121 	.word	0x08006121
 800614c:	08006121 	.word	0x08006121
 8006150:	080061a5 	.word	0x080061a5
 8006154:	08006121 	.word	0x08006121
 8006158:	08006121 	.word	0x08006121
 800615c:	08006121 	.word	0x08006121
 8006160:	08006121 	.word	0x08006121
 8006164:	080062b1 	.word	0x080062b1
 8006168:	080061d5 	.word	0x080061d5
 800616c:	08006293 	.word	0x08006293
 8006170:	08006121 	.word	0x08006121
 8006174:	08006121 	.word	0x08006121
 8006178:	080062d3 	.word	0x080062d3
 800617c:	08006121 	.word	0x08006121
 8006180:	080061d5 	.word	0x080061d5
 8006184:	08006121 	.word	0x08006121
 8006188:	08006121 	.word	0x08006121
 800618c:	0800629b 	.word	0x0800629b
 8006190:	680b      	ldr	r3, [r1, #0]
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	600a      	str	r2, [r1, #0]
 8006198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800619c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0a3      	b.n	80062ec <_printf_i+0x1f4>
 80061a4:	6825      	ldr	r5, [r4, #0]
 80061a6:	6808      	ldr	r0, [r1, #0]
 80061a8:	062e      	lsls	r6, r5, #24
 80061aa:	f100 0304 	add.w	r3, r0, #4
 80061ae:	d50a      	bpl.n	80061c6 <_printf_i+0xce>
 80061b0:	6805      	ldr	r5, [r0, #0]
 80061b2:	600b      	str	r3, [r1, #0]
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	da03      	bge.n	80061c0 <_printf_i+0xc8>
 80061b8:	232d      	movs	r3, #45	; 0x2d
 80061ba:	426d      	negs	r5, r5
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c0:	485e      	ldr	r0, [pc, #376]	; (800633c <_printf_i+0x244>)
 80061c2:	230a      	movs	r3, #10
 80061c4:	e019      	b.n	80061fa <_printf_i+0x102>
 80061c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061ca:	6805      	ldr	r5, [r0, #0]
 80061cc:	600b      	str	r3, [r1, #0]
 80061ce:	bf18      	it	ne
 80061d0:	b22d      	sxthne	r5, r5
 80061d2:	e7ef      	b.n	80061b4 <_printf_i+0xbc>
 80061d4:	680b      	ldr	r3, [r1, #0]
 80061d6:	6825      	ldr	r5, [r4, #0]
 80061d8:	1d18      	adds	r0, r3, #4
 80061da:	6008      	str	r0, [r1, #0]
 80061dc:	0628      	lsls	r0, r5, #24
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0xec>
 80061e0:	681d      	ldr	r5, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0xf2>
 80061e4:	0669      	lsls	r1, r5, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0xe8>
 80061e8:	881d      	ldrh	r5, [r3, #0]
 80061ea:	4854      	ldr	r0, [pc, #336]	; (800633c <_printf_i+0x244>)
 80061ec:	2f6f      	cmp	r7, #111	; 0x6f
 80061ee:	bf0c      	ite	eq
 80061f0:	2308      	moveq	r3, #8
 80061f2:	230a      	movne	r3, #10
 80061f4:	2100      	movs	r1, #0
 80061f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fa:	6866      	ldr	r6, [r4, #4]
 80061fc:	60a6      	str	r6, [r4, #8]
 80061fe:	2e00      	cmp	r6, #0
 8006200:	bfa2      	ittt	ge
 8006202:	6821      	ldrge	r1, [r4, #0]
 8006204:	f021 0104 	bicge.w	r1, r1, #4
 8006208:	6021      	strge	r1, [r4, #0]
 800620a:	b90d      	cbnz	r5, 8006210 <_printf_i+0x118>
 800620c:	2e00      	cmp	r6, #0
 800620e:	d04d      	beq.n	80062ac <_printf_i+0x1b4>
 8006210:	4616      	mov	r6, r2
 8006212:	fbb5 f1f3 	udiv	r1, r5, r3
 8006216:	fb03 5711 	mls	r7, r3, r1, r5
 800621a:	5dc7      	ldrb	r7, [r0, r7]
 800621c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006220:	462f      	mov	r7, r5
 8006222:	42bb      	cmp	r3, r7
 8006224:	460d      	mov	r5, r1
 8006226:	d9f4      	bls.n	8006212 <_printf_i+0x11a>
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10b      	bne.n	8006244 <_printf_i+0x14c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	07df      	lsls	r7, r3, #31
 8006230:	d508      	bpl.n	8006244 <_printf_i+0x14c>
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	6861      	ldr	r1, [r4, #4]
 8006236:	4299      	cmp	r1, r3
 8006238:	bfde      	ittt	le
 800623a:	2330      	movle	r3, #48	; 0x30
 800623c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006244:	1b92      	subs	r2, r2, r6
 8006246:	6122      	str	r2, [r4, #16]
 8006248:	f8cd a000 	str.w	sl, [sp]
 800624c:	464b      	mov	r3, r9
 800624e:	aa03      	add	r2, sp, #12
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f7ff fee2 	bl	800601c <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	d14c      	bne.n	80062f6 <_printf_i+0x1fe>
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	b004      	add	sp, #16
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	4835      	ldr	r0, [pc, #212]	; (800633c <_printf_i+0x244>)
 8006268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	680e      	ldr	r6, [r1, #0]
 8006270:	061f      	lsls	r7, r3, #24
 8006272:	f856 5b04 	ldr.w	r5, [r6], #4
 8006276:	600e      	str	r6, [r1, #0]
 8006278:	d514      	bpl.n	80062a4 <_printf_i+0x1ac>
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	bf44      	itt	mi
 800627e:	f043 0320 	orrmi.w	r3, r3, #32
 8006282:	6023      	strmi	r3, [r4, #0]
 8006284:	b91d      	cbnz	r5, 800628e <_printf_i+0x196>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f023 0320 	bic.w	r3, r3, #32
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	2310      	movs	r3, #16
 8006290:	e7b0      	b.n	80061f4 <_printf_i+0xfc>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	2378      	movs	r3, #120	; 0x78
 800629c:	4828      	ldr	r0, [pc, #160]	; (8006340 <_printf_i+0x248>)
 800629e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a2:	e7e3      	b.n	800626c <_printf_i+0x174>
 80062a4:	065e      	lsls	r6, r3, #25
 80062a6:	bf48      	it	mi
 80062a8:	b2ad      	uxthmi	r5, r5
 80062aa:	e7e6      	b.n	800627a <_printf_i+0x182>
 80062ac:	4616      	mov	r6, r2
 80062ae:	e7bb      	b.n	8006228 <_printf_i+0x130>
 80062b0:	680b      	ldr	r3, [r1, #0]
 80062b2:	6826      	ldr	r6, [r4, #0]
 80062b4:	6960      	ldr	r0, [r4, #20]
 80062b6:	1d1d      	adds	r5, r3, #4
 80062b8:	600d      	str	r5, [r1, #0]
 80062ba:	0635      	lsls	r5, r6, #24
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0x1cc>
 80062c0:	6018      	str	r0, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0x1d2>
 80062c4:	0671      	lsls	r1, r6, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0x1c8>
 80062c8:	8018      	strh	r0, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	4616      	mov	r6, r2
 80062d0:	e7ba      	b.n	8006248 <_printf_i+0x150>
 80062d2:	680b      	ldr	r3, [r1, #0]
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	600a      	str	r2, [r1, #0]
 80062d8:	681e      	ldr	r6, [r3, #0]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	f7f9 ff7e 	bl	80001e0 <memchr>
 80062e4:	b108      	cbz	r0, 80062ea <_printf_i+0x1f2>
 80062e6:	1b80      	subs	r0, r0, r6
 80062e8:	6060      	str	r0, [r4, #4]
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	2300      	movs	r3, #0
 80062f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f4:	e7a8      	b.n	8006248 <_printf_i+0x150>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d0ab      	beq.n	800625c <_printf_i+0x164>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d413      	bmi.n	8006332 <_printf_i+0x23a>
 800630a:	68e0      	ldr	r0, [r4, #12]
 800630c:	9b03      	ldr	r3, [sp, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	bfb8      	it	lt
 8006312:	4618      	movlt	r0, r3
 8006314:	e7a4      	b.n	8006260 <_printf_i+0x168>
 8006316:	2301      	movs	r3, #1
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	47d0      	blx	sl
 8006320:	3001      	adds	r0, #1
 8006322:	d09b      	beq.n	800625c <_printf_i+0x164>
 8006324:	3501      	adds	r5, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	42ab      	cmp	r3, r5
 800632e:	dcf2      	bgt.n	8006316 <_printf_i+0x21e>
 8006330:	e7eb      	b.n	800630a <_printf_i+0x212>
 8006332:	2500      	movs	r5, #0
 8006334:	f104 0619 	add.w	r6, r4, #25
 8006338:	e7f5      	b.n	8006326 <_printf_i+0x22e>
 800633a:	bf00      	nop
 800633c:	0800a356 	.word	0x0800a356
 8006340:	0800a367 	.word	0x0800a367

08006344 <_scanf_float>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	b087      	sub	sp, #28
 800634a:	4617      	mov	r7, r2
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	688b      	ldr	r3, [r1, #8]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006356:	bf83      	ittte	hi
 8006358:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800635c:	195b      	addhi	r3, r3, r5
 800635e:	9302      	strhi	r3, [sp, #8]
 8006360:	2300      	movls	r3, #0
 8006362:	bf86      	itte	hi
 8006364:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006368:	608b      	strhi	r3, [r1, #8]
 800636a:	9302      	strls	r3, [sp, #8]
 800636c:	680b      	ldr	r3, [r1, #0]
 800636e:	468b      	mov	fp, r1
 8006370:	2500      	movs	r5, #0
 8006372:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006376:	f84b 3b1c 	str.w	r3, [fp], #28
 800637a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800637e:	4680      	mov	r8, r0
 8006380:	460c      	mov	r4, r1
 8006382:	465e      	mov	r6, fp
 8006384:	46aa      	mov	sl, r5
 8006386:	46a9      	mov	r9, r5
 8006388:	9501      	str	r5, [sp, #4]
 800638a:	68a2      	ldr	r2, [r4, #8]
 800638c:	b152      	cbz	r2, 80063a4 <_scanf_float+0x60>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b4e      	cmp	r3, #78	; 0x4e
 8006394:	d864      	bhi.n	8006460 <_scanf_float+0x11c>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d83c      	bhi.n	8006414 <_scanf_float+0xd0>
 800639a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800639e:	b2c8      	uxtb	r0, r1
 80063a0:	280e      	cmp	r0, #14
 80063a2:	d93a      	bls.n	800641a <_scanf_float+0xd6>
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	d003      	beq.n	80063b2 <_scanf_float+0x6e>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063b6:	f1ba 0f01 	cmp.w	sl, #1
 80063ba:	f200 8113 	bhi.w	80065e4 <_scanf_float+0x2a0>
 80063be:	455e      	cmp	r6, fp
 80063c0:	f200 8105 	bhi.w	80065ce <_scanf_float+0x28a>
 80063c4:	2501      	movs	r5, #1
 80063c6:	4628      	mov	r0, r5
 80063c8:	b007      	add	sp, #28
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80063d2:	2a0d      	cmp	r2, #13
 80063d4:	d8e6      	bhi.n	80063a4 <_scanf_float+0x60>
 80063d6:	a101      	add	r1, pc, #4	; (adr r1, 80063dc <_scanf_float+0x98>)
 80063d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063dc:	0800651b 	.word	0x0800651b
 80063e0:	080063a5 	.word	0x080063a5
 80063e4:	080063a5 	.word	0x080063a5
 80063e8:	080063a5 	.word	0x080063a5
 80063ec:	0800657b 	.word	0x0800657b
 80063f0:	08006553 	.word	0x08006553
 80063f4:	080063a5 	.word	0x080063a5
 80063f8:	080063a5 	.word	0x080063a5
 80063fc:	08006529 	.word	0x08006529
 8006400:	080063a5 	.word	0x080063a5
 8006404:	080063a5 	.word	0x080063a5
 8006408:	080063a5 	.word	0x080063a5
 800640c:	080063a5 	.word	0x080063a5
 8006410:	080064e1 	.word	0x080064e1
 8006414:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006418:	e7db      	b.n	80063d2 <_scanf_float+0x8e>
 800641a:	290e      	cmp	r1, #14
 800641c:	d8c2      	bhi.n	80063a4 <_scanf_float+0x60>
 800641e:	a001      	add	r0, pc, #4	; (adr r0, 8006424 <_scanf_float+0xe0>)
 8006420:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006424:	080064d3 	.word	0x080064d3
 8006428:	080063a5 	.word	0x080063a5
 800642c:	080064d3 	.word	0x080064d3
 8006430:	08006567 	.word	0x08006567
 8006434:	080063a5 	.word	0x080063a5
 8006438:	08006481 	.word	0x08006481
 800643c:	080064bd 	.word	0x080064bd
 8006440:	080064bd 	.word	0x080064bd
 8006444:	080064bd 	.word	0x080064bd
 8006448:	080064bd 	.word	0x080064bd
 800644c:	080064bd 	.word	0x080064bd
 8006450:	080064bd 	.word	0x080064bd
 8006454:	080064bd 	.word	0x080064bd
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064bd 	.word	0x080064bd
 8006460:	2b6e      	cmp	r3, #110	; 0x6e
 8006462:	d809      	bhi.n	8006478 <_scanf_float+0x134>
 8006464:	2b60      	cmp	r3, #96	; 0x60
 8006466:	d8b2      	bhi.n	80063ce <_scanf_float+0x8a>
 8006468:	2b54      	cmp	r3, #84	; 0x54
 800646a:	d077      	beq.n	800655c <_scanf_float+0x218>
 800646c:	2b59      	cmp	r3, #89	; 0x59
 800646e:	d199      	bne.n	80063a4 <_scanf_float+0x60>
 8006470:	2d07      	cmp	r5, #7
 8006472:	d197      	bne.n	80063a4 <_scanf_float+0x60>
 8006474:	2508      	movs	r5, #8
 8006476:	e029      	b.n	80064cc <_scanf_float+0x188>
 8006478:	2b74      	cmp	r3, #116	; 0x74
 800647a:	d06f      	beq.n	800655c <_scanf_float+0x218>
 800647c:	2b79      	cmp	r3, #121	; 0x79
 800647e:	e7f6      	b.n	800646e <_scanf_float+0x12a>
 8006480:	6821      	ldr	r1, [r4, #0]
 8006482:	05c8      	lsls	r0, r1, #23
 8006484:	d51a      	bpl.n	80064bc <_scanf_float+0x178>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800648c:	6021      	str	r1, [r4, #0]
 800648e:	f109 0901 	add.w	r9, r9, #1
 8006492:	b11b      	cbz	r3, 800649c <_scanf_float+0x158>
 8006494:	3b01      	subs	r3, #1
 8006496:	3201      	adds	r2, #1
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	60a2      	str	r2, [r4, #8]
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	3b01      	subs	r3, #1
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	3301      	adds	r3, #1
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	f340 8084 	ble.w	80065bc <_scanf_float+0x278>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	e766      	b.n	800638a <_scanf_float+0x46>
 80064bc:	eb1a 0f05 	cmn.w	sl, r5
 80064c0:	f47f af70 	bne.w	80063a4 <_scanf_float+0x60>
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	e7e4      	b.n	800649c <_scanf_float+0x158>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	0610      	lsls	r0, r2, #24
 80064d6:	f57f af65 	bpl.w	80063a4 <_scanf_float+0x60>
 80064da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064de:	e7f4      	b.n	80064ca <_scanf_float+0x186>
 80064e0:	f1ba 0f00 	cmp.w	sl, #0
 80064e4:	d10e      	bne.n	8006504 <_scanf_float+0x1c0>
 80064e6:	f1b9 0f00 	cmp.w	r9, #0
 80064ea:	d10e      	bne.n	800650a <_scanf_float+0x1c6>
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064f6:	d108      	bne.n	800650a <_scanf_float+0x1c6>
 80064f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064fc:	6022      	str	r2, [r4, #0]
 80064fe:	f04f 0a01 	mov.w	sl, #1
 8006502:	e7e3      	b.n	80064cc <_scanf_float+0x188>
 8006504:	f1ba 0f02 	cmp.w	sl, #2
 8006508:	d055      	beq.n	80065b6 <_scanf_float+0x272>
 800650a:	2d01      	cmp	r5, #1
 800650c:	d002      	beq.n	8006514 <_scanf_float+0x1d0>
 800650e:	2d04      	cmp	r5, #4
 8006510:	f47f af48 	bne.w	80063a4 <_scanf_float+0x60>
 8006514:	3501      	adds	r5, #1
 8006516:	b2ed      	uxtb	r5, r5
 8006518:	e7d8      	b.n	80064cc <_scanf_float+0x188>
 800651a:	f1ba 0f01 	cmp.w	sl, #1
 800651e:	f47f af41 	bne.w	80063a4 <_scanf_float+0x60>
 8006522:	f04f 0a02 	mov.w	sl, #2
 8006526:	e7d1      	b.n	80064cc <_scanf_float+0x188>
 8006528:	b97d      	cbnz	r5, 800654a <_scanf_float+0x206>
 800652a:	f1b9 0f00 	cmp.w	r9, #0
 800652e:	f47f af3c 	bne.w	80063aa <_scanf_float+0x66>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006538:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800653c:	f47f af39 	bne.w	80063b2 <_scanf_float+0x6e>
 8006540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	2501      	movs	r5, #1
 8006548:	e7c0      	b.n	80064cc <_scanf_float+0x188>
 800654a:	2d03      	cmp	r5, #3
 800654c:	d0e2      	beq.n	8006514 <_scanf_float+0x1d0>
 800654e:	2d05      	cmp	r5, #5
 8006550:	e7de      	b.n	8006510 <_scanf_float+0x1cc>
 8006552:	2d02      	cmp	r5, #2
 8006554:	f47f af26 	bne.w	80063a4 <_scanf_float+0x60>
 8006558:	2503      	movs	r5, #3
 800655a:	e7b7      	b.n	80064cc <_scanf_float+0x188>
 800655c:	2d06      	cmp	r5, #6
 800655e:	f47f af21 	bne.w	80063a4 <_scanf_float+0x60>
 8006562:	2507      	movs	r5, #7
 8006564:	e7b2      	b.n	80064cc <_scanf_float+0x188>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	0591      	lsls	r1, r2, #22
 800656a:	f57f af1b 	bpl.w	80063a4 <_scanf_float+0x60>
 800656e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	f8cd 9004 	str.w	r9, [sp, #4]
 8006578:	e7a8      	b.n	80064cc <_scanf_float+0x188>
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006580:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006584:	d006      	beq.n	8006594 <_scanf_float+0x250>
 8006586:	0550      	lsls	r0, r2, #21
 8006588:	f57f af0c 	bpl.w	80063a4 <_scanf_float+0x60>
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	f43f af0f 	beq.w	80063b2 <_scanf_float+0x6e>
 8006594:	0591      	lsls	r1, r2, #22
 8006596:	bf58      	it	pl
 8006598:	9901      	ldrpl	r1, [sp, #4]
 800659a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800659e:	bf58      	it	pl
 80065a0:	eba9 0101 	subpl.w	r1, r9, r1
 80065a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80065a8:	bf58      	it	pl
 80065aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	f04f 0900 	mov.w	r9, #0
 80065b4:	e78a      	b.n	80064cc <_scanf_float+0x188>
 80065b6:	f04f 0a03 	mov.w	sl, #3
 80065ba:	e787      	b.n	80064cc <_scanf_float+0x188>
 80065bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065c0:	4639      	mov	r1, r7
 80065c2:	4640      	mov	r0, r8
 80065c4:	4798      	blx	r3
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f aedf 	beq.w	800638a <_scanf_float+0x46>
 80065cc:	e6ea      	b.n	80063a4 <_scanf_float+0x60>
 80065ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065d6:	463a      	mov	r2, r7
 80065d8:	4640      	mov	r0, r8
 80065da:	4798      	blx	r3
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	e6ec      	b.n	80063be <_scanf_float+0x7a>
 80065e4:	1e6b      	subs	r3, r5, #1
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d825      	bhi.n	8006636 <_scanf_float+0x2f2>
 80065ea:	2d02      	cmp	r5, #2
 80065ec:	d836      	bhi.n	800665c <_scanf_float+0x318>
 80065ee:	455e      	cmp	r6, fp
 80065f0:	f67f aee8 	bls.w	80063c4 <_scanf_float+0x80>
 80065f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065fc:	463a      	mov	r2, r7
 80065fe:	4640      	mov	r0, r8
 8006600:	4798      	blx	r3
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	3b01      	subs	r3, #1
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	e7f1      	b.n	80065ee <_scanf_float+0x2aa>
 800660a:	9802      	ldr	r0, [sp, #8]
 800660c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006610:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	463a      	mov	r2, r7
 8006618:	4640      	mov	r0, r8
 800661a:	4798      	blx	r3
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	3b01      	subs	r3, #1
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006626:	fa5f fa8a 	uxtb.w	sl, sl
 800662a:	f1ba 0f02 	cmp.w	sl, #2
 800662e:	d1ec      	bne.n	800660a <_scanf_float+0x2c6>
 8006630:	3d03      	subs	r5, #3
 8006632:	b2ed      	uxtb	r5, r5
 8006634:	1b76      	subs	r6, r6, r5
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	05da      	lsls	r2, r3, #23
 800663a:	d52f      	bpl.n	800669c <_scanf_float+0x358>
 800663c:	055b      	lsls	r3, r3, #21
 800663e:	d510      	bpl.n	8006662 <_scanf_float+0x31e>
 8006640:	455e      	cmp	r6, fp
 8006642:	f67f aebf 	bls.w	80063c4 <_scanf_float+0x80>
 8006646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800664a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800664e:	463a      	mov	r2, r7
 8006650:	4640      	mov	r0, r8
 8006652:	4798      	blx	r3
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	3b01      	subs	r3, #1
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	e7f1      	b.n	8006640 <_scanf_float+0x2fc>
 800665c:	46aa      	mov	sl, r5
 800665e:	9602      	str	r6, [sp, #8]
 8006660:	e7df      	b.n	8006622 <_scanf_float+0x2de>
 8006662:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	2965      	cmp	r1, #101	; 0x65
 800666a:	f103 33ff 	add.w	r3, r3, #4294967295
 800666e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	d00c      	beq.n	8006690 <_scanf_float+0x34c>
 8006676:	2945      	cmp	r1, #69	; 0x45
 8006678:	d00a      	beq.n	8006690 <_scanf_float+0x34c>
 800667a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800667e:	463a      	mov	r2, r7
 8006680:	4640      	mov	r0, r8
 8006682:	4798      	blx	r3
 8006684:	6923      	ldr	r3, [r4, #16]
 8006686:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800668a:	3b01      	subs	r3, #1
 800668c:	1eb5      	subs	r5, r6, #2
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006694:	463a      	mov	r2, r7
 8006696:	4640      	mov	r0, r8
 8006698:	4798      	blx	r3
 800669a:	462e      	mov	r6, r5
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	f015 0510 	ands.w	r5, r5, #16
 80066a2:	d158      	bne.n	8006756 <_scanf_float+0x412>
 80066a4:	7035      	strb	r5, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d11c      	bne.n	80066ec <_scanf_float+0x3a8>
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	454b      	cmp	r3, r9
 80066b6:	eba3 0209 	sub.w	r2, r3, r9
 80066ba:	d124      	bne.n	8006706 <_scanf_float+0x3c2>
 80066bc:	2200      	movs	r2, #0
 80066be:	4659      	mov	r1, fp
 80066c0:	4640      	mov	r0, r8
 80066c2:	f000 fe9b 	bl	80073fc <_strtod_r>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	6821      	ldr	r1, [r4, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f011 0f02 	tst.w	r1, #2
 80066d0:	ec57 6b10 	vmov	r6, r7, d0
 80066d4:	f103 0204 	add.w	r2, r3, #4
 80066d8:	d020      	beq.n	800671c <_scanf_float+0x3d8>
 80066da:	9903      	ldr	r1, [sp, #12]
 80066dc:	600a      	str	r2, [r1, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	e9c3 6700 	strd	r6, r7, [r3]
 80066e4:	68e3      	ldr	r3, [r4, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60e3      	str	r3, [r4, #12]
 80066ea:	e66c      	b.n	80063c6 <_scanf_float+0x82>
 80066ec:	9b04      	ldr	r3, [sp, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0e4      	beq.n	80066bc <_scanf_float+0x378>
 80066f2:	9905      	ldr	r1, [sp, #20]
 80066f4:	230a      	movs	r3, #10
 80066f6:	462a      	mov	r2, r5
 80066f8:	3101      	adds	r1, #1
 80066fa:	4640      	mov	r0, r8
 80066fc:	f000 ff08 	bl	8007510 <_strtol_r>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	9e05      	ldr	r6, [sp, #20]
 8006704:	1ac2      	subs	r2, r0, r3
 8006706:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800670a:	429e      	cmp	r6, r3
 800670c:	bf28      	it	cs
 800670e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006712:	4912      	ldr	r1, [pc, #72]	; (800675c <_scanf_float+0x418>)
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f82b 	bl	8006770 <siprintf>
 800671a:	e7cf      	b.n	80066bc <_scanf_float+0x378>
 800671c:	f011 0f04 	tst.w	r1, #4
 8006720:	9903      	ldr	r1, [sp, #12]
 8006722:	600a      	str	r2, [r1, #0]
 8006724:	d1db      	bne.n	80066de <_scanf_float+0x39a>
 8006726:	f8d3 8000 	ldr.w	r8, [r3]
 800672a:	ee10 2a10 	vmov	r2, s0
 800672e:	ee10 0a10 	vmov	r0, s0
 8006732:	463b      	mov	r3, r7
 8006734:	4639      	mov	r1, r7
 8006736:	f7fa f9f9 	bl	8000b2c <__aeabi_dcmpun>
 800673a:	b128      	cbz	r0, 8006748 <_scanf_float+0x404>
 800673c:	4808      	ldr	r0, [pc, #32]	; (8006760 <_scanf_float+0x41c>)
 800673e:	f000 f811 	bl	8006764 <nanf>
 8006742:	ed88 0a00 	vstr	s0, [r8]
 8006746:	e7cd      	b.n	80066e4 <_scanf_float+0x3a0>
 8006748:	4630      	mov	r0, r6
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa fa4c 	bl	8000be8 <__aeabi_d2f>
 8006750:	f8c8 0000 	str.w	r0, [r8]
 8006754:	e7c6      	b.n	80066e4 <_scanf_float+0x3a0>
 8006756:	2500      	movs	r5, #0
 8006758:	e635      	b.n	80063c6 <_scanf_float+0x82>
 800675a:	bf00      	nop
 800675c:	0800a378 	.word	0x0800a378
 8006760:	0800a790 	.word	0x0800a790

08006764 <nanf>:
 8006764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800676c <nanf+0x8>
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	7fc00000 	.word	0x7fc00000

08006770 <siprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	b500      	push	{lr}
 8006774:	b09c      	sub	sp, #112	; 0x70
 8006776:	ab1d      	add	r3, sp, #116	; 0x74
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9006      	str	r0, [sp, #24]
 800677c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006780:	4809      	ldr	r0, [pc, #36]	; (80067a8 <siprintf+0x38>)
 8006782:	9107      	str	r1, [sp, #28]
 8006784:	9104      	str	r1, [sp, #16]
 8006786:	4909      	ldr	r1, [pc, #36]	; (80067ac <siprintf+0x3c>)
 8006788:	f853 2b04 	ldr.w	r2, [r3], #4
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	a902      	add	r1, sp, #8
 8006794:	f002 fea4 	bl	80094e0 <_svfiprintf_r>
 8006798:	9b02      	ldr	r3, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	b01c      	add	sp, #112	; 0x70
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	2000000c 	.word	0x2000000c
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <sulp>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	ec45 4b10 	vmov	d0, r4, r5
 80067ba:	4616      	mov	r6, r2
 80067bc:	f002 fc2c 	bl	8009018 <__ulp>
 80067c0:	ec51 0b10 	vmov	r0, r1, d0
 80067c4:	b17e      	cbz	r6, 80067e6 <sulp+0x36>
 80067c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dd09      	ble.n	80067e6 <sulp+0x36>
 80067d2:	051b      	lsls	r3, r3, #20
 80067d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067d8:	2400      	movs	r4, #0
 80067da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067de:	4622      	mov	r2, r4
 80067e0:	462b      	mov	r3, r5
 80067e2:	f7f9 ff09 	bl	80005f8 <__aeabi_dmul>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}

080067e8 <_strtod_l>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	b0a3      	sub	sp, #140	; 0x8c
 80067ee:	461f      	mov	r7, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	931e      	str	r3, [sp, #120]	; 0x78
 80067f4:	4ba4      	ldr	r3, [pc, #656]	; (8006a88 <_strtod_l+0x2a0>)
 80067f6:	9219      	str	r2, [sp, #100]	; 0x64
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	9307      	str	r3, [sp, #28]
 80067fc:	4604      	mov	r4, r0
 80067fe:	4618      	mov	r0, r3
 8006800:	4688      	mov	r8, r1
 8006802:	f7f9 fce5 	bl	80001d0 <strlen>
 8006806:	f04f 0a00 	mov.w	sl, #0
 800680a:	4605      	mov	r5, r0
 800680c:	f04f 0b00 	mov.w	fp, #0
 8006810:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	2a2b      	cmp	r2, #43	; 0x2b
 800681a:	d04c      	beq.n	80068b6 <_strtod_l+0xce>
 800681c:	d839      	bhi.n	8006892 <_strtod_l+0xaa>
 800681e:	2a0d      	cmp	r2, #13
 8006820:	d832      	bhi.n	8006888 <_strtod_l+0xa0>
 8006822:	2a08      	cmp	r2, #8
 8006824:	d832      	bhi.n	800688c <_strtod_l+0xa4>
 8006826:	2a00      	cmp	r2, #0
 8006828:	d03c      	beq.n	80068a4 <_strtod_l+0xbc>
 800682a:	2300      	movs	r3, #0
 800682c:	930e      	str	r3, [sp, #56]	; 0x38
 800682e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006830:	7833      	ldrb	r3, [r6, #0]
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	f040 80b4 	bne.w	80069a0 <_strtod_l+0x1b8>
 8006838:	7873      	ldrb	r3, [r6, #1]
 800683a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800683e:	2b58      	cmp	r3, #88	; 0x58
 8006840:	d16c      	bne.n	800691c <_strtod_l+0x134>
 8006842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	ab1e      	add	r3, sp, #120	; 0x78
 8006848:	9702      	str	r7, [sp, #8]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4a8f      	ldr	r2, [pc, #572]	; (8006a8c <_strtod_l+0x2a4>)
 800684e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006850:	a91d      	add	r1, sp, #116	; 0x74
 8006852:	4620      	mov	r0, r4
 8006854:	f001 fd40 	bl	80082d8 <__gethex>
 8006858:	f010 0707 	ands.w	r7, r0, #7
 800685c:	4605      	mov	r5, r0
 800685e:	d005      	beq.n	800686c <_strtod_l+0x84>
 8006860:	2f06      	cmp	r7, #6
 8006862:	d12a      	bne.n	80068ba <_strtod_l+0xd2>
 8006864:	3601      	adds	r6, #1
 8006866:	2300      	movs	r3, #0
 8006868:	961d      	str	r6, [sp, #116]	; 0x74
 800686a:	930e      	str	r3, [sp, #56]	; 0x38
 800686c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 8596 	bne.w	80073a0 <_strtod_l+0xbb8>
 8006874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006876:	b1db      	cbz	r3, 80068b0 <_strtod_l+0xc8>
 8006878:	4652      	mov	r2, sl
 800687a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800687e:	ec43 2b10 	vmov	d0, r2, r3
 8006882:	b023      	add	sp, #140	; 0x8c
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006888:	2a20      	cmp	r2, #32
 800688a:	d1ce      	bne.n	800682a <_strtod_l+0x42>
 800688c:	3301      	adds	r3, #1
 800688e:	931d      	str	r3, [sp, #116]	; 0x74
 8006890:	e7c0      	b.n	8006814 <_strtod_l+0x2c>
 8006892:	2a2d      	cmp	r2, #45	; 0x2d
 8006894:	d1c9      	bne.n	800682a <_strtod_l+0x42>
 8006896:	2201      	movs	r2, #1
 8006898:	920e      	str	r2, [sp, #56]	; 0x38
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	921d      	str	r2, [sp, #116]	; 0x74
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1c4      	bne.n	800682e <_strtod_l+0x46>
 80068a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8576 	bne.w	800739c <_strtod_l+0xbb4>
 80068b0:	4652      	mov	r2, sl
 80068b2:	465b      	mov	r3, fp
 80068b4:	e7e3      	b.n	800687e <_strtod_l+0x96>
 80068b6:	2200      	movs	r2, #0
 80068b8:	e7ee      	b.n	8006898 <_strtod_l+0xb0>
 80068ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068bc:	b13a      	cbz	r2, 80068ce <_strtod_l+0xe6>
 80068be:	2135      	movs	r1, #53	; 0x35
 80068c0:	a820      	add	r0, sp, #128	; 0x80
 80068c2:	f002 fcb4 	bl	800922e <__copybits>
 80068c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068c8:	4620      	mov	r0, r4
 80068ca:	f002 f879 	bl	80089c0 <_Bfree>
 80068ce:	3f01      	subs	r7, #1
 80068d0:	2f05      	cmp	r7, #5
 80068d2:	d807      	bhi.n	80068e4 <_strtod_l+0xfc>
 80068d4:	e8df f007 	tbb	[pc, r7]
 80068d8:	1d180b0e 	.word	0x1d180b0e
 80068dc:	030e      	.short	0x030e
 80068de:	f04f 0b00 	mov.w	fp, #0
 80068e2:	46da      	mov	sl, fp
 80068e4:	0728      	lsls	r0, r5, #28
 80068e6:	d5c1      	bpl.n	800686c <_strtod_l+0x84>
 80068e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80068ec:	e7be      	b.n	800686c <_strtod_l+0x84>
 80068ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80068f2:	e7f7      	b.n	80068e4 <_strtod_l+0xfc>
 80068f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80068f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80068fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006902:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006906:	e7ed      	b.n	80068e4 <_strtod_l+0xfc>
 8006908:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006a90 <_strtod_l+0x2a8>
 800690c:	f04f 0a00 	mov.w	sl, #0
 8006910:	e7e8      	b.n	80068e4 <_strtod_l+0xfc>
 8006912:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006916:	f04f 3aff 	mov.w	sl, #4294967295
 800691a:	e7e3      	b.n	80068e4 <_strtod_l+0xfc>
 800691c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	921d      	str	r2, [sp, #116]	; 0x74
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d0f9      	beq.n	800691c <_strtod_l+0x134>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d09f      	beq.n	800686c <_strtod_l+0x84>
 800692c:	2301      	movs	r3, #1
 800692e:	f04f 0900 	mov.w	r9, #0
 8006932:	9304      	str	r3, [sp, #16]
 8006934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006936:	930a      	str	r3, [sp, #40]	; 0x28
 8006938:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800693c:	464f      	mov	r7, r9
 800693e:	220a      	movs	r2, #10
 8006940:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006942:	7806      	ldrb	r6, [r0, #0]
 8006944:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006948:	b2d9      	uxtb	r1, r3
 800694a:	2909      	cmp	r1, #9
 800694c:	d92a      	bls.n	80069a4 <_strtod_l+0x1bc>
 800694e:	9907      	ldr	r1, [sp, #28]
 8006950:	462a      	mov	r2, r5
 8006952:	f002 fedd 	bl	8009710 <strncmp>
 8006956:	b398      	cbz	r0, 80069c0 <_strtod_l+0x1d8>
 8006958:	2000      	movs	r0, #0
 800695a:	4633      	mov	r3, r6
 800695c:	463d      	mov	r5, r7
 800695e:	9007      	str	r0, [sp, #28]
 8006960:	4602      	mov	r2, r0
 8006962:	2b65      	cmp	r3, #101	; 0x65
 8006964:	d001      	beq.n	800696a <_strtod_l+0x182>
 8006966:	2b45      	cmp	r3, #69	; 0x45
 8006968:	d118      	bne.n	800699c <_strtod_l+0x1b4>
 800696a:	b91d      	cbnz	r5, 8006974 <_strtod_l+0x18c>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4303      	orrs	r3, r0
 8006970:	d098      	beq.n	80068a4 <_strtod_l+0xbc>
 8006972:	2500      	movs	r5, #0
 8006974:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006978:	f108 0301 	add.w	r3, r8, #1
 800697c:	931d      	str	r3, [sp, #116]	; 0x74
 800697e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006982:	2b2b      	cmp	r3, #43	; 0x2b
 8006984:	d075      	beq.n	8006a72 <_strtod_l+0x28a>
 8006986:	2b2d      	cmp	r3, #45	; 0x2d
 8006988:	d07b      	beq.n	8006a82 <_strtod_l+0x29a>
 800698a:	f04f 0c00 	mov.w	ip, #0
 800698e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006992:	2909      	cmp	r1, #9
 8006994:	f240 8082 	bls.w	8006a9c <_strtod_l+0x2b4>
 8006998:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800699c:	2600      	movs	r6, #0
 800699e:	e09d      	b.n	8006adc <_strtod_l+0x2f4>
 80069a0:	2300      	movs	r3, #0
 80069a2:	e7c4      	b.n	800692e <_strtod_l+0x146>
 80069a4:	2f08      	cmp	r7, #8
 80069a6:	bfd8      	it	le
 80069a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80069aa:	f100 0001 	add.w	r0, r0, #1
 80069ae:	bfda      	itte	le
 80069b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80069b4:	9309      	strle	r3, [sp, #36]	; 0x24
 80069b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80069ba:	3701      	adds	r7, #1
 80069bc:	901d      	str	r0, [sp, #116]	; 0x74
 80069be:	e7bf      	b.n	8006940 <_strtod_l+0x158>
 80069c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069c2:	195a      	adds	r2, r3, r5
 80069c4:	921d      	str	r2, [sp, #116]	; 0x74
 80069c6:	5d5b      	ldrb	r3, [r3, r5]
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	d037      	beq.n	8006a3c <_strtod_l+0x254>
 80069cc:	9007      	str	r0, [sp, #28]
 80069ce:	463d      	mov	r5, r7
 80069d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80069d4:	2a09      	cmp	r2, #9
 80069d6:	d912      	bls.n	80069fe <_strtod_l+0x216>
 80069d8:	2201      	movs	r2, #1
 80069da:	e7c2      	b.n	8006962 <_strtod_l+0x17a>
 80069dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	921d      	str	r2, [sp, #116]	; 0x74
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	3001      	adds	r0, #1
 80069e6:	2b30      	cmp	r3, #48	; 0x30
 80069e8:	d0f8      	beq.n	80069dc <_strtod_l+0x1f4>
 80069ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80069ee:	2a08      	cmp	r2, #8
 80069f0:	f200 84db 	bhi.w	80073aa <_strtod_l+0xbc2>
 80069f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80069f6:	9007      	str	r0, [sp, #28]
 80069f8:	2000      	movs	r0, #0
 80069fa:	920a      	str	r2, [sp, #40]	; 0x28
 80069fc:	4605      	mov	r5, r0
 80069fe:	3b30      	subs	r3, #48	; 0x30
 8006a00:	f100 0201 	add.w	r2, r0, #1
 8006a04:	d014      	beq.n	8006a30 <_strtod_l+0x248>
 8006a06:	9907      	ldr	r1, [sp, #28]
 8006a08:	4411      	add	r1, r2
 8006a0a:	9107      	str	r1, [sp, #28]
 8006a0c:	462a      	mov	r2, r5
 8006a0e:	eb00 0e05 	add.w	lr, r0, r5
 8006a12:	210a      	movs	r1, #10
 8006a14:	4572      	cmp	r2, lr
 8006a16:	d113      	bne.n	8006a40 <_strtod_l+0x258>
 8006a18:	182a      	adds	r2, r5, r0
 8006a1a:	2a08      	cmp	r2, #8
 8006a1c:	f105 0501 	add.w	r5, r5, #1
 8006a20:	4405      	add	r5, r0
 8006a22:	dc1c      	bgt.n	8006a5e <_strtod_l+0x276>
 8006a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a26:	220a      	movs	r2, #10
 8006a28:	fb02 3301 	mla	r3, r2, r1, r3
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	911d      	str	r1, [sp, #116]	; 0x74
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	4610      	mov	r0, r2
 8006a3a:	e7c9      	b.n	80069d0 <_strtod_l+0x1e8>
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	e7d2      	b.n	80069e6 <_strtod_l+0x1fe>
 8006a40:	2a08      	cmp	r2, #8
 8006a42:	dc04      	bgt.n	8006a4e <_strtod_l+0x266>
 8006a44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006a46:	434e      	muls	r6, r1
 8006a48:	9609      	str	r6, [sp, #36]	; 0x24
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	e7e2      	b.n	8006a14 <_strtod_l+0x22c>
 8006a4e:	f102 0c01 	add.w	ip, r2, #1
 8006a52:	f1bc 0f10 	cmp.w	ip, #16
 8006a56:	bfd8      	it	le
 8006a58:	fb01 f909 	mulle.w	r9, r1, r9
 8006a5c:	e7f5      	b.n	8006a4a <_strtod_l+0x262>
 8006a5e:	2d10      	cmp	r5, #16
 8006a60:	bfdc      	itt	le
 8006a62:	220a      	movle	r2, #10
 8006a64:	fb02 3909 	mlale	r9, r2, r9, r3
 8006a68:	e7e1      	b.n	8006a2e <_strtod_l+0x246>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9307      	str	r3, [sp, #28]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	e77c      	b.n	800696c <_strtod_l+0x184>
 8006a72:	f04f 0c00 	mov.w	ip, #0
 8006a76:	f108 0302 	add.w	r3, r8, #2
 8006a7a:	931d      	str	r3, [sp, #116]	; 0x74
 8006a7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006a80:	e785      	b.n	800698e <_strtod_l+0x1a6>
 8006a82:	f04f 0c01 	mov.w	ip, #1
 8006a86:	e7f6      	b.n	8006a76 <_strtod_l+0x28e>
 8006a88:	0800a5d0 	.word	0x0800a5d0
 8006a8c:	0800a380 	.word	0x0800a380
 8006a90:	7ff00000 	.word	0x7ff00000
 8006a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	911d      	str	r1, [sp, #116]	; 0x74
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d0f9      	beq.n	8006a94 <_strtod_l+0x2ac>
 8006aa0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006aa4:	2908      	cmp	r1, #8
 8006aa6:	f63f af79 	bhi.w	800699c <_strtod_l+0x1b4>
 8006aaa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab0:	9308      	str	r3, [sp, #32]
 8006ab2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	911d      	str	r1, [sp, #116]	; 0x74
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006abe:	2e09      	cmp	r6, #9
 8006ac0:	d937      	bls.n	8006b32 <_strtod_l+0x34a>
 8006ac2:	9e08      	ldr	r6, [sp, #32]
 8006ac4:	1b89      	subs	r1, r1, r6
 8006ac6:	2908      	cmp	r1, #8
 8006ac8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006acc:	dc02      	bgt.n	8006ad4 <_strtod_l+0x2ec>
 8006ace:	4576      	cmp	r6, lr
 8006ad0:	bfa8      	it	ge
 8006ad2:	4676      	movge	r6, lr
 8006ad4:	f1bc 0f00 	cmp.w	ip, #0
 8006ad8:	d000      	beq.n	8006adc <_strtod_l+0x2f4>
 8006ada:	4276      	negs	r6, r6
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d14f      	bne.n	8006b80 <_strtod_l+0x398>
 8006ae0:	9904      	ldr	r1, [sp, #16]
 8006ae2:	4301      	orrs	r1, r0
 8006ae4:	f47f aec2 	bne.w	800686c <_strtod_l+0x84>
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	f47f aedb 	bne.w	80068a4 <_strtod_l+0xbc>
 8006aee:	2b69      	cmp	r3, #105	; 0x69
 8006af0:	d027      	beq.n	8006b42 <_strtod_l+0x35a>
 8006af2:	dc24      	bgt.n	8006b3e <_strtod_l+0x356>
 8006af4:	2b49      	cmp	r3, #73	; 0x49
 8006af6:	d024      	beq.n	8006b42 <_strtod_l+0x35a>
 8006af8:	2b4e      	cmp	r3, #78	; 0x4e
 8006afa:	f47f aed3 	bne.w	80068a4 <_strtod_l+0xbc>
 8006afe:	499e      	ldr	r1, [pc, #632]	; (8006d78 <_strtod_l+0x590>)
 8006b00:	a81d      	add	r0, sp, #116	; 0x74
 8006b02:	f001 fe41 	bl	8008788 <__match>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f aecc 	beq.w	80068a4 <_strtod_l+0xbc>
 8006b0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b28      	cmp	r3, #40	; 0x28
 8006b12:	d12d      	bne.n	8006b70 <_strtod_l+0x388>
 8006b14:	4999      	ldr	r1, [pc, #612]	; (8006d7c <_strtod_l+0x594>)
 8006b16:	aa20      	add	r2, sp, #128	; 0x80
 8006b18:	a81d      	add	r0, sp, #116	; 0x74
 8006b1a:	f001 fe49 	bl	80087b0 <__hexnan>
 8006b1e:	2805      	cmp	r0, #5
 8006b20:	d126      	bne.n	8006b70 <_strtod_l+0x388>
 8006b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006b28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b30:	e69c      	b.n	800686c <_strtod_l+0x84>
 8006b32:	210a      	movs	r1, #10
 8006b34:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006b38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b3c:	e7b9      	b.n	8006ab2 <_strtod_l+0x2ca>
 8006b3e:	2b6e      	cmp	r3, #110	; 0x6e
 8006b40:	e7db      	b.n	8006afa <_strtod_l+0x312>
 8006b42:	498f      	ldr	r1, [pc, #572]	; (8006d80 <_strtod_l+0x598>)
 8006b44:	a81d      	add	r0, sp, #116	; 0x74
 8006b46:	f001 fe1f 	bl	8008788 <__match>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f43f aeaa 	beq.w	80068a4 <_strtod_l+0xbc>
 8006b50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b52:	498c      	ldr	r1, [pc, #560]	; (8006d84 <_strtod_l+0x59c>)
 8006b54:	3b01      	subs	r3, #1
 8006b56:	a81d      	add	r0, sp, #116	; 0x74
 8006b58:	931d      	str	r3, [sp, #116]	; 0x74
 8006b5a:	f001 fe15 	bl	8008788 <__match>
 8006b5e:	b910      	cbnz	r0, 8006b66 <_strtod_l+0x37e>
 8006b60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b62:	3301      	adds	r3, #1
 8006b64:	931d      	str	r3, [sp, #116]	; 0x74
 8006b66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006d94 <_strtod_l+0x5ac>
 8006b6a:	f04f 0a00 	mov.w	sl, #0
 8006b6e:	e67d      	b.n	800686c <_strtod_l+0x84>
 8006b70:	4885      	ldr	r0, [pc, #532]	; (8006d88 <_strtod_l+0x5a0>)
 8006b72:	f002 fdb5 	bl	80096e0 <nan>
 8006b76:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006b7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006b7e:	e675      	b.n	800686c <_strtod_l+0x84>
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b84:	1af3      	subs	r3, r6, r3
 8006b86:	2f00      	cmp	r7, #0
 8006b88:	bf08      	it	eq
 8006b8a:	462f      	moveq	r7, r5
 8006b8c:	2d10      	cmp	r5, #16
 8006b8e:	9308      	str	r3, [sp, #32]
 8006b90:	46a8      	mov	r8, r5
 8006b92:	bfa8      	it	ge
 8006b94:	f04f 0810 	movge.w	r8, #16
 8006b98:	f7f9 fcb4 	bl	8000504 <__aeabi_ui2d>
 8006b9c:	2d09      	cmp	r5, #9
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	468b      	mov	fp, r1
 8006ba2:	dd13      	ble.n	8006bcc <_strtod_l+0x3e4>
 8006ba4:	4b79      	ldr	r3, [pc, #484]	; (8006d8c <_strtod_l+0x5a4>)
 8006ba6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006baa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006bae:	f7f9 fd23 	bl	80005f8 <__aeabi_dmul>
 8006bb2:	4682      	mov	sl, r0
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	468b      	mov	fp, r1
 8006bb8:	f7f9 fca4 	bl	8000504 <__aeabi_ui2d>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fb62 	bl	800028c <__adddf3>
 8006bc8:	4682      	mov	sl, r0
 8006bca:	468b      	mov	fp, r1
 8006bcc:	2d0f      	cmp	r5, #15
 8006bce:	dc38      	bgt.n	8006c42 <_strtod_l+0x45a>
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f43f ae4a 	beq.w	800686c <_strtod_l+0x84>
 8006bd8:	dd24      	ble.n	8006c24 <_strtod_l+0x43c>
 8006bda:	2b16      	cmp	r3, #22
 8006bdc:	dc0b      	bgt.n	8006bf6 <_strtod_l+0x40e>
 8006bde:	4d6b      	ldr	r5, [pc, #428]	; (8006d8c <_strtod_l+0x5a4>)
 8006be0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006be4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006be8:	4652      	mov	r2, sl
 8006bea:	465b      	mov	r3, fp
 8006bec:	f7f9 fd04 	bl	80005f8 <__aeabi_dmul>
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	468b      	mov	fp, r1
 8006bf4:	e63a      	b.n	800686c <_strtod_l+0x84>
 8006bf6:	9a08      	ldr	r2, [sp, #32]
 8006bf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	db20      	blt.n	8006c42 <_strtod_l+0x45a>
 8006c00:	4c62      	ldr	r4, [pc, #392]	; (8006d8c <_strtod_l+0x5a4>)
 8006c02:	f1c5 050f 	rsb	r5, r5, #15
 8006c06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	465b      	mov	r3, fp
 8006c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	1b5d      	subs	r5, r3, r5
 8006c1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c22:	e7e3      	b.n	8006bec <_strtod_l+0x404>
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	3316      	adds	r3, #22
 8006c28:	db0b      	blt.n	8006c42 <_strtod_l+0x45a>
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	4a57      	ldr	r2, [pc, #348]	; (8006d8c <_strtod_l+0x5a4>)
 8006c2e:	1b9e      	subs	r6, r3, r6
 8006c30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006c34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c38:	4650      	mov	r0, sl
 8006c3a:	4659      	mov	r1, fp
 8006c3c:	f7f9 fe06 	bl	800084c <__aeabi_ddiv>
 8006c40:	e7d6      	b.n	8006bf0 <_strtod_l+0x408>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	eba5 0808 	sub.w	r8, r5, r8
 8006c48:	4498      	add	r8, r3
 8006c4a:	f1b8 0f00 	cmp.w	r8, #0
 8006c4e:	dd71      	ble.n	8006d34 <_strtod_l+0x54c>
 8006c50:	f018 030f 	ands.w	r3, r8, #15
 8006c54:	d00a      	beq.n	8006c6c <_strtod_l+0x484>
 8006c56:	494d      	ldr	r1, [pc, #308]	; (8006d8c <_strtod_l+0x5a4>)
 8006c58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	465b      	mov	r3, fp
 8006c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c64:	f7f9 fcc8 	bl	80005f8 <__aeabi_dmul>
 8006c68:	4682      	mov	sl, r0
 8006c6a:	468b      	mov	fp, r1
 8006c6c:	f038 080f 	bics.w	r8, r8, #15
 8006c70:	d04d      	beq.n	8006d0e <_strtod_l+0x526>
 8006c72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006c76:	dd22      	ble.n	8006cbe <_strtod_l+0x4d6>
 8006c78:	2500      	movs	r5, #0
 8006c7a:	462e      	mov	r6, r5
 8006c7c:	9509      	str	r5, [sp, #36]	; 0x24
 8006c7e:	9507      	str	r5, [sp, #28]
 8006c80:	2322      	movs	r3, #34	; 0x22
 8006c82:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006d94 <_strtod_l+0x5ac>
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	f04f 0a00 	mov.w	sl, #0
 8006c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f43f adec 	beq.w	800686c <_strtod_l+0x84>
 8006c94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c96:	4620      	mov	r0, r4
 8006c98:	f001 fe92 	bl	80089c0 <_Bfree>
 8006c9c:	9907      	ldr	r1, [sp, #28]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f001 fe8e 	bl	80089c0 <_Bfree>
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f001 fe8a 	bl	80089c0 <_Bfree>
 8006cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f001 fe86 	bl	80089c0 <_Bfree>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f001 fe82 	bl	80089c0 <_Bfree>
 8006cbc:	e5d6      	b.n	800686c <_strtod_l+0x84>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	4699      	mov	r9, r3
 8006cca:	f1b8 0f01 	cmp.w	r8, #1
 8006cce:	dc21      	bgt.n	8006d14 <_strtod_l+0x52c>
 8006cd0:	b10b      	cbz	r3, 8006cd6 <_strtod_l+0x4ee>
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	468b      	mov	fp, r1
 8006cd6:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <_strtod_l+0x5a8>)
 8006cd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006cdc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	465b      	mov	r3, fp
 8006ce4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006ce8:	f7f9 fc86 	bl	80005f8 <__aeabi_dmul>
 8006cec:	4b29      	ldr	r3, [pc, #164]	; (8006d94 <_strtod_l+0x5ac>)
 8006cee:	460a      	mov	r2, r1
 8006cf0:	400b      	ands	r3, r1
 8006cf2:	4929      	ldr	r1, [pc, #164]	; (8006d98 <_strtod_l+0x5b0>)
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	4682      	mov	sl, r0
 8006cf8:	d8be      	bhi.n	8006c78 <_strtod_l+0x490>
 8006cfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cfe:	428b      	cmp	r3, r1
 8006d00:	bf86      	itte	hi
 8006d02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006d9c <_strtod_l+0x5b4>
 8006d06:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	e081      	b.n	8006e18 <_strtod_l+0x630>
 8006d14:	f018 0f01 	tst.w	r8, #1
 8006d18:	d007      	beq.n	8006d2a <_strtod_l+0x542>
 8006d1a:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <_strtod_l+0x5a8>)
 8006d1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f109 0901 	add.w	r9, r9, #1
 8006d2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d32:	e7ca      	b.n	8006cca <_strtod_l+0x4e2>
 8006d34:	d0eb      	beq.n	8006d0e <_strtod_l+0x526>
 8006d36:	f1c8 0800 	rsb	r8, r8, #0
 8006d3a:	f018 020f 	ands.w	r2, r8, #15
 8006d3e:	d00a      	beq.n	8006d56 <_strtod_l+0x56e>
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <_strtod_l+0x5a4>)
 8006d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d46:	4650      	mov	r0, sl
 8006d48:	4659      	mov	r1, fp
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f7f9 fd7d 	bl	800084c <__aeabi_ddiv>
 8006d52:	4682      	mov	sl, r0
 8006d54:	468b      	mov	fp, r1
 8006d56:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d5a:	d0d8      	beq.n	8006d0e <_strtod_l+0x526>
 8006d5c:	f1b8 0f1f 	cmp.w	r8, #31
 8006d60:	dd1e      	ble.n	8006da0 <_strtod_l+0x5b8>
 8006d62:	2500      	movs	r5, #0
 8006d64:	462e      	mov	r6, r5
 8006d66:	9509      	str	r5, [sp, #36]	; 0x24
 8006d68:	9507      	str	r5, [sp, #28]
 8006d6a:	2322      	movs	r3, #34	; 0x22
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	f04f 0b00 	mov.w	fp, #0
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	e789      	b.n	8006c8c <_strtod_l+0x4a4>
 8006d78:	0800a351 	.word	0x0800a351
 8006d7c:	0800a394 	.word	0x0800a394
 8006d80:	0800a349 	.word	0x0800a349
 8006d84:	0800a4d4 	.word	0x0800a4d4
 8006d88:	0800a790 	.word	0x0800a790
 8006d8c:	0800a670 	.word	0x0800a670
 8006d90:	0800a648 	.word	0x0800a648
 8006d94:	7ff00000 	.word	0x7ff00000
 8006d98:	7ca00000 	.word	0x7ca00000
 8006d9c:	7fefffff 	.word	0x7fefffff
 8006da0:	f018 0310 	ands.w	r3, r8, #16
 8006da4:	bf18      	it	ne
 8006da6:	236a      	movne	r3, #106	; 0x6a
 8006da8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007160 <_strtod_l+0x978>
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	4650      	mov	r0, sl
 8006db0:	4659      	mov	r1, fp
 8006db2:	2300      	movs	r3, #0
 8006db4:	f018 0f01 	tst.w	r8, #1
 8006db8:	d004      	beq.n	8006dc4 <_strtod_l+0x5dc>
 8006dba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006dbe:	f7f9 fc1b 	bl	80005f8 <__aeabi_dmul>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006dc8:	f109 0908 	add.w	r9, r9, #8
 8006dcc:	d1f2      	bne.n	8006db4 <_strtod_l+0x5cc>
 8006dce:	b10b      	cbz	r3, 8006dd4 <_strtod_l+0x5ec>
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	468b      	mov	fp, r1
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	b1bb      	cbz	r3, 8006e08 <_strtod_l+0x620>
 8006dd8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ddc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	4659      	mov	r1, fp
 8006de4:	dd10      	ble.n	8006e08 <_strtod_l+0x620>
 8006de6:	2b1f      	cmp	r3, #31
 8006de8:	f340 8128 	ble.w	800703c <_strtod_l+0x854>
 8006dec:	2b34      	cmp	r3, #52	; 0x34
 8006dee:	bfde      	ittt	le
 8006df0:	3b20      	suble	r3, #32
 8006df2:	f04f 32ff 	movle.w	r2, #4294967295
 8006df6:	fa02 f303 	lslle.w	r3, r2, r3
 8006dfa:	f04f 0a00 	mov.w	sl, #0
 8006dfe:	bfcc      	ite	gt
 8006e00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006e04:	ea03 0b01 	andle.w	fp, r3, r1
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	4659      	mov	r1, fp
 8006e10:	f7f9 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d1a4      	bne.n	8006d62 <_strtod_l+0x57a>
 8006e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e1e:	462b      	mov	r3, r5
 8006e20:	463a      	mov	r2, r7
 8006e22:	4620      	mov	r0, r4
 8006e24:	f001 fe38 	bl	8008a98 <__s2b>
 8006e28:	9009      	str	r0, [sp, #36]	; 0x24
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	f43f af24 	beq.w	8006c78 <_strtod_l+0x490>
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	1b9e      	subs	r6, r3, r6
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfb4      	ite	lt
 8006e3a:	4633      	movlt	r3, r6
 8006e3c:	2300      	movge	r3, #0
 8006e3e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	2500      	movs	r5, #0
 8006e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e48:	9318      	str	r3, [sp, #96]	; 0x60
 8006e4a:	462e      	mov	r6, r5
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	4620      	mov	r0, r4
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	f001 fd75 	bl	8008940 <_Balloc>
 8006e56:	9007      	str	r0, [sp, #28]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f43f af11 	beq.w	8006c80 <_strtod_l+0x498>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	3202      	adds	r2, #2
 8006e64:	f103 010c 	add.w	r1, r3, #12
 8006e68:	0092      	lsls	r2, r2, #2
 8006e6a:	300c      	adds	r0, #12
 8006e6c:	f001 fd5a 	bl	8008924 <memcpy>
 8006e70:	ec4b ab10 	vmov	d0, sl, fp
 8006e74:	aa20      	add	r2, sp, #128	; 0x80
 8006e76:	a91f      	add	r1, sp, #124	; 0x7c
 8006e78:	4620      	mov	r0, r4
 8006e7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006e7e:	f002 f947 	bl	8009110 <__d2b>
 8006e82:	901e      	str	r0, [sp, #120]	; 0x78
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f aefb 	beq.w	8006c80 <_strtod_l+0x498>
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f001 fe9d 	bl	8008bcc <__i2b>
 8006e92:	4606      	mov	r6, r0
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f43f aef3 	beq.w	8006c80 <_strtod_l+0x498>
 8006e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e9c:	9904      	ldr	r1, [sp, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfab      	itete	ge
 8006ea2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006ea4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006ea6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006ea8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006eac:	bfac      	ite	ge
 8006eae:	eb03 0902 	addge.w	r9, r3, r2
 8006eb2:	1ad7      	sublt	r7, r2, r3
 8006eb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006eb6:	eba3 0801 	sub.w	r8, r3, r1
 8006eba:	4490      	add	r8, r2
 8006ebc:	4ba3      	ldr	r3, [pc, #652]	; (800714c <_strtod_l+0x964>)
 8006ebe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ec2:	4598      	cmp	r8, r3
 8006ec4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ec8:	f280 80cc 	bge.w	8007064 <_strtod_l+0x87c>
 8006ecc:	eba3 0308 	sub.w	r3, r3, r8
 8006ed0:	2b1f      	cmp	r3, #31
 8006ed2:	eba2 0203 	sub.w	r2, r2, r3
 8006ed6:	f04f 0101 	mov.w	r1, #1
 8006eda:	f300 80b6 	bgt.w	800704a <_strtod_l+0x862>
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee8:	eb09 0802 	add.w	r8, r9, r2
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	45c1      	cmp	r9, r8
 8006ef0:	4417      	add	r7, r2
 8006ef2:	441f      	add	r7, r3
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	bfa8      	it	ge
 8006ef8:	4643      	movge	r3, r8
 8006efa:	42bb      	cmp	r3, r7
 8006efc:	bfa8      	it	ge
 8006efe:	463b      	movge	r3, r7
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	bfc2      	ittt	gt
 8006f04:	eba8 0803 	subgt.w	r8, r8, r3
 8006f08:	1aff      	subgt	r7, r7, r3
 8006f0a:	eba9 0903 	subgt.w	r9, r9, r3
 8006f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	dd17      	ble.n	8006f44 <_strtod_l+0x75c>
 8006f14:	4631      	mov	r1, r6
 8006f16:	461a      	mov	r2, r3
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f001 ff13 	bl	8008d44 <__pow5mult>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	2800      	cmp	r0, #0
 8006f22:	f43f aead 	beq.w	8006c80 <_strtod_l+0x498>
 8006f26:	4601      	mov	r1, r0
 8006f28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f001 fe64 	bl	8008bf8 <__multiply>
 8006f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f43f aea4 	beq.w	8006c80 <_strtod_l+0x498>
 8006f38:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f001 fd40 	bl	80089c0 <_Bfree>
 8006f40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f42:	931e      	str	r3, [sp, #120]	; 0x78
 8006f44:	f1b8 0f00 	cmp.w	r8, #0
 8006f48:	f300 8091 	bgt.w	800706e <_strtod_l+0x886>
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dd08      	ble.n	8006f64 <_strtod_l+0x77c>
 8006f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f54:	9907      	ldr	r1, [sp, #28]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 fef4 	bl	8008d44 <__pow5mult>
 8006f5c:	9007      	str	r0, [sp, #28]
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f43f ae8e 	beq.w	8006c80 <_strtod_l+0x498>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	dd08      	ble.n	8006f7a <_strtod_l+0x792>
 8006f68:	9907      	ldr	r1, [sp, #28]
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f001 ff43 	bl	8008df8 <__lshift>
 8006f72:	9007      	str	r0, [sp, #28]
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f ae83 	beq.w	8006c80 <_strtod_l+0x498>
 8006f7a:	f1b9 0f00 	cmp.w	r9, #0
 8006f7e:	dd08      	ble.n	8006f92 <_strtod_l+0x7aa>
 8006f80:	4631      	mov	r1, r6
 8006f82:	464a      	mov	r2, r9
 8006f84:	4620      	mov	r0, r4
 8006f86:	f001 ff37 	bl	8008df8 <__lshift>
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f43f ae77 	beq.w	8006c80 <_strtod_l+0x498>
 8006f92:	9a07      	ldr	r2, [sp, #28]
 8006f94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f96:	4620      	mov	r0, r4
 8006f98:	f001 ffb6 	bl	8008f08 <__mdiff>
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f43f ae6e 	beq.w	8006c80 <_strtod_l+0x498>
 8006fa4:	68c3      	ldr	r3, [r0, #12]
 8006fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60c3      	str	r3, [r0, #12]
 8006fac:	4631      	mov	r1, r6
 8006fae:	f001 ff8f 	bl	8008ed0 <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da65      	bge.n	8007082 <_strtod_l+0x89a>
 8006fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fb8:	ea53 030a 	orrs.w	r3, r3, sl
 8006fbc:	f040 8087 	bne.w	80070ce <_strtod_l+0x8e6>
 8006fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8082 	bne.w	80070ce <_strtod_l+0x8e6>
 8006fca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fce:	0d1b      	lsrs	r3, r3, #20
 8006fd0:	051b      	lsls	r3, r3, #20
 8006fd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fd6:	d97a      	bls.n	80070ce <_strtod_l+0x8e6>
 8006fd8:	696b      	ldr	r3, [r5, #20]
 8006fda:	b913      	cbnz	r3, 8006fe2 <_strtod_l+0x7fa>
 8006fdc:	692b      	ldr	r3, [r5, #16]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	dd75      	ble.n	80070ce <_strtod_l+0x8e6>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f001 ff06 	bl	8008df8 <__lshift>
 8006fec:	4631      	mov	r1, r6
 8006fee:	4605      	mov	r5, r0
 8006ff0:	f001 ff6e 	bl	8008ed0 <__mcmp>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	dd6a      	ble.n	80070ce <_strtod_l+0x8e6>
 8006ff8:	9904      	ldr	r1, [sp, #16]
 8006ffa:	4a55      	ldr	r2, [pc, #340]	; (8007150 <_strtod_l+0x968>)
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	2900      	cmp	r1, #0
 8007000:	f000 8085 	beq.w	800710e <_strtod_l+0x926>
 8007004:	ea02 010b 	and.w	r1, r2, fp
 8007008:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800700c:	dc7f      	bgt.n	800710e <_strtod_l+0x926>
 800700e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007012:	f77f aeaa 	ble.w	8006d6a <_strtod_l+0x582>
 8007016:	4a4f      	ldr	r2, [pc, #316]	; (8007154 <_strtod_l+0x96c>)
 8007018:	2300      	movs	r3, #0
 800701a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800701e:	4650      	mov	r0, sl
 8007020:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007024:	4659      	mov	r1, fp
 8007026:	f7f9 fae7 	bl	80005f8 <__aeabi_dmul>
 800702a:	460b      	mov	r3, r1
 800702c:	4303      	orrs	r3, r0
 800702e:	bf08      	it	eq
 8007030:	2322      	moveq	r3, #34	; 0x22
 8007032:	4682      	mov	sl, r0
 8007034:	468b      	mov	fp, r1
 8007036:	bf08      	it	eq
 8007038:	6023      	streq	r3, [r4, #0]
 800703a:	e62b      	b.n	8006c94 <_strtod_l+0x4ac>
 800703c:	f04f 32ff 	mov.w	r2, #4294967295
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	ea03 0a0a 	and.w	sl, r3, sl
 8007048:	e6de      	b.n	8006e08 <_strtod_l+0x620>
 800704a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800704e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007052:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007056:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800705a:	fa01 f308 	lsl.w	r3, r1, r8
 800705e:	930c      	str	r3, [sp, #48]	; 0x30
 8007060:	9111      	str	r1, [sp, #68]	; 0x44
 8007062:	e741      	b.n	8006ee8 <_strtod_l+0x700>
 8007064:	2300      	movs	r3, #0
 8007066:	930c      	str	r3, [sp, #48]	; 0x30
 8007068:	2301      	movs	r3, #1
 800706a:	9311      	str	r3, [sp, #68]	; 0x44
 800706c:	e73c      	b.n	8006ee8 <_strtod_l+0x700>
 800706e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007070:	4642      	mov	r2, r8
 8007072:	4620      	mov	r0, r4
 8007074:	f001 fec0 	bl	8008df8 <__lshift>
 8007078:	901e      	str	r0, [sp, #120]	; 0x78
 800707a:	2800      	cmp	r0, #0
 800707c:	f47f af66 	bne.w	8006f4c <_strtod_l+0x764>
 8007080:	e5fe      	b.n	8006c80 <_strtod_l+0x498>
 8007082:	465f      	mov	r7, fp
 8007084:	d16e      	bne.n	8007164 <_strtod_l+0x97c>
 8007086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800708c:	b342      	cbz	r2, 80070e0 <_strtod_l+0x8f8>
 800708e:	4a32      	ldr	r2, [pc, #200]	; (8007158 <_strtod_l+0x970>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d128      	bne.n	80070e6 <_strtod_l+0x8fe>
 8007094:	9b04      	ldr	r3, [sp, #16]
 8007096:	4650      	mov	r0, sl
 8007098:	b1eb      	cbz	r3, 80070d6 <_strtod_l+0x8ee>
 800709a:	4a2d      	ldr	r2, [pc, #180]	; (8007150 <_strtod_l+0x968>)
 800709c:	403a      	ands	r2, r7
 800709e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80070a2:	f04f 31ff 	mov.w	r1, #4294967295
 80070a6:	d819      	bhi.n	80070dc <_strtod_l+0x8f4>
 80070a8:	0d12      	lsrs	r2, r2, #20
 80070aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070ae:	fa01 f303 	lsl.w	r3, r1, r3
 80070b2:	4298      	cmp	r0, r3
 80070b4:	d117      	bne.n	80070e6 <_strtod_l+0x8fe>
 80070b6:	4b29      	ldr	r3, [pc, #164]	; (800715c <_strtod_l+0x974>)
 80070b8:	429f      	cmp	r7, r3
 80070ba:	d102      	bne.n	80070c2 <_strtod_l+0x8da>
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f addf 	beq.w	8006c80 <_strtod_l+0x498>
 80070c2:	4b23      	ldr	r3, [pc, #140]	; (8007150 <_strtod_l+0x968>)
 80070c4:	403b      	ands	r3, r7
 80070c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80070ca:	f04f 0a00 	mov.w	sl, #0
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1a0      	bne.n	8007016 <_strtod_l+0x82e>
 80070d4:	e5de      	b.n	8006c94 <_strtod_l+0x4ac>
 80070d6:	f04f 33ff 	mov.w	r3, #4294967295
 80070da:	e7ea      	b.n	80070b2 <_strtod_l+0x8ca>
 80070dc:	460b      	mov	r3, r1
 80070de:	e7e8      	b.n	80070b2 <_strtod_l+0x8ca>
 80070e0:	ea53 030a 	orrs.w	r3, r3, sl
 80070e4:	d088      	beq.n	8006ff8 <_strtod_l+0x810>
 80070e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e8:	b1db      	cbz	r3, 8007122 <_strtod_l+0x93a>
 80070ea:	423b      	tst	r3, r7
 80070ec:	d0ef      	beq.n	80070ce <_strtod_l+0x8e6>
 80070ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f0:	9a04      	ldr	r2, [sp, #16]
 80070f2:	4650      	mov	r0, sl
 80070f4:	4659      	mov	r1, fp
 80070f6:	b1c3      	cbz	r3, 800712a <_strtod_l+0x942>
 80070f8:	f7ff fb5a 	bl	80067b0 <sulp>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007104:	f7f9 f8c2 	bl	800028c <__adddf3>
 8007108:	4682      	mov	sl, r0
 800710a:	468b      	mov	fp, r1
 800710c:	e7df      	b.n	80070ce <_strtod_l+0x8e6>
 800710e:	4013      	ands	r3, r2
 8007110:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007114:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007118:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800711c:	f04f 3aff 	mov.w	sl, #4294967295
 8007120:	e7d5      	b.n	80070ce <_strtod_l+0x8e6>
 8007122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007124:	ea13 0f0a 	tst.w	r3, sl
 8007128:	e7e0      	b.n	80070ec <_strtod_l+0x904>
 800712a:	f7ff fb41 	bl	80067b0 <sulp>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007136:	f7f9 f8a7 	bl	8000288 <__aeabi_dsub>
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4682      	mov	sl, r0
 8007140:	468b      	mov	fp, r1
 8007142:	f7f9 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007146:	2800      	cmp	r0, #0
 8007148:	d0c1      	beq.n	80070ce <_strtod_l+0x8e6>
 800714a:	e60e      	b.n	8006d6a <_strtod_l+0x582>
 800714c:	fffffc02 	.word	0xfffffc02
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	39500000 	.word	0x39500000
 8007158:	000fffff 	.word	0x000fffff
 800715c:	7fefffff 	.word	0x7fefffff
 8007160:	0800a3a8 	.word	0x0800a3a8
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	f002 f82e 	bl	80091c8 <__ratio>
 800716c:	ec59 8b10 	vmov	r8, r9, d0
 8007170:	ee10 0a10 	vmov	r0, s0
 8007174:	2200      	movs	r2, #0
 8007176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 fcb8 	bl	8000af0 <__aeabi_dcmple>
 8007180:	2800      	cmp	r0, #0
 8007182:	d07c      	beq.n	800727e <_strtod_l+0xa96>
 8007184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04c      	beq.n	8007224 <_strtod_l+0xa3c>
 800718a:	4b95      	ldr	r3, [pc, #596]	; (80073e0 <_strtod_l+0xbf8>)
 800718c:	2200      	movs	r2, #0
 800718e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007192:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80073e0 <_strtod_l+0xbf8>
 8007196:	f04f 0800 	mov.w	r8, #0
 800719a:	4b92      	ldr	r3, [pc, #584]	; (80073e4 <_strtod_l+0xbfc>)
 800719c:	403b      	ands	r3, r7
 800719e:	9311      	str	r3, [sp, #68]	; 0x44
 80071a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071a2:	4b91      	ldr	r3, [pc, #580]	; (80073e8 <_strtod_l+0xc00>)
 80071a4:	429a      	cmp	r2, r3
 80071a6:	f040 80b2 	bne.w	800730e <_strtod_l+0xb26>
 80071aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80071b6:	ec4b ab10 	vmov	d0, sl, fp
 80071ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80071be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071c2:	f001 ff29 	bl	8009018 <__ulp>
 80071c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071ca:	ec53 2b10 	vmov	r2, r3, d0
 80071ce:	f7f9 fa13 	bl	80005f8 <__aeabi_dmul>
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	f7f9 f859 	bl	800028c <__adddf3>
 80071da:	460b      	mov	r3, r1
 80071dc:	4981      	ldr	r1, [pc, #516]	; (80073e4 <_strtod_l+0xbfc>)
 80071de:	4a83      	ldr	r2, [pc, #524]	; (80073ec <_strtod_l+0xc04>)
 80071e0:	4019      	ands	r1, r3
 80071e2:	4291      	cmp	r1, r2
 80071e4:	4682      	mov	sl, r0
 80071e6:	d95e      	bls.n	80072a6 <_strtod_l+0xabe>
 80071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d103      	bne.n	80071fa <_strtod_l+0xa12>
 80071f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f4:	3301      	adds	r3, #1
 80071f6:	f43f ad43 	beq.w	8006c80 <_strtod_l+0x498>
 80071fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80073f8 <_strtod_l+0xc10>
 80071fe:	f04f 3aff 	mov.w	sl, #4294967295
 8007202:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007204:	4620      	mov	r0, r4
 8007206:	f001 fbdb 	bl	80089c0 <_Bfree>
 800720a:	9907      	ldr	r1, [sp, #28]
 800720c:	4620      	mov	r0, r4
 800720e:	f001 fbd7 	bl	80089c0 <_Bfree>
 8007212:	4631      	mov	r1, r6
 8007214:	4620      	mov	r0, r4
 8007216:	f001 fbd3 	bl	80089c0 <_Bfree>
 800721a:	4629      	mov	r1, r5
 800721c:	4620      	mov	r0, r4
 800721e:	f001 fbcf 	bl	80089c0 <_Bfree>
 8007222:	e613      	b.n	8006e4c <_strtod_l+0x664>
 8007224:	f1ba 0f00 	cmp.w	sl, #0
 8007228:	d11b      	bne.n	8007262 <_strtod_l+0xa7a>
 800722a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800722e:	b9f3      	cbnz	r3, 800726e <_strtod_l+0xa86>
 8007230:	4b6b      	ldr	r3, [pc, #428]	; (80073e0 <_strtod_l+0xbf8>)
 8007232:	2200      	movs	r2, #0
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 fc50 	bl	8000adc <__aeabi_dcmplt>
 800723c:	b9d0      	cbnz	r0, 8007274 <_strtod_l+0xa8c>
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	4b6b      	ldr	r3, [pc, #428]	; (80073f0 <_strtod_l+0xc08>)
 8007244:	2200      	movs	r2, #0
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	4680      	mov	r8, r0
 800724c:	4689      	mov	r9, r1
 800724e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007252:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007256:	931b      	str	r3, [sp, #108]	; 0x6c
 8007258:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800725c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007260:	e79b      	b.n	800719a <_strtod_l+0x9b2>
 8007262:	f1ba 0f01 	cmp.w	sl, #1
 8007266:	d102      	bne.n	800726e <_strtod_l+0xa86>
 8007268:	2f00      	cmp	r7, #0
 800726a:	f43f ad7e 	beq.w	8006d6a <_strtod_l+0x582>
 800726e:	4b61      	ldr	r3, [pc, #388]	; (80073f4 <_strtod_l+0xc0c>)
 8007270:	2200      	movs	r2, #0
 8007272:	e78c      	b.n	800718e <_strtod_l+0x9a6>
 8007274:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80073f0 <_strtod_l+0xc08>
 8007278:	f04f 0800 	mov.w	r8, #0
 800727c:	e7e7      	b.n	800724e <_strtod_l+0xa66>
 800727e:	4b5c      	ldr	r3, [pc, #368]	; (80073f0 <_strtod_l+0xc08>)
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	2200      	movs	r2, #0
 8007286:	f7f9 f9b7 	bl	80005f8 <__aeabi_dmul>
 800728a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	b933      	cbnz	r3, 80072a0 <_strtod_l+0xab8>
 8007292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007296:	9012      	str	r0, [sp, #72]	; 0x48
 8007298:	9313      	str	r3, [sp, #76]	; 0x4c
 800729a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800729e:	e7dd      	b.n	800725c <_strtod_l+0xa74>
 80072a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80072a4:	e7f9      	b.n	800729a <_strtod_l+0xab2>
 80072a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80072aa:	9b04      	ldr	r3, [sp, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1a8      	bne.n	8007202 <_strtod_l+0xa1a>
 80072b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072b6:	0d1b      	lsrs	r3, r3, #20
 80072b8:	051b      	lsls	r3, r3, #20
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d1a1      	bne.n	8007202 <_strtod_l+0xa1a>
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7f9 fcf9 	bl	8000cb8 <__aeabi_d2lz>
 80072c6:	f7f9 f969 	bl	800059c <__aeabi_l2d>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f8 ffd9 	bl	8000288 <__aeabi_dsub>
 80072d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072dc:	ea43 030a 	orr.w	r3, r3, sl
 80072e0:	4313      	orrs	r3, r2
 80072e2:	4680      	mov	r8, r0
 80072e4:	4689      	mov	r9, r1
 80072e6:	d053      	beq.n	8007390 <_strtod_l+0xba8>
 80072e8:	a335      	add	r3, pc, #212	; (adr r3, 80073c0 <_strtod_l+0xbd8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 fbf5 	bl	8000adc <__aeabi_dcmplt>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f47f acce 	bne.w	8006c94 <_strtod_l+0x4ac>
 80072f8:	a333      	add	r3, pc, #204	; (adr r3, 80073c8 <_strtod_l+0xbe0>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f7f9 fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f af7b 	beq.w	8007202 <_strtod_l+0xa1a>
 800730c:	e4c2      	b.n	8006c94 <_strtod_l+0x4ac>
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	b333      	cbz	r3, 8007360 <_strtod_l+0xb78>
 8007312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007314:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007318:	d822      	bhi.n	8007360 <_strtod_l+0xb78>
 800731a:	a32d      	add	r3, pc, #180	; (adr r3, 80073d0 <_strtod_l+0xbe8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4640      	mov	r0, r8
 8007322:	4649      	mov	r1, r9
 8007324:	f7f9 fbe4 	bl	8000af0 <__aeabi_dcmple>
 8007328:	b1a0      	cbz	r0, 8007354 <_strtod_l+0xb6c>
 800732a:	4649      	mov	r1, r9
 800732c:	4640      	mov	r0, r8
 800732e:	f7f9 fc3b 	bl	8000ba8 <__aeabi_d2uiz>
 8007332:	2801      	cmp	r0, #1
 8007334:	bf38      	it	cc
 8007336:	2001      	movcc	r0, #1
 8007338:	f7f9 f8e4 	bl	8000504 <__aeabi_ui2d>
 800733c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800733e:	4680      	mov	r8, r0
 8007340:	4689      	mov	r9, r1
 8007342:	bb13      	cbnz	r3, 800738a <_strtod_l+0xba2>
 8007344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007348:	9014      	str	r0, [sp, #80]	; 0x50
 800734a:	9315      	str	r3, [sp, #84]	; 0x54
 800734c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007350:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007356:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007358:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	930d      	str	r3, [sp, #52]	; 0x34
 8007360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007364:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800736c:	f001 fe54 	bl	8009018 <__ulp>
 8007370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007374:	ec53 2b10 	vmov	r2, r3, d0
 8007378:	f7f9 f93e 	bl	80005f8 <__aeabi_dmul>
 800737c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007380:	f7f8 ff84 	bl	800028c <__adddf3>
 8007384:	4682      	mov	sl, r0
 8007386:	468b      	mov	fp, r1
 8007388:	e78f      	b.n	80072aa <_strtod_l+0xac2>
 800738a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800738e:	e7dd      	b.n	800734c <_strtod_l+0xb64>
 8007390:	a311      	add	r3, pc, #68	; (adr r3, 80073d8 <_strtod_l+0xbf0>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 fba1 	bl	8000adc <__aeabi_dcmplt>
 800739a:	e7b4      	b.n	8007306 <_strtod_l+0xb1e>
 800739c:	2300      	movs	r3, #0
 800739e:	930e      	str	r3, [sp, #56]	; 0x38
 80073a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	f7ff ba65 	b.w	8006874 <_strtod_l+0x8c>
 80073aa:	2b65      	cmp	r3, #101	; 0x65
 80073ac:	f43f ab5d 	beq.w	8006a6a <_strtod_l+0x282>
 80073b0:	2b45      	cmp	r3, #69	; 0x45
 80073b2:	f43f ab5a 	beq.w	8006a6a <_strtod_l+0x282>
 80073b6:	2201      	movs	r2, #1
 80073b8:	f7ff bb92 	b.w	8006ae0 <_strtod_l+0x2f8>
 80073bc:	f3af 8000 	nop.w
 80073c0:	94a03595 	.word	0x94a03595
 80073c4:	3fdfffff 	.word	0x3fdfffff
 80073c8:	35afe535 	.word	0x35afe535
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	ffc00000 	.word	0xffc00000
 80073d4:	41dfffff 	.word	0x41dfffff
 80073d8:	94a03595 	.word	0x94a03595
 80073dc:	3fcfffff 	.word	0x3fcfffff
 80073e0:	3ff00000 	.word	0x3ff00000
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	7fe00000 	.word	0x7fe00000
 80073ec:	7c9fffff 	.word	0x7c9fffff
 80073f0:	3fe00000 	.word	0x3fe00000
 80073f4:	bff00000 	.word	0xbff00000
 80073f8:	7fefffff 	.word	0x7fefffff

080073fc <_strtod_r>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <_strtod_r+0x8>)
 80073fe:	f7ff b9f3 	b.w	80067e8 <_strtod_l>
 8007402:	bf00      	nop
 8007404:	20000074 	.word	0x20000074

08007408 <_strtol_l.isra.0>:
 8007408:	2b01      	cmp	r3, #1
 800740a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740e:	d001      	beq.n	8007414 <_strtol_l.isra.0+0xc>
 8007410:	2b24      	cmp	r3, #36	; 0x24
 8007412:	d906      	bls.n	8007422 <_strtol_l.isra.0+0x1a>
 8007414:	f7fe fafa 	bl	8005a0c <__errno>
 8007418:	2316      	movs	r3, #22
 800741a:	6003      	str	r3, [r0, #0]
 800741c:	2000      	movs	r0, #0
 800741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007422:	4f3a      	ldr	r7, [pc, #232]	; (800750c <_strtol_l.isra.0+0x104>)
 8007424:	468e      	mov	lr, r1
 8007426:	4676      	mov	r6, lr
 8007428:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800742c:	5de5      	ldrb	r5, [r4, r7]
 800742e:	f015 0508 	ands.w	r5, r5, #8
 8007432:	d1f8      	bne.n	8007426 <_strtol_l.isra.0+0x1e>
 8007434:	2c2d      	cmp	r4, #45	; 0x2d
 8007436:	d134      	bne.n	80074a2 <_strtol_l.isra.0+0x9a>
 8007438:	f89e 4000 	ldrb.w	r4, [lr]
 800743c:	f04f 0801 	mov.w	r8, #1
 8007440:	f106 0e02 	add.w	lr, r6, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05c      	beq.n	8007502 <_strtol_l.isra.0+0xfa>
 8007448:	2b10      	cmp	r3, #16
 800744a:	d10c      	bne.n	8007466 <_strtol_l.isra.0+0x5e>
 800744c:	2c30      	cmp	r4, #48	; 0x30
 800744e:	d10a      	bne.n	8007466 <_strtol_l.isra.0+0x5e>
 8007450:	f89e 4000 	ldrb.w	r4, [lr]
 8007454:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007458:	2c58      	cmp	r4, #88	; 0x58
 800745a:	d14d      	bne.n	80074f8 <_strtol_l.isra.0+0xf0>
 800745c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007460:	2310      	movs	r3, #16
 8007462:	f10e 0e02 	add.w	lr, lr, #2
 8007466:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800746a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800746e:	2600      	movs	r6, #0
 8007470:	fbbc f9f3 	udiv	r9, ip, r3
 8007474:	4635      	mov	r5, r6
 8007476:	fb03 ca19 	mls	sl, r3, r9, ip
 800747a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800747e:	2f09      	cmp	r7, #9
 8007480:	d818      	bhi.n	80074b4 <_strtol_l.isra.0+0xac>
 8007482:	463c      	mov	r4, r7
 8007484:	42a3      	cmp	r3, r4
 8007486:	dd24      	ble.n	80074d2 <_strtol_l.isra.0+0xca>
 8007488:	2e00      	cmp	r6, #0
 800748a:	db1f      	blt.n	80074cc <_strtol_l.isra.0+0xc4>
 800748c:	45a9      	cmp	r9, r5
 800748e:	d31d      	bcc.n	80074cc <_strtol_l.isra.0+0xc4>
 8007490:	d101      	bne.n	8007496 <_strtol_l.isra.0+0x8e>
 8007492:	45a2      	cmp	sl, r4
 8007494:	db1a      	blt.n	80074cc <_strtol_l.isra.0+0xc4>
 8007496:	fb05 4503 	mla	r5, r5, r3, r4
 800749a:	2601      	movs	r6, #1
 800749c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80074a0:	e7eb      	b.n	800747a <_strtol_l.isra.0+0x72>
 80074a2:	2c2b      	cmp	r4, #43	; 0x2b
 80074a4:	bf08      	it	eq
 80074a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80074aa:	46a8      	mov	r8, r5
 80074ac:	bf08      	it	eq
 80074ae:	f106 0e02 	addeq.w	lr, r6, #2
 80074b2:	e7c7      	b.n	8007444 <_strtol_l.isra.0+0x3c>
 80074b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80074b8:	2f19      	cmp	r7, #25
 80074ba:	d801      	bhi.n	80074c0 <_strtol_l.isra.0+0xb8>
 80074bc:	3c37      	subs	r4, #55	; 0x37
 80074be:	e7e1      	b.n	8007484 <_strtol_l.isra.0+0x7c>
 80074c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80074c4:	2f19      	cmp	r7, #25
 80074c6:	d804      	bhi.n	80074d2 <_strtol_l.isra.0+0xca>
 80074c8:	3c57      	subs	r4, #87	; 0x57
 80074ca:	e7db      	b.n	8007484 <_strtol_l.isra.0+0x7c>
 80074cc:	f04f 36ff 	mov.w	r6, #4294967295
 80074d0:	e7e4      	b.n	800749c <_strtol_l.isra.0+0x94>
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	da05      	bge.n	80074e2 <_strtol_l.isra.0+0xda>
 80074d6:	2322      	movs	r3, #34	; 0x22
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	4665      	mov	r5, ip
 80074dc:	b942      	cbnz	r2, 80074f0 <_strtol_l.isra.0+0xe8>
 80074de:	4628      	mov	r0, r5
 80074e0:	e79d      	b.n	800741e <_strtol_l.isra.0+0x16>
 80074e2:	f1b8 0f00 	cmp.w	r8, #0
 80074e6:	d000      	beq.n	80074ea <_strtol_l.isra.0+0xe2>
 80074e8:	426d      	negs	r5, r5
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d0f7      	beq.n	80074de <_strtol_l.isra.0+0xd6>
 80074ee:	b10e      	cbz	r6, 80074f4 <_strtol_l.isra.0+0xec>
 80074f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	e7f2      	b.n	80074de <_strtol_l.isra.0+0xd6>
 80074f8:	2430      	movs	r4, #48	; 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1b3      	bne.n	8007466 <_strtol_l.isra.0+0x5e>
 80074fe:	2308      	movs	r3, #8
 8007500:	e7b1      	b.n	8007466 <_strtol_l.isra.0+0x5e>
 8007502:	2c30      	cmp	r4, #48	; 0x30
 8007504:	d0a4      	beq.n	8007450 <_strtol_l.isra.0+0x48>
 8007506:	230a      	movs	r3, #10
 8007508:	e7ad      	b.n	8007466 <_strtol_l.isra.0+0x5e>
 800750a:	bf00      	nop
 800750c:	0800a3d1 	.word	0x0800a3d1

08007510 <_strtol_r>:
 8007510:	f7ff bf7a 	b.w	8007408 <_strtol_l.isra.0>

08007514 <quorem>:
 8007514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	6903      	ldr	r3, [r0, #16]
 800751a:	690c      	ldr	r4, [r1, #16]
 800751c:	42a3      	cmp	r3, r4
 800751e:	4607      	mov	r7, r0
 8007520:	f2c0 8081 	blt.w	8007626 <quorem+0x112>
 8007524:	3c01      	subs	r4, #1
 8007526:	f101 0814 	add.w	r8, r1, #20
 800752a:	f100 0514 	add.w	r5, r0, #20
 800752e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800753c:	3301      	adds	r3, #1
 800753e:	429a      	cmp	r2, r3
 8007540:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007548:	fbb2 f6f3 	udiv	r6, r2, r3
 800754c:	d331      	bcc.n	80075b2 <quorem+0x9e>
 800754e:	f04f 0e00 	mov.w	lr, #0
 8007552:	4640      	mov	r0, r8
 8007554:	46ac      	mov	ip, r5
 8007556:	46f2      	mov	sl, lr
 8007558:	f850 2b04 	ldr.w	r2, [r0], #4
 800755c:	b293      	uxth	r3, r2
 800755e:	fb06 e303 	mla	r3, r6, r3, lr
 8007562:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007566:	b29b      	uxth	r3, r3
 8007568:	ebaa 0303 	sub.w	r3, sl, r3
 800756c:	0c12      	lsrs	r2, r2, #16
 800756e:	f8dc a000 	ldr.w	sl, [ip]
 8007572:	fb06 e202 	mla	r2, r6, r2, lr
 8007576:	fa13 f38a 	uxtah	r3, r3, sl
 800757a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800757e:	fa1f fa82 	uxth.w	sl, r2
 8007582:	f8dc 2000 	ldr.w	r2, [ip]
 8007586:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800758a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800758e:	b29b      	uxth	r3, r3
 8007590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007594:	4581      	cmp	r9, r0
 8007596:	f84c 3b04 	str.w	r3, [ip], #4
 800759a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800759e:	d2db      	bcs.n	8007558 <quorem+0x44>
 80075a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80075a4:	b92b      	cbnz	r3, 80075b2 <quorem+0x9e>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	429d      	cmp	r5, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	d32e      	bcc.n	800760e <quorem+0xfa>
 80075b0:	613c      	str	r4, [r7, #16]
 80075b2:	4638      	mov	r0, r7
 80075b4:	f001 fc8c 	bl	8008ed0 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	db24      	blt.n	8007606 <quorem+0xf2>
 80075bc:	3601      	adds	r6, #1
 80075be:	4628      	mov	r0, r5
 80075c0:	f04f 0c00 	mov.w	ip, #0
 80075c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80075c8:	f8d0 e000 	ldr.w	lr, [r0]
 80075cc:	b293      	uxth	r3, r2
 80075ce:	ebac 0303 	sub.w	r3, ip, r3
 80075d2:	0c12      	lsrs	r2, r2, #16
 80075d4:	fa13 f38e 	uxtah	r3, r3, lr
 80075d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e6:	45c1      	cmp	r9, r8
 80075e8:	f840 3b04 	str.w	r3, [r0], #4
 80075ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075f0:	d2e8      	bcs.n	80075c4 <quorem+0xb0>
 80075f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075fa:	b922      	cbnz	r2, 8007606 <quorem+0xf2>
 80075fc:	3b04      	subs	r3, #4
 80075fe:	429d      	cmp	r5, r3
 8007600:	461a      	mov	r2, r3
 8007602:	d30a      	bcc.n	800761a <quorem+0x106>
 8007604:	613c      	str	r4, [r7, #16]
 8007606:	4630      	mov	r0, r6
 8007608:	b003      	add	sp, #12
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	3b04      	subs	r3, #4
 8007612:	2a00      	cmp	r2, #0
 8007614:	d1cc      	bne.n	80075b0 <quorem+0x9c>
 8007616:	3c01      	subs	r4, #1
 8007618:	e7c7      	b.n	80075aa <quorem+0x96>
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	3b04      	subs	r3, #4
 800761e:	2a00      	cmp	r2, #0
 8007620:	d1f0      	bne.n	8007604 <quorem+0xf0>
 8007622:	3c01      	subs	r4, #1
 8007624:	e7eb      	b.n	80075fe <quorem+0xea>
 8007626:	2000      	movs	r0, #0
 8007628:	e7ee      	b.n	8007608 <quorem+0xf4>
 800762a:	0000      	movs	r0, r0
 800762c:	0000      	movs	r0, r0
	...

08007630 <_dtoa_r>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	ed2d 8b02 	vpush	{d8}
 8007638:	ec57 6b10 	vmov	r6, r7, d0
 800763c:	b095      	sub	sp, #84	; 0x54
 800763e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007644:	9105      	str	r1, [sp, #20]
 8007646:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800764a:	4604      	mov	r4, r0
 800764c:	9209      	str	r2, [sp, #36]	; 0x24
 800764e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007650:	b975      	cbnz	r5, 8007670 <_dtoa_r+0x40>
 8007652:	2010      	movs	r0, #16
 8007654:	f001 f94c 	bl	80088f0 <malloc>
 8007658:	4602      	mov	r2, r0
 800765a:	6260      	str	r0, [r4, #36]	; 0x24
 800765c:	b920      	cbnz	r0, 8007668 <_dtoa_r+0x38>
 800765e:	4bb2      	ldr	r3, [pc, #712]	; (8007928 <_dtoa_r+0x2f8>)
 8007660:	21ea      	movs	r1, #234	; 0xea
 8007662:	48b2      	ldr	r0, [pc, #712]	; (800792c <_dtoa_r+0x2fc>)
 8007664:	f002 f874 	bl	8009750 <__assert_func>
 8007668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800766c:	6005      	str	r5, [r0, #0]
 800766e:	60c5      	str	r5, [r0, #12]
 8007670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	b151      	cbz	r1, 800768c <_dtoa_r+0x5c>
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	604a      	str	r2, [r1, #4]
 800767a:	2301      	movs	r3, #1
 800767c:	4093      	lsls	r3, r2
 800767e:	608b      	str	r3, [r1, #8]
 8007680:	4620      	mov	r0, r4
 8007682:	f001 f99d 	bl	80089c0 <_Bfree>
 8007686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	1e3b      	subs	r3, r7, #0
 800768e:	bfb9      	ittee	lt
 8007690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007694:	9303      	strlt	r3, [sp, #12]
 8007696:	2300      	movge	r3, #0
 8007698:	f8c8 3000 	strge.w	r3, [r8]
 800769c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80076a0:	4ba3      	ldr	r3, [pc, #652]	; (8007930 <_dtoa_r+0x300>)
 80076a2:	bfbc      	itt	lt
 80076a4:	2201      	movlt	r2, #1
 80076a6:	f8c8 2000 	strlt.w	r2, [r8]
 80076aa:	ea33 0309 	bics.w	r3, r3, r9
 80076ae:	d11b      	bne.n	80076e8 <_dtoa_r+0xb8>
 80076b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076bc:	4333      	orrs	r3, r6
 80076be:	f000 857a 	beq.w	80081b6 <_dtoa_r+0xb86>
 80076c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c4:	b963      	cbnz	r3, 80076e0 <_dtoa_r+0xb0>
 80076c6:	4b9b      	ldr	r3, [pc, #620]	; (8007934 <_dtoa_r+0x304>)
 80076c8:	e024      	b.n	8007714 <_dtoa_r+0xe4>
 80076ca:	4b9b      	ldr	r3, [pc, #620]	; (8007938 <_dtoa_r+0x308>)
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	9800      	ldr	r0, [sp, #0]
 80076d6:	b015      	add	sp, #84	; 0x54
 80076d8:	ecbd 8b02 	vpop	{d8}
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	4b94      	ldr	r3, [pc, #592]	; (8007934 <_dtoa_r+0x304>)
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	3303      	adds	r3, #3
 80076e6:	e7f3      	b.n	80076d0 <_dtoa_r+0xa0>
 80076e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076ec:	2200      	movs	r2, #0
 80076ee:	ec51 0b17 	vmov	r0, r1, d7
 80076f2:	2300      	movs	r3, #0
 80076f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80076f8:	f7f9 f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fc:	4680      	mov	r8, r0
 80076fe:	b158      	cbz	r0, 8007718 <_dtoa_r+0xe8>
 8007700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007702:	2301      	movs	r3, #1
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8551 	beq.w	80081b0 <_dtoa_r+0xb80>
 800770e:	488b      	ldr	r0, [pc, #556]	; (800793c <_dtoa_r+0x30c>)
 8007710:	6018      	str	r0, [r3, #0]
 8007712:	1e43      	subs	r3, r0, #1
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	e7dd      	b.n	80076d4 <_dtoa_r+0xa4>
 8007718:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800771c:	aa12      	add	r2, sp, #72	; 0x48
 800771e:	a913      	add	r1, sp, #76	; 0x4c
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fcf5 	bl	8009110 <__d2b>
 8007726:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800772a:	4683      	mov	fp, r0
 800772c:	2d00      	cmp	r5, #0
 800772e:	d07c      	beq.n	800782a <_dtoa_r+0x1fa>
 8007730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007732:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800773a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800773e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800774a:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <_dtoa_r+0x310>)
 800774c:	2200      	movs	r2, #0
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 fd99 	bl	8000288 <__aeabi_dsub>
 8007756:	a36e      	add	r3, pc, #440	; (adr r3, 8007910 <_dtoa_r+0x2e0>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 ff4c 	bl	80005f8 <__aeabi_dmul>
 8007760:	a36d      	add	r3, pc, #436	; (adr r3, 8007918 <_dtoa_r+0x2e8>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 fd91 	bl	800028c <__adddf3>
 800776a:	4606      	mov	r6, r0
 800776c:	4628      	mov	r0, r5
 800776e:	460f      	mov	r7, r1
 8007770:	f7f8 fed8 	bl	8000524 <__aeabi_i2d>
 8007774:	a36a      	add	r3, pc, #424	; (adr r3, 8007920 <_dtoa_r+0x2f0>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f7f8 ff3d 	bl	80005f8 <__aeabi_dmul>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 fd81 	bl	800028c <__adddf3>
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	f7f9 f9e3 	bl	8000b58 <__aeabi_d2iz>
 8007792:	2200      	movs	r2, #0
 8007794:	4682      	mov	sl, r0
 8007796:	2300      	movs	r3, #0
 8007798:	4630      	mov	r0, r6
 800779a:	4639      	mov	r1, r7
 800779c:	f7f9 f99e 	bl	8000adc <__aeabi_dcmplt>
 80077a0:	b148      	cbz	r0, 80077b6 <_dtoa_r+0x186>
 80077a2:	4650      	mov	r0, sl
 80077a4:	f7f8 febe 	bl	8000524 <__aeabi_i2d>
 80077a8:	4632      	mov	r2, r6
 80077aa:	463b      	mov	r3, r7
 80077ac:	f7f9 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b0:	b908      	cbnz	r0, 80077b6 <_dtoa_r+0x186>
 80077b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077b6:	f1ba 0f16 	cmp.w	sl, #22
 80077ba:	d854      	bhi.n	8007866 <_dtoa_r+0x236>
 80077bc:	4b61      	ldr	r3, [pc, #388]	; (8007944 <_dtoa_r+0x314>)
 80077be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077ca:	f7f9 f987 	bl	8000adc <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d04b      	beq.n	800786a <_dtoa_r+0x23a>
 80077d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077d6:	2300      	movs	r3, #0
 80077d8:	930e      	str	r3, [sp, #56]	; 0x38
 80077da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077dc:	1b5d      	subs	r5, r3, r5
 80077de:	1e6b      	subs	r3, r5, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	bf43      	ittte	mi
 80077e4:	2300      	movmi	r3, #0
 80077e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80077ea:	9304      	strmi	r3, [sp, #16]
 80077ec:	f04f 0800 	movpl.w	r8, #0
 80077f0:	f1ba 0f00 	cmp.w	sl, #0
 80077f4:	db3b      	blt.n	800786e <_dtoa_r+0x23e>
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80077fc:	4453      	add	r3, sl
 80077fe:	9304      	str	r3, [sp, #16]
 8007800:	2300      	movs	r3, #0
 8007802:	9306      	str	r3, [sp, #24]
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	2b09      	cmp	r3, #9
 8007808:	d869      	bhi.n	80078de <_dtoa_r+0x2ae>
 800780a:	2b05      	cmp	r3, #5
 800780c:	bfc4      	itt	gt
 800780e:	3b04      	subgt	r3, #4
 8007810:	9305      	strgt	r3, [sp, #20]
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	f1a3 0302 	sub.w	r3, r3, #2
 8007818:	bfcc      	ite	gt
 800781a:	2500      	movgt	r5, #0
 800781c:	2501      	movle	r5, #1
 800781e:	2b03      	cmp	r3, #3
 8007820:	d869      	bhi.n	80078f6 <_dtoa_r+0x2c6>
 8007822:	e8df f003 	tbb	[pc, r3]
 8007826:	4e2c      	.short	0x4e2c
 8007828:	5a4c      	.short	0x5a4c
 800782a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800782e:	441d      	add	r5, r3
 8007830:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007834:	2b20      	cmp	r3, #32
 8007836:	bfc1      	itttt	gt
 8007838:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800783c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007840:	fa09 f303 	lslgt.w	r3, r9, r3
 8007844:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007848:	bfda      	itte	le
 800784a:	f1c3 0320 	rsble	r3, r3, #32
 800784e:	fa06 f003 	lslle.w	r0, r6, r3
 8007852:	4318      	orrgt	r0, r3
 8007854:	f7f8 fe56 	bl	8000504 <__aeabi_ui2d>
 8007858:	2301      	movs	r3, #1
 800785a:	4606      	mov	r6, r0
 800785c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007860:	3d01      	subs	r5, #1
 8007862:	9310      	str	r3, [sp, #64]	; 0x40
 8007864:	e771      	b.n	800774a <_dtoa_r+0x11a>
 8007866:	2301      	movs	r3, #1
 8007868:	e7b6      	b.n	80077d8 <_dtoa_r+0x1a8>
 800786a:	900e      	str	r0, [sp, #56]	; 0x38
 800786c:	e7b5      	b.n	80077da <_dtoa_r+0x1aa>
 800786e:	f1ca 0300 	rsb	r3, sl, #0
 8007872:	9306      	str	r3, [sp, #24]
 8007874:	2300      	movs	r3, #0
 8007876:	eba8 080a 	sub.w	r8, r8, sl
 800787a:	930d      	str	r3, [sp, #52]	; 0x34
 800787c:	e7c2      	b.n	8007804 <_dtoa_r+0x1d4>
 800787e:	2300      	movs	r3, #0
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	dc39      	bgt.n	80078fc <_dtoa_r+0x2cc>
 8007888:	f04f 0901 	mov.w	r9, #1
 800788c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007890:	464b      	mov	r3, r9
 8007892:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007896:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007898:	2200      	movs	r2, #0
 800789a:	6042      	str	r2, [r0, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	f102 0614 	add.w	r6, r2, #20
 80078a2:	429e      	cmp	r6, r3
 80078a4:	6841      	ldr	r1, [r0, #4]
 80078a6:	d92f      	bls.n	8007908 <_dtoa_r+0x2d8>
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 f849 	bl	8008940 <_Balloc>
 80078ae:	9000      	str	r0, [sp, #0]
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d14b      	bne.n	800794c <_dtoa_r+0x31c>
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <_dtoa_r+0x318>)
 80078b6:	4602      	mov	r2, r0
 80078b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078bc:	e6d1      	b.n	8007662 <_dtoa_r+0x32>
 80078be:	2301      	movs	r3, #1
 80078c0:	e7de      	b.n	8007880 <_dtoa_r+0x250>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9308      	str	r3, [sp, #32]
 80078c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c8:	eb0a 0903 	add.w	r9, sl, r3
 80078cc:	f109 0301 	add.w	r3, r9, #1
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	bfb8      	it	lt
 80078d6:	2301      	movlt	r3, #1
 80078d8:	e7dd      	b.n	8007896 <_dtoa_r+0x266>
 80078da:	2301      	movs	r3, #1
 80078dc:	e7f2      	b.n	80078c4 <_dtoa_r+0x294>
 80078de:	2501      	movs	r5, #1
 80078e0:	2300      	movs	r3, #0
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	9508      	str	r5, [sp, #32]
 80078e6:	f04f 39ff 	mov.w	r9, #4294967295
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80078f0:	2312      	movs	r3, #18
 80078f2:	9209      	str	r2, [sp, #36]	; 0x24
 80078f4:	e7cf      	b.n	8007896 <_dtoa_r+0x266>
 80078f6:	2301      	movs	r3, #1
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	e7f4      	b.n	80078e6 <_dtoa_r+0x2b6>
 80078fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007900:	f8cd 9004 	str.w	r9, [sp, #4]
 8007904:	464b      	mov	r3, r9
 8007906:	e7c6      	b.n	8007896 <_dtoa_r+0x266>
 8007908:	3101      	adds	r1, #1
 800790a:	6041      	str	r1, [r0, #4]
 800790c:	0052      	lsls	r2, r2, #1
 800790e:	e7c6      	b.n	800789e <_dtoa_r+0x26e>
 8007910:	636f4361 	.word	0x636f4361
 8007914:	3fd287a7 	.word	0x3fd287a7
 8007918:	8b60c8b3 	.word	0x8b60c8b3
 800791c:	3fc68a28 	.word	0x3fc68a28
 8007920:	509f79fb 	.word	0x509f79fb
 8007924:	3fd34413 	.word	0x3fd34413
 8007928:	0800a4de 	.word	0x0800a4de
 800792c:	0800a4f5 	.word	0x0800a4f5
 8007930:	7ff00000 	.word	0x7ff00000
 8007934:	0800a4da 	.word	0x0800a4da
 8007938:	0800a4d1 	.word	0x0800a4d1
 800793c:	0800a355 	.word	0x0800a355
 8007940:	3ff80000 	.word	0x3ff80000
 8007944:	0800a670 	.word	0x0800a670
 8007948:	0800a554 	.word	0x0800a554
 800794c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800794e:	9a00      	ldr	r2, [sp, #0]
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	2b0e      	cmp	r3, #14
 8007956:	f200 80ad 	bhi.w	8007ab4 <_dtoa_r+0x484>
 800795a:	2d00      	cmp	r5, #0
 800795c:	f000 80aa 	beq.w	8007ab4 <_dtoa_r+0x484>
 8007960:	f1ba 0f00 	cmp.w	sl, #0
 8007964:	dd36      	ble.n	80079d4 <_dtoa_r+0x3a4>
 8007966:	4ac3      	ldr	r2, [pc, #780]	; (8007c74 <_dtoa_r+0x644>)
 8007968:	f00a 030f 	and.w	r3, sl, #15
 800796c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007970:	ed93 7b00 	vldr	d7, [r3]
 8007974:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007978:	ea4f 172a 	mov.w	r7, sl, asr #4
 800797c:	eeb0 8a47 	vmov.f32	s16, s14
 8007980:	eef0 8a67 	vmov.f32	s17, s15
 8007984:	d016      	beq.n	80079b4 <_dtoa_r+0x384>
 8007986:	4bbc      	ldr	r3, [pc, #752]	; (8007c78 <_dtoa_r+0x648>)
 8007988:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800798c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007990:	f7f8 ff5c 	bl	800084c <__aeabi_ddiv>
 8007994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007998:	f007 070f 	and.w	r7, r7, #15
 800799c:	2503      	movs	r5, #3
 800799e:	4eb6      	ldr	r6, [pc, #728]	; (8007c78 <_dtoa_r+0x648>)
 80079a0:	b957      	cbnz	r7, 80079b8 <_dtoa_r+0x388>
 80079a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a6:	ec53 2b18 	vmov	r2, r3, d8
 80079aa:	f7f8 ff4f 	bl	800084c <__aeabi_ddiv>
 80079ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b2:	e029      	b.n	8007a08 <_dtoa_r+0x3d8>
 80079b4:	2502      	movs	r5, #2
 80079b6:	e7f2      	b.n	800799e <_dtoa_r+0x36e>
 80079b8:	07f9      	lsls	r1, r7, #31
 80079ba:	d508      	bpl.n	80079ce <_dtoa_r+0x39e>
 80079bc:	ec51 0b18 	vmov	r0, r1, d8
 80079c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079c4:	f7f8 fe18 	bl	80005f8 <__aeabi_dmul>
 80079c8:	ec41 0b18 	vmov	d8, r0, r1
 80079cc:	3501      	adds	r5, #1
 80079ce:	107f      	asrs	r7, r7, #1
 80079d0:	3608      	adds	r6, #8
 80079d2:	e7e5      	b.n	80079a0 <_dtoa_r+0x370>
 80079d4:	f000 80a6 	beq.w	8007b24 <_dtoa_r+0x4f4>
 80079d8:	f1ca 0600 	rsb	r6, sl, #0
 80079dc:	4ba5      	ldr	r3, [pc, #660]	; (8007c74 <_dtoa_r+0x644>)
 80079de:	4fa6      	ldr	r7, [pc, #664]	; (8007c78 <_dtoa_r+0x648>)
 80079e0:	f006 020f 	and.w	r2, r6, #15
 80079e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079f0:	f7f8 fe02 	bl	80005f8 <__aeabi_dmul>
 80079f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f8:	1136      	asrs	r6, r6, #4
 80079fa:	2300      	movs	r3, #0
 80079fc:	2502      	movs	r5, #2
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	f040 8085 	bne.w	8007b0e <_dtoa_r+0x4de>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1d2      	bne.n	80079ae <_dtoa_r+0x37e>
 8007a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 808c 	beq.w	8007b28 <_dtoa_r+0x4f8>
 8007a10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a14:	4b99      	ldr	r3, [pc, #612]	; (8007c7c <_dtoa_r+0x64c>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	f7f9 f85e 	bl	8000adc <__aeabi_dcmplt>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	f000 8081 	beq.w	8007b28 <_dtoa_r+0x4f8>
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d07d      	beq.n	8007b28 <_dtoa_r+0x4f8>
 8007a2c:	f1b9 0f00 	cmp.w	r9, #0
 8007a30:	dd3c      	ble.n	8007aac <_dtoa_r+0x47c>
 8007a32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b91      	ldr	r3, [pc, #580]	; (8007c80 <_dtoa_r+0x650>)
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fdda 	bl	80005f8 <__aeabi_dmul>
 8007a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a48:	3501      	adds	r5, #1
 8007a4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007a4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7f8 fd66 	bl	8000524 <__aeabi_i2d>
 8007a58:	4632      	mov	r2, r6
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	4b88      	ldr	r3, [pc, #544]	; (8007c84 <_dtoa_r+0x654>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	f7f8 fc12 	bl	800028c <__adddf3>
 8007a68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d15c      	bne.n	8007b32 <_dtoa_r+0x502>
 8007a78:	4b83      	ldr	r3, [pc, #524]	; (8007c88 <_dtoa_r+0x658>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 fc02 	bl	8000288 <__aeabi_dsub>
 8007a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	f7f9 f844 	bl	8000b18 <__aeabi_dcmpgt>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	f040 8296 	bne.w	8007fc2 <_dtoa_r+0x992>
 8007a96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	f7f9 f81b 	bl	8000adc <__aeabi_dcmplt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f040 8288 	bne.w	8007fbc <_dtoa_r+0x98c>
 8007aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f2c0 8158 	blt.w	8007d6c <_dtoa_r+0x73c>
 8007abc:	f1ba 0f0e 	cmp.w	sl, #14
 8007ac0:	f300 8154 	bgt.w	8007d6c <_dtoa_r+0x73c>
 8007ac4:	4b6b      	ldr	r3, [pc, #428]	; (8007c74 <_dtoa_r+0x644>)
 8007ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f280 80e3 	bge.w	8007c9c <_dtoa_r+0x66c>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f300 80df 	bgt.w	8007c9c <_dtoa_r+0x66c>
 8007ade:	f040 826d 	bne.w	8007fbc <_dtoa_r+0x98c>
 8007ae2:	4b69      	ldr	r3, [pc, #420]	; (8007c88 <_dtoa_r+0x658>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f8 fd85 	bl	80005f8 <__aeabi_dmul>
 8007aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007af2:	f7f9 f807 	bl	8000b04 <__aeabi_dcmpge>
 8007af6:	9e01      	ldr	r6, [sp, #4]
 8007af8:	4637      	mov	r7, r6
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f040 8243 	bne.w	8007f86 <_dtoa_r+0x956>
 8007b00:	9d00      	ldr	r5, [sp, #0]
 8007b02:	2331      	movs	r3, #49	; 0x31
 8007b04:	f805 3b01 	strb.w	r3, [r5], #1
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	e23f      	b.n	8007f8e <_dtoa_r+0x95e>
 8007b0e:	07f2      	lsls	r2, r6, #31
 8007b10:	d505      	bpl.n	8007b1e <_dtoa_r+0x4ee>
 8007b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	1076      	asrs	r6, r6, #1
 8007b20:	3708      	adds	r7, #8
 8007b22:	e76c      	b.n	80079fe <_dtoa_r+0x3ce>
 8007b24:	2502      	movs	r5, #2
 8007b26:	e76f      	b.n	8007a08 <_dtoa_r+0x3d8>
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b30:	e78d      	b.n	8007a4e <_dtoa_r+0x41e>
 8007b32:	9900      	ldr	r1, [sp, #0]
 8007b34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b38:	4b4e      	ldr	r3, [pc, #312]	; (8007c74 <_dtoa_r+0x644>)
 8007b3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b3e:	4401      	add	r1, r0
 8007b40:	9102      	str	r1, [sp, #8]
 8007b42:	9908      	ldr	r1, [sp, #32]
 8007b44:	eeb0 8a47 	vmov.f32	s16, s14
 8007b48:	eef0 8a67 	vmov.f32	s17, s15
 8007b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d045      	beq.n	8007be4 <_dtoa_r+0x5b4>
 8007b58:	494c      	ldr	r1, [pc, #304]	; (8007c8c <_dtoa_r+0x65c>)
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f7f8 fe76 	bl	800084c <__aeabi_ddiv>
 8007b60:	ec53 2b18 	vmov	r2, r3, d8
 8007b64:	f7f8 fb90 	bl	8000288 <__aeabi_dsub>
 8007b68:	9d00      	ldr	r5, [sp, #0]
 8007b6a:	ec41 0b18 	vmov	d8, r0, r1
 8007b6e:	4639      	mov	r1, r7
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7f8 fff1 	bl	8000b58 <__aeabi_d2iz>
 8007b76:	900c      	str	r0, [sp, #48]	; 0x30
 8007b78:	f7f8 fcd4 	bl	8000524 <__aeabi_i2d>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 fb80 	bl	8000288 <__aeabi_dsub>
 8007b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b8a:	3330      	adds	r3, #48	; 0x30
 8007b8c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b90:	ec53 2b18 	vmov	r2, r3, d8
 8007b94:	4606      	mov	r6, r0
 8007b96:	460f      	mov	r7, r1
 8007b98:	f7f8 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d165      	bne.n	8007c6c <_dtoa_r+0x63c>
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	4935      	ldr	r1, [pc, #212]	; (8007c7c <_dtoa_r+0x64c>)
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f7f8 fb6e 	bl	8000288 <__aeabi_dsub>
 8007bac:	ec53 2b18 	vmov	r2, r3, d8
 8007bb0:	f7f8 ff94 	bl	8000adc <__aeabi_dcmplt>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 80b9 	bne.w	8007d2c <_dtoa_r+0x6fc>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	429d      	cmp	r5, r3
 8007bbe:	f43f af75 	beq.w	8007aac <_dtoa_r+0x47c>
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	; (8007c80 <_dtoa_r+0x650>)
 8007bc4:	ec51 0b18 	vmov	r0, r1, d8
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fd15 	bl	80005f8 <__aeabi_dmul>
 8007bce:	4b2c      	ldr	r3, [pc, #176]	; (8007c80 <_dtoa_r+0x650>)
 8007bd0:	ec41 0b18 	vmov	d8, r0, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	4639      	mov	r1, r7
 8007bda:	f7f8 fd0d 	bl	80005f8 <__aeabi_dmul>
 8007bde:	4606      	mov	r6, r0
 8007be0:	460f      	mov	r7, r1
 8007be2:	e7c4      	b.n	8007b6e <_dtoa_r+0x53e>
 8007be4:	ec51 0b17 	vmov	r0, r1, d7
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	9b02      	ldr	r3, [sp, #8]
 8007bee:	9d00      	ldr	r5, [sp, #0]
 8007bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf2:	ec41 0b18 	vmov	d8, r0, r1
 8007bf6:	4639      	mov	r1, r7
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7f8 ffad 	bl	8000b58 <__aeabi_d2iz>
 8007bfe:	9011      	str	r0, [sp, #68]	; 0x44
 8007c00:	f7f8 fc90 	bl	8000524 <__aeabi_i2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c12:	3330      	adds	r3, #48	; 0x30
 8007c14:	f805 3b01 	strb.w	r3, [r5], #1
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	d134      	bne.n	8007c90 <_dtoa_r+0x660>
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <_dtoa_r+0x65c>)
 8007c28:	ec51 0b18 	vmov	r0, r1, d8
 8007c2c:	f7f8 fb2e 	bl	800028c <__adddf3>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d175      	bne.n	8007d2c <_dtoa_r+0x6fc>
 8007c40:	ec53 2b18 	vmov	r2, r3, d8
 8007c44:	4911      	ldr	r1, [pc, #68]	; (8007c8c <_dtoa_r+0x65c>)
 8007c46:	2000      	movs	r0, #0
 8007c48:	f7f8 fb1e 	bl	8000288 <__aeabi_dsub>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 ff42 	bl	8000adc <__aeabi_dcmplt>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f43f af27 	beq.w	8007aac <_dtoa_r+0x47c>
 8007c5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c60:	1e6b      	subs	r3, r5, #1
 8007c62:	930c      	str	r3, [sp, #48]	; 0x30
 8007c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c68:	2b30      	cmp	r3, #48	; 0x30
 8007c6a:	d0f8      	beq.n	8007c5e <_dtoa_r+0x62e>
 8007c6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007c70:	e04a      	b.n	8007d08 <_dtoa_r+0x6d8>
 8007c72:	bf00      	nop
 8007c74:	0800a670 	.word	0x0800a670
 8007c78:	0800a648 	.word	0x0800a648
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	40240000 	.word	0x40240000
 8007c84:	401c0000 	.word	0x401c0000
 8007c88:	40140000 	.word	0x40140000
 8007c8c:	3fe00000 	.word	0x3fe00000
 8007c90:	4baf      	ldr	r3, [pc, #700]	; (8007f50 <_dtoa_r+0x920>)
 8007c92:	f7f8 fcb1 	bl	80005f8 <__aeabi_dmul>
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	e7ac      	b.n	8007bf6 <_dtoa_r+0x5c6>
 8007c9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ca0:	9d00      	ldr	r5, [sp, #0]
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fdcf 	bl	800084c <__aeabi_ddiv>
 8007cae:	f7f8 ff53 	bl	8000b58 <__aeabi_d2iz>
 8007cb2:	9002      	str	r0, [sp, #8]
 8007cb4:	f7f8 fc36 	bl	8000524 <__aeabi_i2d>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	f7f8 fc9c 	bl	80005f8 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	f7f8 fade 	bl	8000288 <__aeabi_dsub>
 8007ccc:	9e02      	ldr	r6, [sp, #8]
 8007cce:	9f01      	ldr	r7, [sp, #4]
 8007cd0:	3630      	adds	r6, #48	; 0x30
 8007cd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007cd6:	9e00      	ldr	r6, [sp, #0]
 8007cd8:	1bae      	subs	r6, r5, r6
 8007cda:	42b7      	cmp	r7, r6
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	d137      	bne.n	8007d52 <_dtoa_r+0x722>
 8007ce2:	f7f8 fad3 	bl	800028c <__adddf3>
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	464b      	mov	r3, r9
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	f7f8 ff13 	bl	8000b18 <__aeabi_dcmpgt>
 8007cf2:	b9c8      	cbnz	r0, 8007d28 <_dtoa_r+0x6f8>
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d00:	b110      	cbz	r0, 8007d08 <_dtoa_r+0x6d8>
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	07d9      	lsls	r1, r3, #31
 8007d06:	d40f      	bmi.n	8007d28 <_dtoa_r+0x6f8>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	f000 fe58 	bl	80089c0 <_Bfree>
 8007d10:	2300      	movs	r3, #0
 8007d12:	702b      	strb	r3, [r5, #0]
 8007d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d16:	f10a 0001 	add.w	r0, sl, #1
 8007d1a:	6018      	str	r0, [r3, #0]
 8007d1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f43f acd8 	beq.w	80076d4 <_dtoa_r+0xa4>
 8007d24:	601d      	str	r5, [r3, #0]
 8007d26:	e4d5      	b.n	80076d4 <_dtoa_r+0xa4>
 8007d28:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	461d      	mov	r5, r3
 8007d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d34:	2a39      	cmp	r2, #57	; 0x39
 8007d36:	d108      	bne.n	8007d4a <_dtoa_r+0x71a>
 8007d38:	9a00      	ldr	r2, [sp, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d1f7      	bne.n	8007d2e <_dtoa_r+0x6fe>
 8007d3e:	9a07      	ldr	r2, [sp, #28]
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	3201      	adds	r2, #1
 8007d44:	9207      	str	r2, [sp, #28]
 8007d46:	2230      	movs	r2, #48	; 0x30
 8007d48:	700a      	strb	r2, [r1, #0]
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	3201      	adds	r2, #1
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	e78c      	b.n	8007c6c <_dtoa_r+0x63c>
 8007d52:	4b7f      	ldr	r3, [pc, #508]	; (8007f50 <_dtoa_r+0x920>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	f7f8 fc4f 	bl	80005f8 <__aeabi_dmul>
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	f7f8 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d09b      	beq.n	8007ca2 <_dtoa_r+0x672>
 8007d6a:	e7cd      	b.n	8007d08 <_dtoa_r+0x6d8>
 8007d6c:	9a08      	ldr	r2, [sp, #32]
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	f000 80c4 	beq.w	8007efc <_dtoa_r+0x8cc>
 8007d74:	9a05      	ldr	r2, [sp, #20]
 8007d76:	2a01      	cmp	r2, #1
 8007d78:	f300 80a8 	bgt.w	8007ecc <_dtoa_r+0x89c>
 8007d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	f000 80a0 	beq.w	8007ec4 <_dtoa_r+0x894>
 8007d84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d88:	9e06      	ldr	r6, [sp, #24]
 8007d8a:	4645      	mov	r5, r8
 8007d8c:	9a04      	ldr	r2, [sp, #16]
 8007d8e:	2101      	movs	r1, #1
 8007d90:	441a      	add	r2, r3
 8007d92:	4620      	mov	r0, r4
 8007d94:	4498      	add	r8, r3
 8007d96:	9204      	str	r2, [sp, #16]
 8007d98:	f000 ff18 	bl	8008bcc <__i2b>
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	dd0b      	ble.n	8007dba <_dtoa_r+0x78a>
 8007da2:	9b04      	ldr	r3, [sp, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dd08      	ble.n	8007dba <_dtoa_r+0x78a>
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	9a04      	ldr	r2, [sp, #16]
 8007dac:	bfa8      	it	ge
 8007dae:	462b      	movge	r3, r5
 8007db0:	eba8 0803 	sub.w	r8, r8, r3
 8007db4:	1aed      	subs	r5, r5, r3
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	9b06      	ldr	r3, [sp, #24]
 8007dbc:	b1fb      	cbz	r3, 8007dfe <_dtoa_r+0x7ce>
 8007dbe:	9b08      	ldr	r3, [sp, #32]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 809f 	beq.w	8007f04 <_dtoa_r+0x8d4>
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	dd11      	ble.n	8007dee <_dtoa_r+0x7be>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4632      	mov	r2, r6
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 ffb8 	bl	8008d44 <__pow5mult>
 8007dd4:	465a      	mov	r2, fp
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	4607      	mov	r7, r0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 ff0c 	bl	8008bf8 <__multiply>
 8007de0:	4659      	mov	r1, fp
 8007de2:	9007      	str	r0, [sp, #28]
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fdeb 	bl	80089c0 <_Bfree>
 8007dea:	9b07      	ldr	r3, [sp, #28]
 8007dec:	469b      	mov	fp, r3
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	1b9a      	subs	r2, r3, r6
 8007df2:	d004      	beq.n	8007dfe <_dtoa_r+0x7ce>
 8007df4:	4659      	mov	r1, fp
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 ffa4 	bl	8008d44 <__pow5mult>
 8007dfc:	4683      	mov	fp, r0
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fee3 	bl	8008bcc <__i2b>
 8007e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	dd7c      	ble.n	8007f08 <_dtoa_r+0x8d8>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4601      	mov	r1, r0
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 ff96 	bl	8008d44 <__pow5mult>
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	dd76      	ble.n	8007f0e <_dtoa_r+0x8de>
 8007e20:	2300      	movs	r3, #0
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	6933      	ldr	r3, [r6, #16]
 8007e26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e2a:	6918      	ldr	r0, [r3, #16]
 8007e2c:	f000 fe7e 	bl	8008b2c <__hi0bits>
 8007e30:	f1c0 0020 	rsb	r0, r0, #32
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	4418      	add	r0, r3
 8007e38:	f010 001f 	ands.w	r0, r0, #31
 8007e3c:	f000 8086 	beq.w	8007f4c <_dtoa_r+0x91c>
 8007e40:	f1c0 0320 	rsb	r3, r0, #32
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	dd7f      	ble.n	8007f48 <_dtoa_r+0x918>
 8007e48:	f1c0 001c 	rsb	r0, r0, #28
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	4403      	add	r3, r0
 8007e50:	4480      	add	r8, r0
 8007e52:	4405      	add	r5, r0
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	f1b8 0f00 	cmp.w	r8, #0
 8007e5a:	dd05      	ble.n	8007e68 <_dtoa_r+0x838>
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	4642      	mov	r2, r8
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 ffc9 	bl	8008df8 <__lshift>
 8007e66:	4683      	mov	fp, r0
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dd05      	ble.n	8007e7a <_dtoa_r+0x84a>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	461a      	mov	r2, r3
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 ffc0 	bl	8008df8 <__lshift>
 8007e78:	4606      	mov	r6, r0
 8007e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d069      	beq.n	8007f54 <_dtoa_r+0x924>
 8007e80:	4631      	mov	r1, r6
 8007e82:	4658      	mov	r0, fp
 8007e84:	f001 f824 	bl	8008ed0 <__mcmp>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	da63      	bge.n	8007f54 <_dtoa_r+0x924>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4659      	mov	r1, fp
 8007e90:	220a      	movs	r2, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 fdb6 	bl	8008a04 <__multadd>
 8007e98:	9b08      	ldr	r3, [sp, #32]
 8007e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e9e:	4683      	mov	fp, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 818f 	beq.w	80081c4 <_dtoa_r+0xb94>
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	220a      	movs	r2, #10
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fda9 	bl	8008a04 <__multadd>
 8007eb2:	f1b9 0f00 	cmp.w	r9, #0
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	f300 808e 	bgt.w	8007fd8 <_dtoa_r+0x9a8>
 8007ebc:	9b05      	ldr	r3, [sp, #20]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	dc50      	bgt.n	8007f64 <_dtoa_r+0x934>
 8007ec2:	e089      	b.n	8007fd8 <_dtoa_r+0x9a8>
 8007ec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eca:	e75d      	b.n	8007d88 <_dtoa_r+0x758>
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	1e5e      	subs	r6, r3, #1
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	42b3      	cmp	r3, r6
 8007ed4:	bfbf      	itttt	lt
 8007ed6:	9b06      	ldrlt	r3, [sp, #24]
 8007ed8:	9606      	strlt	r6, [sp, #24]
 8007eda:	1af2      	sublt	r2, r6, r3
 8007edc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007ede:	bfb6      	itet	lt
 8007ee0:	189b      	addlt	r3, r3, r2
 8007ee2:	1b9e      	subge	r6, r3, r6
 8007ee4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	bfb8      	it	lt
 8007eea:	2600      	movlt	r6, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb5      	itete	lt
 8007ef0:	eba8 0503 	sublt.w	r5, r8, r3
 8007ef4:	9b01      	ldrge	r3, [sp, #4]
 8007ef6:	2300      	movlt	r3, #0
 8007ef8:	4645      	movge	r5, r8
 8007efa:	e747      	b.n	8007d8c <_dtoa_r+0x75c>
 8007efc:	9e06      	ldr	r6, [sp, #24]
 8007efe:	9f08      	ldr	r7, [sp, #32]
 8007f00:	4645      	mov	r5, r8
 8007f02:	e74c      	b.n	8007d9e <_dtoa_r+0x76e>
 8007f04:	9a06      	ldr	r2, [sp, #24]
 8007f06:	e775      	b.n	8007df4 <_dtoa_r+0x7c4>
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	dc18      	bgt.n	8007f40 <_dtoa_r+0x910>
 8007f0e:	9b02      	ldr	r3, [sp, #8]
 8007f10:	b9b3      	cbnz	r3, 8007f40 <_dtoa_r+0x910>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f18:	b9a3      	cbnz	r3, 8007f44 <_dtoa_r+0x914>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f20:	0d1b      	lsrs	r3, r3, #20
 8007f22:	051b      	lsls	r3, r3, #20
 8007f24:	b12b      	cbz	r3, 8007f32 <_dtoa_r+0x902>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	f108 0801 	add.w	r8, r8, #1
 8007f30:	2301      	movs	r3, #1
 8007f32:	9306      	str	r3, [sp, #24]
 8007f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f47f af74 	bne.w	8007e24 <_dtoa_r+0x7f4>
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	e779      	b.n	8007e34 <_dtoa_r+0x804>
 8007f40:	2300      	movs	r3, #0
 8007f42:	e7f6      	b.n	8007f32 <_dtoa_r+0x902>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	e7f4      	b.n	8007f32 <_dtoa_r+0x902>
 8007f48:	d085      	beq.n	8007e56 <_dtoa_r+0x826>
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	301c      	adds	r0, #28
 8007f4e:	e77d      	b.n	8007e4c <_dtoa_r+0x81c>
 8007f50:	40240000 	.word	0x40240000
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dc38      	bgt.n	8007fcc <_dtoa_r+0x99c>
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	dd35      	ble.n	8007fcc <_dtoa_r+0x99c>
 8007f60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007f64:	f1b9 0f00 	cmp.w	r9, #0
 8007f68:	d10d      	bne.n	8007f86 <_dtoa_r+0x956>
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	2205      	movs	r2, #5
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fd47 	bl	8008a04 <__multadd>
 8007f76:	4601      	mov	r1, r0
 8007f78:	4606      	mov	r6, r0
 8007f7a:	4658      	mov	r0, fp
 8007f7c:	f000 ffa8 	bl	8008ed0 <__mcmp>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	f73f adbd 	bgt.w	8007b00 <_dtoa_r+0x4d0>
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	9d00      	ldr	r5, [sp, #0]
 8007f8a:	ea6f 0a03 	mvn.w	sl, r3
 8007f8e:	f04f 0800 	mov.w	r8, #0
 8007f92:	4631      	mov	r1, r6
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fd13 	bl	80089c0 <_Bfree>
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	f43f aeb4 	beq.w	8007d08 <_dtoa_r+0x6d8>
 8007fa0:	f1b8 0f00 	cmp.w	r8, #0
 8007fa4:	d005      	beq.n	8007fb2 <_dtoa_r+0x982>
 8007fa6:	45b8      	cmp	r8, r7
 8007fa8:	d003      	beq.n	8007fb2 <_dtoa_r+0x982>
 8007faa:	4641      	mov	r1, r8
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fd07 	bl	80089c0 <_Bfree>
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fd03 	bl	80089c0 <_Bfree>
 8007fba:	e6a5      	b.n	8007d08 <_dtoa_r+0x6d8>
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4637      	mov	r7, r6
 8007fc0:	e7e1      	b.n	8007f86 <_dtoa_r+0x956>
 8007fc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007fc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007fc8:	4637      	mov	r7, r6
 8007fca:	e599      	b.n	8007b00 <_dtoa_r+0x4d0>
 8007fcc:	9b08      	ldr	r3, [sp, #32]
 8007fce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80fd 	beq.w	80081d2 <_dtoa_r+0xba2>
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	dd05      	ble.n	8007fe8 <_dtoa_r+0x9b8>
 8007fdc:	4639      	mov	r1, r7
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 ff09 	bl	8008df8 <__lshift>
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	9b06      	ldr	r3, [sp, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d05c      	beq.n	80080a8 <_dtoa_r+0xa78>
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fca5 	bl	8008940 <_Balloc>
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <_dtoa_r+0x9d6>
 8007ffa:	4b80      	ldr	r3, [pc, #512]	; (80081fc <_dtoa_r+0xbcc>)
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008002:	f7ff bb2e 	b.w	8007662 <_dtoa_r+0x32>
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	3202      	adds	r2, #2
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	f107 010c 	add.w	r1, r7, #12
 8008010:	300c      	adds	r0, #12
 8008012:	f000 fc87 	bl	8008924 <memcpy>
 8008016:	2201      	movs	r2, #1
 8008018:	4629      	mov	r1, r5
 800801a:	4620      	mov	r0, r4
 800801c:	f000 feec 	bl	8008df8 <__lshift>
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	444b      	add	r3, r9
 800802a:	9307      	str	r3, [sp, #28]
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	46b8      	mov	r8, r7
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	4607      	mov	r7, r0
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	4631      	mov	r1, r6
 800803c:	3b01      	subs	r3, #1
 800803e:	4658      	mov	r0, fp
 8008040:	9302      	str	r3, [sp, #8]
 8008042:	f7ff fa67 	bl	8007514 <quorem>
 8008046:	4603      	mov	r3, r0
 8008048:	3330      	adds	r3, #48	; 0x30
 800804a:	9004      	str	r0, [sp, #16]
 800804c:	4641      	mov	r1, r8
 800804e:	4658      	mov	r0, fp
 8008050:	9308      	str	r3, [sp, #32]
 8008052:	f000 ff3d 	bl	8008ed0 <__mcmp>
 8008056:	463a      	mov	r2, r7
 8008058:	4681      	mov	r9, r0
 800805a:	4631      	mov	r1, r6
 800805c:	4620      	mov	r0, r4
 800805e:	f000 ff53 	bl	8008f08 <__mdiff>
 8008062:	68c2      	ldr	r2, [r0, #12]
 8008064:	9b08      	ldr	r3, [sp, #32]
 8008066:	4605      	mov	r5, r0
 8008068:	bb02      	cbnz	r2, 80080ac <_dtoa_r+0xa7c>
 800806a:	4601      	mov	r1, r0
 800806c:	4658      	mov	r0, fp
 800806e:	f000 ff2f 	bl	8008ed0 <__mcmp>
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	4602      	mov	r2, r0
 8008076:	4629      	mov	r1, r5
 8008078:	4620      	mov	r0, r4
 800807a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800807e:	f000 fc9f 	bl	80089c0 <_Bfree>
 8008082:	9b05      	ldr	r3, [sp, #20]
 8008084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008086:	9d01      	ldr	r5, [sp, #4]
 8008088:	ea43 0102 	orr.w	r1, r3, r2
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	430b      	orrs	r3, r1
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	d10d      	bne.n	80080b0 <_dtoa_r+0xa80>
 8008094:	2b39      	cmp	r3, #57	; 0x39
 8008096:	d029      	beq.n	80080ec <_dtoa_r+0xabc>
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	dd01      	ble.n	80080a2 <_dtoa_r+0xa72>
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	3331      	adds	r3, #49	; 0x31
 80080a2:	9a02      	ldr	r2, [sp, #8]
 80080a4:	7013      	strb	r3, [r2, #0]
 80080a6:	e774      	b.n	8007f92 <_dtoa_r+0x962>
 80080a8:	4638      	mov	r0, r7
 80080aa:	e7b9      	b.n	8008020 <_dtoa_r+0x9f0>
 80080ac:	2201      	movs	r2, #1
 80080ae:	e7e2      	b.n	8008076 <_dtoa_r+0xa46>
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	db06      	blt.n	80080c4 <_dtoa_r+0xa94>
 80080b6:	9905      	ldr	r1, [sp, #20]
 80080b8:	ea41 0909 	orr.w	r9, r1, r9
 80080bc:	9906      	ldr	r1, [sp, #24]
 80080be:	ea59 0101 	orrs.w	r1, r9, r1
 80080c2:	d120      	bne.n	8008106 <_dtoa_r+0xad6>
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	ddec      	ble.n	80080a2 <_dtoa_r+0xa72>
 80080c8:	4659      	mov	r1, fp
 80080ca:	2201      	movs	r2, #1
 80080cc:	4620      	mov	r0, r4
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	f000 fe92 	bl	8008df8 <__lshift>
 80080d4:	4631      	mov	r1, r6
 80080d6:	4683      	mov	fp, r0
 80080d8:	f000 fefa 	bl	8008ed0 <__mcmp>
 80080dc:	2800      	cmp	r0, #0
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	dc02      	bgt.n	80080e8 <_dtoa_r+0xab8>
 80080e2:	d1de      	bne.n	80080a2 <_dtoa_r+0xa72>
 80080e4:	07da      	lsls	r2, r3, #31
 80080e6:	d5dc      	bpl.n	80080a2 <_dtoa_r+0xa72>
 80080e8:	2b39      	cmp	r3, #57	; 0x39
 80080ea:	d1d8      	bne.n	800809e <_dtoa_r+0xa6e>
 80080ec:	9a02      	ldr	r2, [sp, #8]
 80080ee:	2339      	movs	r3, #57	; 0x39
 80080f0:	7013      	strb	r3, [r2, #0]
 80080f2:	462b      	mov	r3, r5
 80080f4:	461d      	mov	r5, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080fc:	2a39      	cmp	r2, #57	; 0x39
 80080fe:	d050      	beq.n	80081a2 <_dtoa_r+0xb72>
 8008100:	3201      	adds	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e745      	b.n	8007f92 <_dtoa_r+0x962>
 8008106:	2a00      	cmp	r2, #0
 8008108:	dd03      	ble.n	8008112 <_dtoa_r+0xae2>
 800810a:	2b39      	cmp	r3, #57	; 0x39
 800810c:	d0ee      	beq.n	80080ec <_dtoa_r+0xabc>
 800810e:	3301      	adds	r3, #1
 8008110:	e7c7      	b.n	80080a2 <_dtoa_r+0xa72>
 8008112:	9a01      	ldr	r2, [sp, #4]
 8008114:	9907      	ldr	r1, [sp, #28]
 8008116:	f802 3c01 	strb.w	r3, [r2, #-1]
 800811a:	428a      	cmp	r2, r1
 800811c:	d02a      	beq.n	8008174 <_dtoa_r+0xb44>
 800811e:	4659      	mov	r1, fp
 8008120:	2300      	movs	r3, #0
 8008122:	220a      	movs	r2, #10
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fc6d 	bl	8008a04 <__multadd>
 800812a:	45b8      	cmp	r8, r7
 800812c:	4683      	mov	fp, r0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	f04f 020a 	mov.w	r2, #10
 8008136:	4641      	mov	r1, r8
 8008138:	4620      	mov	r0, r4
 800813a:	d107      	bne.n	800814c <_dtoa_r+0xb1c>
 800813c:	f000 fc62 	bl	8008a04 <__multadd>
 8008140:	4680      	mov	r8, r0
 8008142:	4607      	mov	r7, r0
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	3301      	adds	r3, #1
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	e775      	b.n	8008038 <_dtoa_r+0xa08>
 800814c:	f000 fc5a 	bl	8008a04 <__multadd>
 8008150:	4639      	mov	r1, r7
 8008152:	4680      	mov	r8, r0
 8008154:	2300      	movs	r3, #0
 8008156:	220a      	movs	r2, #10
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fc53 	bl	8008a04 <__multadd>
 800815e:	4607      	mov	r7, r0
 8008160:	e7f0      	b.n	8008144 <_dtoa_r+0xb14>
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	9a00      	ldr	r2, [sp, #0]
 8008168:	bfcc      	ite	gt
 800816a:	464d      	movgt	r5, r9
 800816c:	2501      	movle	r5, #1
 800816e:	4415      	add	r5, r2
 8008170:	f04f 0800 	mov.w	r8, #0
 8008174:	4659      	mov	r1, fp
 8008176:	2201      	movs	r2, #1
 8008178:	4620      	mov	r0, r4
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	f000 fe3c 	bl	8008df8 <__lshift>
 8008180:	4631      	mov	r1, r6
 8008182:	4683      	mov	fp, r0
 8008184:	f000 fea4 	bl	8008ed0 <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	dcb2      	bgt.n	80080f2 <_dtoa_r+0xac2>
 800818c:	d102      	bne.n	8008194 <_dtoa_r+0xb64>
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	07db      	lsls	r3, r3, #31
 8008192:	d4ae      	bmi.n	80080f2 <_dtoa_r+0xac2>
 8008194:	462b      	mov	r3, r5
 8008196:	461d      	mov	r5, r3
 8008198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819c:	2a30      	cmp	r2, #48	; 0x30
 800819e:	d0fa      	beq.n	8008196 <_dtoa_r+0xb66>
 80081a0:	e6f7      	b.n	8007f92 <_dtoa_r+0x962>
 80081a2:	9a00      	ldr	r2, [sp, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d1a5      	bne.n	80080f4 <_dtoa_r+0xac4>
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	2331      	movs	r3, #49	; 0x31
 80081ae:	e779      	b.n	80080a4 <_dtoa_r+0xa74>
 80081b0:	4b13      	ldr	r3, [pc, #76]	; (8008200 <_dtoa_r+0xbd0>)
 80081b2:	f7ff baaf 	b.w	8007714 <_dtoa_r+0xe4>
 80081b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f aa86 	bne.w	80076ca <_dtoa_r+0x9a>
 80081be:	4b11      	ldr	r3, [pc, #68]	; (8008204 <_dtoa_r+0xbd4>)
 80081c0:	f7ff baa8 	b.w	8007714 <_dtoa_r+0xe4>
 80081c4:	f1b9 0f00 	cmp.w	r9, #0
 80081c8:	dc03      	bgt.n	80081d2 <_dtoa_r+0xba2>
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	f73f aec9 	bgt.w	8007f64 <_dtoa_r+0x934>
 80081d2:	9d00      	ldr	r5, [sp, #0]
 80081d4:	4631      	mov	r1, r6
 80081d6:	4658      	mov	r0, fp
 80081d8:	f7ff f99c 	bl	8007514 <quorem>
 80081dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80081e0:	f805 3b01 	strb.w	r3, [r5], #1
 80081e4:	9a00      	ldr	r2, [sp, #0]
 80081e6:	1aaa      	subs	r2, r5, r2
 80081e8:	4591      	cmp	r9, r2
 80081ea:	ddba      	ble.n	8008162 <_dtoa_r+0xb32>
 80081ec:	4659      	mov	r1, fp
 80081ee:	2300      	movs	r3, #0
 80081f0:	220a      	movs	r2, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 fc06 	bl	8008a04 <__multadd>
 80081f8:	4683      	mov	fp, r0
 80081fa:	e7eb      	b.n	80081d4 <_dtoa_r+0xba4>
 80081fc:	0800a554 	.word	0x0800a554
 8008200:	0800a354 	.word	0x0800a354
 8008204:	0800a4d1 	.word	0x0800a4d1

08008208 <rshift>:
 8008208:	6903      	ldr	r3, [r0, #16]
 800820a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800820e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008212:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008216:	f100 0414 	add.w	r4, r0, #20
 800821a:	dd45      	ble.n	80082a8 <rshift+0xa0>
 800821c:	f011 011f 	ands.w	r1, r1, #31
 8008220:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008224:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008228:	d10c      	bne.n	8008244 <rshift+0x3c>
 800822a:	f100 0710 	add.w	r7, r0, #16
 800822e:	4629      	mov	r1, r5
 8008230:	42b1      	cmp	r1, r6
 8008232:	d334      	bcc.n	800829e <rshift+0x96>
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	1eea      	subs	r2, r5, #3
 800823a:	4296      	cmp	r6, r2
 800823c:	bf38      	it	cc
 800823e:	2300      	movcc	r3, #0
 8008240:	4423      	add	r3, r4
 8008242:	e015      	b.n	8008270 <rshift+0x68>
 8008244:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008248:	f1c1 0820 	rsb	r8, r1, #32
 800824c:	40cf      	lsrs	r7, r1
 800824e:	f105 0e04 	add.w	lr, r5, #4
 8008252:	46a1      	mov	r9, r4
 8008254:	4576      	cmp	r6, lr
 8008256:	46f4      	mov	ip, lr
 8008258:	d815      	bhi.n	8008286 <rshift+0x7e>
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	009a      	lsls	r2, r3, #2
 800825e:	3a04      	subs	r2, #4
 8008260:	3501      	adds	r5, #1
 8008262:	42ae      	cmp	r6, r5
 8008264:	bf38      	it	cc
 8008266:	2200      	movcc	r2, #0
 8008268:	18a3      	adds	r3, r4, r2
 800826a:	50a7      	str	r7, [r4, r2]
 800826c:	b107      	cbz	r7, 8008270 <rshift+0x68>
 800826e:	3304      	adds	r3, #4
 8008270:	1b1a      	subs	r2, r3, r4
 8008272:	42a3      	cmp	r3, r4
 8008274:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008278:	bf08      	it	eq
 800827a:	2300      	moveq	r3, #0
 800827c:	6102      	str	r2, [r0, #16]
 800827e:	bf08      	it	eq
 8008280:	6143      	streq	r3, [r0, #20]
 8008282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008286:	f8dc c000 	ldr.w	ip, [ip]
 800828a:	fa0c fc08 	lsl.w	ip, ip, r8
 800828e:	ea4c 0707 	orr.w	r7, ip, r7
 8008292:	f849 7b04 	str.w	r7, [r9], #4
 8008296:	f85e 7b04 	ldr.w	r7, [lr], #4
 800829a:	40cf      	lsrs	r7, r1
 800829c:	e7da      	b.n	8008254 <rshift+0x4c>
 800829e:	f851 cb04 	ldr.w	ip, [r1], #4
 80082a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80082a6:	e7c3      	b.n	8008230 <rshift+0x28>
 80082a8:	4623      	mov	r3, r4
 80082aa:	e7e1      	b.n	8008270 <rshift+0x68>

080082ac <__hexdig_fun>:
 80082ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082b0:	2b09      	cmp	r3, #9
 80082b2:	d802      	bhi.n	80082ba <__hexdig_fun+0xe>
 80082b4:	3820      	subs	r0, #32
 80082b6:	b2c0      	uxtb	r0, r0
 80082b8:	4770      	bx	lr
 80082ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d801      	bhi.n	80082c6 <__hexdig_fun+0x1a>
 80082c2:	3847      	subs	r0, #71	; 0x47
 80082c4:	e7f7      	b.n	80082b6 <__hexdig_fun+0xa>
 80082c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d801      	bhi.n	80082d2 <__hexdig_fun+0x26>
 80082ce:	3827      	subs	r0, #39	; 0x27
 80082d0:	e7f1      	b.n	80082b6 <__hexdig_fun+0xa>
 80082d2:	2000      	movs	r0, #0
 80082d4:	4770      	bx	lr
	...

080082d8 <__gethex>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b02 	vpush	{d8}
 80082e0:	b089      	sub	sp, #36	; 0x24
 80082e2:	ee08 0a10 	vmov	s16, r0
 80082e6:	9304      	str	r3, [sp, #16]
 80082e8:	4bbc      	ldr	r3, [pc, #752]	; (80085dc <__gethex+0x304>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	4618      	mov	r0, r3
 80082f0:	468b      	mov	fp, r1
 80082f2:	4690      	mov	r8, r2
 80082f4:	f7f7 ff6c 	bl	80001d0 <strlen>
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	f8db 2000 	ldr.w	r2, [fp]
 80082fe:	4403      	add	r3, r0
 8008300:	4682      	mov	sl, r0
 8008302:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	1c93      	adds	r3, r2, #2
 800830a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800830e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008312:	32fe      	adds	r2, #254	; 0xfe
 8008314:	18d1      	adds	r1, r2, r3
 8008316:	461f      	mov	r7, r3
 8008318:	f813 0b01 	ldrb.w	r0, [r3], #1
 800831c:	9100      	str	r1, [sp, #0]
 800831e:	2830      	cmp	r0, #48	; 0x30
 8008320:	d0f8      	beq.n	8008314 <__gethex+0x3c>
 8008322:	f7ff ffc3 	bl	80082ac <__hexdig_fun>
 8008326:	4604      	mov	r4, r0
 8008328:	2800      	cmp	r0, #0
 800832a:	d13a      	bne.n	80083a2 <__gethex+0xca>
 800832c:	9901      	ldr	r1, [sp, #4]
 800832e:	4652      	mov	r2, sl
 8008330:	4638      	mov	r0, r7
 8008332:	f001 f9ed 	bl	8009710 <strncmp>
 8008336:	4605      	mov	r5, r0
 8008338:	2800      	cmp	r0, #0
 800833a:	d168      	bne.n	800840e <__gethex+0x136>
 800833c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008340:	eb07 060a 	add.w	r6, r7, sl
 8008344:	f7ff ffb2 	bl	80082ac <__hexdig_fun>
 8008348:	2800      	cmp	r0, #0
 800834a:	d062      	beq.n	8008412 <__gethex+0x13a>
 800834c:	4633      	mov	r3, r6
 800834e:	7818      	ldrb	r0, [r3, #0]
 8008350:	2830      	cmp	r0, #48	; 0x30
 8008352:	461f      	mov	r7, r3
 8008354:	f103 0301 	add.w	r3, r3, #1
 8008358:	d0f9      	beq.n	800834e <__gethex+0x76>
 800835a:	f7ff ffa7 	bl	80082ac <__hexdig_fun>
 800835e:	2301      	movs	r3, #1
 8008360:	fab0 f480 	clz	r4, r0
 8008364:	0964      	lsrs	r4, r4, #5
 8008366:	4635      	mov	r5, r6
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	463a      	mov	r2, r7
 800836c:	4616      	mov	r6, r2
 800836e:	3201      	adds	r2, #1
 8008370:	7830      	ldrb	r0, [r6, #0]
 8008372:	f7ff ff9b 	bl	80082ac <__hexdig_fun>
 8008376:	2800      	cmp	r0, #0
 8008378:	d1f8      	bne.n	800836c <__gethex+0x94>
 800837a:	9901      	ldr	r1, [sp, #4]
 800837c:	4652      	mov	r2, sl
 800837e:	4630      	mov	r0, r6
 8008380:	f001 f9c6 	bl	8009710 <strncmp>
 8008384:	b980      	cbnz	r0, 80083a8 <__gethex+0xd0>
 8008386:	b94d      	cbnz	r5, 800839c <__gethex+0xc4>
 8008388:	eb06 050a 	add.w	r5, r6, sl
 800838c:	462a      	mov	r2, r5
 800838e:	4616      	mov	r6, r2
 8008390:	3201      	adds	r2, #1
 8008392:	7830      	ldrb	r0, [r6, #0]
 8008394:	f7ff ff8a 	bl	80082ac <__hexdig_fun>
 8008398:	2800      	cmp	r0, #0
 800839a:	d1f8      	bne.n	800838e <__gethex+0xb6>
 800839c:	1bad      	subs	r5, r5, r6
 800839e:	00ad      	lsls	r5, r5, #2
 80083a0:	e004      	b.n	80083ac <__gethex+0xd4>
 80083a2:	2400      	movs	r4, #0
 80083a4:	4625      	mov	r5, r4
 80083a6:	e7e0      	b.n	800836a <__gethex+0x92>
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	d1f7      	bne.n	800839c <__gethex+0xc4>
 80083ac:	7833      	ldrb	r3, [r6, #0]
 80083ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083b2:	2b50      	cmp	r3, #80	; 0x50
 80083b4:	d13b      	bne.n	800842e <__gethex+0x156>
 80083b6:	7873      	ldrb	r3, [r6, #1]
 80083b8:	2b2b      	cmp	r3, #43	; 0x2b
 80083ba:	d02c      	beq.n	8008416 <__gethex+0x13e>
 80083bc:	2b2d      	cmp	r3, #45	; 0x2d
 80083be:	d02e      	beq.n	800841e <__gethex+0x146>
 80083c0:	1c71      	adds	r1, r6, #1
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	7808      	ldrb	r0, [r1, #0]
 80083c8:	f7ff ff70 	bl	80082ac <__hexdig_fun>
 80083cc:	1e43      	subs	r3, r0, #1
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b18      	cmp	r3, #24
 80083d2:	d82c      	bhi.n	800842e <__gethex+0x156>
 80083d4:	f1a0 0210 	sub.w	r2, r0, #16
 80083d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083dc:	f7ff ff66 	bl	80082ac <__hexdig_fun>
 80083e0:	1e43      	subs	r3, r0, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b18      	cmp	r3, #24
 80083e6:	d91d      	bls.n	8008424 <__gethex+0x14c>
 80083e8:	f1b9 0f00 	cmp.w	r9, #0
 80083ec:	d000      	beq.n	80083f0 <__gethex+0x118>
 80083ee:	4252      	negs	r2, r2
 80083f0:	4415      	add	r5, r2
 80083f2:	f8cb 1000 	str.w	r1, [fp]
 80083f6:	b1e4      	cbz	r4, 8008432 <__gethex+0x15a>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2700      	movne	r7, #0
 8008400:	2706      	moveq	r7, #6
 8008402:	4638      	mov	r0, r7
 8008404:	b009      	add	sp, #36	; 0x24
 8008406:	ecbd 8b02 	vpop	{d8}
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	463e      	mov	r6, r7
 8008410:	4625      	mov	r5, r4
 8008412:	2401      	movs	r4, #1
 8008414:	e7ca      	b.n	80083ac <__gethex+0xd4>
 8008416:	f04f 0900 	mov.w	r9, #0
 800841a:	1cb1      	adds	r1, r6, #2
 800841c:	e7d3      	b.n	80083c6 <__gethex+0xee>
 800841e:	f04f 0901 	mov.w	r9, #1
 8008422:	e7fa      	b.n	800841a <__gethex+0x142>
 8008424:	230a      	movs	r3, #10
 8008426:	fb03 0202 	mla	r2, r3, r2, r0
 800842a:	3a10      	subs	r2, #16
 800842c:	e7d4      	b.n	80083d8 <__gethex+0x100>
 800842e:	4631      	mov	r1, r6
 8008430:	e7df      	b.n	80083f2 <__gethex+0x11a>
 8008432:	1bf3      	subs	r3, r6, r7
 8008434:	3b01      	subs	r3, #1
 8008436:	4621      	mov	r1, r4
 8008438:	2b07      	cmp	r3, #7
 800843a:	dc0b      	bgt.n	8008454 <__gethex+0x17c>
 800843c:	ee18 0a10 	vmov	r0, s16
 8008440:	f000 fa7e 	bl	8008940 <_Balloc>
 8008444:	4604      	mov	r4, r0
 8008446:	b940      	cbnz	r0, 800845a <__gethex+0x182>
 8008448:	4b65      	ldr	r3, [pc, #404]	; (80085e0 <__gethex+0x308>)
 800844a:	4602      	mov	r2, r0
 800844c:	21de      	movs	r1, #222	; 0xde
 800844e:	4865      	ldr	r0, [pc, #404]	; (80085e4 <__gethex+0x30c>)
 8008450:	f001 f97e 	bl	8009750 <__assert_func>
 8008454:	3101      	adds	r1, #1
 8008456:	105b      	asrs	r3, r3, #1
 8008458:	e7ee      	b.n	8008438 <__gethex+0x160>
 800845a:	f100 0914 	add.w	r9, r0, #20
 800845e:	f04f 0b00 	mov.w	fp, #0
 8008462:	f1ca 0301 	rsb	r3, sl, #1
 8008466:	f8cd 9008 	str.w	r9, [sp, #8]
 800846a:	f8cd b000 	str.w	fp, [sp]
 800846e:	9306      	str	r3, [sp, #24]
 8008470:	42b7      	cmp	r7, r6
 8008472:	d340      	bcc.n	80084f6 <__gethex+0x21e>
 8008474:	9802      	ldr	r0, [sp, #8]
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	f840 3b04 	str.w	r3, [r0], #4
 800847c:	eba0 0009 	sub.w	r0, r0, r9
 8008480:	1080      	asrs	r0, r0, #2
 8008482:	0146      	lsls	r6, r0, #5
 8008484:	6120      	str	r0, [r4, #16]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fb50 	bl	8008b2c <__hi0bits>
 800848c:	1a30      	subs	r0, r6, r0
 800848e:	f8d8 6000 	ldr.w	r6, [r8]
 8008492:	42b0      	cmp	r0, r6
 8008494:	dd63      	ble.n	800855e <__gethex+0x286>
 8008496:	1b87      	subs	r7, r0, r6
 8008498:	4639      	mov	r1, r7
 800849a:	4620      	mov	r0, r4
 800849c:	f000 feea 	bl	8009274 <__any_on>
 80084a0:	4682      	mov	sl, r0
 80084a2:	b1a8      	cbz	r0, 80084d0 <__gethex+0x1f8>
 80084a4:	1e7b      	subs	r3, r7, #1
 80084a6:	1159      	asrs	r1, r3, #5
 80084a8:	f003 021f 	and.w	r2, r3, #31
 80084ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80084b0:	f04f 0a01 	mov.w	sl, #1
 80084b4:	fa0a f202 	lsl.w	r2, sl, r2
 80084b8:	420a      	tst	r2, r1
 80084ba:	d009      	beq.n	80084d0 <__gethex+0x1f8>
 80084bc:	4553      	cmp	r3, sl
 80084be:	dd05      	ble.n	80084cc <__gethex+0x1f4>
 80084c0:	1eb9      	subs	r1, r7, #2
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fed6 	bl	8009274 <__any_on>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d145      	bne.n	8008558 <__gethex+0x280>
 80084cc:	f04f 0a02 	mov.w	sl, #2
 80084d0:	4639      	mov	r1, r7
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7ff fe98 	bl	8008208 <rshift>
 80084d8:	443d      	add	r5, r7
 80084da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084de:	42ab      	cmp	r3, r5
 80084e0:	da4c      	bge.n	800857c <__gethex+0x2a4>
 80084e2:	ee18 0a10 	vmov	r0, s16
 80084e6:	4621      	mov	r1, r4
 80084e8:	f000 fa6a 	bl	80089c0 <_Bfree>
 80084ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084ee:	2300      	movs	r3, #0
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	27a3      	movs	r7, #163	; 0xa3
 80084f4:	e785      	b.n	8008402 <__gethex+0x12a>
 80084f6:	1e73      	subs	r3, r6, #1
 80084f8:	9a05      	ldr	r2, [sp, #20]
 80084fa:	9303      	str	r3, [sp, #12]
 80084fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008500:	4293      	cmp	r3, r2
 8008502:	d019      	beq.n	8008538 <__gethex+0x260>
 8008504:	f1bb 0f20 	cmp.w	fp, #32
 8008508:	d107      	bne.n	800851a <__gethex+0x242>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	9a00      	ldr	r2, [sp, #0]
 800850e:	f843 2b04 	str.w	r2, [r3], #4
 8008512:	9302      	str	r3, [sp, #8]
 8008514:	2300      	movs	r3, #0
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	469b      	mov	fp, r3
 800851a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800851e:	f7ff fec5 	bl	80082ac <__hexdig_fun>
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	f000 000f 	and.w	r0, r0, #15
 8008528:	fa00 f00b 	lsl.w	r0, r0, fp
 800852c:	4303      	orrs	r3, r0
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	f10b 0b04 	add.w	fp, fp, #4
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	e00d      	b.n	8008554 <__gethex+0x27c>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	9a06      	ldr	r2, [sp, #24]
 800853c:	4413      	add	r3, r2
 800853e:	42bb      	cmp	r3, r7
 8008540:	d3e0      	bcc.n	8008504 <__gethex+0x22c>
 8008542:	4618      	mov	r0, r3
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	4652      	mov	r2, sl
 800854a:	f001 f8e1 	bl	8009710 <strncmp>
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	2800      	cmp	r0, #0
 8008552:	d1d7      	bne.n	8008504 <__gethex+0x22c>
 8008554:	461e      	mov	r6, r3
 8008556:	e78b      	b.n	8008470 <__gethex+0x198>
 8008558:	f04f 0a03 	mov.w	sl, #3
 800855c:	e7b8      	b.n	80084d0 <__gethex+0x1f8>
 800855e:	da0a      	bge.n	8008576 <__gethex+0x29e>
 8008560:	1a37      	subs	r7, r6, r0
 8008562:	4621      	mov	r1, r4
 8008564:	ee18 0a10 	vmov	r0, s16
 8008568:	463a      	mov	r2, r7
 800856a:	f000 fc45 	bl	8008df8 <__lshift>
 800856e:	1bed      	subs	r5, r5, r7
 8008570:	4604      	mov	r4, r0
 8008572:	f100 0914 	add.w	r9, r0, #20
 8008576:	f04f 0a00 	mov.w	sl, #0
 800857a:	e7ae      	b.n	80084da <__gethex+0x202>
 800857c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008580:	42a8      	cmp	r0, r5
 8008582:	dd72      	ble.n	800866a <__gethex+0x392>
 8008584:	1b45      	subs	r5, r0, r5
 8008586:	42ae      	cmp	r6, r5
 8008588:	dc36      	bgt.n	80085f8 <__gethex+0x320>
 800858a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d02a      	beq.n	80085e8 <__gethex+0x310>
 8008592:	2b03      	cmp	r3, #3
 8008594:	d02c      	beq.n	80085f0 <__gethex+0x318>
 8008596:	2b01      	cmp	r3, #1
 8008598:	d115      	bne.n	80085c6 <__gethex+0x2ee>
 800859a:	42ae      	cmp	r6, r5
 800859c:	d113      	bne.n	80085c6 <__gethex+0x2ee>
 800859e:	2e01      	cmp	r6, #1
 80085a0:	d10b      	bne.n	80085ba <__gethex+0x2e2>
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	2301      	movs	r3, #1
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	f8c9 3000 	str.w	r3, [r9]
 80085b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b4:	2762      	movs	r7, #98	; 0x62
 80085b6:	601c      	str	r4, [r3, #0]
 80085b8:	e723      	b.n	8008402 <__gethex+0x12a>
 80085ba:	1e71      	subs	r1, r6, #1
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fe59 	bl	8009274 <__any_on>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d1ed      	bne.n	80085a2 <__gethex+0x2ca>
 80085c6:	ee18 0a10 	vmov	r0, s16
 80085ca:	4621      	mov	r1, r4
 80085cc:	f000 f9f8 	bl	80089c0 <_Bfree>
 80085d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085d2:	2300      	movs	r3, #0
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	2750      	movs	r7, #80	; 0x50
 80085d8:	e713      	b.n	8008402 <__gethex+0x12a>
 80085da:	bf00      	nop
 80085dc:	0800a5d0 	.word	0x0800a5d0
 80085e0:	0800a554 	.word	0x0800a554
 80085e4:	0800a565 	.word	0x0800a565
 80085e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1eb      	bne.n	80085c6 <__gethex+0x2ee>
 80085ee:	e7d8      	b.n	80085a2 <__gethex+0x2ca>
 80085f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d5      	bne.n	80085a2 <__gethex+0x2ca>
 80085f6:	e7e6      	b.n	80085c6 <__gethex+0x2ee>
 80085f8:	1e6f      	subs	r7, r5, #1
 80085fa:	f1ba 0f00 	cmp.w	sl, #0
 80085fe:	d131      	bne.n	8008664 <__gethex+0x38c>
 8008600:	b127      	cbz	r7, 800860c <__gethex+0x334>
 8008602:	4639      	mov	r1, r7
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fe35 	bl	8009274 <__any_on>
 800860a:	4682      	mov	sl, r0
 800860c:	117b      	asrs	r3, r7, #5
 800860e:	2101      	movs	r1, #1
 8008610:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008614:	f007 071f 	and.w	r7, r7, #31
 8008618:	fa01 f707 	lsl.w	r7, r1, r7
 800861c:	421f      	tst	r7, r3
 800861e:	4629      	mov	r1, r5
 8008620:	4620      	mov	r0, r4
 8008622:	bf18      	it	ne
 8008624:	f04a 0a02 	orrne.w	sl, sl, #2
 8008628:	1b76      	subs	r6, r6, r5
 800862a:	f7ff fded 	bl	8008208 <rshift>
 800862e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008632:	2702      	movs	r7, #2
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d048      	beq.n	80086cc <__gethex+0x3f4>
 800863a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d015      	beq.n	800866e <__gethex+0x396>
 8008642:	2b03      	cmp	r3, #3
 8008644:	d017      	beq.n	8008676 <__gethex+0x39e>
 8008646:	2b01      	cmp	r3, #1
 8008648:	d109      	bne.n	800865e <__gethex+0x386>
 800864a:	f01a 0f02 	tst.w	sl, #2
 800864e:	d006      	beq.n	800865e <__gethex+0x386>
 8008650:	f8d9 0000 	ldr.w	r0, [r9]
 8008654:	ea4a 0a00 	orr.w	sl, sl, r0
 8008658:	f01a 0f01 	tst.w	sl, #1
 800865c:	d10e      	bne.n	800867c <__gethex+0x3a4>
 800865e:	f047 0710 	orr.w	r7, r7, #16
 8008662:	e033      	b.n	80086cc <__gethex+0x3f4>
 8008664:	f04f 0a01 	mov.w	sl, #1
 8008668:	e7d0      	b.n	800860c <__gethex+0x334>
 800866a:	2701      	movs	r7, #1
 800866c:	e7e2      	b.n	8008634 <__gethex+0x35c>
 800866e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008670:	f1c3 0301 	rsb	r3, r3, #1
 8008674:	9315      	str	r3, [sp, #84]	; 0x54
 8008676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f0      	beq.n	800865e <__gethex+0x386>
 800867c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008680:	f104 0314 	add.w	r3, r4, #20
 8008684:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008688:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800868c:	f04f 0c00 	mov.w	ip, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f853 2b04 	ldr.w	r2, [r3], #4
 8008696:	f1b2 3fff 	cmp.w	r2, #4294967295
 800869a:	d01c      	beq.n	80086d6 <__gethex+0x3fe>
 800869c:	3201      	adds	r2, #1
 800869e:	6002      	str	r2, [r0, #0]
 80086a0:	2f02      	cmp	r7, #2
 80086a2:	f104 0314 	add.w	r3, r4, #20
 80086a6:	d13f      	bne.n	8008728 <__gethex+0x450>
 80086a8:	f8d8 2000 	ldr.w	r2, [r8]
 80086ac:	3a01      	subs	r2, #1
 80086ae:	42b2      	cmp	r2, r6
 80086b0:	d10a      	bne.n	80086c8 <__gethex+0x3f0>
 80086b2:	1171      	asrs	r1, r6, #5
 80086b4:	2201      	movs	r2, #1
 80086b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086ba:	f006 061f 	and.w	r6, r6, #31
 80086be:	fa02 f606 	lsl.w	r6, r2, r6
 80086c2:	421e      	tst	r6, r3
 80086c4:	bf18      	it	ne
 80086c6:	4617      	movne	r7, r2
 80086c8:	f047 0720 	orr.w	r7, r7, #32
 80086cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086ce:	601c      	str	r4, [r3, #0]
 80086d0:	9b04      	ldr	r3, [sp, #16]
 80086d2:	601d      	str	r5, [r3, #0]
 80086d4:	e695      	b.n	8008402 <__gethex+0x12a>
 80086d6:	4299      	cmp	r1, r3
 80086d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80086dc:	d8d8      	bhi.n	8008690 <__gethex+0x3b8>
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	459b      	cmp	fp, r3
 80086e2:	db19      	blt.n	8008718 <__gethex+0x440>
 80086e4:	6861      	ldr	r1, [r4, #4]
 80086e6:	ee18 0a10 	vmov	r0, s16
 80086ea:	3101      	adds	r1, #1
 80086ec:	f000 f928 	bl	8008940 <_Balloc>
 80086f0:	4681      	mov	r9, r0
 80086f2:	b918      	cbnz	r0, 80086fc <__gethex+0x424>
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <__gethex+0x488>)
 80086f6:	4602      	mov	r2, r0
 80086f8:	2184      	movs	r1, #132	; 0x84
 80086fa:	e6a8      	b.n	800844e <__gethex+0x176>
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	3202      	adds	r2, #2
 8008700:	f104 010c 	add.w	r1, r4, #12
 8008704:	0092      	lsls	r2, r2, #2
 8008706:	300c      	adds	r0, #12
 8008708:	f000 f90c 	bl	8008924 <memcpy>
 800870c:	4621      	mov	r1, r4
 800870e:	ee18 0a10 	vmov	r0, s16
 8008712:	f000 f955 	bl	80089c0 <_Bfree>
 8008716:	464c      	mov	r4, r9
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008720:	6122      	str	r2, [r4, #16]
 8008722:	2201      	movs	r2, #1
 8008724:	615a      	str	r2, [r3, #20]
 8008726:	e7bb      	b.n	80086a0 <__gethex+0x3c8>
 8008728:	6922      	ldr	r2, [r4, #16]
 800872a:	455a      	cmp	r2, fp
 800872c:	dd0b      	ble.n	8008746 <__gethex+0x46e>
 800872e:	2101      	movs	r1, #1
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff fd69 	bl	8008208 <rshift>
 8008736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873a:	3501      	adds	r5, #1
 800873c:	42ab      	cmp	r3, r5
 800873e:	f6ff aed0 	blt.w	80084e2 <__gethex+0x20a>
 8008742:	2701      	movs	r7, #1
 8008744:	e7c0      	b.n	80086c8 <__gethex+0x3f0>
 8008746:	f016 061f 	ands.w	r6, r6, #31
 800874a:	d0fa      	beq.n	8008742 <__gethex+0x46a>
 800874c:	449a      	add	sl, r3
 800874e:	f1c6 0620 	rsb	r6, r6, #32
 8008752:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008756:	f000 f9e9 	bl	8008b2c <__hi0bits>
 800875a:	42b0      	cmp	r0, r6
 800875c:	dbe7      	blt.n	800872e <__gethex+0x456>
 800875e:	e7f0      	b.n	8008742 <__gethex+0x46a>
 8008760:	0800a554 	.word	0x0800a554

08008764 <L_shift>:
 8008764:	f1c2 0208 	rsb	r2, r2, #8
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	b570      	push	{r4, r5, r6, lr}
 800876c:	f1c2 0620 	rsb	r6, r2, #32
 8008770:	6843      	ldr	r3, [r0, #4]
 8008772:	6804      	ldr	r4, [r0, #0]
 8008774:	fa03 f506 	lsl.w	r5, r3, r6
 8008778:	432c      	orrs	r4, r5
 800877a:	40d3      	lsrs	r3, r2
 800877c:	6004      	str	r4, [r0, #0]
 800877e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008782:	4288      	cmp	r0, r1
 8008784:	d3f4      	bcc.n	8008770 <L_shift+0xc>
 8008786:	bd70      	pop	{r4, r5, r6, pc}

08008788 <__match>:
 8008788:	b530      	push	{r4, r5, lr}
 800878a:	6803      	ldr	r3, [r0, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008792:	b914      	cbnz	r4, 800879a <__match+0x12>
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	2001      	movs	r0, #1
 8008798:	bd30      	pop	{r4, r5, pc}
 800879a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087a2:	2d19      	cmp	r5, #25
 80087a4:	bf98      	it	ls
 80087a6:	3220      	addls	r2, #32
 80087a8:	42a2      	cmp	r2, r4
 80087aa:	d0f0      	beq.n	800878e <__match+0x6>
 80087ac:	2000      	movs	r0, #0
 80087ae:	e7f3      	b.n	8008798 <__match+0x10>

080087b0 <__hexnan>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	680b      	ldr	r3, [r1, #0]
 80087b6:	6801      	ldr	r1, [r0, #0]
 80087b8:	115e      	asrs	r6, r3, #5
 80087ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087be:	f013 031f 	ands.w	r3, r3, #31
 80087c2:	b087      	sub	sp, #28
 80087c4:	bf18      	it	ne
 80087c6:	3604      	addne	r6, #4
 80087c8:	2500      	movs	r5, #0
 80087ca:	1f37      	subs	r7, r6, #4
 80087cc:	4682      	mov	sl, r0
 80087ce:	4690      	mov	r8, r2
 80087d0:	9301      	str	r3, [sp, #4]
 80087d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80087d6:	46b9      	mov	r9, r7
 80087d8:	463c      	mov	r4, r7
 80087da:	9502      	str	r5, [sp, #8]
 80087dc:	46ab      	mov	fp, r5
 80087de:	784a      	ldrb	r2, [r1, #1]
 80087e0:	1c4b      	adds	r3, r1, #1
 80087e2:	9303      	str	r3, [sp, #12]
 80087e4:	b342      	cbz	r2, 8008838 <__hexnan+0x88>
 80087e6:	4610      	mov	r0, r2
 80087e8:	9105      	str	r1, [sp, #20]
 80087ea:	9204      	str	r2, [sp, #16]
 80087ec:	f7ff fd5e 	bl	80082ac <__hexdig_fun>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d14f      	bne.n	8008894 <__hexnan+0xe4>
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	9905      	ldr	r1, [sp, #20]
 80087f8:	2a20      	cmp	r2, #32
 80087fa:	d818      	bhi.n	800882e <__hexnan+0x7e>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	459b      	cmp	fp, r3
 8008800:	dd13      	ble.n	800882a <__hexnan+0x7a>
 8008802:	454c      	cmp	r4, r9
 8008804:	d206      	bcs.n	8008814 <__hexnan+0x64>
 8008806:	2d07      	cmp	r5, #7
 8008808:	dc04      	bgt.n	8008814 <__hexnan+0x64>
 800880a:	462a      	mov	r2, r5
 800880c:	4649      	mov	r1, r9
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff ffa8 	bl	8008764 <L_shift>
 8008814:	4544      	cmp	r4, r8
 8008816:	d950      	bls.n	80088ba <__hexnan+0x10a>
 8008818:	2300      	movs	r3, #0
 800881a:	f1a4 0904 	sub.w	r9, r4, #4
 800881e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008822:	f8cd b008 	str.w	fp, [sp, #8]
 8008826:	464c      	mov	r4, r9
 8008828:	461d      	mov	r5, r3
 800882a:	9903      	ldr	r1, [sp, #12]
 800882c:	e7d7      	b.n	80087de <__hexnan+0x2e>
 800882e:	2a29      	cmp	r2, #41	; 0x29
 8008830:	d156      	bne.n	80088e0 <__hexnan+0x130>
 8008832:	3102      	adds	r1, #2
 8008834:	f8ca 1000 	str.w	r1, [sl]
 8008838:	f1bb 0f00 	cmp.w	fp, #0
 800883c:	d050      	beq.n	80088e0 <__hexnan+0x130>
 800883e:	454c      	cmp	r4, r9
 8008840:	d206      	bcs.n	8008850 <__hexnan+0xa0>
 8008842:	2d07      	cmp	r5, #7
 8008844:	dc04      	bgt.n	8008850 <__hexnan+0xa0>
 8008846:	462a      	mov	r2, r5
 8008848:	4649      	mov	r1, r9
 800884a:	4620      	mov	r0, r4
 800884c:	f7ff ff8a 	bl	8008764 <L_shift>
 8008850:	4544      	cmp	r4, r8
 8008852:	d934      	bls.n	80088be <__hexnan+0x10e>
 8008854:	f1a8 0204 	sub.w	r2, r8, #4
 8008858:	4623      	mov	r3, r4
 800885a:	f853 1b04 	ldr.w	r1, [r3], #4
 800885e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008862:	429f      	cmp	r7, r3
 8008864:	d2f9      	bcs.n	800885a <__hexnan+0xaa>
 8008866:	1b3b      	subs	r3, r7, r4
 8008868:	f023 0303 	bic.w	r3, r3, #3
 800886c:	3304      	adds	r3, #4
 800886e:	3401      	adds	r4, #1
 8008870:	3e03      	subs	r6, #3
 8008872:	42b4      	cmp	r4, r6
 8008874:	bf88      	it	hi
 8008876:	2304      	movhi	r3, #4
 8008878:	4443      	add	r3, r8
 800887a:	2200      	movs	r2, #0
 800887c:	f843 2b04 	str.w	r2, [r3], #4
 8008880:	429f      	cmp	r7, r3
 8008882:	d2fb      	bcs.n	800887c <__hexnan+0xcc>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	b91b      	cbnz	r3, 8008890 <__hexnan+0xe0>
 8008888:	4547      	cmp	r7, r8
 800888a:	d127      	bne.n	80088dc <__hexnan+0x12c>
 800888c:	2301      	movs	r3, #1
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	2005      	movs	r0, #5
 8008892:	e026      	b.n	80088e2 <__hexnan+0x132>
 8008894:	3501      	adds	r5, #1
 8008896:	2d08      	cmp	r5, #8
 8008898:	f10b 0b01 	add.w	fp, fp, #1
 800889c:	dd06      	ble.n	80088ac <__hexnan+0xfc>
 800889e:	4544      	cmp	r4, r8
 80088a0:	d9c3      	bls.n	800882a <__hexnan+0x7a>
 80088a2:	2300      	movs	r3, #0
 80088a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80088a8:	2501      	movs	r5, #1
 80088aa:	3c04      	subs	r4, #4
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	f000 000f 	and.w	r0, r0, #15
 80088b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80088b6:	6022      	str	r2, [r4, #0]
 80088b8:	e7b7      	b.n	800882a <__hexnan+0x7a>
 80088ba:	2508      	movs	r5, #8
 80088bc:	e7b5      	b.n	800882a <__hexnan+0x7a>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0df      	beq.n	8008884 <__hexnan+0xd4>
 80088c4:	f04f 32ff 	mov.w	r2, #4294967295
 80088c8:	f1c3 0320 	rsb	r3, r3, #32
 80088cc:	fa22 f303 	lsr.w	r3, r2, r3
 80088d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088d4:	401a      	ands	r2, r3
 80088d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80088da:	e7d3      	b.n	8008884 <__hexnan+0xd4>
 80088dc:	3f04      	subs	r7, #4
 80088de:	e7d1      	b.n	8008884 <__hexnan+0xd4>
 80088e0:	2004      	movs	r0, #4
 80088e2:	b007      	add	sp, #28
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088e8 <_localeconv_r>:
 80088e8:	4800      	ldr	r0, [pc, #0]	; (80088ec <_localeconv_r+0x4>)
 80088ea:	4770      	bx	lr
 80088ec:	20000164 	.word	0x20000164

080088f0 <malloc>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <malloc+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f000 bd3d 	b.w	8009374 <_malloc_r>
 80088fa:	bf00      	nop
 80088fc:	2000000c 	.word	0x2000000c

08008900 <__ascii_mbtowc>:
 8008900:	b082      	sub	sp, #8
 8008902:	b901      	cbnz	r1, 8008906 <__ascii_mbtowc+0x6>
 8008904:	a901      	add	r1, sp, #4
 8008906:	b142      	cbz	r2, 800891a <__ascii_mbtowc+0x1a>
 8008908:	b14b      	cbz	r3, 800891e <__ascii_mbtowc+0x1e>
 800890a:	7813      	ldrb	r3, [r2, #0]
 800890c:	600b      	str	r3, [r1, #0]
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	1e10      	subs	r0, r2, #0
 8008912:	bf18      	it	ne
 8008914:	2001      	movne	r0, #1
 8008916:	b002      	add	sp, #8
 8008918:	4770      	bx	lr
 800891a:	4610      	mov	r0, r2
 800891c:	e7fb      	b.n	8008916 <__ascii_mbtowc+0x16>
 800891e:	f06f 0001 	mvn.w	r0, #1
 8008922:	e7f8      	b.n	8008916 <__ascii_mbtowc+0x16>

08008924 <memcpy>:
 8008924:	440a      	add	r2, r1
 8008926:	4291      	cmp	r1, r2
 8008928:	f100 33ff 	add.w	r3, r0, #4294967295
 800892c:	d100      	bne.n	8008930 <memcpy+0xc>
 800892e:	4770      	bx	lr
 8008930:	b510      	push	{r4, lr}
 8008932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893a:	4291      	cmp	r1, r2
 800893c:	d1f9      	bne.n	8008932 <memcpy+0xe>
 800893e:	bd10      	pop	{r4, pc}

08008940 <_Balloc>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	b976      	cbnz	r6, 8008968 <_Balloc+0x28>
 800894a:	2010      	movs	r0, #16
 800894c:	f7ff ffd0 	bl	80088f0 <malloc>
 8008950:	4602      	mov	r2, r0
 8008952:	6260      	str	r0, [r4, #36]	; 0x24
 8008954:	b920      	cbnz	r0, 8008960 <_Balloc+0x20>
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <_Balloc+0x78>)
 8008958:	4818      	ldr	r0, [pc, #96]	; (80089bc <_Balloc+0x7c>)
 800895a:	2166      	movs	r1, #102	; 0x66
 800895c:	f000 fef8 	bl	8009750 <__assert_func>
 8008960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008964:	6006      	str	r6, [r0, #0]
 8008966:	60c6      	str	r6, [r0, #12]
 8008968:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800896a:	68f3      	ldr	r3, [r6, #12]
 800896c:	b183      	cbz	r3, 8008990 <_Balloc+0x50>
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008976:	b9b8      	cbnz	r0, 80089a8 <_Balloc+0x68>
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f605 	lsl.w	r6, r1, r5
 800897e:	1d72      	adds	r2, r6, #5
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fc97 	bl	80092b6 <_calloc_r>
 8008988:	b160      	cbz	r0, 80089a4 <_Balloc+0x64>
 800898a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898e:	e00e      	b.n	80089ae <_Balloc+0x6e>
 8008990:	2221      	movs	r2, #33	; 0x21
 8008992:	2104      	movs	r1, #4
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fc8e 	bl	80092b6 <_calloc_r>
 800899a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899c:	60f0      	str	r0, [r6, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e4      	bne.n	800896e <_Balloc+0x2e>
 80089a4:	2000      	movs	r0, #0
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	6802      	ldr	r2, [r0, #0]
 80089aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b4:	e7f7      	b.n	80089a6 <_Balloc+0x66>
 80089b6:	bf00      	nop
 80089b8:	0800a4de 	.word	0x0800a4de
 80089bc:	0800a5e4 	.word	0x0800a5e4

080089c0 <_Bfree>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Bfree+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff90 	bl	80088f0 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6268      	str	r0, [r5, #36]	; 0x24
 80089d4:	b920      	cbnz	r0, 80089e0 <_Bfree+0x20>
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <_Bfree+0x3c>)
 80089d8:	4809      	ldr	r0, [pc, #36]	; (8008a00 <_Bfree+0x40>)
 80089da:	218a      	movs	r1, #138	; 0x8a
 80089dc:	f000 feb8 	bl	8009750 <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	b13c      	cbz	r4, 80089fa <_Bfree+0x3a>
 80089ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089ec:	6862      	ldr	r2, [r4, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	6021      	str	r1, [r4, #0]
 80089f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	0800a4de 	.word	0x0800a4de
 8008a00:	0800a5e4 	.word	0x0800a5e4

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	690e      	ldr	r6, [r1, #16]
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	4698      	mov	r8, r3
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f101 0014 	add.w	r0, r1, #20
 8008a14:	2300      	movs	r3, #0
 8008a16:	6805      	ldr	r5, [r0, #0]
 8008a18:	b2a9      	uxth	r1, r5
 8008a1a:	fb02 8101 	mla	r1, r2, r1, r8
 8008a1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a22:	0c2d      	lsrs	r5, r5, #16
 8008a24:	fb02 c505 	mla	r5, r2, r5, ip
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a30:	429e      	cmp	r6, r3
 8008a32:	f840 1b04 	str.w	r1, [r0], #4
 8008a36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a3a:	dcec      	bgt.n	8008a16 <__multadd+0x12>
 8008a3c:	f1b8 0f00 	cmp.w	r8, #0
 8008a40:	d022      	beq.n	8008a88 <__multadd+0x84>
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	42b3      	cmp	r3, r6
 8008a46:	dc19      	bgt.n	8008a7c <__multadd+0x78>
 8008a48:	6861      	ldr	r1, [r4, #4]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	3101      	adds	r1, #1
 8008a4e:	f7ff ff77 	bl	8008940 <_Balloc>
 8008a52:	4605      	mov	r5, r0
 8008a54:	b928      	cbnz	r0, 8008a62 <__multadd+0x5e>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <__multadd+0x8c>)
 8008a5a:	480e      	ldr	r0, [pc, #56]	; (8008a94 <__multadd+0x90>)
 8008a5c:	21b5      	movs	r1, #181	; 0xb5
 8008a5e:	f000 fe77 	bl	8009750 <__assert_func>
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	3202      	adds	r2, #2
 8008a66:	f104 010c 	add.w	r1, r4, #12
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	300c      	adds	r0, #12
 8008a6e:	f7ff ff59 	bl	8008924 <memcpy>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff ffa3 	bl	80089c0 <_Bfree>
 8008a7a:	462c      	mov	r4, r5
 8008a7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a80:	3601      	adds	r6, #1
 8008a82:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a86:	6126      	str	r6, [r4, #16]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8e:	bf00      	nop
 8008a90:	0800a554 	.word	0x0800a554
 8008a94:	0800a5e4 	.word	0x0800a5e4

08008a98 <__s2b>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4615      	mov	r5, r2
 8008aa0:	461f      	mov	r7, r3
 8008aa2:	2209      	movs	r2, #9
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aac:	2100      	movs	r1, #0
 8008aae:	2201      	movs	r2, #1
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	db09      	blt.n	8008ac8 <__s2b+0x30>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff ff43 	bl	8008940 <_Balloc>
 8008aba:	b940      	cbnz	r0, 8008ace <__s2b+0x36>
 8008abc:	4602      	mov	r2, r0
 8008abe:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <__s2b+0x8c>)
 8008ac0:	4819      	ldr	r0, [pc, #100]	; (8008b28 <__s2b+0x90>)
 8008ac2:	21ce      	movs	r1, #206	; 0xce
 8008ac4:	f000 fe44 	bl	8009750 <__assert_func>
 8008ac8:	0052      	lsls	r2, r2, #1
 8008aca:	3101      	adds	r1, #1
 8008acc:	e7f0      	b.n	8008ab0 <__s2b+0x18>
 8008ace:	9b08      	ldr	r3, [sp, #32]
 8008ad0:	6143      	str	r3, [r0, #20]
 8008ad2:	2d09      	cmp	r5, #9
 8008ad4:	f04f 0301 	mov.w	r3, #1
 8008ad8:	6103      	str	r3, [r0, #16]
 8008ada:	dd16      	ble.n	8008b0a <__s2b+0x72>
 8008adc:	f104 0909 	add.w	r9, r4, #9
 8008ae0:	46c8      	mov	r8, r9
 8008ae2:	442c      	add	r4, r5
 8008ae4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ae8:	4601      	mov	r1, r0
 8008aea:	3b30      	subs	r3, #48	; 0x30
 8008aec:	220a      	movs	r2, #10
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ff88 	bl	8008a04 <__multadd>
 8008af4:	45a0      	cmp	r8, r4
 8008af6:	d1f5      	bne.n	8008ae4 <__s2b+0x4c>
 8008af8:	f1a5 0408 	sub.w	r4, r5, #8
 8008afc:	444c      	add	r4, r9
 8008afe:	1b2d      	subs	r5, r5, r4
 8008b00:	1963      	adds	r3, r4, r5
 8008b02:	42bb      	cmp	r3, r7
 8008b04:	db04      	blt.n	8008b10 <__s2b+0x78>
 8008b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0a:	340a      	adds	r4, #10
 8008b0c:	2509      	movs	r5, #9
 8008b0e:	e7f6      	b.n	8008afe <__s2b+0x66>
 8008b10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b14:	4601      	mov	r1, r0
 8008b16:	3b30      	subs	r3, #48	; 0x30
 8008b18:	220a      	movs	r2, #10
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7ff ff72 	bl	8008a04 <__multadd>
 8008b20:	e7ee      	b.n	8008b00 <__s2b+0x68>
 8008b22:	bf00      	nop
 8008b24:	0800a554 	.word	0x0800a554
 8008b28:	0800a5e4 	.word	0x0800a5e4

08008b2c <__hi0bits>:
 8008b2c:	0c03      	lsrs	r3, r0, #16
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	b9d3      	cbnz	r3, 8008b68 <__hi0bits+0x3c>
 8008b32:	0400      	lsls	r0, r0, #16
 8008b34:	2310      	movs	r3, #16
 8008b36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b3a:	bf04      	itt	eq
 8008b3c:	0200      	lsleq	r0, r0, #8
 8008b3e:	3308      	addeq	r3, #8
 8008b40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b44:	bf04      	itt	eq
 8008b46:	0100      	lsleq	r0, r0, #4
 8008b48:	3304      	addeq	r3, #4
 8008b4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b4e:	bf04      	itt	eq
 8008b50:	0080      	lsleq	r0, r0, #2
 8008b52:	3302      	addeq	r3, #2
 8008b54:	2800      	cmp	r0, #0
 8008b56:	db05      	blt.n	8008b64 <__hi0bits+0x38>
 8008b58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b5c:	f103 0301 	add.w	r3, r3, #1
 8008b60:	bf08      	it	eq
 8008b62:	2320      	moveq	r3, #32
 8008b64:	4618      	mov	r0, r3
 8008b66:	4770      	bx	lr
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e7e4      	b.n	8008b36 <__hi0bits+0xa>

08008b6c <__lo0bits>:
 8008b6c:	6803      	ldr	r3, [r0, #0]
 8008b6e:	f013 0207 	ands.w	r2, r3, #7
 8008b72:	4601      	mov	r1, r0
 8008b74:	d00b      	beq.n	8008b8e <__lo0bits+0x22>
 8008b76:	07da      	lsls	r2, r3, #31
 8008b78:	d424      	bmi.n	8008bc4 <__lo0bits+0x58>
 8008b7a:	0798      	lsls	r0, r3, #30
 8008b7c:	bf49      	itett	mi
 8008b7e:	085b      	lsrmi	r3, r3, #1
 8008b80:	089b      	lsrpl	r3, r3, #2
 8008b82:	2001      	movmi	r0, #1
 8008b84:	600b      	strmi	r3, [r1, #0]
 8008b86:	bf5c      	itt	pl
 8008b88:	600b      	strpl	r3, [r1, #0]
 8008b8a:	2002      	movpl	r0, #2
 8008b8c:	4770      	bx	lr
 8008b8e:	b298      	uxth	r0, r3
 8008b90:	b9b0      	cbnz	r0, 8008bc0 <__lo0bits+0x54>
 8008b92:	0c1b      	lsrs	r3, r3, #16
 8008b94:	2010      	movs	r0, #16
 8008b96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b9a:	bf04      	itt	eq
 8008b9c:	0a1b      	lsreq	r3, r3, #8
 8008b9e:	3008      	addeq	r0, #8
 8008ba0:	071a      	lsls	r2, r3, #28
 8008ba2:	bf04      	itt	eq
 8008ba4:	091b      	lsreq	r3, r3, #4
 8008ba6:	3004      	addeq	r0, #4
 8008ba8:	079a      	lsls	r2, r3, #30
 8008baa:	bf04      	itt	eq
 8008bac:	089b      	lsreq	r3, r3, #2
 8008bae:	3002      	addeq	r0, #2
 8008bb0:	07da      	lsls	r2, r3, #31
 8008bb2:	d403      	bmi.n	8008bbc <__lo0bits+0x50>
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	f100 0001 	add.w	r0, r0, #1
 8008bba:	d005      	beq.n	8008bc8 <__lo0bits+0x5c>
 8008bbc:	600b      	str	r3, [r1, #0]
 8008bbe:	4770      	bx	lr
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	e7e8      	b.n	8008b96 <__lo0bits+0x2a>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	4770      	bx	lr
 8008bc8:	2020      	movs	r0, #32
 8008bca:	4770      	bx	lr

08008bcc <__i2b>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	460c      	mov	r4, r1
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f7ff feb5 	bl	8008940 <_Balloc>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	b928      	cbnz	r0, 8008be6 <__i2b+0x1a>
 8008bda:	4b05      	ldr	r3, [pc, #20]	; (8008bf0 <__i2b+0x24>)
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <__i2b+0x28>)
 8008bde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008be2:	f000 fdb5 	bl	8009750 <__assert_func>
 8008be6:	2301      	movs	r3, #1
 8008be8:	6144      	str	r4, [r0, #20]
 8008bea:	6103      	str	r3, [r0, #16]
 8008bec:	bd10      	pop	{r4, pc}
 8008bee:	bf00      	nop
 8008bf0:	0800a554 	.word	0x0800a554
 8008bf4:	0800a5e4 	.word	0x0800a5e4

08008bf8 <__multiply>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	690a      	ldr	r2, [r1, #16]
 8008c00:	6923      	ldr	r3, [r4, #16]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	bfb8      	it	lt
 8008c06:	460b      	movlt	r3, r1
 8008c08:	460d      	mov	r5, r1
 8008c0a:	bfbc      	itt	lt
 8008c0c:	4625      	movlt	r5, r4
 8008c0e:	461c      	movlt	r4, r3
 8008c10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c18:	68ab      	ldr	r3, [r5, #8]
 8008c1a:	6869      	ldr	r1, [r5, #4]
 8008c1c:	eb0a 0709 	add.w	r7, sl, r9
 8008c20:	42bb      	cmp	r3, r7
 8008c22:	b085      	sub	sp, #20
 8008c24:	bfb8      	it	lt
 8008c26:	3101      	addlt	r1, #1
 8008c28:	f7ff fe8a 	bl	8008940 <_Balloc>
 8008c2c:	b930      	cbnz	r0, 8008c3c <__multiply+0x44>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b42      	ldr	r3, [pc, #264]	; (8008d3c <__multiply+0x144>)
 8008c32:	4843      	ldr	r0, [pc, #268]	; (8008d40 <__multiply+0x148>)
 8008c34:	f240 115d 	movw	r1, #349	; 0x15d
 8008c38:	f000 fd8a 	bl	8009750 <__assert_func>
 8008c3c:	f100 0614 	add.w	r6, r0, #20
 8008c40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c44:	4633      	mov	r3, r6
 8008c46:	2200      	movs	r2, #0
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	d31e      	bcc.n	8008c8a <__multiply+0x92>
 8008c4c:	f105 0c14 	add.w	ip, r5, #20
 8008c50:	f104 0314 	add.w	r3, r4, #20
 8008c54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c5c:	9202      	str	r2, [sp, #8]
 8008c5e:	ebac 0205 	sub.w	r2, ip, r5
 8008c62:	3a15      	subs	r2, #21
 8008c64:	f022 0203 	bic.w	r2, r2, #3
 8008c68:	3204      	adds	r2, #4
 8008c6a:	f105 0115 	add.w	r1, r5, #21
 8008c6e:	458c      	cmp	ip, r1
 8008c70:	bf38      	it	cc
 8008c72:	2204      	movcc	r2, #4
 8008c74:	9201      	str	r2, [sp, #4]
 8008c76:	9a02      	ldr	r2, [sp, #8]
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d808      	bhi.n	8008c90 <__multiply+0x98>
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	dc55      	bgt.n	8008d2e <__multiply+0x136>
 8008c82:	6107      	str	r7, [r0, #16]
 8008c84:	b005      	add	sp, #20
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	f843 2b04 	str.w	r2, [r3], #4
 8008c8e:	e7db      	b.n	8008c48 <__multiply+0x50>
 8008c90:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c94:	f1ba 0f00 	cmp.w	sl, #0
 8008c98:	d020      	beq.n	8008cdc <__multiply+0xe4>
 8008c9a:	f105 0e14 	add.w	lr, r5, #20
 8008c9e:	46b1      	mov	r9, r6
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ca6:	f8d9 b000 	ldr.w	fp, [r9]
 8008caa:	b2a1      	uxth	r1, r4
 8008cac:	fa1f fb8b 	uxth.w	fp, fp
 8008cb0:	fb0a b101 	mla	r1, sl, r1, fp
 8008cb4:	4411      	add	r1, r2
 8008cb6:	f8d9 2000 	ldr.w	r2, [r9]
 8008cba:	0c24      	lsrs	r4, r4, #16
 8008cbc:	0c12      	lsrs	r2, r2, #16
 8008cbe:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008cc6:	b289      	uxth	r1, r1
 8008cc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ccc:	45f4      	cmp	ip, lr
 8008cce:	f849 1b04 	str.w	r1, [r9], #4
 8008cd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008cd6:	d8e4      	bhi.n	8008ca2 <__multiply+0xaa>
 8008cd8:	9901      	ldr	r1, [sp, #4]
 8008cda:	5072      	str	r2, [r6, r1]
 8008cdc:	9a03      	ldr	r2, [sp, #12]
 8008cde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	f1b9 0f00 	cmp.w	r9, #0
 8008ce8:	d01f      	beq.n	8008d2a <__multiply+0x132>
 8008cea:	6834      	ldr	r4, [r6, #0]
 8008cec:	f105 0114 	add.w	r1, r5, #20
 8008cf0:	46b6      	mov	lr, r6
 8008cf2:	f04f 0a00 	mov.w	sl, #0
 8008cf6:	880a      	ldrh	r2, [r1, #0]
 8008cf8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008cfc:	fb09 b202 	mla	r2, r9, r2, fp
 8008d00:	4492      	add	sl, r2
 8008d02:	b2a4      	uxth	r4, r4
 8008d04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d08:	f84e 4b04 	str.w	r4, [lr], #4
 8008d0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d10:	f8be 2000 	ldrh.w	r2, [lr]
 8008d14:	0c24      	lsrs	r4, r4, #16
 8008d16:	fb09 2404 	mla	r4, r9, r4, r2
 8008d1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d1e:	458c      	cmp	ip, r1
 8008d20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d24:	d8e7      	bhi.n	8008cf6 <__multiply+0xfe>
 8008d26:	9a01      	ldr	r2, [sp, #4]
 8008d28:	50b4      	str	r4, [r6, r2]
 8008d2a:	3604      	adds	r6, #4
 8008d2c:	e7a3      	b.n	8008c76 <__multiply+0x7e>
 8008d2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1a5      	bne.n	8008c82 <__multiply+0x8a>
 8008d36:	3f01      	subs	r7, #1
 8008d38:	e7a1      	b.n	8008c7e <__multiply+0x86>
 8008d3a:	bf00      	nop
 8008d3c:	0800a554 	.word	0x0800a554
 8008d40:	0800a5e4 	.word	0x0800a5e4

08008d44 <__pow5mult>:
 8008d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d48:	4615      	mov	r5, r2
 8008d4a:	f012 0203 	ands.w	r2, r2, #3
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	d007      	beq.n	8008d64 <__pow5mult+0x20>
 8008d54:	4c25      	ldr	r4, [pc, #148]	; (8008dec <__pow5mult+0xa8>)
 8008d56:	3a01      	subs	r2, #1
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d5e:	f7ff fe51 	bl	8008a04 <__multadd>
 8008d62:	4607      	mov	r7, r0
 8008d64:	10ad      	asrs	r5, r5, #2
 8008d66:	d03d      	beq.n	8008de4 <__pow5mult+0xa0>
 8008d68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d6a:	b97c      	cbnz	r4, 8008d8c <__pow5mult+0x48>
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	f7ff fdbf 	bl	80088f0 <malloc>
 8008d72:	4602      	mov	r2, r0
 8008d74:	6270      	str	r0, [r6, #36]	; 0x24
 8008d76:	b928      	cbnz	r0, 8008d84 <__pow5mult+0x40>
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <__pow5mult+0xac>)
 8008d7a:	481e      	ldr	r0, [pc, #120]	; (8008df4 <__pow5mult+0xb0>)
 8008d7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d80:	f000 fce6 	bl	8009750 <__assert_func>
 8008d84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d88:	6004      	str	r4, [r0, #0]
 8008d8a:	60c4      	str	r4, [r0, #12]
 8008d8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d94:	b94c      	cbnz	r4, 8008daa <__pow5mult+0x66>
 8008d96:	f240 2171 	movw	r1, #625	; 0x271
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff ff16 	bl	8008bcc <__i2b>
 8008da0:	2300      	movs	r3, #0
 8008da2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008da6:	4604      	mov	r4, r0
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	f04f 0900 	mov.w	r9, #0
 8008dae:	07eb      	lsls	r3, r5, #31
 8008db0:	d50a      	bpl.n	8008dc8 <__pow5mult+0x84>
 8008db2:	4639      	mov	r1, r7
 8008db4:	4622      	mov	r2, r4
 8008db6:	4630      	mov	r0, r6
 8008db8:	f7ff ff1e 	bl	8008bf8 <__multiply>
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff fdfd 	bl	80089c0 <_Bfree>
 8008dc6:	4647      	mov	r7, r8
 8008dc8:	106d      	asrs	r5, r5, #1
 8008dca:	d00b      	beq.n	8008de4 <__pow5mult+0xa0>
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	b938      	cbnz	r0, 8008de0 <__pow5mult+0x9c>
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7ff ff0f 	bl	8008bf8 <__multiply>
 8008dda:	6020      	str	r0, [r4, #0]
 8008ddc:	f8c0 9000 	str.w	r9, [r0]
 8008de0:	4604      	mov	r4, r0
 8008de2:	e7e4      	b.n	8008dae <__pow5mult+0x6a>
 8008de4:	4638      	mov	r0, r7
 8008de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dea:	bf00      	nop
 8008dec:	0800a738 	.word	0x0800a738
 8008df0:	0800a4de 	.word	0x0800a4de
 8008df4:	0800a5e4 	.word	0x0800a5e4

08008df8 <__lshift>:
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	6849      	ldr	r1, [r1, #4]
 8008e00:	6923      	ldr	r3, [r4, #16]
 8008e02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	4607      	mov	r7, r0
 8008e0a:	4691      	mov	r9, r2
 8008e0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e10:	f108 0601 	add.w	r6, r8, #1
 8008e14:	42b3      	cmp	r3, r6
 8008e16:	db0b      	blt.n	8008e30 <__lshift+0x38>
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f7ff fd91 	bl	8008940 <_Balloc>
 8008e1e:	4605      	mov	r5, r0
 8008e20:	b948      	cbnz	r0, 8008e36 <__lshift+0x3e>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4b28      	ldr	r3, [pc, #160]	; (8008ec8 <__lshift+0xd0>)
 8008e26:	4829      	ldr	r0, [pc, #164]	; (8008ecc <__lshift+0xd4>)
 8008e28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e2c:	f000 fc90 	bl	8009750 <__assert_func>
 8008e30:	3101      	adds	r1, #1
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	e7ee      	b.n	8008e14 <__lshift+0x1c>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f100 0114 	add.w	r1, r0, #20
 8008e3c:	f100 0210 	add.w	r2, r0, #16
 8008e40:	4618      	mov	r0, r3
 8008e42:	4553      	cmp	r3, sl
 8008e44:	db33      	blt.n	8008eae <__lshift+0xb6>
 8008e46:	6920      	ldr	r0, [r4, #16]
 8008e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e4c:	f104 0314 	add.w	r3, r4, #20
 8008e50:	f019 091f 	ands.w	r9, r9, #31
 8008e54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e5c:	d02b      	beq.n	8008eb6 <__lshift+0xbe>
 8008e5e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e62:	468a      	mov	sl, r1
 8008e64:	2200      	movs	r2, #0
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	fa00 f009 	lsl.w	r0, r0, r9
 8008e6c:	4302      	orrs	r2, r0
 8008e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8008e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e76:	459c      	cmp	ip, r3
 8008e78:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e7c:	d8f3      	bhi.n	8008e66 <__lshift+0x6e>
 8008e7e:	ebac 0304 	sub.w	r3, ip, r4
 8008e82:	3b15      	subs	r3, #21
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	3304      	adds	r3, #4
 8008e8a:	f104 0015 	add.w	r0, r4, #21
 8008e8e:	4584      	cmp	ip, r0
 8008e90:	bf38      	it	cc
 8008e92:	2304      	movcc	r3, #4
 8008e94:	50ca      	str	r2, [r1, r3]
 8008e96:	b10a      	cbz	r2, 8008e9c <__lshift+0xa4>
 8008e98:	f108 0602 	add.w	r6, r8, #2
 8008e9c:	3e01      	subs	r6, #1
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	612e      	str	r6, [r5, #16]
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	f7ff fd8c 	bl	80089c0 <_Bfree>
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eae:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	e7c5      	b.n	8008e42 <__lshift+0x4a>
 8008eb6:	3904      	subs	r1, #4
 8008eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ebc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ec0:	459c      	cmp	ip, r3
 8008ec2:	d8f9      	bhi.n	8008eb8 <__lshift+0xc0>
 8008ec4:	e7ea      	b.n	8008e9c <__lshift+0xa4>
 8008ec6:	bf00      	nop
 8008ec8:	0800a554 	.word	0x0800a554
 8008ecc:	0800a5e4 	.word	0x0800a5e4

08008ed0 <__mcmp>:
 8008ed0:	b530      	push	{r4, r5, lr}
 8008ed2:	6902      	ldr	r2, [r0, #16]
 8008ed4:	690c      	ldr	r4, [r1, #16]
 8008ed6:	1b12      	subs	r2, r2, r4
 8008ed8:	d10e      	bne.n	8008ef8 <__mcmp+0x28>
 8008eda:	f100 0314 	add.w	r3, r0, #20
 8008ede:	3114      	adds	r1, #20
 8008ee0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ee4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ee8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008eec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ef0:	42a5      	cmp	r5, r4
 8008ef2:	d003      	beq.n	8008efc <__mcmp+0x2c>
 8008ef4:	d305      	bcc.n	8008f02 <__mcmp+0x32>
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4610      	mov	r0, r2
 8008efa:	bd30      	pop	{r4, r5, pc}
 8008efc:	4283      	cmp	r3, r0
 8008efe:	d3f3      	bcc.n	8008ee8 <__mcmp+0x18>
 8008f00:	e7fa      	b.n	8008ef8 <__mcmp+0x28>
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	e7f7      	b.n	8008ef8 <__mcmp+0x28>

08008f08 <__mdiff>:
 8008f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	4606      	mov	r6, r0
 8008f10:	4611      	mov	r1, r2
 8008f12:	4620      	mov	r0, r4
 8008f14:	4617      	mov	r7, r2
 8008f16:	f7ff ffdb 	bl	8008ed0 <__mcmp>
 8008f1a:	1e05      	subs	r5, r0, #0
 8008f1c:	d110      	bne.n	8008f40 <__mdiff+0x38>
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff fd0d 	bl	8008940 <_Balloc>
 8008f26:	b930      	cbnz	r0, 8008f36 <__mdiff+0x2e>
 8008f28:	4b39      	ldr	r3, [pc, #228]	; (8009010 <__mdiff+0x108>)
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	f240 2132 	movw	r1, #562	; 0x232
 8008f30:	4838      	ldr	r0, [pc, #224]	; (8009014 <__mdiff+0x10c>)
 8008f32:	f000 fc0d 	bl	8009750 <__assert_func>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f40:	bfa4      	itt	ge
 8008f42:	463b      	movge	r3, r7
 8008f44:	4627      	movge	r7, r4
 8008f46:	4630      	mov	r0, r6
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	bfa6      	itte	ge
 8008f4c:	461c      	movge	r4, r3
 8008f4e:	2500      	movge	r5, #0
 8008f50:	2501      	movlt	r5, #1
 8008f52:	f7ff fcf5 	bl	8008940 <_Balloc>
 8008f56:	b920      	cbnz	r0, 8008f62 <__mdiff+0x5a>
 8008f58:	4b2d      	ldr	r3, [pc, #180]	; (8009010 <__mdiff+0x108>)
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f60:	e7e6      	b.n	8008f30 <__mdiff+0x28>
 8008f62:	693e      	ldr	r6, [r7, #16]
 8008f64:	60c5      	str	r5, [r0, #12]
 8008f66:	6925      	ldr	r5, [r4, #16]
 8008f68:	f107 0114 	add.w	r1, r7, #20
 8008f6c:	f104 0914 	add.w	r9, r4, #20
 8008f70:	f100 0e14 	add.w	lr, r0, #20
 8008f74:	f107 0210 	add.w	r2, r7, #16
 8008f78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f80:	46f2      	mov	sl, lr
 8008f82:	2700      	movs	r7, #0
 8008f84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f8c:	fa1f f883 	uxth.w	r8, r3
 8008f90:	fa17 f78b 	uxtah	r7, r7, fp
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	eba7 0808 	sub.w	r8, r7, r8
 8008f9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fa2:	fa1f f888 	uxth.w	r8, r8
 8008fa6:	141f      	asrs	r7, r3, #16
 8008fa8:	454d      	cmp	r5, r9
 8008faa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fae:	f84a 3b04 	str.w	r3, [sl], #4
 8008fb2:	d8e7      	bhi.n	8008f84 <__mdiff+0x7c>
 8008fb4:	1b2b      	subs	r3, r5, r4
 8008fb6:	3b15      	subs	r3, #21
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	3415      	adds	r4, #21
 8008fc0:	42a5      	cmp	r5, r4
 8008fc2:	bf38      	it	cc
 8008fc4:	2304      	movcc	r3, #4
 8008fc6:	4419      	add	r1, r3
 8008fc8:	4473      	add	r3, lr
 8008fca:	469e      	mov	lr, r3
 8008fcc:	460d      	mov	r5, r1
 8008fce:	4565      	cmp	r5, ip
 8008fd0:	d30e      	bcc.n	8008ff0 <__mdiff+0xe8>
 8008fd2:	f10c 0203 	add.w	r2, ip, #3
 8008fd6:	1a52      	subs	r2, r2, r1
 8008fd8:	f022 0203 	bic.w	r2, r2, #3
 8008fdc:	3903      	subs	r1, #3
 8008fde:	458c      	cmp	ip, r1
 8008fe0:	bf38      	it	cc
 8008fe2:	2200      	movcc	r2, #0
 8008fe4:	441a      	add	r2, r3
 8008fe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008fea:	b17b      	cbz	r3, 800900c <__mdiff+0x104>
 8008fec:	6106      	str	r6, [r0, #16]
 8008fee:	e7a5      	b.n	8008f3c <__mdiff+0x34>
 8008ff0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ff4:	fa17 f488 	uxtah	r4, r7, r8
 8008ff8:	1422      	asrs	r2, r4, #16
 8008ffa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ffe:	b2a4      	uxth	r4, r4
 8009000:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009004:	f84e 4b04 	str.w	r4, [lr], #4
 8009008:	1417      	asrs	r7, r2, #16
 800900a:	e7e0      	b.n	8008fce <__mdiff+0xc6>
 800900c:	3e01      	subs	r6, #1
 800900e:	e7ea      	b.n	8008fe6 <__mdiff+0xde>
 8009010:	0800a554 	.word	0x0800a554
 8009014:	0800a5e4 	.word	0x0800a5e4

08009018 <__ulp>:
 8009018:	b082      	sub	sp, #8
 800901a:	ed8d 0b00 	vstr	d0, [sp]
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	4912      	ldr	r1, [pc, #72]	; (800906c <__ulp+0x54>)
 8009022:	4019      	ands	r1, r3
 8009024:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009028:	2900      	cmp	r1, #0
 800902a:	dd05      	ble.n	8009038 <__ulp+0x20>
 800902c:	2200      	movs	r2, #0
 800902e:	460b      	mov	r3, r1
 8009030:	ec43 2b10 	vmov	d0, r2, r3
 8009034:	b002      	add	sp, #8
 8009036:	4770      	bx	lr
 8009038:	4249      	negs	r1, r1
 800903a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800903e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	da04      	bge.n	8009056 <__ulp+0x3e>
 800904c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009050:	fa41 f300 	asr.w	r3, r1, r0
 8009054:	e7ec      	b.n	8009030 <__ulp+0x18>
 8009056:	f1a0 0114 	sub.w	r1, r0, #20
 800905a:	291e      	cmp	r1, #30
 800905c:	bfda      	itte	le
 800905e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009062:	fa20 f101 	lsrle.w	r1, r0, r1
 8009066:	2101      	movgt	r1, #1
 8009068:	460a      	mov	r2, r1
 800906a:	e7e1      	b.n	8009030 <__ulp+0x18>
 800906c:	7ff00000 	.word	0x7ff00000

08009070 <__b2d>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	6905      	ldr	r5, [r0, #16]
 8009074:	f100 0714 	add.w	r7, r0, #20
 8009078:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800907c:	1f2e      	subs	r6, r5, #4
 800907e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009082:	4620      	mov	r0, r4
 8009084:	f7ff fd52 	bl	8008b2c <__hi0bits>
 8009088:	f1c0 0320 	rsb	r3, r0, #32
 800908c:	280a      	cmp	r0, #10
 800908e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800910c <__b2d+0x9c>
 8009092:	600b      	str	r3, [r1, #0]
 8009094:	dc14      	bgt.n	80090c0 <__b2d+0x50>
 8009096:	f1c0 0e0b 	rsb	lr, r0, #11
 800909a:	fa24 f10e 	lsr.w	r1, r4, lr
 800909e:	42b7      	cmp	r7, r6
 80090a0:	ea41 030c 	orr.w	r3, r1, ip
 80090a4:	bf34      	ite	cc
 80090a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090aa:	2100      	movcs	r1, #0
 80090ac:	3015      	adds	r0, #21
 80090ae:	fa04 f000 	lsl.w	r0, r4, r0
 80090b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80090b6:	ea40 0201 	orr.w	r2, r0, r1
 80090ba:	ec43 2b10 	vmov	d0, r2, r3
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	42b7      	cmp	r7, r6
 80090c2:	bf3a      	itte	cc
 80090c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80090c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80090cc:	2100      	movcs	r1, #0
 80090ce:	380b      	subs	r0, #11
 80090d0:	d017      	beq.n	8009102 <__b2d+0x92>
 80090d2:	f1c0 0c20 	rsb	ip, r0, #32
 80090d6:	fa04 f500 	lsl.w	r5, r4, r0
 80090da:	42be      	cmp	r6, r7
 80090dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80090e0:	ea45 0504 	orr.w	r5, r5, r4
 80090e4:	bf8c      	ite	hi
 80090e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090ea:	2400      	movls	r4, #0
 80090ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80090f0:	fa01 f000 	lsl.w	r0, r1, r0
 80090f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80090f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80090fc:	ea40 0204 	orr.w	r2, r0, r4
 8009100:	e7db      	b.n	80090ba <__b2d+0x4a>
 8009102:	ea44 030c 	orr.w	r3, r4, ip
 8009106:	460a      	mov	r2, r1
 8009108:	e7d7      	b.n	80090ba <__b2d+0x4a>
 800910a:	bf00      	nop
 800910c:	3ff00000 	.word	0x3ff00000

08009110 <__d2b>:
 8009110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009114:	4689      	mov	r9, r1
 8009116:	2101      	movs	r1, #1
 8009118:	ec57 6b10 	vmov	r6, r7, d0
 800911c:	4690      	mov	r8, r2
 800911e:	f7ff fc0f 	bl	8008940 <_Balloc>
 8009122:	4604      	mov	r4, r0
 8009124:	b930      	cbnz	r0, 8009134 <__d2b+0x24>
 8009126:	4602      	mov	r2, r0
 8009128:	4b25      	ldr	r3, [pc, #148]	; (80091c0 <__d2b+0xb0>)
 800912a:	4826      	ldr	r0, [pc, #152]	; (80091c4 <__d2b+0xb4>)
 800912c:	f240 310a 	movw	r1, #778	; 0x30a
 8009130:	f000 fb0e 	bl	8009750 <__assert_func>
 8009134:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800913c:	bb35      	cbnz	r5, 800918c <__d2b+0x7c>
 800913e:	2e00      	cmp	r6, #0
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	d028      	beq.n	8009196 <__d2b+0x86>
 8009144:	4668      	mov	r0, sp
 8009146:	9600      	str	r6, [sp, #0]
 8009148:	f7ff fd10 	bl	8008b6c <__lo0bits>
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	b300      	cbz	r0, 8009192 <__d2b+0x82>
 8009150:	9a01      	ldr	r2, [sp, #4]
 8009152:	f1c0 0320 	rsb	r3, r0, #32
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	430b      	orrs	r3, r1
 800915c:	40c2      	lsrs	r2, r0
 800915e:	6163      	str	r3, [r4, #20]
 8009160:	9201      	str	r2, [sp, #4]
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	61a3      	str	r3, [r4, #24]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2202      	movne	r2, #2
 800916c:	2201      	moveq	r2, #1
 800916e:	6122      	str	r2, [r4, #16]
 8009170:	b1d5      	cbz	r5, 80091a8 <__d2b+0x98>
 8009172:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009176:	4405      	add	r5, r0
 8009178:	f8c9 5000 	str.w	r5, [r9]
 800917c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009180:	f8c8 0000 	str.w	r0, [r8]
 8009184:	4620      	mov	r0, r4
 8009186:	b003      	add	sp, #12
 8009188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800918c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009190:	e7d5      	b.n	800913e <__d2b+0x2e>
 8009192:	6161      	str	r1, [r4, #20]
 8009194:	e7e5      	b.n	8009162 <__d2b+0x52>
 8009196:	a801      	add	r0, sp, #4
 8009198:	f7ff fce8 	bl	8008b6c <__lo0bits>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	6163      	str	r3, [r4, #20]
 80091a0:	2201      	movs	r2, #1
 80091a2:	6122      	str	r2, [r4, #16]
 80091a4:	3020      	adds	r0, #32
 80091a6:	e7e3      	b.n	8009170 <__d2b+0x60>
 80091a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091b0:	f8c9 0000 	str.w	r0, [r9]
 80091b4:	6918      	ldr	r0, [r3, #16]
 80091b6:	f7ff fcb9 	bl	8008b2c <__hi0bits>
 80091ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091be:	e7df      	b.n	8009180 <__d2b+0x70>
 80091c0:	0800a554 	.word	0x0800a554
 80091c4:	0800a5e4 	.word	0x0800a5e4

080091c8 <__ratio>:
 80091c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4688      	mov	r8, r1
 80091ce:	4669      	mov	r1, sp
 80091d0:	4681      	mov	r9, r0
 80091d2:	f7ff ff4d 	bl	8009070 <__b2d>
 80091d6:	a901      	add	r1, sp, #4
 80091d8:	4640      	mov	r0, r8
 80091da:	ec55 4b10 	vmov	r4, r5, d0
 80091de:	f7ff ff47 	bl	8009070 <__b2d>
 80091e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80091ea:	eba3 0c02 	sub.w	ip, r3, r2
 80091ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091f8:	ec51 0b10 	vmov	r0, r1, d0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bfd6      	itet	le
 8009200:	460a      	movle	r2, r1
 8009202:	462a      	movgt	r2, r5
 8009204:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009208:	468b      	mov	fp, r1
 800920a:	462f      	mov	r7, r5
 800920c:	bfd4      	ite	le
 800920e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009212:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009216:	4620      	mov	r0, r4
 8009218:	ee10 2a10 	vmov	r2, s0
 800921c:	465b      	mov	r3, fp
 800921e:	4639      	mov	r1, r7
 8009220:	f7f7 fb14 	bl	800084c <__aeabi_ddiv>
 8009224:	ec41 0b10 	vmov	d0, r0, r1
 8009228:	b003      	add	sp, #12
 800922a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800922e <__copybits>:
 800922e:	3901      	subs	r1, #1
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	1149      	asrs	r1, r1, #5
 8009234:	6914      	ldr	r4, [r2, #16]
 8009236:	3101      	adds	r1, #1
 8009238:	f102 0314 	add.w	r3, r2, #20
 800923c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009240:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009244:	1f05      	subs	r5, r0, #4
 8009246:	42a3      	cmp	r3, r4
 8009248:	d30c      	bcc.n	8009264 <__copybits+0x36>
 800924a:	1aa3      	subs	r3, r4, r2
 800924c:	3b11      	subs	r3, #17
 800924e:	f023 0303 	bic.w	r3, r3, #3
 8009252:	3211      	adds	r2, #17
 8009254:	42a2      	cmp	r2, r4
 8009256:	bf88      	it	hi
 8009258:	2300      	movhi	r3, #0
 800925a:	4418      	add	r0, r3
 800925c:	2300      	movs	r3, #0
 800925e:	4288      	cmp	r0, r1
 8009260:	d305      	bcc.n	800926e <__copybits+0x40>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f853 6b04 	ldr.w	r6, [r3], #4
 8009268:	f845 6f04 	str.w	r6, [r5, #4]!
 800926c:	e7eb      	b.n	8009246 <__copybits+0x18>
 800926e:	f840 3b04 	str.w	r3, [r0], #4
 8009272:	e7f4      	b.n	800925e <__copybits+0x30>

08009274 <__any_on>:
 8009274:	f100 0214 	add.w	r2, r0, #20
 8009278:	6900      	ldr	r0, [r0, #16]
 800927a:	114b      	asrs	r3, r1, #5
 800927c:	4298      	cmp	r0, r3
 800927e:	b510      	push	{r4, lr}
 8009280:	db11      	blt.n	80092a6 <__any_on+0x32>
 8009282:	dd0a      	ble.n	800929a <__any_on+0x26>
 8009284:	f011 011f 	ands.w	r1, r1, #31
 8009288:	d007      	beq.n	800929a <__any_on+0x26>
 800928a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800928e:	fa24 f001 	lsr.w	r0, r4, r1
 8009292:	fa00 f101 	lsl.w	r1, r0, r1
 8009296:	428c      	cmp	r4, r1
 8009298:	d10b      	bne.n	80092b2 <__any_on+0x3e>
 800929a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800929e:	4293      	cmp	r3, r2
 80092a0:	d803      	bhi.n	80092aa <__any_on+0x36>
 80092a2:	2000      	movs	r0, #0
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	4603      	mov	r3, r0
 80092a8:	e7f7      	b.n	800929a <__any_on+0x26>
 80092aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092ae:	2900      	cmp	r1, #0
 80092b0:	d0f5      	beq.n	800929e <__any_on+0x2a>
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7f6      	b.n	80092a4 <__any_on+0x30>

080092b6 <_calloc_r>:
 80092b6:	b513      	push	{r0, r1, r4, lr}
 80092b8:	434a      	muls	r2, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	9201      	str	r2, [sp, #4]
 80092be:	f000 f859 	bl	8009374 <_malloc_r>
 80092c2:	4604      	mov	r4, r0
 80092c4:	b118      	cbz	r0, 80092ce <_calloc_r+0x18>
 80092c6:	9a01      	ldr	r2, [sp, #4]
 80092c8:	2100      	movs	r1, #0
 80092ca:	f7fc fbc9 	bl	8005a60 <memset>
 80092ce:	4620      	mov	r0, r4
 80092d0:	b002      	add	sp, #8
 80092d2:	bd10      	pop	{r4, pc}

080092d4 <_free_r>:
 80092d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092d6:	2900      	cmp	r1, #0
 80092d8:	d048      	beq.n	800936c <_free_r+0x98>
 80092da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092de:	9001      	str	r0, [sp, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f1a1 0404 	sub.w	r4, r1, #4
 80092e6:	bfb8      	it	lt
 80092e8:	18e4      	addlt	r4, r4, r3
 80092ea:	f000 fa7b 	bl	80097e4 <__malloc_lock>
 80092ee:	4a20      	ldr	r2, [pc, #128]	; (8009370 <_free_r+0x9c>)
 80092f0:	9801      	ldr	r0, [sp, #4]
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	4615      	mov	r5, r2
 80092f6:	b933      	cbnz	r3, 8009306 <_free_r+0x32>
 80092f8:	6063      	str	r3, [r4, #4]
 80092fa:	6014      	str	r4, [r2, #0]
 80092fc:	b003      	add	sp, #12
 80092fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009302:	f000 ba75 	b.w	80097f0 <__malloc_unlock>
 8009306:	42a3      	cmp	r3, r4
 8009308:	d90b      	bls.n	8009322 <_free_r+0x4e>
 800930a:	6821      	ldr	r1, [r4, #0]
 800930c:	1862      	adds	r2, r4, r1
 800930e:	4293      	cmp	r3, r2
 8009310:	bf04      	itt	eq
 8009312:	681a      	ldreq	r2, [r3, #0]
 8009314:	685b      	ldreq	r3, [r3, #4]
 8009316:	6063      	str	r3, [r4, #4]
 8009318:	bf04      	itt	eq
 800931a:	1852      	addeq	r2, r2, r1
 800931c:	6022      	streq	r2, [r4, #0]
 800931e:	602c      	str	r4, [r5, #0]
 8009320:	e7ec      	b.n	80092fc <_free_r+0x28>
 8009322:	461a      	mov	r2, r3
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	b10b      	cbz	r3, 800932c <_free_r+0x58>
 8009328:	42a3      	cmp	r3, r4
 800932a:	d9fa      	bls.n	8009322 <_free_r+0x4e>
 800932c:	6811      	ldr	r1, [r2, #0]
 800932e:	1855      	adds	r5, r2, r1
 8009330:	42a5      	cmp	r5, r4
 8009332:	d10b      	bne.n	800934c <_free_r+0x78>
 8009334:	6824      	ldr	r4, [r4, #0]
 8009336:	4421      	add	r1, r4
 8009338:	1854      	adds	r4, r2, r1
 800933a:	42a3      	cmp	r3, r4
 800933c:	6011      	str	r1, [r2, #0]
 800933e:	d1dd      	bne.n	80092fc <_free_r+0x28>
 8009340:	681c      	ldr	r4, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	6053      	str	r3, [r2, #4]
 8009346:	4421      	add	r1, r4
 8009348:	6011      	str	r1, [r2, #0]
 800934a:	e7d7      	b.n	80092fc <_free_r+0x28>
 800934c:	d902      	bls.n	8009354 <_free_r+0x80>
 800934e:	230c      	movs	r3, #12
 8009350:	6003      	str	r3, [r0, #0]
 8009352:	e7d3      	b.n	80092fc <_free_r+0x28>
 8009354:	6825      	ldr	r5, [r4, #0]
 8009356:	1961      	adds	r1, r4, r5
 8009358:	428b      	cmp	r3, r1
 800935a:	bf04      	itt	eq
 800935c:	6819      	ldreq	r1, [r3, #0]
 800935e:	685b      	ldreq	r3, [r3, #4]
 8009360:	6063      	str	r3, [r4, #4]
 8009362:	bf04      	itt	eq
 8009364:	1949      	addeq	r1, r1, r5
 8009366:	6021      	streq	r1, [r4, #0]
 8009368:	6054      	str	r4, [r2, #4]
 800936a:	e7c7      	b.n	80092fc <_free_r+0x28>
 800936c:	b003      	add	sp, #12
 800936e:	bd30      	pop	{r4, r5, pc}
 8009370:	20000210 	.word	0x20000210

08009374 <_malloc_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	1ccd      	adds	r5, r1, #3
 8009378:	f025 0503 	bic.w	r5, r5, #3
 800937c:	3508      	adds	r5, #8
 800937e:	2d0c      	cmp	r5, #12
 8009380:	bf38      	it	cc
 8009382:	250c      	movcc	r5, #12
 8009384:	2d00      	cmp	r5, #0
 8009386:	4606      	mov	r6, r0
 8009388:	db01      	blt.n	800938e <_malloc_r+0x1a>
 800938a:	42a9      	cmp	r1, r5
 800938c:	d903      	bls.n	8009396 <_malloc_r+0x22>
 800938e:	230c      	movs	r3, #12
 8009390:	6033      	str	r3, [r6, #0]
 8009392:	2000      	movs	r0, #0
 8009394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009396:	f000 fa25 	bl	80097e4 <__malloc_lock>
 800939a:	4921      	ldr	r1, [pc, #132]	; (8009420 <_malloc_r+0xac>)
 800939c:	680a      	ldr	r2, [r1, #0]
 800939e:	4614      	mov	r4, r2
 80093a0:	b99c      	cbnz	r4, 80093ca <_malloc_r+0x56>
 80093a2:	4f20      	ldr	r7, [pc, #128]	; (8009424 <_malloc_r+0xb0>)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	b923      	cbnz	r3, 80093b2 <_malloc_r+0x3e>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f9a0 	bl	80096f0 <_sbrk_r>
 80093b0:	6038      	str	r0, [r7, #0]
 80093b2:	4629      	mov	r1, r5
 80093b4:	4630      	mov	r0, r6
 80093b6:	f000 f99b 	bl	80096f0 <_sbrk_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d123      	bne.n	8009406 <_malloc_r+0x92>
 80093be:	230c      	movs	r3, #12
 80093c0:	6033      	str	r3, [r6, #0]
 80093c2:	4630      	mov	r0, r6
 80093c4:	f000 fa14 	bl	80097f0 <__malloc_unlock>
 80093c8:	e7e3      	b.n	8009392 <_malloc_r+0x1e>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	1b5b      	subs	r3, r3, r5
 80093ce:	d417      	bmi.n	8009400 <_malloc_r+0x8c>
 80093d0:	2b0b      	cmp	r3, #11
 80093d2:	d903      	bls.n	80093dc <_malloc_r+0x68>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	441c      	add	r4, r3
 80093d8:	6025      	str	r5, [r4, #0]
 80093da:	e004      	b.n	80093e6 <_malloc_r+0x72>
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	42a2      	cmp	r2, r4
 80093e0:	bf0c      	ite	eq
 80093e2:	600b      	streq	r3, [r1, #0]
 80093e4:	6053      	strne	r3, [r2, #4]
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 fa02 	bl	80097f0 <__malloc_unlock>
 80093ec:	f104 000b 	add.w	r0, r4, #11
 80093f0:	1d23      	adds	r3, r4, #4
 80093f2:	f020 0007 	bic.w	r0, r0, #7
 80093f6:	1ac2      	subs	r2, r0, r3
 80093f8:	d0cc      	beq.n	8009394 <_malloc_r+0x20>
 80093fa:	1a1b      	subs	r3, r3, r0
 80093fc:	50a3      	str	r3, [r4, r2]
 80093fe:	e7c9      	b.n	8009394 <_malloc_r+0x20>
 8009400:	4622      	mov	r2, r4
 8009402:	6864      	ldr	r4, [r4, #4]
 8009404:	e7cc      	b.n	80093a0 <_malloc_r+0x2c>
 8009406:	1cc4      	adds	r4, r0, #3
 8009408:	f024 0403 	bic.w	r4, r4, #3
 800940c:	42a0      	cmp	r0, r4
 800940e:	d0e3      	beq.n	80093d8 <_malloc_r+0x64>
 8009410:	1a21      	subs	r1, r4, r0
 8009412:	4630      	mov	r0, r6
 8009414:	f000 f96c 	bl	80096f0 <_sbrk_r>
 8009418:	3001      	adds	r0, #1
 800941a:	d1dd      	bne.n	80093d8 <_malloc_r+0x64>
 800941c:	e7cf      	b.n	80093be <_malloc_r+0x4a>
 800941e:	bf00      	nop
 8009420:	20000210 	.word	0x20000210
 8009424:	20000214 	.word	0x20000214

08009428 <__ssputs_r>:
 8009428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	688e      	ldr	r6, [r1, #8]
 800942e:	429e      	cmp	r6, r3
 8009430:	4682      	mov	sl, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4690      	mov	r8, r2
 8009436:	461f      	mov	r7, r3
 8009438:	d838      	bhi.n	80094ac <__ssputs_r+0x84>
 800943a:	898a      	ldrh	r2, [r1, #12]
 800943c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009440:	d032      	beq.n	80094a8 <__ssputs_r+0x80>
 8009442:	6825      	ldr	r5, [r4, #0]
 8009444:	6909      	ldr	r1, [r1, #16]
 8009446:	eba5 0901 	sub.w	r9, r5, r1
 800944a:	6965      	ldr	r5, [r4, #20]
 800944c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009454:	3301      	adds	r3, #1
 8009456:	444b      	add	r3, r9
 8009458:	106d      	asrs	r5, r5, #1
 800945a:	429d      	cmp	r5, r3
 800945c:	bf38      	it	cc
 800945e:	461d      	movcc	r5, r3
 8009460:	0553      	lsls	r3, r2, #21
 8009462:	d531      	bpl.n	80094c8 <__ssputs_r+0xa0>
 8009464:	4629      	mov	r1, r5
 8009466:	f7ff ff85 	bl	8009374 <_malloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	b950      	cbnz	r0, 8009484 <__ssputs_r+0x5c>
 800946e:	230c      	movs	r3, #12
 8009470:	f8ca 3000 	str.w	r3, [sl]
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009484:	6921      	ldr	r1, [r4, #16]
 8009486:	464a      	mov	r2, r9
 8009488:	f7ff fa4c 	bl	8008924 <memcpy>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	6126      	str	r6, [r4, #16]
 800949a:	6165      	str	r5, [r4, #20]
 800949c:	444e      	add	r6, r9
 800949e:	eba5 0509 	sub.w	r5, r5, r9
 80094a2:	6026      	str	r6, [r4, #0]
 80094a4:	60a5      	str	r5, [r4, #8]
 80094a6:	463e      	mov	r6, r7
 80094a8:	42be      	cmp	r6, r7
 80094aa:	d900      	bls.n	80094ae <__ssputs_r+0x86>
 80094ac:	463e      	mov	r6, r7
 80094ae:	4632      	mov	r2, r6
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	4641      	mov	r1, r8
 80094b4:	f000 f97c 	bl	80097b0 <memmove>
 80094b8:	68a3      	ldr	r3, [r4, #8]
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	1b9b      	subs	r3, r3, r6
 80094be:	4432      	add	r2, r6
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7db      	b.n	8009480 <__ssputs_r+0x58>
 80094c8:	462a      	mov	r2, r5
 80094ca:	f000 f997 	bl	80097fc <_realloc_r>
 80094ce:	4606      	mov	r6, r0
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d1e1      	bne.n	8009498 <__ssputs_r+0x70>
 80094d4:	6921      	ldr	r1, [r4, #16]
 80094d6:	4650      	mov	r0, sl
 80094d8:	f7ff fefc 	bl	80092d4 <_free_r>
 80094dc:	e7c7      	b.n	800946e <__ssputs_r+0x46>
	...

080094e0 <_svfiprintf_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4698      	mov	r8, r3
 80094e6:	898b      	ldrh	r3, [r1, #12]
 80094e8:	061b      	lsls	r3, r3, #24
 80094ea:	b09d      	sub	sp, #116	; 0x74
 80094ec:	4607      	mov	r7, r0
 80094ee:	460d      	mov	r5, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	d50e      	bpl.n	8009512 <_svfiprintf_r+0x32>
 80094f4:	690b      	ldr	r3, [r1, #16]
 80094f6:	b963      	cbnz	r3, 8009512 <_svfiprintf_r+0x32>
 80094f8:	2140      	movs	r1, #64	; 0x40
 80094fa:	f7ff ff3b 	bl	8009374 <_malloc_r>
 80094fe:	6028      	str	r0, [r5, #0]
 8009500:	6128      	str	r0, [r5, #16]
 8009502:	b920      	cbnz	r0, 800950e <_svfiprintf_r+0x2e>
 8009504:	230c      	movs	r3, #12
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	e0d1      	b.n	80096b2 <_svfiprintf_r+0x1d2>
 800950e:	2340      	movs	r3, #64	; 0x40
 8009510:	616b      	str	r3, [r5, #20]
 8009512:	2300      	movs	r3, #0
 8009514:	9309      	str	r3, [sp, #36]	; 0x24
 8009516:	2320      	movs	r3, #32
 8009518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009520:	2330      	movs	r3, #48	; 0x30
 8009522:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096cc <_svfiprintf_r+0x1ec>
 8009526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952a:	f04f 0901 	mov.w	r9, #1
 800952e:	4623      	mov	r3, r4
 8009530:	469a      	mov	sl, r3
 8009532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009536:	b10a      	cbz	r2, 800953c <_svfiprintf_r+0x5c>
 8009538:	2a25      	cmp	r2, #37	; 0x25
 800953a:	d1f9      	bne.n	8009530 <_svfiprintf_r+0x50>
 800953c:	ebba 0b04 	subs.w	fp, sl, r4
 8009540:	d00b      	beq.n	800955a <_svfiprintf_r+0x7a>
 8009542:	465b      	mov	r3, fp
 8009544:	4622      	mov	r2, r4
 8009546:	4629      	mov	r1, r5
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ff6d 	bl	8009428 <__ssputs_r>
 800954e:	3001      	adds	r0, #1
 8009550:	f000 80aa 	beq.w	80096a8 <_svfiprintf_r+0x1c8>
 8009554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009556:	445a      	add	r2, fp
 8009558:	9209      	str	r2, [sp, #36]	; 0x24
 800955a:	f89a 3000 	ldrb.w	r3, [sl]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 80a2 	beq.w	80096a8 <_svfiprintf_r+0x1c8>
 8009564:	2300      	movs	r3, #0
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956e:	f10a 0a01 	add.w	sl, sl, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800957a:	931a      	str	r3, [sp, #104]	; 0x68
 800957c:	4654      	mov	r4, sl
 800957e:	2205      	movs	r2, #5
 8009580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009584:	4851      	ldr	r0, [pc, #324]	; (80096cc <_svfiprintf_r+0x1ec>)
 8009586:	f7f6 fe2b 	bl	80001e0 <memchr>
 800958a:	9a04      	ldr	r2, [sp, #16]
 800958c:	b9d8      	cbnz	r0, 80095c6 <_svfiprintf_r+0xe6>
 800958e:	06d0      	lsls	r0, r2, #27
 8009590:	bf44      	itt	mi
 8009592:	2320      	movmi	r3, #32
 8009594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009598:	0711      	lsls	r1, r2, #28
 800959a:	bf44      	itt	mi
 800959c:	232b      	movmi	r3, #43	; 0x2b
 800959e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a2:	f89a 3000 	ldrb.w	r3, [sl]
 80095a6:	2b2a      	cmp	r3, #42	; 0x2a
 80095a8:	d015      	beq.n	80095d6 <_svfiprintf_r+0xf6>
 80095aa:	9a07      	ldr	r2, [sp, #28]
 80095ac:	4654      	mov	r4, sl
 80095ae:	2000      	movs	r0, #0
 80095b0:	f04f 0c0a 	mov.w	ip, #10
 80095b4:	4621      	mov	r1, r4
 80095b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ba:	3b30      	subs	r3, #48	; 0x30
 80095bc:	2b09      	cmp	r3, #9
 80095be:	d94e      	bls.n	800965e <_svfiprintf_r+0x17e>
 80095c0:	b1b0      	cbz	r0, 80095f0 <_svfiprintf_r+0x110>
 80095c2:	9207      	str	r2, [sp, #28]
 80095c4:	e014      	b.n	80095f0 <_svfiprintf_r+0x110>
 80095c6:	eba0 0308 	sub.w	r3, r0, r8
 80095ca:	fa09 f303 	lsl.w	r3, r9, r3
 80095ce:	4313      	orrs	r3, r2
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	46a2      	mov	sl, r4
 80095d4:	e7d2      	b.n	800957c <_svfiprintf_r+0x9c>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	1d19      	adds	r1, r3, #4
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	9103      	str	r1, [sp, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bfbb      	ittet	lt
 80095e2:	425b      	neglt	r3, r3
 80095e4:	f042 0202 	orrlt.w	r2, r2, #2
 80095e8:	9307      	strge	r3, [sp, #28]
 80095ea:	9307      	strlt	r3, [sp, #28]
 80095ec:	bfb8      	it	lt
 80095ee:	9204      	strlt	r2, [sp, #16]
 80095f0:	7823      	ldrb	r3, [r4, #0]
 80095f2:	2b2e      	cmp	r3, #46	; 0x2e
 80095f4:	d10c      	bne.n	8009610 <_svfiprintf_r+0x130>
 80095f6:	7863      	ldrb	r3, [r4, #1]
 80095f8:	2b2a      	cmp	r3, #42	; 0x2a
 80095fa:	d135      	bne.n	8009668 <_svfiprintf_r+0x188>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	9203      	str	r2, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bfb8      	it	lt
 8009608:	f04f 33ff 	movlt.w	r3, #4294967295
 800960c:	3402      	adds	r4, #2
 800960e:	9305      	str	r3, [sp, #20]
 8009610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096dc <_svfiprintf_r+0x1fc>
 8009614:	7821      	ldrb	r1, [r4, #0]
 8009616:	2203      	movs	r2, #3
 8009618:	4650      	mov	r0, sl
 800961a:	f7f6 fde1 	bl	80001e0 <memchr>
 800961e:	b140      	cbz	r0, 8009632 <_svfiprintf_r+0x152>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	eba0 000a 	sub.w	r0, r0, sl
 8009626:	fa03 f000 	lsl.w	r0, r3, r0
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	4303      	orrs	r3, r0
 800962e:	3401      	adds	r4, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009636:	4826      	ldr	r0, [pc, #152]	; (80096d0 <_svfiprintf_r+0x1f0>)
 8009638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800963c:	2206      	movs	r2, #6
 800963e:	f7f6 fdcf 	bl	80001e0 <memchr>
 8009642:	2800      	cmp	r0, #0
 8009644:	d038      	beq.n	80096b8 <_svfiprintf_r+0x1d8>
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <_svfiprintf_r+0x1f4>)
 8009648:	bb1b      	cbnz	r3, 8009692 <_svfiprintf_r+0x1b2>
 800964a:	9b03      	ldr	r3, [sp, #12]
 800964c:	3307      	adds	r3, #7
 800964e:	f023 0307 	bic.w	r3, r3, #7
 8009652:	3308      	adds	r3, #8
 8009654:	9303      	str	r3, [sp, #12]
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	4433      	add	r3, r6
 800965a:	9309      	str	r3, [sp, #36]	; 0x24
 800965c:	e767      	b.n	800952e <_svfiprintf_r+0x4e>
 800965e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009662:	460c      	mov	r4, r1
 8009664:	2001      	movs	r0, #1
 8009666:	e7a5      	b.n	80095b4 <_svfiprintf_r+0xd4>
 8009668:	2300      	movs	r3, #0
 800966a:	3401      	adds	r4, #1
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	4619      	mov	r1, r3
 8009670:	f04f 0c0a 	mov.w	ip, #10
 8009674:	4620      	mov	r0, r4
 8009676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967a:	3a30      	subs	r2, #48	; 0x30
 800967c:	2a09      	cmp	r2, #9
 800967e:	d903      	bls.n	8009688 <_svfiprintf_r+0x1a8>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0c5      	beq.n	8009610 <_svfiprintf_r+0x130>
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	e7c3      	b.n	8009610 <_svfiprintf_r+0x130>
 8009688:	fb0c 2101 	mla	r1, ip, r1, r2
 800968c:	4604      	mov	r4, r0
 800968e:	2301      	movs	r3, #1
 8009690:	e7f0      	b.n	8009674 <_svfiprintf_r+0x194>
 8009692:	ab03      	add	r3, sp, #12
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	462a      	mov	r2, r5
 8009698:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <_svfiprintf_r+0x1f8>)
 800969a:	a904      	add	r1, sp, #16
 800969c:	4638      	mov	r0, r7
 800969e:	f7fc fa87 	bl	8005bb0 <_printf_float>
 80096a2:	1c42      	adds	r2, r0, #1
 80096a4:	4606      	mov	r6, r0
 80096a6:	d1d6      	bne.n	8009656 <_svfiprintf_r+0x176>
 80096a8:	89ab      	ldrh	r3, [r5, #12]
 80096aa:	065b      	lsls	r3, r3, #25
 80096ac:	f53f af2c 	bmi.w	8009508 <_svfiprintf_r+0x28>
 80096b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096b2:	b01d      	add	sp, #116	; 0x74
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	ab03      	add	r3, sp, #12
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	462a      	mov	r2, r5
 80096be:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <_svfiprintf_r+0x1f8>)
 80096c0:	a904      	add	r1, sp, #16
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7fc fd18 	bl	80060f8 <_printf_i>
 80096c8:	e7eb      	b.n	80096a2 <_svfiprintf_r+0x1c2>
 80096ca:	bf00      	nop
 80096cc:	0800a744 	.word	0x0800a744
 80096d0:	0800a74e 	.word	0x0800a74e
 80096d4:	08005bb1 	.word	0x08005bb1
 80096d8:	08009429 	.word	0x08009429
 80096dc:	0800a74a 	.word	0x0800a74a

080096e0 <nan>:
 80096e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096e8 <nan+0x8>
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	00000000 	.word	0x00000000
 80096ec:	7ff80000 	.word	0x7ff80000

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 fa46 	bl	8001b8c <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	200004bc 	.word	0x200004bc

08009710 <strncmp>:
 8009710:	b510      	push	{r4, lr}
 8009712:	b16a      	cbz	r2, 8009730 <strncmp+0x20>
 8009714:	3901      	subs	r1, #1
 8009716:	1884      	adds	r4, r0, r2
 8009718:	f810 3b01 	ldrb.w	r3, [r0], #1
 800971c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009720:	4293      	cmp	r3, r2
 8009722:	d103      	bne.n	800972c <strncmp+0x1c>
 8009724:	42a0      	cmp	r0, r4
 8009726:	d001      	beq.n	800972c <strncmp+0x1c>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f5      	bne.n	8009718 <strncmp+0x8>
 800972c:	1a98      	subs	r0, r3, r2
 800972e:	bd10      	pop	{r4, pc}
 8009730:	4610      	mov	r0, r2
 8009732:	e7fc      	b.n	800972e <strncmp+0x1e>

08009734 <__ascii_wctomb>:
 8009734:	b149      	cbz	r1, 800974a <__ascii_wctomb+0x16>
 8009736:	2aff      	cmp	r2, #255	; 0xff
 8009738:	bf85      	ittet	hi
 800973a:	238a      	movhi	r3, #138	; 0x8a
 800973c:	6003      	strhi	r3, [r0, #0]
 800973e:	700a      	strbls	r2, [r1, #0]
 8009740:	f04f 30ff 	movhi.w	r0, #4294967295
 8009744:	bf98      	it	ls
 8009746:	2001      	movls	r0, #1
 8009748:	4770      	bx	lr
 800974a:	4608      	mov	r0, r1
 800974c:	4770      	bx	lr
	...

08009750 <__assert_func>:
 8009750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009752:	4614      	mov	r4, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__assert_func+0x2c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4605      	mov	r5, r0
 800975c:	68d8      	ldr	r0, [r3, #12]
 800975e:	b14c      	cbz	r4, 8009774 <__assert_func+0x24>
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <__assert_func+0x30>)
 8009762:	9100      	str	r1, [sp, #0]
 8009764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009768:	4906      	ldr	r1, [pc, #24]	; (8009784 <__assert_func+0x34>)
 800976a:	462b      	mov	r3, r5
 800976c:	f000 f80e 	bl	800978c <fiprintf>
 8009770:	f000 fa84 	bl	8009c7c <abort>
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <__assert_func+0x38>)
 8009776:	461c      	mov	r4, r3
 8009778:	e7f3      	b.n	8009762 <__assert_func+0x12>
 800977a:	bf00      	nop
 800977c:	2000000c 	.word	0x2000000c
 8009780:	0800a755 	.word	0x0800a755
 8009784:	0800a762 	.word	0x0800a762
 8009788:	0800a790 	.word	0x0800a790

0800978c <fiprintf>:
 800978c:	b40e      	push	{r1, r2, r3}
 800978e:	b503      	push	{r0, r1, lr}
 8009790:	4601      	mov	r1, r0
 8009792:	ab03      	add	r3, sp, #12
 8009794:	4805      	ldr	r0, [pc, #20]	; (80097ac <fiprintf+0x20>)
 8009796:	f853 2b04 	ldr.w	r2, [r3], #4
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	f000 f87d 	bl	800989c <_vfiprintf_r>
 80097a2:	b002      	add	sp, #8
 80097a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a8:	b003      	add	sp, #12
 80097aa:	4770      	bx	lr
 80097ac:	2000000c 	.word	0x2000000c

080097b0 <memmove>:
 80097b0:	4288      	cmp	r0, r1
 80097b2:	b510      	push	{r4, lr}
 80097b4:	eb01 0402 	add.w	r4, r1, r2
 80097b8:	d902      	bls.n	80097c0 <memmove+0x10>
 80097ba:	4284      	cmp	r4, r0
 80097bc:	4623      	mov	r3, r4
 80097be:	d807      	bhi.n	80097d0 <memmove+0x20>
 80097c0:	1e43      	subs	r3, r0, #1
 80097c2:	42a1      	cmp	r1, r4
 80097c4:	d008      	beq.n	80097d8 <memmove+0x28>
 80097c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ce:	e7f8      	b.n	80097c2 <memmove+0x12>
 80097d0:	4402      	add	r2, r0
 80097d2:	4601      	mov	r1, r0
 80097d4:	428a      	cmp	r2, r1
 80097d6:	d100      	bne.n	80097da <memmove+0x2a>
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097e2:	e7f7      	b.n	80097d4 <memmove+0x24>

080097e4 <__malloc_lock>:
 80097e4:	4801      	ldr	r0, [pc, #4]	; (80097ec <__malloc_lock+0x8>)
 80097e6:	f000 bc09 	b.w	8009ffc <__retarget_lock_acquire_recursive>
 80097ea:	bf00      	nop
 80097ec:	200004c4 	.word	0x200004c4

080097f0 <__malloc_unlock>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__malloc_unlock+0x8>)
 80097f2:	f000 bc04 	b.w	8009ffe <__retarget_lock_release_recursive>
 80097f6:	bf00      	nop
 80097f8:	200004c4 	.word	0x200004c4

080097fc <_realloc_r>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	4607      	mov	r7, r0
 8009800:	4614      	mov	r4, r2
 8009802:	460e      	mov	r6, r1
 8009804:	b921      	cbnz	r1, 8009810 <_realloc_r+0x14>
 8009806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800980a:	4611      	mov	r1, r2
 800980c:	f7ff bdb2 	b.w	8009374 <_malloc_r>
 8009810:	b922      	cbnz	r2, 800981c <_realloc_r+0x20>
 8009812:	f7ff fd5f 	bl	80092d4 <_free_r>
 8009816:	4625      	mov	r5, r4
 8009818:	4628      	mov	r0, r5
 800981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981c:	f000 fc54 	bl	800a0c8 <_malloc_usable_size_r>
 8009820:	42a0      	cmp	r0, r4
 8009822:	d20f      	bcs.n	8009844 <_realloc_r+0x48>
 8009824:	4621      	mov	r1, r4
 8009826:	4638      	mov	r0, r7
 8009828:	f7ff fda4 	bl	8009374 <_malloc_r>
 800982c:	4605      	mov	r5, r0
 800982e:	2800      	cmp	r0, #0
 8009830:	d0f2      	beq.n	8009818 <_realloc_r+0x1c>
 8009832:	4631      	mov	r1, r6
 8009834:	4622      	mov	r2, r4
 8009836:	f7ff f875 	bl	8008924 <memcpy>
 800983a:	4631      	mov	r1, r6
 800983c:	4638      	mov	r0, r7
 800983e:	f7ff fd49 	bl	80092d4 <_free_r>
 8009842:	e7e9      	b.n	8009818 <_realloc_r+0x1c>
 8009844:	4635      	mov	r5, r6
 8009846:	e7e7      	b.n	8009818 <_realloc_r+0x1c>

08009848 <__sfputc_r>:
 8009848:	6893      	ldr	r3, [r2, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	b410      	push	{r4}
 8009850:	6093      	str	r3, [r2, #8]
 8009852:	da08      	bge.n	8009866 <__sfputc_r+0x1e>
 8009854:	6994      	ldr	r4, [r2, #24]
 8009856:	42a3      	cmp	r3, r4
 8009858:	db01      	blt.n	800985e <__sfputc_r+0x16>
 800985a:	290a      	cmp	r1, #10
 800985c:	d103      	bne.n	8009866 <__sfputc_r+0x1e>
 800985e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009862:	f000 b94b 	b.w	8009afc <__swbuf_r>
 8009866:	6813      	ldr	r3, [r2, #0]
 8009868:	1c58      	adds	r0, r3, #1
 800986a:	6010      	str	r0, [r2, #0]
 800986c:	7019      	strb	r1, [r3, #0]
 800986e:	4608      	mov	r0, r1
 8009870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009874:	4770      	bx	lr

08009876 <__sfputs_r>:
 8009876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009878:	4606      	mov	r6, r0
 800987a:	460f      	mov	r7, r1
 800987c:	4614      	mov	r4, r2
 800987e:	18d5      	adds	r5, r2, r3
 8009880:	42ac      	cmp	r4, r5
 8009882:	d101      	bne.n	8009888 <__sfputs_r+0x12>
 8009884:	2000      	movs	r0, #0
 8009886:	e007      	b.n	8009898 <__sfputs_r+0x22>
 8009888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988c:	463a      	mov	r2, r7
 800988e:	4630      	mov	r0, r6
 8009890:	f7ff ffda 	bl	8009848 <__sfputc_r>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d1f3      	bne.n	8009880 <__sfputs_r+0xa>
 8009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800989c <_vfiprintf_r>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	460d      	mov	r5, r1
 80098a2:	b09d      	sub	sp, #116	; 0x74
 80098a4:	4614      	mov	r4, r2
 80098a6:	4698      	mov	r8, r3
 80098a8:	4606      	mov	r6, r0
 80098aa:	b118      	cbz	r0, 80098b4 <_vfiprintf_r+0x18>
 80098ac:	6983      	ldr	r3, [r0, #24]
 80098ae:	b90b      	cbnz	r3, 80098b4 <_vfiprintf_r+0x18>
 80098b0:	f000 fb06 	bl	8009ec0 <__sinit>
 80098b4:	4b89      	ldr	r3, [pc, #548]	; (8009adc <_vfiprintf_r+0x240>)
 80098b6:	429d      	cmp	r5, r3
 80098b8:	d11b      	bne.n	80098f2 <_vfiprintf_r+0x56>
 80098ba:	6875      	ldr	r5, [r6, #4]
 80098bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098be:	07d9      	lsls	r1, r3, #31
 80098c0:	d405      	bmi.n	80098ce <_vfiprintf_r+0x32>
 80098c2:	89ab      	ldrh	r3, [r5, #12]
 80098c4:	059a      	lsls	r2, r3, #22
 80098c6:	d402      	bmi.n	80098ce <_vfiprintf_r+0x32>
 80098c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ca:	f000 fb97 	bl	8009ffc <__retarget_lock_acquire_recursive>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	071b      	lsls	r3, r3, #28
 80098d2:	d501      	bpl.n	80098d8 <_vfiprintf_r+0x3c>
 80098d4:	692b      	ldr	r3, [r5, #16]
 80098d6:	b9eb      	cbnz	r3, 8009914 <_vfiprintf_r+0x78>
 80098d8:	4629      	mov	r1, r5
 80098da:	4630      	mov	r0, r6
 80098dc:	f000 f960 	bl	8009ba0 <__swsetup_r>
 80098e0:	b1c0      	cbz	r0, 8009914 <_vfiprintf_r+0x78>
 80098e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e4:	07dc      	lsls	r4, r3, #31
 80098e6:	d50e      	bpl.n	8009906 <_vfiprintf_r+0x6a>
 80098e8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ec:	b01d      	add	sp, #116	; 0x74
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	4b7b      	ldr	r3, [pc, #492]	; (8009ae0 <_vfiprintf_r+0x244>)
 80098f4:	429d      	cmp	r5, r3
 80098f6:	d101      	bne.n	80098fc <_vfiprintf_r+0x60>
 80098f8:	68b5      	ldr	r5, [r6, #8]
 80098fa:	e7df      	b.n	80098bc <_vfiprintf_r+0x20>
 80098fc:	4b79      	ldr	r3, [pc, #484]	; (8009ae4 <_vfiprintf_r+0x248>)
 80098fe:	429d      	cmp	r5, r3
 8009900:	bf08      	it	eq
 8009902:	68f5      	ldreq	r5, [r6, #12]
 8009904:	e7da      	b.n	80098bc <_vfiprintf_r+0x20>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	0598      	lsls	r0, r3, #22
 800990a:	d4ed      	bmi.n	80098e8 <_vfiprintf_r+0x4c>
 800990c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990e:	f000 fb76 	bl	8009ffe <__retarget_lock_release_recursive>
 8009912:	e7e9      	b.n	80098e8 <_vfiprintf_r+0x4c>
 8009914:	2300      	movs	r3, #0
 8009916:	9309      	str	r3, [sp, #36]	; 0x24
 8009918:	2320      	movs	r3, #32
 800991a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800991e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009922:	2330      	movs	r3, #48	; 0x30
 8009924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ae8 <_vfiprintf_r+0x24c>
 8009928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800992c:	f04f 0901 	mov.w	r9, #1
 8009930:	4623      	mov	r3, r4
 8009932:	469a      	mov	sl, r3
 8009934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009938:	b10a      	cbz	r2, 800993e <_vfiprintf_r+0xa2>
 800993a:	2a25      	cmp	r2, #37	; 0x25
 800993c:	d1f9      	bne.n	8009932 <_vfiprintf_r+0x96>
 800993e:	ebba 0b04 	subs.w	fp, sl, r4
 8009942:	d00b      	beq.n	800995c <_vfiprintf_r+0xc0>
 8009944:	465b      	mov	r3, fp
 8009946:	4622      	mov	r2, r4
 8009948:	4629      	mov	r1, r5
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff ff93 	bl	8009876 <__sfputs_r>
 8009950:	3001      	adds	r0, #1
 8009952:	f000 80aa 	beq.w	8009aaa <_vfiprintf_r+0x20e>
 8009956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009958:	445a      	add	r2, fp
 800995a:	9209      	str	r2, [sp, #36]	; 0x24
 800995c:	f89a 3000 	ldrb.w	r3, [sl]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80a2 	beq.w	8009aaa <_vfiprintf_r+0x20e>
 8009966:	2300      	movs	r3, #0
 8009968:	f04f 32ff 	mov.w	r2, #4294967295
 800996c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009970:	f10a 0a01 	add.w	sl, sl, #1
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800997c:	931a      	str	r3, [sp, #104]	; 0x68
 800997e:	4654      	mov	r4, sl
 8009980:	2205      	movs	r2, #5
 8009982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009986:	4858      	ldr	r0, [pc, #352]	; (8009ae8 <_vfiprintf_r+0x24c>)
 8009988:	f7f6 fc2a 	bl	80001e0 <memchr>
 800998c:	9a04      	ldr	r2, [sp, #16]
 800998e:	b9d8      	cbnz	r0, 80099c8 <_vfiprintf_r+0x12c>
 8009990:	06d1      	lsls	r1, r2, #27
 8009992:	bf44      	itt	mi
 8009994:	2320      	movmi	r3, #32
 8009996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999a:	0713      	lsls	r3, r2, #28
 800999c:	bf44      	itt	mi
 800999e:	232b      	movmi	r3, #43	; 0x2b
 80099a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a4:	f89a 3000 	ldrb.w	r3, [sl]
 80099a8:	2b2a      	cmp	r3, #42	; 0x2a
 80099aa:	d015      	beq.n	80099d8 <_vfiprintf_r+0x13c>
 80099ac:	9a07      	ldr	r2, [sp, #28]
 80099ae:	4654      	mov	r4, sl
 80099b0:	2000      	movs	r0, #0
 80099b2:	f04f 0c0a 	mov.w	ip, #10
 80099b6:	4621      	mov	r1, r4
 80099b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099bc:	3b30      	subs	r3, #48	; 0x30
 80099be:	2b09      	cmp	r3, #9
 80099c0:	d94e      	bls.n	8009a60 <_vfiprintf_r+0x1c4>
 80099c2:	b1b0      	cbz	r0, 80099f2 <_vfiprintf_r+0x156>
 80099c4:	9207      	str	r2, [sp, #28]
 80099c6:	e014      	b.n	80099f2 <_vfiprintf_r+0x156>
 80099c8:	eba0 0308 	sub.w	r3, r0, r8
 80099cc:	fa09 f303 	lsl.w	r3, r9, r3
 80099d0:	4313      	orrs	r3, r2
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	46a2      	mov	sl, r4
 80099d6:	e7d2      	b.n	800997e <_vfiprintf_r+0xe2>
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	1d19      	adds	r1, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfbb      	ittet	lt
 80099e4:	425b      	neglt	r3, r3
 80099e6:	f042 0202 	orrlt.w	r2, r2, #2
 80099ea:	9307      	strge	r3, [sp, #28]
 80099ec:	9307      	strlt	r3, [sp, #28]
 80099ee:	bfb8      	it	lt
 80099f0:	9204      	strlt	r2, [sp, #16]
 80099f2:	7823      	ldrb	r3, [r4, #0]
 80099f4:	2b2e      	cmp	r3, #46	; 0x2e
 80099f6:	d10c      	bne.n	8009a12 <_vfiprintf_r+0x176>
 80099f8:	7863      	ldrb	r3, [r4, #1]
 80099fa:	2b2a      	cmp	r3, #42	; 0x2a
 80099fc:	d135      	bne.n	8009a6a <_vfiprintf_r+0x1ce>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	1d1a      	adds	r2, r3, #4
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	9203      	str	r2, [sp, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bfb8      	it	lt
 8009a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a0e:	3402      	adds	r4, #2
 8009a10:	9305      	str	r3, [sp, #20]
 8009a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009af8 <_vfiprintf_r+0x25c>
 8009a16:	7821      	ldrb	r1, [r4, #0]
 8009a18:	2203      	movs	r2, #3
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	f7f6 fbe0 	bl	80001e0 <memchr>
 8009a20:	b140      	cbz	r0, 8009a34 <_vfiprintf_r+0x198>
 8009a22:	2340      	movs	r3, #64	; 0x40
 8009a24:	eba0 000a 	sub.w	r0, r0, sl
 8009a28:	fa03 f000 	lsl.w	r0, r3, r0
 8009a2c:	9b04      	ldr	r3, [sp, #16]
 8009a2e:	4303      	orrs	r3, r0
 8009a30:	3401      	adds	r4, #1
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a38:	482c      	ldr	r0, [pc, #176]	; (8009aec <_vfiprintf_r+0x250>)
 8009a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a3e:	2206      	movs	r2, #6
 8009a40:	f7f6 fbce 	bl	80001e0 <memchr>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d03f      	beq.n	8009ac8 <_vfiprintf_r+0x22c>
 8009a48:	4b29      	ldr	r3, [pc, #164]	; (8009af0 <_vfiprintf_r+0x254>)
 8009a4a:	bb1b      	cbnz	r3, 8009a94 <_vfiprintf_r+0x1f8>
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	3307      	adds	r3, #7
 8009a50:	f023 0307 	bic.w	r3, r3, #7
 8009a54:	3308      	adds	r3, #8
 8009a56:	9303      	str	r3, [sp, #12]
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	443b      	add	r3, r7
 8009a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5e:	e767      	b.n	8009930 <_vfiprintf_r+0x94>
 8009a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a64:	460c      	mov	r4, r1
 8009a66:	2001      	movs	r0, #1
 8009a68:	e7a5      	b.n	80099b6 <_vfiprintf_r+0x11a>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	3401      	adds	r4, #1
 8009a6e:	9305      	str	r3, [sp, #20]
 8009a70:	4619      	mov	r1, r3
 8009a72:	f04f 0c0a 	mov.w	ip, #10
 8009a76:	4620      	mov	r0, r4
 8009a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7c:	3a30      	subs	r2, #48	; 0x30
 8009a7e:	2a09      	cmp	r2, #9
 8009a80:	d903      	bls.n	8009a8a <_vfiprintf_r+0x1ee>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0c5      	beq.n	8009a12 <_vfiprintf_r+0x176>
 8009a86:	9105      	str	r1, [sp, #20]
 8009a88:	e7c3      	b.n	8009a12 <_vfiprintf_r+0x176>
 8009a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a8e:	4604      	mov	r4, r0
 8009a90:	2301      	movs	r3, #1
 8009a92:	e7f0      	b.n	8009a76 <_vfiprintf_r+0x1da>
 8009a94:	ab03      	add	r3, sp, #12
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4b16      	ldr	r3, [pc, #88]	; (8009af4 <_vfiprintf_r+0x258>)
 8009a9c:	a904      	add	r1, sp, #16
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7fc f886 	bl	8005bb0 <_printf_float>
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	1c78      	adds	r0, r7, #1
 8009aa8:	d1d6      	bne.n	8009a58 <_vfiprintf_r+0x1bc>
 8009aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aac:	07d9      	lsls	r1, r3, #31
 8009aae:	d405      	bmi.n	8009abc <_vfiprintf_r+0x220>
 8009ab0:	89ab      	ldrh	r3, [r5, #12]
 8009ab2:	059a      	lsls	r2, r3, #22
 8009ab4:	d402      	bmi.n	8009abc <_vfiprintf_r+0x220>
 8009ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab8:	f000 faa1 	bl	8009ffe <__retarget_lock_release_recursive>
 8009abc:	89ab      	ldrh	r3, [r5, #12]
 8009abe:	065b      	lsls	r3, r3, #25
 8009ac0:	f53f af12 	bmi.w	80098e8 <_vfiprintf_r+0x4c>
 8009ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac6:	e711      	b.n	80098ec <_vfiprintf_r+0x50>
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	462a      	mov	r2, r5
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <_vfiprintf_r+0x258>)
 8009ad0:	a904      	add	r1, sp, #16
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f7fc fb10 	bl	80060f8 <_printf_i>
 8009ad8:	e7e4      	b.n	8009aa4 <_vfiprintf_r+0x208>
 8009ada:	bf00      	nop
 8009adc:	0800a7b4 	.word	0x0800a7b4
 8009ae0:	0800a7d4 	.word	0x0800a7d4
 8009ae4:	0800a794 	.word	0x0800a794
 8009ae8:	0800a744 	.word	0x0800a744
 8009aec:	0800a74e 	.word	0x0800a74e
 8009af0:	08005bb1 	.word	0x08005bb1
 8009af4:	08009877 	.word	0x08009877
 8009af8:	0800a74a 	.word	0x0800a74a

08009afc <__swbuf_r>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	460e      	mov	r6, r1
 8009b00:	4614      	mov	r4, r2
 8009b02:	4605      	mov	r5, r0
 8009b04:	b118      	cbz	r0, 8009b0e <__swbuf_r+0x12>
 8009b06:	6983      	ldr	r3, [r0, #24]
 8009b08:	b90b      	cbnz	r3, 8009b0e <__swbuf_r+0x12>
 8009b0a:	f000 f9d9 	bl	8009ec0 <__sinit>
 8009b0e:	4b21      	ldr	r3, [pc, #132]	; (8009b94 <__swbuf_r+0x98>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	d12b      	bne.n	8009b6c <__swbuf_r+0x70>
 8009b14:	686c      	ldr	r4, [r5, #4]
 8009b16:	69a3      	ldr	r3, [r4, #24]
 8009b18:	60a3      	str	r3, [r4, #8]
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	071a      	lsls	r2, r3, #28
 8009b1e:	d52f      	bpl.n	8009b80 <__swbuf_r+0x84>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	b36b      	cbz	r3, 8009b80 <__swbuf_r+0x84>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	1ac0      	subs	r0, r0, r3
 8009b2a:	6963      	ldr	r3, [r4, #20]
 8009b2c:	b2f6      	uxtb	r6, r6
 8009b2e:	4283      	cmp	r3, r0
 8009b30:	4637      	mov	r7, r6
 8009b32:	dc04      	bgt.n	8009b3e <__swbuf_r+0x42>
 8009b34:	4621      	mov	r1, r4
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 f92e 	bl	8009d98 <_fflush_r>
 8009b3c:	bb30      	cbnz	r0, 8009b8c <__swbuf_r+0x90>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	60a3      	str	r3, [r4, #8]
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	701e      	strb	r6, [r3, #0]
 8009b4c:	6963      	ldr	r3, [r4, #20]
 8009b4e:	3001      	adds	r0, #1
 8009b50:	4283      	cmp	r3, r0
 8009b52:	d004      	beq.n	8009b5e <__swbuf_r+0x62>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d506      	bpl.n	8009b68 <__swbuf_r+0x6c>
 8009b5a:	2e0a      	cmp	r6, #10
 8009b5c:	d104      	bne.n	8009b68 <__swbuf_r+0x6c>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f000 f919 	bl	8009d98 <_fflush_r>
 8009b66:	b988      	cbnz	r0, 8009b8c <__swbuf_r+0x90>
 8009b68:	4638      	mov	r0, r7
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <__swbuf_r+0x9c>)
 8009b6e:	429c      	cmp	r4, r3
 8009b70:	d101      	bne.n	8009b76 <__swbuf_r+0x7a>
 8009b72:	68ac      	ldr	r4, [r5, #8]
 8009b74:	e7cf      	b.n	8009b16 <__swbuf_r+0x1a>
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <__swbuf_r+0xa0>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	bf08      	it	eq
 8009b7c:	68ec      	ldreq	r4, [r5, #12]
 8009b7e:	e7ca      	b.n	8009b16 <__swbuf_r+0x1a>
 8009b80:	4621      	mov	r1, r4
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 f80c 	bl	8009ba0 <__swsetup_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d0cb      	beq.n	8009b24 <__swbuf_r+0x28>
 8009b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b90:	e7ea      	b.n	8009b68 <__swbuf_r+0x6c>
 8009b92:	bf00      	nop
 8009b94:	0800a7b4 	.word	0x0800a7b4
 8009b98:	0800a7d4 	.word	0x0800a7d4
 8009b9c:	0800a794 	.word	0x0800a794

08009ba0 <__swsetup_r>:
 8009ba0:	4b32      	ldr	r3, [pc, #200]	; (8009c6c <__swsetup_r+0xcc>)
 8009ba2:	b570      	push	{r4, r5, r6, lr}
 8009ba4:	681d      	ldr	r5, [r3, #0]
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	b125      	cbz	r5, 8009bb6 <__swsetup_r+0x16>
 8009bac:	69ab      	ldr	r3, [r5, #24]
 8009bae:	b913      	cbnz	r3, 8009bb6 <__swsetup_r+0x16>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f000 f985 	bl	8009ec0 <__sinit>
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <__swsetup_r+0xd0>)
 8009bb8:	429c      	cmp	r4, r3
 8009bba:	d10f      	bne.n	8009bdc <__swsetup_r+0x3c>
 8009bbc:	686c      	ldr	r4, [r5, #4]
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bc4:	0719      	lsls	r1, r3, #28
 8009bc6:	d42c      	bmi.n	8009c22 <__swsetup_r+0x82>
 8009bc8:	06dd      	lsls	r5, r3, #27
 8009bca:	d411      	bmi.n	8009bf0 <__swsetup_r+0x50>
 8009bcc:	2309      	movs	r3, #9
 8009bce:	6033      	str	r3, [r6, #0]
 8009bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	e03e      	b.n	8009c5a <__swsetup_r+0xba>
 8009bdc:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <__swsetup_r+0xd4>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d101      	bne.n	8009be6 <__swsetup_r+0x46>
 8009be2:	68ac      	ldr	r4, [r5, #8]
 8009be4:	e7eb      	b.n	8009bbe <__swsetup_r+0x1e>
 8009be6:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <__swsetup_r+0xd8>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	bf08      	it	eq
 8009bec:	68ec      	ldreq	r4, [r5, #12]
 8009bee:	e7e6      	b.n	8009bbe <__swsetup_r+0x1e>
 8009bf0:	0758      	lsls	r0, r3, #29
 8009bf2:	d512      	bpl.n	8009c1a <__swsetup_r+0x7a>
 8009bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bf6:	b141      	cbz	r1, 8009c0a <__swsetup_r+0x6a>
 8009bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bfc:	4299      	cmp	r1, r3
 8009bfe:	d002      	beq.n	8009c06 <__swsetup_r+0x66>
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff fb67 	bl	80092d4 <_free_r>
 8009c06:	2300      	movs	r3, #0
 8009c08:	6363      	str	r3, [r4, #52]	; 0x34
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	2300      	movs	r3, #0
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f043 0308 	orr.w	r3, r3, #8
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	b94b      	cbnz	r3, 8009c3a <__swsetup_r+0x9a>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c30:	d003      	beq.n	8009c3a <__swsetup_r+0x9a>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4630      	mov	r0, r6
 8009c36:	f000 fa07 	bl	800a048 <__smakebuf_r>
 8009c3a:	89a0      	ldrh	r0, [r4, #12]
 8009c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c40:	f010 0301 	ands.w	r3, r0, #1
 8009c44:	d00a      	beq.n	8009c5c <__swsetup_r+0xbc>
 8009c46:	2300      	movs	r3, #0
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	6963      	ldr	r3, [r4, #20]
 8009c4c:	425b      	negs	r3, r3
 8009c4e:	61a3      	str	r3, [r4, #24]
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	b943      	cbnz	r3, 8009c66 <__swsetup_r+0xc6>
 8009c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c58:	d1ba      	bne.n	8009bd0 <__swsetup_r+0x30>
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	0781      	lsls	r1, r0, #30
 8009c5e:	bf58      	it	pl
 8009c60:	6963      	ldrpl	r3, [r4, #20]
 8009c62:	60a3      	str	r3, [r4, #8]
 8009c64:	e7f4      	b.n	8009c50 <__swsetup_r+0xb0>
 8009c66:	2000      	movs	r0, #0
 8009c68:	e7f7      	b.n	8009c5a <__swsetup_r+0xba>
 8009c6a:	bf00      	nop
 8009c6c:	2000000c 	.word	0x2000000c
 8009c70:	0800a7b4 	.word	0x0800a7b4
 8009c74:	0800a7d4 	.word	0x0800a7d4
 8009c78:	0800a794 	.word	0x0800a794

08009c7c <abort>:
 8009c7c:	b508      	push	{r3, lr}
 8009c7e:	2006      	movs	r0, #6
 8009c80:	f000 fa52 	bl	800a128 <raise>
 8009c84:	2001      	movs	r0, #1
 8009c86:	f7f7 ff09 	bl	8001a9c <_exit>
	...

08009c8c <__sflush_r>:
 8009c8c:	898a      	ldrh	r2, [r1, #12]
 8009c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	4605      	mov	r5, r0
 8009c94:	0710      	lsls	r0, r2, #28
 8009c96:	460c      	mov	r4, r1
 8009c98:	d458      	bmi.n	8009d4c <__sflush_r+0xc0>
 8009c9a:	684b      	ldr	r3, [r1, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dc05      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc02      	bgt.n	8009cac <__sflush_r+0x20>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d0f9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cb8:	682f      	ldr	r7, [r5, #0]
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	d032      	beq.n	8009d24 <__sflush_r+0x98>
 8009cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	075a      	lsls	r2, r3, #29
 8009cc4:	d505      	bpl.n	8009cd2 <__sflush_r+0x46>
 8009cc6:	6863      	ldr	r3, [r4, #4]
 8009cc8:	1ac0      	subs	r0, r0, r3
 8009cca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ccc:	b10b      	cbz	r3, 8009cd2 <__sflush_r+0x46>
 8009cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd0:	1ac0      	subs	r0, r0, r3
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd8:	6a21      	ldr	r1, [r4, #32]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b0      	blx	r6
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	d106      	bne.n	8009cf2 <__sflush_r+0x66>
 8009ce4:	6829      	ldr	r1, [r5, #0]
 8009ce6:	291d      	cmp	r1, #29
 8009ce8:	d82c      	bhi.n	8009d44 <__sflush_r+0xb8>
 8009cea:	4a2a      	ldr	r2, [pc, #168]	; (8009d94 <__sflush_r+0x108>)
 8009cec:	40ca      	lsrs	r2, r1
 8009cee:	07d6      	lsls	r6, r2, #31
 8009cf0:	d528      	bpl.n	8009d44 <__sflush_r+0xb8>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	6062      	str	r2, [r4, #4]
 8009cf6:	04d9      	lsls	r1, r3, #19
 8009cf8:	6922      	ldr	r2, [r4, #16]
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	d504      	bpl.n	8009d08 <__sflush_r+0x7c>
 8009cfe:	1c42      	adds	r2, r0, #1
 8009d00:	d101      	bne.n	8009d06 <__sflush_r+0x7a>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b903      	cbnz	r3, 8009d08 <__sflush_r+0x7c>
 8009d06:	6560      	str	r0, [r4, #84]	; 0x54
 8009d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0a:	602f      	str	r7, [r5, #0]
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d0ca      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d14:	4299      	cmp	r1, r3
 8009d16:	d002      	beq.n	8009d1e <__sflush_r+0x92>
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f7ff fadb 	bl	80092d4 <_free_r>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	6360      	str	r0, [r4, #52]	; 0x34
 8009d22:	e7c1      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d24:	6a21      	ldr	r1, [r4, #32]
 8009d26:	2301      	movs	r3, #1
 8009d28:	4628      	mov	r0, r5
 8009d2a:	47b0      	blx	r6
 8009d2c:	1c41      	adds	r1, r0, #1
 8009d2e:	d1c7      	bne.n	8009cc0 <__sflush_r+0x34>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0c4      	beq.n	8009cc0 <__sflush_r+0x34>
 8009d36:	2b1d      	cmp	r3, #29
 8009d38:	d001      	beq.n	8009d3e <__sflush_r+0xb2>
 8009d3a:	2b16      	cmp	r3, #22
 8009d3c:	d101      	bne.n	8009d42 <__sflush_r+0xb6>
 8009d3e:	602f      	str	r7, [r5, #0]
 8009d40:	e7b1      	b.n	8009ca6 <__sflush_r+0x1a>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	e7ad      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d4c:	690f      	ldr	r7, [r1, #16]
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	d0a9      	beq.n	8009ca6 <__sflush_r+0x1a>
 8009d52:	0793      	lsls	r3, r2, #30
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	bf08      	it	eq
 8009d58:	694b      	ldreq	r3, [r1, #20]
 8009d5a:	600f      	str	r7, [r1, #0]
 8009d5c:	bf18      	it	ne
 8009d5e:	2300      	movne	r3, #0
 8009d60:	eba6 0807 	sub.w	r8, r6, r7
 8009d64:	608b      	str	r3, [r1, #8]
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	dd9c      	ble.n	8009ca6 <__sflush_r+0x1a>
 8009d6c:	6a21      	ldr	r1, [r4, #32]
 8009d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d70:	4643      	mov	r3, r8
 8009d72:	463a      	mov	r2, r7
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dc06      	bgt.n	8009d8a <__sflush_r+0xfe>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	e78e      	b.n	8009ca8 <__sflush_r+0x1c>
 8009d8a:	4407      	add	r7, r0
 8009d8c:	eba8 0800 	sub.w	r8, r8, r0
 8009d90:	e7e9      	b.n	8009d66 <__sflush_r+0xda>
 8009d92:	bf00      	nop
 8009d94:	20400001 	.word	0x20400001

08009d98 <_fflush_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	690b      	ldr	r3, [r1, #16]
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b913      	cbnz	r3, 8009da8 <_fflush_r+0x10>
 8009da2:	2500      	movs	r5, #0
 8009da4:	4628      	mov	r0, r5
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	b118      	cbz	r0, 8009db2 <_fflush_r+0x1a>
 8009daa:	6983      	ldr	r3, [r0, #24]
 8009dac:	b90b      	cbnz	r3, 8009db2 <_fflush_r+0x1a>
 8009dae:	f000 f887 	bl	8009ec0 <__sinit>
 8009db2:	4b14      	ldr	r3, [pc, #80]	; (8009e04 <_fflush_r+0x6c>)
 8009db4:	429c      	cmp	r4, r3
 8009db6:	d11b      	bne.n	8009df0 <_fflush_r+0x58>
 8009db8:	686c      	ldr	r4, [r5, #4]
 8009dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d0ef      	beq.n	8009da2 <_fflush_r+0xa>
 8009dc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dc4:	07d0      	lsls	r0, r2, #31
 8009dc6:	d404      	bmi.n	8009dd2 <_fflush_r+0x3a>
 8009dc8:	0599      	lsls	r1, r3, #22
 8009dca:	d402      	bmi.n	8009dd2 <_fflush_r+0x3a>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dce:	f000 f915 	bl	8009ffc <__retarget_lock_acquire_recursive>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f7ff ff59 	bl	8009c8c <__sflush_r>
 8009dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ddc:	07da      	lsls	r2, r3, #31
 8009dde:	4605      	mov	r5, r0
 8009de0:	d4e0      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	059b      	lsls	r3, r3, #22
 8009de6:	d4dd      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dea:	f000 f908 	bl	8009ffe <__retarget_lock_release_recursive>
 8009dee:	e7d9      	b.n	8009da4 <_fflush_r+0xc>
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <_fflush_r+0x70>)
 8009df2:	429c      	cmp	r4, r3
 8009df4:	d101      	bne.n	8009dfa <_fflush_r+0x62>
 8009df6:	68ac      	ldr	r4, [r5, #8]
 8009df8:	e7df      	b.n	8009dba <_fflush_r+0x22>
 8009dfa:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <_fflush_r+0x74>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	bf08      	it	eq
 8009e00:	68ec      	ldreq	r4, [r5, #12]
 8009e02:	e7da      	b.n	8009dba <_fflush_r+0x22>
 8009e04:	0800a7b4 	.word	0x0800a7b4
 8009e08:	0800a7d4 	.word	0x0800a7d4
 8009e0c:	0800a794 	.word	0x0800a794

08009e10 <std>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b510      	push	{r4, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	e9c0 3300 	strd	r3, r3, [r0]
 8009e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e1e:	6083      	str	r3, [r0, #8]
 8009e20:	8181      	strh	r1, [r0, #12]
 8009e22:	6643      	str	r3, [r0, #100]	; 0x64
 8009e24:	81c2      	strh	r2, [r0, #14]
 8009e26:	6183      	str	r3, [r0, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	305c      	adds	r0, #92	; 0x5c
 8009e2e:	f7fb fe17 	bl	8005a60 <memset>
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x38>)
 8009e34:	6263      	str	r3, [r4, #36]	; 0x24
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <std+0x3c>)
 8009e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e3a:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <std+0x40>)
 8009e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <std+0x44>)
 8009e40:	6224      	str	r4, [r4, #32]
 8009e42:	6323      	str	r3, [r4, #48]	; 0x30
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	0800a161 	.word	0x0800a161
 8009e4c:	0800a183 	.word	0x0800a183
 8009e50:	0800a1bb 	.word	0x0800a1bb
 8009e54:	0800a1df 	.word	0x0800a1df

08009e58 <_cleanup_r>:
 8009e58:	4901      	ldr	r1, [pc, #4]	; (8009e60 <_cleanup_r+0x8>)
 8009e5a:	f000 b8af 	b.w	8009fbc <_fwalk_reent>
 8009e5e:	bf00      	nop
 8009e60:	08009d99 	.word	0x08009d99

08009e64 <__sfmoreglue>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	1e4a      	subs	r2, r1, #1
 8009e68:	2568      	movs	r5, #104	; 0x68
 8009e6a:	4355      	muls	r5, r2
 8009e6c:	460e      	mov	r6, r1
 8009e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e72:	f7ff fa7f 	bl	8009374 <_malloc_r>
 8009e76:	4604      	mov	r4, r0
 8009e78:	b140      	cbz	r0, 8009e8c <__sfmoreglue+0x28>
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e80:	300c      	adds	r0, #12
 8009e82:	60a0      	str	r0, [r4, #8]
 8009e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e88:	f7fb fdea 	bl	8005a60 <memset>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}

08009e90 <__sfp_lock_acquire>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__sfp_lock_acquire+0x8>)
 8009e92:	f000 b8b3 	b.w	8009ffc <__retarget_lock_acquire_recursive>
 8009e96:	bf00      	nop
 8009e98:	200004c8 	.word	0x200004c8

08009e9c <__sfp_lock_release>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__sfp_lock_release+0x8>)
 8009e9e:	f000 b8ae 	b.w	8009ffe <__retarget_lock_release_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	200004c8 	.word	0x200004c8

08009ea8 <__sinit_lock_acquire>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sinit_lock_acquire+0x8>)
 8009eaa:	f000 b8a7 	b.w	8009ffc <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	200004c3 	.word	0x200004c3

08009eb4 <__sinit_lock_release>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sinit_lock_release+0x8>)
 8009eb6:	f000 b8a2 	b.w	8009ffe <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	200004c3 	.word	0x200004c3

08009ec0 <__sinit>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	f7ff fff0 	bl	8009ea8 <__sinit_lock_acquire>
 8009ec8:	69a3      	ldr	r3, [r4, #24]
 8009eca:	b11b      	cbz	r3, 8009ed4 <__sinit+0x14>
 8009ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ed0:	f7ff bff0 	b.w	8009eb4 <__sinit_lock_release>
 8009ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8009eda:	4b13      	ldr	r3, [pc, #76]	; (8009f28 <__sinit+0x68>)
 8009edc:	4a13      	ldr	r2, [pc, #76]	; (8009f2c <__sinit+0x6c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	bf04      	itt	eq
 8009ee6:	2301      	moveq	r3, #1
 8009ee8:	61a3      	streq	r3, [r4, #24]
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f820 	bl	8009f30 <__sfp>
 8009ef0:	6060      	str	r0, [r4, #4]
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f81c 	bl	8009f30 <__sfp>
 8009ef8:	60a0      	str	r0, [r4, #8]
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 f818 	bl	8009f30 <__sfp>
 8009f00:	2200      	movs	r2, #0
 8009f02:	60e0      	str	r0, [r4, #12]
 8009f04:	2104      	movs	r1, #4
 8009f06:	6860      	ldr	r0, [r4, #4]
 8009f08:	f7ff ff82 	bl	8009e10 <std>
 8009f0c:	68a0      	ldr	r0, [r4, #8]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	2109      	movs	r1, #9
 8009f12:	f7ff ff7d 	bl	8009e10 <std>
 8009f16:	68e0      	ldr	r0, [r4, #12]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	2112      	movs	r1, #18
 8009f1c:	f7ff ff78 	bl	8009e10 <std>
 8009f20:	2301      	movs	r3, #1
 8009f22:	61a3      	str	r3, [r4, #24]
 8009f24:	e7d2      	b.n	8009ecc <__sinit+0xc>
 8009f26:	bf00      	nop
 8009f28:	0800a340 	.word	0x0800a340
 8009f2c:	08009e59 	.word	0x08009e59

08009f30 <__sfp>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	4607      	mov	r7, r0
 8009f34:	f7ff ffac 	bl	8009e90 <__sfp_lock_acquire>
 8009f38:	4b1e      	ldr	r3, [pc, #120]	; (8009fb4 <__sfp+0x84>)
 8009f3a:	681e      	ldr	r6, [r3, #0]
 8009f3c:	69b3      	ldr	r3, [r6, #24]
 8009f3e:	b913      	cbnz	r3, 8009f46 <__sfp+0x16>
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff ffbd 	bl	8009ec0 <__sinit>
 8009f46:	3648      	adds	r6, #72	; 0x48
 8009f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	d503      	bpl.n	8009f58 <__sfp+0x28>
 8009f50:	6833      	ldr	r3, [r6, #0]
 8009f52:	b30b      	cbz	r3, 8009f98 <__sfp+0x68>
 8009f54:	6836      	ldr	r6, [r6, #0]
 8009f56:	e7f7      	b.n	8009f48 <__sfp+0x18>
 8009f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f5c:	b9d5      	cbnz	r5, 8009f94 <__sfp+0x64>
 8009f5e:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <__sfp+0x88>)
 8009f60:	60e3      	str	r3, [r4, #12]
 8009f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f66:	6665      	str	r5, [r4, #100]	; 0x64
 8009f68:	f000 f847 	bl	8009ffa <__retarget_lock_init_recursive>
 8009f6c:	f7ff ff96 	bl	8009e9c <__sfp_lock_release>
 8009f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f78:	6025      	str	r5, [r4, #0]
 8009f7a:	61a5      	str	r5, [r4, #24]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f84:	f7fb fd6c 	bl	8005a60 <memset>
 8009f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f90:	4620      	mov	r0, r4
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	3468      	adds	r4, #104	; 0x68
 8009f96:	e7d9      	b.n	8009f4c <__sfp+0x1c>
 8009f98:	2104      	movs	r1, #4
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7ff ff62 	bl	8009e64 <__sfmoreglue>
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	6030      	str	r0, [r6, #0]
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d1d5      	bne.n	8009f54 <__sfp+0x24>
 8009fa8:	f7ff ff78 	bl	8009e9c <__sfp_lock_release>
 8009fac:	230c      	movs	r3, #12
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	e7ee      	b.n	8009f90 <__sfp+0x60>
 8009fb2:	bf00      	nop
 8009fb4:	0800a340 	.word	0x0800a340
 8009fb8:	ffff0001 	.word	0xffff0001

08009fbc <_fwalk_reent>:
 8009fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	4688      	mov	r8, r1
 8009fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fc8:	2700      	movs	r7, #0
 8009fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fce:	f1b9 0901 	subs.w	r9, r9, #1
 8009fd2:	d505      	bpl.n	8009fe0 <_fwalk_reent+0x24>
 8009fd4:	6824      	ldr	r4, [r4, #0]
 8009fd6:	2c00      	cmp	r4, #0
 8009fd8:	d1f7      	bne.n	8009fca <_fwalk_reent+0xe>
 8009fda:	4638      	mov	r0, r7
 8009fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe0:	89ab      	ldrh	r3, [r5, #12]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d907      	bls.n	8009ff6 <_fwalk_reent+0x3a>
 8009fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fea:	3301      	adds	r3, #1
 8009fec:	d003      	beq.n	8009ff6 <_fwalk_reent+0x3a>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	47c0      	blx	r8
 8009ff4:	4307      	orrs	r7, r0
 8009ff6:	3568      	adds	r5, #104	; 0x68
 8009ff8:	e7e9      	b.n	8009fce <_fwalk_reent+0x12>

08009ffa <__retarget_lock_init_recursive>:
 8009ffa:	4770      	bx	lr

08009ffc <__retarget_lock_acquire_recursive>:
 8009ffc:	4770      	bx	lr

08009ffe <__retarget_lock_release_recursive>:
 8009ffe:	4770      	bx	lr

0800a000 <__swhatbuf_r>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	460e      	mov	r6, r1
 800a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a008:	2900      	cmp	r1, #0
 800a00a:	b096      	sub	sp, #88	; 0x58
 800a00c:	4614      	mov	r4, r2
 800a00e:	461d      	mov	r5, r3
 800a010:	da07      	bge.n	800a022 <__swhatbuf_r+0x22>
 800a012:	2300      	movs	r3, #0
 800a014:	602b      	str	r3, [r5, #0]
 800a016:	89b3      	ldrh	r3, [r6, #12]
 800a018:	061a      	lsls	r2, r3, #24
 800a01a:	d410      	bmi.n	800a03e <__swhatbuf_r+0x3e>
 800a01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a020:	e00e      	b.n	800a040 <__swhatbuf_r+0x40>
 800a022:	466a      	mov	r2, sp
 800a024:	f000 f902 	bl	800a22c <_fstat_r>
 800a028:	2800      	cmp	r0, #0
 800a02a:	dbf2      	blt.n	800a012 <__swhatbuf_r+0x12>
 800a02c:	9a01      	ldr	r2, [sp, #4]
 800a02e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a032:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a036:	425a      	negs	r2, r3
 800a038:	415a      	adcs	r2, r3
 800a03a:	602a      	str	r2, [r5, #0]
 800a03c:	e7ee      	b.n	800a01c <__swhatbuf_r+0x1c>
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	2000      	movs	r0, #0
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	b016      	add	sp, #88	; 0x58
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__smakebuf_r>:
 800a048:	898b      	ldrh	r3, [r1, #12]
 800a04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a04c:	079d      	lsls	r5, r3, #30
 800a04e:	4606      	mov	r6, r0
 800a050:	460c      	mov	r4, r1
 800a052:	d507      	bpl.n	800a064 <__smakebuf_r+0x1c>
 800a054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	2301      	movs	r3, #1
 800a05e:	6163      	str	r3, [r4, #20]
 800a060:	b002      	add	sp, #8
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	ab01      	add	r3, sp, #4
 800a066:	466a      	mov	r2, sp
 800a068:	f7ff ffca 	bl	800a000 <__swhatbuf_r>
 800a06c:	9900      	ldr	r1, [sp, #0]
 800a06e:	4605      	mov	r5, r0
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff f97f 	bl	8009374 <_malloc_r>
 800a076:	b948      	cbnz	r0, 800a08c <__smakebuf_r+0x44>
 800a078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07c:	059a      	lsls	r2, r3, #22
 800a07e:	d4ef      	bmi.n	800a060 <__smakebuf_r+0x18>
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	e7e3      	b.n	800a054 <__smakebuf_r+0xc>
 800a08c:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <__smakebuf_r+0x7c>)
 800a08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	6020      	str	r0, [r4, #0]
 800a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	6163      	str	r3, [r4, #20]
 800a09e:	9b01      	ldr	r3, [sp, #4]
 800a0a0:	6120      	str	r0, [r4, #16]
 800a0a2:	b15b      	cbz	r3, 800a0bc <__smakebuf_r+0x74>
 800a0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f000 f8d1 	bl	800a250 <_isatty_r>
 800a0ae:	b128      	cbz	r0, 800a0bc <__smakebuf_r+0x74>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	f043 0301 	orr.w	r3, r3, #1
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	89a0      	ldrh	r0, [r4, #12]
 800a0be:	4305      	orrs	r5, r0
 800a0c0:	81a5      	strh	r5, [r4, #12]
 800a0c2:	e7cd      	b.n	800a060 <__smakebuf_r+0x18>
 800a0c4:	08009e59 	.word	0x08009e59

0800a0c8 <_malloc_usable_size_r>:
 800a0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0cc:	1f18      	subs	r0, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfbc      	itt	lt
 800a0d2:	580b      	ldrlt	r3, [r1, r0]
 800a0d4:	18c0      	addlt	r0, r0, r3
 800a0d6:	4770      	bx	lr

0800a0d8 <_raise_r>:
 800a0d8:	291f      	cmp	r1, #31
 800a0da:	b538      	push	{r3, r4, r5, lr}
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	d904      	bls.n	800a0ec <_raise_r+0x14>
 800a0e2:	2316      	movs	r3, #22
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ee:	b112      	cbz	r2, 800a0f6 <_raise_r+0x1e>
 800a0f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f4:	b94b      	cbnz	r3, 800a10a <_raise_r+0x32>
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f830 	bl	800a15c <_getpid_r>
 800a0fc:	462a      	mov	r2, r5
 800a0fe:	4601      	mov	r1, r0
 800a100:	4620      	mov	r0, r4
 800a102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a106:	f000 b817 	b.w	800a138 <_kill_r>
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d00a      	beq.n	800a124 <_raise_r+0x4c>
 800a10e:	1c59      	adds	r1, r3, #1
 800a110:	d103      	bne.n	800a11a <_raise_r+0x42>
 800a112:	2316      	movs	r3, #22
 800a114:	6003      	str	r3, [r0, #0]
 800a116:	2001      	movs	r0, #1
 800a118:	e7e7      	b.n	800a0ea <_raise_r+0x12>
 800a11a:	2400      	movs	r4, #0
 800a11c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a120:	4628      	mov	r0, r5
 800a122:	4798      	blx	r3
 800a124:	2000      	movs	r0, #0
 800a126:	e7e0      	b.n	800a0ea <_raise_r+0x12>

0800a128 <raise>:
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <raise+0xc>)
 800a12a:	4601      	mov	r1, r0
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f7ff bfd3 	b.w	800a0d8 <_raise_r>
 800a132:	bf00      	nop
 800a134:	2000000c 	.word	0x2000000c

0800a138 <_kill_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_kill_r+0x20>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	f7f7 fc99 	bl	8001a7c <_kill>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d102      	bne.n	800a154 <_kill_r+0x1c>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	b103      	cbz	r3, 800a154 <_kill_r+0x1c>
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	200004bc 	.word	0x200004bc

0800a15c <_getpid_r>:
 800a15c:	f7f7 bc86 	b.w	8001a6c <_getpid>

0800a160 <__sread>:
 800a160:	b510      	push	{r4, lr}
 800a162:	460c      	mov	r4, r1
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	f000 f894 	bl	800a294 <_read_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	bfab      	itete	ge
 800a170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a172:	89a3      	ldrhlt	r3, [r4, #12]
 800a174:	181b      	addge	r3, r3, r0
 800a176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a17a:	bfac      	ite	ge
 800a17c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a17e:	81a3      	strhlt	r3, [r4, #12]
 800a180:	bd10      	pop	{r4, pc}

0800a182 <__swrite>:
 800a182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	461f      	mov	r7, r3
 800a188:	898b      	ldrh	r3, [r1, #12]
 800a18a:	05db      	lsls	r3, r3, #23
 800a18c:	4605      	mov	r5, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	4616      	mov	r6, r2
 800a192:	d505      	bpl.n	800a1a0 <__swrite+0x1e>
 800a194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a198:	2302      	movs	r3, #2
 800a19a:	2200      	movs	r2, #0
 800a19c:	f000 f868 	bl	800a270 <_lseek_r>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b6:	f000 b817 	b.w	800a1e8 <_write_r>

0800a1ba <__sseek>:
 800a1ba:	b510      	push	{r4, lr}
 800a1bc:	460c      	mov	r4, r1
 800a1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c2:	f000 f855 	bl	800a270 <_lseek_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	bf15      	itete	ne
 800a1cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1d6:	81a3      	strheq	r3, [r4, #12]
 800a1d8:	bf18      	it	ne
 800a1da:	81a3      	strhne	r3, [r4, #12]
 800a1dc:	bd10      	pop	{r4, pc}

0800a1de <__sclose>:
 800a1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e2:	f000 b813 	b.w	800a20c <_close_r>
	...

0800a1e8 <_write_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <_write_r+0x20>)
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	4608      	mov	r0, r1
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	602a      	str	r2, [r5, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f7f7 fc77 	bl	8001aea <_write>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_write_r+0x1e>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_write_r+0x1e>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	200004bc 	.word	0x200004bc

0800a20c <_close_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	; (800a228 <_close_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f7 fc83 	bl	8001b22 <_close>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_close_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_close_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	200004bc 	.word	0x200004bc

0800a22c <_fstat_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d07      	ldr	r5, [pc, #28]	; (800a24c <_fstat_r+0x20>)
 800a230:	2300      	movs	r3, #0
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	4611      	mov	r1, r2
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	f7f7 fc7e 	bl	8001b3a <_fstat>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	d102      	bne.n	800a248 <_fstat_r+0x1c>
 800a242:	682b      	ldr	r3, [r5, #0]
 800a244:	b103      	cbz	r3, 800a248 <_fstat_r+0x1c>
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	bd38      	pop	{r3, r4, r5, pc}
 800a24a:	bf00      	nop
 800a24c:	200004bc 	.word	0x200004bc

0800a250 <_isatty_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d06      	ldr	r5, [pc, #24]	; (800a26c <_isatty_r+0x1c>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	602b      	str	r3, [r5, #0]
 800a25c:	f7f7 fc7d 	bl	8001b5a <_isatty>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d102      	bne.n	800a26a <_isatty_r+0x1a>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b103      	cbz	r3, 800a26a <_isatty_r+0x1a>
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	200004bc 	.word	0x200004bc

0800a270 <_lseek_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <_lseek_r+0x20>)
 800a274:	4604      	mov	r4, r0
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	2200      	movs	r2, #0
 800a27c:	602a      	str	r2, [r5, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	f7f7 fc76 	bl	8001b70 <_lseek>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_lseek_r+0x1e>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_lseek_r+0x1e>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	200004bc 	.word	0x200004bc

0800a294 <_read_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_read_r+0x20>)
 800a298:	4604      	mov	r4, r0
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	2200      	movs	r2, #0
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f7f7 fc04 	bl	8001ab0 <_read>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_read_r+0x1e>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_read_r+0x1e>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	200004bc 	.word	0x200004bc

0800a2b8 <_init>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr

0800a2c4 <_fini>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr


BE_Wifi_Station_MARRAGOU_ROBIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  0800a690  0800a690  0001a690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b16c  0800b16c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b16c  0800b16c  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b174  0800b174  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b174  0800b174  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b178  0800b178  0001b178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001f0  0800b36c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800b36c  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001805f  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b9  00000000  00000000  0003827f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  0003c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028578  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142d1  00000000  00000000  00065500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecdb0  00000000  00000000  000797d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  001665d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a678 	.word	0x0800a678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a678 	.word	0x0800a678

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b098      	sub	sp, #96	; 0x60
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f8e4 	bl	80001e4 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8001020:	f107 000c 	add.w	r0, r7, #12
 8001024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	491a      	ldr	r1, [pc, #104]	; (8001094 <Server_Send+0x88>)
 800102a:	f005 fd71 	bl	8006b10 <siprintf>
	Uart_sendstring(data, wifi_uart);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4919      	ldr	r1, [pc, #100]	; (8001098 <Server_Send+0x8c>)
 8001034:	4618      	mov	r0, r3
 8001036:	f000 faf8 	bl	800162a <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 800103a:	bf00      	nop
 800103c:	4916      	ldr	r1, [pc, #88]	; (8001098 <Server_Send+0x8c>)
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <Server_Send+0x90>)
 8001040:	f000 fb84 	bl	800174c <Wait_for>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f8      	beq.n	800103c <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 800104a:	4913      	ldr	r1, [pc, #76]	; (8001098 <Server_Send+0x8c>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 faec 	bl	800162a <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8001052:	bf00      	nop
 8001054:	4910      	ldr	r1, [pc, #64]	; (8001098 <Server_Send+0x8c>)
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <Server_Send+0x94>)
 8001058:	f000 fb78 	bl	800174c <Wait_for>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f8      	beq.n	8001054 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <Server_Send+0x98>)
 8001068:	4618      	mov	r0, r3
 800106a:	f005 fd51 	bl	8006b10 <siprintf>
	Uart_sendstring(data, wifi_uart);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <Server_Send+0x8c>)
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fad8 	bl	800162a <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800107a:	bf00      	nop
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <Server_Send+0x8c>)
 800107e:	480a      	ldr	r0, [pc, #40]	; (80010a8 <Server_Send+0x9c>)
 8001080:	f000 fb64 	bl	800174c <Wait_for>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f8      	beq.n	800107c <Server_Send+0x70>
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3760      	adds	r7, #96	; 0x60
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	0800abd4 	.word	0x0800abd4
 8001098:	200003c0 	.word	0x200003c0
 800109c:	0800abe8 	.word	0x0800abe8
 80010a0:	0800abec 	.word	0x0800abec
 80010a4:	0800abf4 	.word	0x0800abf4
 80010a8:	0800aab8 	.word	0x0800aab8

080010ac <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	6018      	str	r0, [r3, #0]
 80010b8:	463b      	mov	r3, r7
 80010ba:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	3304      	adds	r3, #4
 80010c6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fe97 	bl	8005e00 <memset>
	if (!(strcmp (str, "/ledon")))
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4939      	ldr	r1, [pc, #228]	; (80011bc <Server_Handle+0x110>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f7ff f87a 	bl	80001d0 <strcmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d11f      	bne.n	8001122 <Server_Handle+0x76>
	{
		sprintf (datatosend, Basic_inclusion);
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <Server_Handle+0x114>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 fd0f 	bl	8006b10 <siprintf>
		strcat(datatosend, LED_ON);
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <Server_Handle+0x118>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fd27 	bl	8006b50 <strcat>
		strcat(datatosend, Terminate);
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <Server_Handle+0x11c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fd1f 	bl	8006b50 <strcat>
		Server_Send(datatosend, Link_ID);
 8001112:	463b      	mov	r3, r7
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	4610      	mov	r0, r2
 800111c:	f7ff ff76 	bl	800100c <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 8001120:	e046      	b.n	80011b0 <Server_Handle+0x104>
	else if (!(strcmp (str, "/ledoff")))
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4929      	ldr	r1, [pc, #164]	; (80011cc <Server_Handle+0x120>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f7ff f852 	bl	80001d0 <strcmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d11f      	bne.n	8001172 <Server_Handle+0xc6>
		sprintf (datatosend, Basic_inclusion);
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <Server_Handle+0x114>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f005 fce7 	bl	8006b10 <siprintf>
		strcat(datatosend, LED_OFF);
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <Server_Handle+0x124>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f005 fcff 	bl	8006b50 <strcat>
		strcat(datatosend, Terminate);
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <Server_Handle+0x11c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f005 fcf7 	bl	8006b50 <strcat>
		Server_Send(datatosend, Link_ID);
 8001162:	463b      	mov	r3, r7
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	4610      	mov	r0, r2
 800116c:	f7ff ff4e 	bl	800100c <Server_Send>
}
 8001170:	e01e      	b.n	80011b0 <Server_Handle+0x104>
		sprintf (datatosend, Basic_inclusion);
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <Server_Handle+0x114>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fcc7 	bl	8006b10 <siprintf>
		strcat(datatosend, LED_OFF);
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <Server_Handle+0x124>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fcdf 	bl	8006b50 <strcat>
		strcat(datatosend, Terminate);
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <Server_Handle+0x11c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fcd7 	bl	8006b50 <strcat>
		Server_Send(datatosend, Link_ID);
 80011a2:	463b      	mov	r3, r7
 80011a4:	f107 0208 	add.w	r2, r7, #8
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4610      	mov	r0, r2
 80011ac:	f7ff ff2e 	bl	800100c <Server_Send>
}
 80011b0:	bf00      	nop
 80011b2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800ac04 	.word	0x0800ac04
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	0800ac0c 	.word	0x0800ac0c
 80011d0:	20000008 	.word	0x20000008

080011d4 <Server_Start>:

void Server_Start (void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b092      	sub	sp, #72	; 0x48
 80011d8:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	223c      	movs	r2, #60	; 0x3c
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fe0a 	bl	8005e00 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80011ec:	bf00      	nop
 80011ee:	1dfa      	adds	r2, r7, #7
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <Server_Start+0xd0>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <Server_Start+0xd4>)
 80011f6:	f000 f9e9 	bl	80015cc <Get_after>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f6      	beq.n	80011ee <Server_Start+0x1a>
	Link_ID -= 48;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3b30      	subs	r3, #48	; 0x30
 8001204:	b2db      	uxtb	r3, r3
 8001206:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 8001208:	bf00      	nop
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <Server_Start+0xd0>)
 8001210:	4619      	mov	r1, r3
 8001212:	4826      	ldr	r0, [pc, #152]	; (80012ac <Server_Start+0xd8>)
 8001214:	f000 fa20 	bl	8001658 <Copy_upto>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f5      	beq.n	800120a <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <Server_Start+0xdc>)
 8001226:	f000 f84b 	bl	80012c0 <Look_for>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10b      	bne.n	8001248 <Server_Start+0x74>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f001 fbd6 	bl	80029e8 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4619      	mov	r1, r3
 8001240:	481b      	ldr	r0, [pc, #108]	; (80012b0 <Server_Start+0xdc>)
 8001242:	f7ff ff33 	bl	80010ac <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8001246:	e028      	b.n	800129a <Server_Start+0xc6>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <Server_Start+0xe0>)
 8001250:	f000 f836 	bl	80012c0 <Look_for>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10b      	bne.n	8001272 <Server_Start+0x9e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2120      	movs	r1, #32
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f001 fbc1 	bl	80029e8 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4619      	mov	r1, r3
 800126a:	4812      	ldr	r0, [pc, #72]	; (80012b4 <Server_Start+0xe0>)
 800126c:	f7ff ff1e 	bl	80010ac <Server_Handle>
}
 8001270:	e013      	b.n	800129a <Server_Start+0xc6>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <Server_Start+0xe4>)
 800127a:	f000 f821 	bl	80012c0 <Look_for>
 800127e:	4603      	mov	r3, r0
 8001280:	2b01      	cmp	r3, #1
 8001282:	d00a      	beq.n	800129a <Server_Start+0xc6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2120      	movs	r1, #32
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f001 fbac 	bl	80029e8 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <Server_Start+0xe8>)
 8001296:	f7ff ff09 	bl	80010ac <Server_Handle>
}
 800129a:	bf00      	nop
 800129c:	3748      	adds	r7, #72	; 0x48
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200003c0 	.word	0x200003c0
 80012a8:	0800ac14 	.word	0x0800ac14
 80012ac:	0800ac1c 	.word	0x0800ac1c
 80012b0:	0800ac04 	.word	0x0800ac04
 80012b4:	0800ac0c 	.word	0x0800ac0c
 80012b8:	0800ac28 	.word	0x0800ac28
 80012bc:	0800ac38 	.word	0x0800ac38

080012c0 <Look_for>:
  }
}


int Look_for (char *str, char *buffertolookinto)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7fe ff8a 	bl	80001e4 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f7fe ff85 	bl	80001e4 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 80012e6:	e002      	b.n	80012ee <Look_for+0x2e>
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	3301      	adds	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d1f2      	bne.n	80012e8 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	440b      	add	r3, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d111      	bne.n	800133a <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8001316:	e005      	b.n	8001324 <Look_for+0x64>
	{
		so_far++;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
		indx++;
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	440b      	add	r3, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d0ef      	beq.n	8001318 <Look_for+0x58>
 8001338:	e008      	b.n	800134c <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	429a      	cmp	r2, r3
 8001344:	dbcf      	blt.n	80012e6 <Look_for+0x26>
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e007      	b.n	800135c <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d101      	bne.n	8001358 <Look_for+0x98>
 8001354:	2301      	movs	r3, #1
 8001356:	e001      	b.n	800135c <Look_for+0x9c>
	else return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <Uart_peek+0x70>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d111      	bne.n	8001398 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <Uart_peek+0x74>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <Uart_peek+0x74>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	429a      	cmp	r2, r3
 8001382:	d102      	bne.n	800138a <Uart_peek+0x26>
		  {
		    return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	e01e      	b.n	80013c8 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <Uart_peek+0x74>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <Uart_peek+0x74>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	e017      	b.n	80013c8 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <Uart_peek+0x78>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d111      	bne.n	80013c4 <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <Uart_peek+0x7c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <Uart_peek+0x7c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d102      	bne.n	80013b6 <Uart_peek+0x52>
		  {
		    return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e008      	b.n	80013c8 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <Uart_peek+0x7c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <Uart_peek+0x7c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	e001      	b.n	80013c8 <Uart_peek+0x64>
		  }
	}

	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	200003c0 	.word	0x200003c0
 80013d8:	20000284 	.word	0x20000284
 80013dc:	20000458 	.word	0x20000458
 80013e0:	2000028c 	.word	0x2000028c

080013e4 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <Uart_read+0x9c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11c      	bne.n	800142e <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <Uart_read+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <Uart_read+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	429a      	cmp	r2, r3
 8001402:	d102      	bne.n	800140a <Uart_read+0x26>
		  {
		    return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	e034      	b.n	8001474 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <Uart_read+0xa0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <Uart_read+0xa0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <Uart_read+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <Uart_read+0xa0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	e022      	b.n	8001474 <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a15      	ldr	r2, [pc, #84]	; (8001488 <Uart_read+0xa4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11c      	bne.n	8001470 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <Uart_read+0xa8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <Uart_read+0xa8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	429a      	cmp	r2, r3
 8001444:	d102      	bne.n	800144c <Uart_read+0x68>
		  {
		    return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e013      	b.n	8001474 <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <Uart_read+0xa8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <Uart_read+0xa8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <Uart_read+0xa8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <Uart_read+0xa8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	e001      	b.n	8001474 <Uart_read+0x90>
		  }
	}

	else return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	200003c0 	.word	0x200003c0
 8001484:	20000284 	.word	0x20000284
 8001488:	20000458 	.word	0x20000458
 800148c:	2000028c 	.word	0x2000028c

08001490 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db4c      	blt.n	800153a <Uart_write+0xaa>
	{
		if (uart == device_uart){
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a29      	ldr	r2, [pc, #164]	; (8001548 <Uart_write+0xb8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d122      	bne.n	80014ee <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80014a8:	4b28      	ldr	r3, [pc, #160]	; (800154c <Uart_write+0xbc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	3301      	adds	r3, #1
 80014b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b4:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80014b6:	bf00      	nop
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <Uart_write+0xbc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d0f9      	beq.n	80014b8 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <Uart_write+0xbc>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <Uart_write+0xbc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	b2c9      	uxtb	r1, r1
 80014d2:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <Uart_write+0xbc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <Uart_write+0xb8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <Uart_write+0xb8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ea:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 80014ec:	e025      	b.n	800153a <Uart_write+0xaa>
		else if (uart == pc_uart){
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <Uart_write+0xc0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d121      	bne.n	800153a <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <Uart_write+0xc4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	3301      	adds	r3, #1
 80014fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001502:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001504:	bf00      	nop
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <Uart_write+0xc4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d0f9      	beq.n	8001506 <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <Uart_write+0xc4>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <Uart_write+0xc4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	b2c9      	uxtb	r1, r1
 8001520:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <Uart_write+0xc4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <Uart_write+0xc0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <Uart_write+0xc0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200003c0 	.word	0x200003c0
 800154c:	20000288 	.word	0x20000288
 8001550:	20000458 	.word	0x20000458
 8001554:	20000280 	.word	0x20000280

08001558 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <IsDataAvailable+0x64>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10e      	bne.n	8001586 <IsDataAvailable+0x2e>
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <IsDataAvailable+0x68>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <IsDataAvailable+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	3340      	adds	r3, #64	; 0x40
 800157e:	b29b      	uxth	r3, r3
 8001580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001584:	e014      	b.n	80015b0 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <IsDataAvailable+0x6c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <IsDataAvailable+0x54>
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <IsDataAvailable+0x70>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <IsDataAvailable+0x70>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	b29b      	uxth	r3, r3
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3340      	adds	r3, #64	; 0x40
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015aa:	e001      	b.n	80015b0 <IsDataAvailable+0x58>
	return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200003c0 	.word	0x200003c0
 80015c0:	20000284 	.word	0x20000284
 80015c4:	20000458 	.word	0x20000458
 80015c8:	2000028c 	.word	0x2000028c

080015cc <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	460b      	mov	r3, r1
 80015da:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 80015dc:	bf00      	nop
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f8b3 	bl	800174c <Wait_for>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d1f8      	bne.n	80015de <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e012      	b.n	8001618 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 80015f2:	bf00      	nop
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ffaf 	bl	8001558 <IsDataAvailable>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f9      	beq.n	80015f4 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f7ff feef 	bl	80013e4 <Uart_read>
 8001606:	4601      	mov	r1, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbe8      	blt.n	80015f2 <Get_after+0x26>
	}
	return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001634:	e007      	b.n	8001646 <Uart_sendstring+0x1c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff25 	bl	8001490 <Uart_write>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f3      	bne.n	8001636 <Uart_sendstring+0xc>
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7fe fdbb 	bl	80001e4 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8001676:	bf00      	nop
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff6d 	bl	8001558 <IsDataAvailable>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f9      	beq.n	8001678 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8001684:	e01c      	b.n	80016c0 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <Copy_upto+0xf0>)
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <Copy_upto+0xf0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	4403      	add	r3, r0
 8001696:	5c8a      	ldrb	r2, [r1, r2]
 8001698:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <Copy_upto+0xf0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <Copy_upto+0xf0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 80016b2:	bf00      	nop
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff4f 	bl	8001558 <IsDataAvailable>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f9      	beq.n	80016b4 <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fe4f 	bl	8001364 <Uart_peek>
 80016c6:	4601      	mov	r1, r0
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4299      	cmp	r1, r3
 80016d2:	d1d8      	bne.n	8001686 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 80016d4:	e01b      	b.n	800170e <Copy_upto+0xb6>
	{
		so_far++;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe81 	bl	80013e4 <Uart_read>
 80016e2:	4601      	mov	r1, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	61ba      	str	r2, [r7, #24]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d101      	bne.n	8001700 <Copy_upto+0xa8>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e01f      	b.n	8001740 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8001700:	bf00      	nop
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff28 	bl	8001558 <IsDataAvailable>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe28 	bl	8001364 <Uart_peek>
 8001714:	4601      	mov	r1, r0
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4299      	cmp	r1, r3
 8001720:	d0d9      	beq.n	80016d6 <Copy_upto+0x7e>
	}

	if (so_far != len)
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	429a      	cmp	r2, r3
 8001728:	d002      	beq.n	8001730 <Copy_upto+0xd8>
	{
		so_far = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
		goto again;
 800172e:	e7a2      	b.n	8001676 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	d101      	bne.n	800173c <Copy_upto+0xe4>
 8001738:	2301      	movs	r3, #1
 800173a:	e001      	b.n	8001740 <Copy_upto+0xe8>
	else return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001740:	4618      	mov	r0, r3
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000284 	.word	0x20000284

0800174c <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fd42 	bl	80001e4 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001764:	bf00      	nop
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f7ff fef6 	bl	8001558 <IsDataAvailable>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f9      	beq.n	8001766 <Wait_for+0x1a>
	if (uart == device_uart)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4a30      	ldr	r2, [pc, #192]	; (8001838 <Wait_for+0xec>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d114      	bne.n	80017a4 <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800177a:	e008      	b.n	800178e <Wait_for+0x42>
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <Wait_for+0xf0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <Wait_for+0xf0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f7ff fde8 	bl	8001364 <Uart_peek>
 8001794:	4601      	mov	r1, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4299      	cmp	r1, r3
 80017a0:	d1ec      	bne.n	800177c <Wait_for+0x30>
 80017a2:	e02b      	b.n	80017fc <Wait_for+0xb0>
	else if (uart == pc_uart)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <Wait_for+0xf4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d127      	bne.n	80017fc <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80017ac:	e008      	b.n	80017c0 <Wait_for+0x74>
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <Wait_for+0xf8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <Wait_for+0xf8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7ff fdcf 	bl	8001364 <Uart_peek>
 80017c6:	4601      	mov	r1, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4299      	cmp	r1, r3
 80017d2:	d1ec      	bne.n	80017ae <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 80017d4:	e012      	b.n	80017fc <Wait_for+0xb0>
	{
		so_far++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f7ff fe01 	bl	80013e4 <Uart_read>
		if (so_far == len) return 1;
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d101      	bne.n	80017ee <Wait_for+0xa2>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e01f      	b.n	800182e <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 80017ee:	bf00      	nop
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff feb1 	bl	8001558 <IsDataAvailable>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f9      	beq.n	80017f0 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f7ff fdb1 	bl	8001364 <Uart_peek>
 8001802:	4601      	mov	r1, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4299      	cmp	r1, r3
 800180e:	d0e2      	beq.n	80017d6 <Wait_for+0x8a>
	}

	if (so_far != len)
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d002      	beq.n	800181e <Wait_for+0xd2>
	{
		so_far = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
		goto again;
 800181c:	e7a2      	b.n	8001764 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d101      	bne.n	800182a <Wait_for+0xde>
 8001826:	2301      	movs	r3, #1
 8001828:	e001      	b.n	800182e <Wait_for+0xe2>
	else return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200003c0 	.word	0x200003c0
 800183c:	20000284 	.word	0x20000284
 8001840:	20000458 	.word	0x20000458
 8001844:	2000028c 	.word	0x2000028c

08001848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <MX_GPIO_Init+0xc4>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a2a      	ldr	r2, [pc, #168]	; (800190c <MX_GPIO_Init+0xc4>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_GPIO_Init+0xc4>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <MX_GPIO_Init+0xc4>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a24      	ldr	r2, [pc, #144]	; (800190c <MX_GPIO_Init+0xc4>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <MX_GPIO_Init+0xc4>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <MX_GPIO_Init+0xc4>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <MX_GPIO_Init+0xc4>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_GPIO_Init+0xc4>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_GPIO_Init+0xc4>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <MX_GPIO_Init+0xc4>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_GPIO_Init+0xc4>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2120      	movs	r1, #32
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f001 f88f 	bl	80029e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <MX_GPIO_Init+0xc8>)
 80018e2:	f000 fed7 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018e6:	2320      	movs	r3, #32
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f000 fec8 	bl	8002694 <HAL_GPIO_Init>

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	48000800 	.word	0x48000800

08001914 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_I2C1_Init+0x74>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <MX_I2C1_Init+0x78>)
 800191c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_I2C1_Init+0x74>)
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <MX_I2C1_Init+0x7c>)
 8001922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_I2C1_Init+0x74>)
 800192c:	2201      	movs	r2, #1
 800192e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_I2C1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_I2C1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_I2C1_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_I2C1_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <MX_I2C1_Init+0x74>)
 8001950:	f001 f862 	bl	8002a18 <HAL_I2C_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800195a:	f000 f9f0 	bl	8001d3e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <MX_I2C1_Init+0x74>)
 8001962:	f001 fce3 	bl	800332c <HAL_I2CEx_ConfigAnalogFilter>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800196c:	f000 f9e7 	bl	8001d3e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_I2C1_Init+0x74>)
 8001974:	f001 fd25 	bl	80033c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f000 f9de 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000290 	.word	0x20000290
 800198c:	40005400 	.word	0x40005400
 8001990:	10909cec 	.word	0x10909cec

08001994 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0ac      	sub	sp, #176	; 0xb0
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2288      	movs	r2, #136	; 0x88
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fa23 	bl	8005e00 <memset>
  if(i2cHandle->Instance==I2C1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_I2C_MspInit+0xb0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d13b      	bne.n	8001a3c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fb93 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019dc:	f000 f9af 	bl	8001d3e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a00:	2312      	movs	r3, #18
 8001a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a12:	2304      	movs	r3, #4
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <HAL_I2C_MspInit+0xb8>)
 8001a20:	f000 fe38 	bl	8002694 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_I2C_MspInit+0xb4>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	37b0      	adds	r7, #176	; 0xb0
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005400 	.word	0x40005400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000400 	.word	0x48000400

08001a50 <lcd_init>:
I2C_HandleTypeDef hi2c3;

UART_HandleTypeDef huart3;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f043 030c 	orr.w	r3, r3, #12
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart3,(uint8_t *)data,2,10);
 8001a7c:	f107 0118 	add.w	r1, r7, #24
 8001a80:	230a      	movs	r3, #10
 8001a82:	2202      	movs	r2, #2
 8001a84:	486c      	ldr	r0, [pc, #432]	; (8001c38 <lcd_init+0x1e8>)
 8001a86:	f003 f843 	bl	8004b10 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001a8a:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001a8e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8001a90:	f107 0114 	add.w	r1, r7, #20
 8001a94:	230a      	movs	r3, #10
 8001a96:	2202      	movs	r2, #2
 8001a98:	4867      	ldr	r0, [pc, #412]	; (8001c38 <lcd_init+0x1e8>)
 8001a9a:	f003 f839 	bl	8004b10 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001a9e:	2364      	movs	r3, #100	; 0x64
 8001aa0:	2205      	movs	r2, #5
 8001aa2:	217c      	movs	r1, #124	; 0x7c
 8001aa4:	69f8      	ldr	r0, [r7, #28]
 8001aa6:	f001 f93b 	bl	8002d20 <HAL_I2C_IsDeviceReady>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart3,&status,1,10);
 8001aae:	f107 0113 	add.w	r1, r7, #19
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4860      	ldr	r0, [pc, #384]	; (8001c38 <lcd_init+0x1e8>)
 8001ab8:	f003 f82a 	bl	8004b10 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fc35 	bl	800232c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001ac2:	f107 0218 	add.w	r2, r7, #24
 8001ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2302      	movs	r3, #2
 8001ace:	217c      	movs	r1, #124	; 0x7c
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	f001 f831 	bl	8002b38 <HAL_I2C_Master_Transmit>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart3,&status2,1,10);
 8001ada:	f107 0112 	add.w	r1, r7, #18
 8001ade:	230a      	movs	r3, #10
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4855      	ldr	r0, [pc, #340]	; (8001c38 <lcd_init+0x1e8>)
 8001ae4:	f003 f814 	bl	8004b10 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f000 fc1f 	bl	800232c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001aee:	f107 0218 	add.w	r2, r7, #24
 8001af2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	217c      	movs	r1, #124	; 0x7c
 8001afc:	69f8      	ldr	r0, [r7, #28]
 8001afe:	f001 f81b 	bl	8002b38 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001b02:	2005      	movs	r0, #5
 8001b04:	f000 fc12 	bl	800232c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001b08:	f107 0218 	add.w	r2, r7, #24
 8001b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2302      	movs	r3, #2
 8001b14:	217c      	movs	r1, #124	; 0x7c
 8001b16:	69f8      	ldr	r0, [r7, #28]
 8001b18:	f001 f80e 	bl	8002b38 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001b2e:	f107 0218 	add.w	r2, r7, #24
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	217c      	movs	r1, #124	; 0x7c
 8001b3c:	69f8      	ldr	r0, [r7, #28]
 8001b3e:	f000 fffb 	bl	8002b38 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001b42:	2301      	movs	r3, #1
 8001b44:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001b46:	f107 0218 	add.w	r2, r7, #24
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2302      	movs	r3, #2
 8001b52:	217c      	movs	r1, #124	; 0x7c
 8001b54:	69f8      	ldr	r0, [r7, #28]
 8001b56:	f000 ffef 	bl	8002b38 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f000 fbe6 	bl	800232c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2202      	movs	r2, #2
 8001b64:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	789b      	ldrb	r3, [r3, #2]
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001b72:	f107 0218 	add.w	r2, r7, #24
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	217c      	movs	r1, #124	; 0x7c
 8001b80:	69f8      	ldr	r0, [r7, #28]
 8001b82:	f000 ffd9 	bl	8002b38 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001b8e:	f107 0210 	add.w	r2, r7, #16
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	21c4      	movs	r1, #196	; 0xc4
 8001b9c:	69f8      	ldr	r0, [r7, #28]
 8001b9e:	f000 ffcb 	bl	8002b38 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001ba6:	23ff      	movs	r3, #255	; 0xff
 8001ba8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001baa:	f107 0210 	add.w	r2, r7, #16
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	21c4      	movs	r1, #196	; 0xc4
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f000 ffbd 	bl	8002b38 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	21c4      	movs	r1, #196	; 0xc4
 8001bd4:	69f8      	ldr	r0, [r7, #28]
 8001bd6:	f000 ffaf 	bl	8002b38 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001bde:	23ff      	movs	r3, #255	; 0xff
 8001be0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001be2:	f107 020c 	add.w	r2, r7, #12
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2302      	movs	r3, #2
 8001bee:	21c4      	movs	r1, #196	; 0xc4
 8001bf0:	69f8      	ldr	r0, [r7, #28]
 8001bf2:	f000 ffa1 	bl	8002b38 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001bfa:	23ff      	movs	r3, #255	; 0xff
 8001bfc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	21c4      	movs	r1, #196	; 0xc4
 8001c0c:	69f8      	ldr	r0, [r7, #28]
 8001c0e:	f000 ff93 	bl	8002b38 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001c12:	2302      	movs	r3, #2
 8001c14:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001c16:	23ff      	movs	r3, #255	; 0xff
 8001c18:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001c1a:	f107 020c 	add.w	r2, r7, #12
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	21c4      	movs	r1, #196	; 0xc4
 8001c28:	69f8      	ldr	r0, [r7, #28]
 8001c2a:	f000 ff85 	bl	8002b38 <HAL_I2C_Master_Transmit>


}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000328 	.word	0x20000328

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f000 faf8 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c44:	f000 f82a 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c48:	f7ff fdfe 	bl	8001848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c4c:	f000 f9e6 	bl	800201c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c50:	f7ff fe60 	bl	8001914 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c54:	f000 f9b2 	bl	8001fbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); //initialisation lcd
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <main+0x4c>)
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <main+0x50>)
 8001c5c:	f7ff fef8 	bl	8001a50 <lcd_init>
  /* USER CODE END 2 */
  //ESP_Init ("AndroidAPD220", "yjai1186");
  HAL_UART_Transmit(&huart1,(uint8_t*)"AT\r\n", strlen("AT\r\n"), 100);
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	2204      	movs	r2, #4
 8001c64:	490a      	ldr	r1, [pc, #40]	; (8001c90 <main+0x54>)
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <main+0x58>)
 8001c68:	f002 ff52 	bl	8004b10 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1,(uint8_t*)send_buffer, strlen((char *)send_buffer), 2000);
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <main+0x5c>)
 8001c6e:	f7fe fab9 	bl	80001e4 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c7a:	4907      	ldr	r1, [pc, #28]	; (8001c98 <main+0x5c>)
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <main+0x58>)
 8001c7e:	f002 ffdb 	bl	8004c38 <HAL_UART_Receive>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Server_Start();
 8001c82:	f7ff faa7 	bl	80011d4 <Server_Start>
 8001c86:	e7fc      	b.n	8001c82 <main+0x46>
 8001c88:	2000020c 	.word	0x2000020c
 8001c8c:	20000290 	.word	0x20000290
 8001c90:	0800ac64 	.word	0x0800ac64
 8001c94:	200003c0 	.word	0x200003c0
 8001c98:	20000210 	.word	0x20000210

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b096      	sub	sp, #88	; 0x58
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	2244      	movs	r2, #68	; 0x44
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 f8a8 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cc2:	f001 fbd9 	bl	8003478 <HAL_PWREx_ControlVoltageScaling>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ccc:	f000 f837 	bl	8001d3e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cea:	230a      	movs	r3, #10
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fc10 	bl	8003524 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d0a:	f000 f818 	bl	8001d3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2303      	movs	r3, #3
 8001d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	2104      	movs	r1, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 ffe2 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d32:	f000 f804 	bl	8001d3e <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3758      	adds	r7, #88	; 0x58
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d42:	b672      	cpsid	i
}
 8001d44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <Error_Handler+0x8>

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_MspInit+0x44>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_MspInit+0x44>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_MspInit+0x44>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_MspInit+0x44>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_MspInit+0x44>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_MspInit+0x44>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 fa86 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <USART1_IRQHandler+0x10>)
 8001dea:	f002 fff7 	bl	8004ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200003c0 	.word	0x200003c0

08001df8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART2_IRQHandler+0x10>)
 8001dfe:	f002 ffed 	bl	8004ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000458 	.word	0x20000458

08001e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_kill>:

int _kill(int pid, int sig)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e26:	f003 ffc1 	bl	8005dac <__errno>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2216      	movs	r2, #22
 8001e2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_exit>:

void _exit (int status)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ffe7 	bl	8001e1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e4e:	e7fe      	b.n	8001e4e <_exit+0x12>

08001e50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e00a      	b.n	8001e78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e62:	f3af 8000 	nop.w
 8001e66:	4601      	mov	r1, r0
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	b2ca      	uxtb	r2, r1
 8001e70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf0      	blt.n	8001e62 <_read+0x12>
	}

return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e009      	b.n	8001eb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf1      	blt.n	8001e9c <_write+0x12>
	}
	return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_close>:

int _close(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eea:	605a      	str	r2, [r3, #4]
	return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_isatty>:

int _isatty(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	return 1;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f003 ff26 	bl	8005dac <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20018000 	.word	0x20018000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000274 	.word	0x20000274
 8001f94:	200004f0 	.word	0x200004f0

08001f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <MX_USART1_UART_Init+0x58>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 74880;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <MX_USART1_UART_Init+0x5c>)
 8001fca:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_USART1_UART_Init+0x54>)
 8001ffe:	f002 fd39 	bl	8004a74 <HAL_UART_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002008:	f7ff fe99 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200003c0 	.word	0x200003c0
 8002014:	40013800 	.word	0x40013800
 8002018:	00012480 	.word	0x00012480

0800201c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <MX_USART2_UART_Init+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART2_UART_Init+0x58>)
 8002060:	f002 fd08 	bl	8004a74 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206a:	f7ff fe68 	bl	8001d3e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000458 	.word	0x20000458
 8002078:	40004400 	.word	0x40004400

0800207c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ae      	sub	sp, #184	; 0xb8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	2288      	movs	r2, #136	; 0x88
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f003 feaf 	bl	8005e00 <memset>
  if(uartHandle->Instance==USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4b      	ldr	r2, [pc, #300]	; (80021d4 <HAL_UART_MspInit+0x158>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d145      	bne.n	8002138 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020b0:	2300      	movs	r3, #0
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 f81f 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020c4:	f7ff fe3b 	bl	8001d3e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c8:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	4a42      	ldr	r2, [pc, #264]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d2:	6613      	str	r3, [r2, #96]	; 0x60
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002112:	2307      	movs	r3, #7
 8002114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002122:	f000 fab7 	bl	8002694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2025      	movs	r0, #37	; 0x25
 800212c:	f000 f9fd 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002130:	2025      	movs	r0, #37	; 0x25
 8002132:	f000 fa16 	bl	8002562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002136:	e048      	b.n	80021ca <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_UART_MspInit+0x160>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d143      	bne.n	80021ca <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002146:	2300      	movs	r3, #0
 8002148:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4618      	mov	r0, r3
 8002150:	f001 ffd4 	bl	80040fc <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800215a:	f7ff fdf0 	bl	8001d3e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_UART_MspInit+0x15c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800218e:	230c      	movs	r3, #12
 8002190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a6:	2307      	movs	r3, #7
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b6:	f000 fa6d 	bl	8002694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2026      	movs	r0, #38	; 0x26
 80021c0:	f000 f9b3 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c4:	2026      	movs	r0, #38	; 0x26
 80021c6:	f000 f9cc 	bl	8002562 <HAL_NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	37b8      	adds	r7, #184	; 0xb8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40013800 	.word	0x40013800
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40004400 	.word	0x40004400

080021e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e4:	f7ff fed8 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <LoopForever+0x6>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	; (8002220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <LoopForever+0xe>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	; (800222c <LoopForever+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f003 fdd3 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002212:	f7ff fd13 	bl	8001c3c <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002218:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002224:	0800b17c 	.word	0x0800b17c
  ldr r2, =_sbss
 8002228:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800222c:	200004f0 	.word	0x200004f0

08002230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_2_IRQHandler>
	...

08002234 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_Init+0x3c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_Init+0x3c>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224a:	2003      	movs	r0, #3
 800224c:	f000 f962 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002250:	2000      	movs	r0, #0
 8002252:	f000 f80f 	bl	8002274 <HAL_InitTick>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	e001      	b.n	8002266 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002262:	f7ff fd71 	bl	8001d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002266:	79fb      	ldrb	r3, [r7, #7]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_InitTick+0x6c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_InitTick+0x70>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_InitTick+0x6c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f96d 	bl	800257e <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d809      	bhi.n	80022c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f937 	bl	800252a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_InitTick+0x74>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e007      	b.n	80022d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e004      	b.n	80022d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e001      	b.n	80022d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000018 	.word	0x20000018
 80022e4:	20000010 	.word	0x20000010
 80022e8:	20000014 	.word	0x20000014

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000018 	.word	0x20000018
 8002310:	200004dc 	.word	0x200004dc

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200004dc 	.word	0x200004dc

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000018 	.word	0x20000018

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff29 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff3e 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff31 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d008      	beq.n	80025c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e022      	b.n	8002606 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020e 	bic.w	r2, r2, #14
 80025ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 021c 	and.w	r2, r3, #28
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d005      	beq.n	8002636 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e029      	b.n	800268a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 020e 	bic.w	r2, r2, #14
 8002644:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f003 021c 	and.w	r2, r3, #28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
    }
  }
  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e17f      	b.n	80029a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8171 	beq.w	800299e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d005      	beq.n	80026d4 <HAL_GPIO_Init+0x40>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d130      	bne.n	8002736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800270a:	2201      	movs	r2, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0201 	and.w	r2, r3, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b03      	cmp	r3, #3
 8002740:	d118      	bne.n	8002774 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	6939      	ldr	r1, [r7, #16]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80ac 	beq.w	800299e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	4a5e      	ldr	r2, [pc, #376]	; (80029c4 <HAL_GPIO_Init+0x330>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6613      	str	r3, [r2, #96]	; 0x60
 8002852:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800285e:	4a5a      	ldr	r2, [pc, #360]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002888:	d025      	beq.n	80028d6 <HAL_GPIO_Init+0x242>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x338>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <HAL_GPIO_Init+0x23e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_GPIO_Init+0x33c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x23a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x340>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x236>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <HAL_GPIO_Init+0x344>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x232>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_GPIO_Init+0x348>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x22e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_GPIO_Init+0x34c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x22a>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00c      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028be:	2307      	movs	r3, #7
 80028c0:	e00a      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028c2:	2305      	movs	r3, #5
 80028c4:	e008      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028ca:	2303      	movs	r3, #3
 80028cc:	e004      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x244>
 80028d6:	2300      	movs	r3, #0
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	f002 0203 	and.w	r2, r2, #3
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	4093      	lsls	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028e8:	4937      	ldr	r1, [pc, #220]	; (80029c8 <HAL_GPIO_Init+0x334>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_GPIO_Init+0x350>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800291a:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <HAL_GPIO_Init+0x350>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002920:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_GPIO_Init+0x350>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_GPIO_Init+0x350>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800294a:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <HAL_GPIO_Init+0x350>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800296e:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_GPIO_Init+0x350>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <HAL_GPIO_Init+0x350>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_GPIO_Init+0x350>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f47f ae78 	bne.w	80026a4 <HAL_GPIO_Init+0x10>
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010000 	.word	0x40010000
 80029cc:	48000400 	.word	0x48000400
 80029d0:	48000800 	.word	0x48000800
 80029d4:	48000c00 	.word	0x48000c00
 80029d8:	48001000 	.word	0x48001000
 80029dc:	48001400 	.word	0x48001400
 80029e0:	48001800 	.word	0x48001800
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e081      	b.n	8002b2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ffa8 	bl	8001994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d104      	bne.n	8002ab2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69d9      	ldr	r1, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	f040 80da 	bne.w	8002d0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2C_Master_Transmit+0x30>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0d3      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b70:	f7ff fbd0 	bl	8002314 <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2319      	movs	r3, #25
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f9f7 	bl	8002f76 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0be      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2221      	movs	r2, #33	; 0x21
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	893a      	ldrh	r2, [r7, #8]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2bff      	cmp	r3, #255	; 0xff
 8002bc2:	d90e      	bls.n	8002be2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	22ff      	movs	r2, #255	; 0xff
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fb74 	bl	80032c8 <I2C_TransferConfig>
 8002be0:	e06c      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	8979      	ldrh	r1, [r7, #10]
 8002bf4:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fb63 	bl	80032c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c02:	e05b      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	6a39      	ldr	r1, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f9f4 	bl	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e07b      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d034      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x184>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d130      	bne.n	8002cbc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f986 	bl	8002f76 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e04d      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d90e      	bls.n	8002c9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fb17 	bl	80032c8 <I2C_TransferConfig>
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb06 	bl	80032c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d19e      	bne.n	8002c04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f9d3 	bl	8003076 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01a      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_I2C_Master_Transmit+0x1e4>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	80002000 	.word	0x80002000
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	f040 80f1 	bne.w	8002f24 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0e7      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2C_IsDeviceReady+0x44>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0e0      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_I2C_IsDeviceReady+0x72>
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d90:	e004      	b.n	8002d9c <HAL_I2C_IsDeviceReady+0x7c>
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002da2:	f7ff fab7 	bl	8002314 <HAL_GetTick>
 8002da6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002dd4:	e034      	b.n	8002e40 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d01a      	beq.n	8002e14 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7ff fa99 	bl	8002314 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <HAL_I2C_IsDeviceReady+0xd4>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10f      	bne.n	8002e14 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e088      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e40:	7ffb      	ldrb	r3, [r7, #31]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_I2C_IsDeviceReady+0x12c>
 8002e46:	7fbb      	ldrb	r3, [r7, #30]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0c4      	beq.n	8002dd6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d01a      	beq.n	8002e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2120      	movs	r1, #32
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f886 	bl	8002f76 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e058      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e04a      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2120      	movs	r1, #32
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f86b 	bl	8002f76 <I2C_WaitOnFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e03d      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d118      	bne.n	8002ef4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2120      	movs	r1, #32
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f84a 	bl	8002f76 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e01c      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	f63f af3b 	bhi.w	8002d7a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d103      	bne.n	8002f4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d007      	beq.n	8002f6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	619a      	str	r2, [r3, #24]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f86:	e022      	b.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d01e      	beq.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7ff f9c0 	bl	8002314 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d113      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d0cd      	beq.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003002:	e02c      	b.n	800305e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f871 	bl	80030f0 <I2C_IsErrorOccurred>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02a      	b.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d01e      	beq.n	800305e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7ff f978 	bl	8002314 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d113      	bne.n	800305e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d1cb      	bne.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003082:	e028      	b.n	80030d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f831 	bl	80030f0 <I2C_IsErrorOccurred>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e026      	b.n	80030e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003098:	f7ff f93c 	bl	8002314 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d302      	bcc.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d113      	bne.n	80030d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0220 	orr.w	r2, r3, #32
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e007      	b.n	80030e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d1cf      	bne.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d075      	beq.n	8003208 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2210      	movs	r2, #16
 8003122:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003124:	e056      	b.n	80031d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d052      	beq.n	80031d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7ff f8f1 	bl	8002314 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_IsErrorOccurred+0x54>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d147      	bne.n	80031d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003156:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003166:	d12e      	bne.n	80031c6 <I2C_IsErrorOccurred+0xd6>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316e:	d02a      	beq.n	80031c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	2b20      	cmp	r3, #32
 8003174:	d027      	beq.n	80031c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003184:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003186:	f7ff f8c5 	bl	8002314 <HAL_GetTick>
 800318a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318c:	e01b      	b.n	80031c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800318e:	f7ff f8c1 	bl	8002314 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b19      	cmp	r3, #25
 800319a:	d914      	bls.n	80031c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d1dc      	bne.n	800318e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d003      	beq.n	80031ea <I2C_IsErrorOccurred+0xfa>
 80031e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d09d      	beq.n	8003126 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2220      	movs	r2, #32
 80031f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f043 0308 	orr.w	r3, r3, #8
 8003242:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01c      	beq.n	80032b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fe55 	bl	8002f2e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <I2C_IsErrorOccurred+0x1d4>)
 8003290:	400b      	ands	r3, r1
 8003292:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fe00e800 	.word	0xfe00e800

080032c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	4613      	mov	r3, r2
 80032d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032e0:	7a7b      	ldrb	r3, [r7, #9]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	0d5b      	lsrs	r3, r3, #21
 8003302:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <I2C_TransferConfig+0x60>)
 8003308:	430b      	orrs	r3, r1
 800330a:	43db      	mvns	r3, r3
 800330c:	ea02 0103 	and.w	r1, r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	03ff63ff 	.word	0x03ff63ff

0800332c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	d138      	bne.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800334c:	2302      	movs	r3, #2
 800334e:	e032      	b.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800337e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d139      	bne.n	800344c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e033      	b.n	800344e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2224      	movs	r2, #36	; 0x24
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_PWREx_GetVoltageRange+0x18>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40007000 	.word	0x40007000

08003478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d130      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003494:	d038      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2232      	movs	r2, #50	; 0x32
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9b      	lsrs	r3, r3, #18
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034bc:	e002      	b.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d102      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f2      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d110      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e00f      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d007      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003500:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000
 800351c:	20000010 	.word	0x20000010
 8003520:	431bde83 	.word	0x431bde83

08003524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e3d4      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003536:	4ba1      	ldr	r3, [pc, #644]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003540:	4b9e      	ldr	r3, [pc, #632]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80e4 	beq.w	8003720 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_RCC_OscConfig+0x4a>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	f040 808b 	bne.w	800367c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 8087 	bne.w	800367c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800356e:	4b93      	ldr	r3, [pc, #588]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e3ac      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_RCC_OscConfig+0x7c>
 8003596:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359e:	e005      	b.n	80035ac <HAL_RCC_OscConfig+0x88>
 80035a0:	4b86      	ldr	r3, [pc, #536]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d223      	bcs.n	80035f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd41 	bl	800403c <RCC_SetFlashLatencyFromMSIRange>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e38d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c4:	4b7d      	ldr	r3, [pc, #500]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b7a      	ldr	r3, [pc, #488]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4977      	ldr	r1, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	4972      	ldr	r1, [pc, #456]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
 80035f6:	e025      	b.n	8003644 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80035fe:	f043 0308 	orr.w	r3, r3, #8
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	496a      	ldr	r1, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003616:	4b69      	ldr	r3, [pc, #420]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	4965      	ldr	r1, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fd01 	bl	800403c <RCC_SetFlashLatencyFromMSIRange>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e34d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003644:	f000 fc36 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	495a      	ldr	r1, [pc, #360]	; (80037c0 <HAL_RCC_OscConfig+0x29c>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_RCC_OscConfig+0x2a0>)
 8003662:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003664:	4b58      	ldr	r3, [pc, #352]	; (80037c8 <HAL_RCC_OscConfig+0x2a4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fe03 	bl	8002274 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d052      	beq.n	800371e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	e331      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003690:	f7fe fe40 	bl	8002314 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003698:	f7fe fe3c 	bl	8002314 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e31a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a40      	ldr	r2, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	493b      	ldr	r1, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	4936      	ldr	r1, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e01a      	b.n	8003720 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f6:	f7fe fe0d 	bl	8002314 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fe:	f7fe fe09 	bl	8002314 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e2e7      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x1da>
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d074      	beq.n	8003816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x21a>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d10e      	bne.n	8003756 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d10b      	bne.n	8003756 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d064      	beq.n	8003814 <HAL_RCC_OscConfig+0x2f0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d160      	bne.n	8003814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e2c4      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x24a>
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e01d      	b.n	80037aa <HAL_RCC_OscConfig+0x286>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x26e>
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800377e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x286>
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 8003798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a06      	ldr	r2, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x298>)
 80037a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01c      	beq.n	80037ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fe fdaf 	bl	8002314 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b8:	e011      	b.n	80037de <HAL_RCC_OscConfig+0x2ba>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	0800ac6c 	.word	0x0800ac6c
 80037c4:	20000010 	.word	0x20000010
 80037c8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fda2 	bl	8002314 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e280      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	4baf      	ldr	r3, [pc, #700]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x2a8>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fd92 	bl	8002314 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fd8e 	bl	8002314 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e26c      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	4ba5      	ldr	r3, [pc, #660]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2d0>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d060      	beq.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x310>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d119      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d116      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x328>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e249      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	4990      	ldr	r1, [pc, #576]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003860:	e040      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d023      	beq.n	80038b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a8b      	ldr	r2, [pc, #556]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fd4d 	bl	8002314 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fd49 	bl	8002314 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e227      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b7f      	ldr	r3, [pc, #508]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	497c      	ldr	r1, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	e018      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b7a      	ldr	r3, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a79      	ldr	r2, [pc, #484]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80038b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fd29 	bl	8002314 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fd25 	bl	8002314 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e203      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	4b70      	ldr	r3, [pc, #448]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d03c      	beq.n	800396a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f8:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fe:	4a67      	ldr	r2, [pc, #412]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe fd04 	bl	8002314 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fd00 	bl	8002314 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1de      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	4b5e      	ldr	r3, [pc, #376]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCC_OscConfig+0x3ec>
 8003930:	e01b      	b.n	800396a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003932:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe fce7 	bl	8002314 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394a:	f7fe fce3 	bl	8002314 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e1c1      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ef      	bne.n	800394a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_RCC_OscConfig+0x57c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d118      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCC_OscConfig+0x57c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <HAL_RCC_OscConfig+0x57c>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fcaa 	bl	8002314 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fe fca6 	bl	8002314 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e184      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_RCC_OscConfig+0x57c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <HAL_RCC_OscConfig+0x4d8>
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039fa:	e024      	b.n	8003a46 <HAL_RCC_OscConfig+0x522>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d110      	bne.n	8003a26 <HAL_RCC_OscConfig+0x502>
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a24:	e00f      	b.n	8003a46 <HAL_RCC_OscConfig+0x522>
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fc61 	bl	8002314 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe fc5d 	bl	8002314 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e139      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_OscConfig+0x578>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0ed      	beq.n	8003a56 <HAL_RCC_OscConfig+0x532>
 8003a7a:	e01a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fc4a 	bl	8002314 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fe fc46 	bl	8002314 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d906      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e122      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b90      	ldr	r3, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e8      	bne.n	8003a84 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a8a      	ldr	r2, [pc, #552]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8108 	beq.w	8003cde <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f040 80d0 	bne.w	8003c78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ad8:	4b83      	ldr	r3, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d130      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d127      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d11f      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b18:	2a07      	cmp	r2, #7
 8003b1a:	bf14      	ite	ne
 8003b1c:	2201      	movne	r2, #1
 8003b1e:	2200      	moveq	r2, #0
 8003b20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d113      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d06e      	beq.n	8003c2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d069      	beq.n	8003c28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b54:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b7      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b70:	4b5d      	ldr	r3, [pc, #372]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b7c:	f7fe fbca 	bl	8002314 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe fbc6 	bl	8002314 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0a4      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b96:	4b54      	ldr	r3, [pc, #336]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b51      	ldr	r3, [pc, #324]	; (8003cec <HAL_RCC_OscConfig+0x7c8>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bbc:	0212      	lsls	r2, r2, #8
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0552      	lsls	r2, r2, #21
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bd0:	0852      	lsrs	r2, r2, #1
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	0652      	lsls	r2, r2, #25
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	0912      	lsrs	r2, r2, #4
 8003bde:	0452      	lsls	r2, r2, #17
 8003be0:	430a      	orrs	r2, r1
 8003be2:	4941      	ldr	r1, [pc, #260]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003be8:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3e      	ldr	r2, [pc, #248]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf4:	4b3c      	ldr	r3, [pc, #240]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c00:	f7fe fb88 	bl	8002314 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe fb84 	bl	8002314 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e062      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	4b33      	ldr	r3, [pc, #204]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c26:	e05a      	b.n	8003cde <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e059      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d152      	bne.n	8003cde <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c50:	f7fe fb60 	bl	8002314 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fb5c 	bl	8002314 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e03a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x734>
 8003c76:	e032      	b.n	8003cde <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d02d      	beq.n	8003cda <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c88:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003ca8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fb2f 	bl	8002314 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe fb2b 	bl	8002314 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e009      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x7c4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x796>
 8003cd8:	e001      	b.n	8003cde <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	f99d808c 	.word	0xf99d808c

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0c8      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b66      	ldr	r3, [pc, #408]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d910      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	4961      	ldr	r1, [pc, #388]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b5f      	ldr	r3, [pc, #380]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b0      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d04c      	beq.n	8003dda <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d48:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e09e      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d60:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d115      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e092      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d78:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e086      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d88:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e07e      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 0203 	bic.w	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	493f      	ldr	r1, [pc, #252]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003daa:	f7fe fab3 	bl	8002314 <HAL_GetTick>
 8003dae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db2:	f7fe faaf 	bl	8002314 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e066      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 020c 	and.w	r2, r3, #12
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d1eb      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	492c      	ldr	r1, [pc, #176]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d210      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 0207 	bic.w	r2, r3, #7
 8003e0e:	4924      	ldr	r1, [pc, #144]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_RCC_ClockConfig+0x1b0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e036      	b.n	8003e96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4918      	ldr	r1, [pc, #96]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4910      	ldr	r1, [pc, #64]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e66:	f000 f825 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490c      	ldr	r1, [pc, #48]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe f9f2 	bl	8002274 <HAL_InitTick>
 8003e90:	4603      	mov	r3, r0
 8003e92:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e94:	7afb      	ldrb	r3, [r7, #11]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40022000 	.word	0x40022000
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	0800ac6c 	.word	0x0800ac6c
 8003eac:	20000010 	.word	0x20000010
 8003eb0:	20000014 	.word	0x20000014

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d121      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d11e      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ee8:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e005      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f10:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e004      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d134      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d003      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0xac>
 8003f58:	e005      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f5c:	617b      	str	r3, [r7, #20]
      break;
 8003f5e:	e005      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f62:	617b      	str	r3, [r7, #20]
      break;
 8003f64:	e002      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	617b      	str	r3, [r7, #20]
      break;
 8003f6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	3301      	adds	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f7a:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	fb02 f203 	mul.w	r2, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	0e5b      	lsrs	r3, r3, #25
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fac:	69bb      	ldr	r3, [r7, #24]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	0800ac84 	.word	0x0800ac84
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	007a1200 	.word	0x007a1200

08003fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000010 	.word	0x20000010

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fe8:	f7ff fff0 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ffa:	5ccb      	ldrb	r3, [r1, r3]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	0800ac7c 	.word	0x0800ac7c

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004014:	f7ff ffda 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0adb      	lsrs	r3, r3, #11
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4904      	ldr	r1, [pc, #16]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	0800ac7c 	.word	0x0800ac7c

0800403c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004054:	f7ff fa02 	bl	800345c <HAL_PWREx_GetVoltageRange>
 8004058:	6178      	str	r0, [r7, #20]
 800405a:	e014      	b.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a24      	ldr	r2, [pc, #144]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004074:	f7ff f9f2 	bl	800345c <HAL_PWREx_GetVoltageRange>
 8004078:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800407a:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004084:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	d10b      	bne.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d919      	bls.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2ba0      	cmp	r3, #160	; 0xa0
 8004098:	d902      	bls.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800409a:	2302      	movs	r3, #2
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e013      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e010      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d902      	bls.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040ac:	2303      	movs	r3, #3
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e00a      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d102      	bne.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040b8:	2302      	movs	r3, #2
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e004      	b.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b70      	cmp	r3, #112	; 0x70
 80040c2:	d101      	bne.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c4:	2301      	movs	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 0207 	bic.w	r2, r3, #7
 80040d0:	4909      	ldr	r1, [pc, #36]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040d8:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40022000 	.word	0x40022000

080040fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004104:	2300      	movs	r3, #0
 8004106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004108:	2300      	movs	r3, #0
 800410a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004114:	2b00      	cmp	r3, #0
 8004116:	d041      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004120:	d02a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004122:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004126:	d824      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004128:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800412e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004132:	d81e      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413c:	d010      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800413e:	e018      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004140:	4b86      	ldr	r3, [pc, #536]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414c:	e015      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fabb 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800415e:	e00c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3320      	adds	r3, #32
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fba6 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	74fb      	strb	r3, [r7, #19]
      break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004180:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800418e:	4973      	ldr	r1, [pc, #460]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004196:	e001      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d041      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041b0:	d02a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041b6:	d824      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041c2:	d81e      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041cc:	d010      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ce:	e018      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041d0:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a61      	ldr	r2, [pc, #388]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041dc:	e015      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa73 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ee:	e00c      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3320      	adds	r3, #32
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb5e 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	74fb      	strb	r3, [r7, #19]
      break;
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004210:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421e:	494f      	ldr	r1, [pc, #316]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004226:	e001      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a0 	beq.w	800437a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800423e:	4b47      	ldr	r3, [pc, #284]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004254:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	4a40      	ldr	r2, [pc, #256]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	6593      	str	r3, [r2, #88]	; 0x58
 8004260:	4b3e      	ldr	r3, [pc, #248]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426c:	2301      	movs	r3, #1
 800426e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004270:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800427c:	f7fe f84a 	bl	8002314 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004284:	f7fe f846 	bl	8002314 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	74fb      	strb	r3, [r7, #19]
        break;
 8004296:	e005      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d15c      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d019      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e4:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f4:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fe f805 	bl	8002314 <HAL_GetTick>
 800430a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430c:	e00b      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe f801 	bl	8002314 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d902      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	74fb      	strb	r3, [r7, #19]
            break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ec      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434a:	4904      	ldr	r1, [pc, #16]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004352:	e009      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800435a:	bf00      	nop
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004368:	7c7b      	ldrb	r3, [r7, #17]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b9e      	ldr	r3, [pc, #632]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a9d      	ldr	r2, [pc, #628]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004386:	4b98      	ldr	r3, [pc, #608]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f023 0203 	bic.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	4994      	ldr	r1, [pc, #592]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 020c 	bic.w	r2, r3, #12
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	498c      	ldr	r1, [pc, #560]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ca:	4b87      	ldr	r3, [pc, #540]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	4983      	ldr	r1, [pc, #524]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ec:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	497b      	ldr	r1, [pc, #492]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	4972      	ldr	r1, [pc, #456]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004430:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	496a      	ldr	r1, [pc, #424]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	4961      	ldr	r1, [pc, #388]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004474:	4b5c      	ldr	r3, [pc, #368]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	4959      	ldr	r1, [pc, #356]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004496:	4b54      	ldr	r3, [pc, #336]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a4:	4950      	ldr	r1, [pc, #320]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b8:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	4948      	ldr	r1, [pc, #288]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	493f      	ldr	r1, [pc, #252]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d028      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fc:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450a:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451a:	d106      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451c:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a31      	ldr	r2, [pc, #196]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004526:	60d3      	str	r3, [r2, #12]
 8004528:	e011      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004532:	d10c      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f8c8 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	491f      	ldr	r1, [pc, #124]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004578:	d106      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004584:	60d3      	str	r3, [r2, #12]
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f899 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c6:	4908      	ldr	r1, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	60d3      	str	r3, [r2, #12]
 80045e4:	e014      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f867 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02f      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462a:	4928      	ldr	r1, [pc, #160]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f844 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d014      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004652:	7cfb      	ldrb	r3, [r7, #19]
 8004654:	74bb      	strb	r3, [r7, #18]
 8004656:	e011      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3320      	adds	r3, #32
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f925 	bl	80048b8 <RCCEx_PLLSAI2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004696:	490d      	ldr	r1, [pc, #52]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000

080046d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046de:	4b75      	ldr	r3, [pc, #468]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046ea:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
       ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004702:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
       ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d047      	beq.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e044      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d018      	beq.n	8004756 <RCCEx_PLLSAI1_Config+0x86>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d825      	bhi.n	8004774 <RCCEx_PLLSAI1_Config+0xa4>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x62>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d009      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x74>
 8004730:	e020      	b.n	8004774 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004732:	4b60      	ldr	r3, [pc, #384]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004742:	e01a      	b.n	800477a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004744:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e013      	b.n	800477e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004756:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004762:	4b54      	ldr	r3, [pc, #336]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e004      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004782:	bf00      	nop
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478a:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	430b      	orrs	r3, r1
 80047a0:	4944      	ldr	r1, [pc, #272]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d17d      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047ac:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fd fdac 	bl	8002314 <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c0:	f7fd fda8 	bl	8002314 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
        break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047d4:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ef      	bne.n	80047c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d160      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ec:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6892      	ldr	r2, [r2, #8]
 80047fc:	0211      	lsls	r1, r2, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	0912      	lsrs	r2, r2, #4
 8004804:	0452      	lsls	r2, r2, #17
 8004806:	430a      	orrs	r2, r1
 8004808:	492a      	ldr	r1, [pc, #168]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	610b      	str	r3, [r1, #16]
 800480e:	e027      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d112      	bne.n	800483c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800481e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6892      	ldr	r2, [r2, #8]
 8004826:	0211      	lsls	r1, r2, #8
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6912      	ldr	r2, [r2, #16]
 800482c:	0852      	lsrs	r2, r2, #1
 800482e:	3a01      	subs	r2, #1
 8004830:	0552      	lsls	r2, r2, #21
 8004832:	430a      	orrs	r2, r1
 8004834:	491f      	ldr	r1, [pc, #124]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]
 800483a:	e011      	b.n	8004860 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004844:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6892      	ldr	r2, [r2, #8]
 800484c:	0211      	lsls	r1, r2, #8
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6952      	ldr	r2, [r2, #20]
 8004852:	0852      	lsrs	r2, r2, #1
 8004854:	3a01      	subs	r2, #1
 8004856:	0652      	lsls	r2, r2, #25
 8004858:	430a      	orrs	r2, r1
 800485a:	4916      	ldr	r1, [pc, #88]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	4313      	orrs	r3, r2
 800485e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800486a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486c:	f7fd fd52 	bl	8002314 <HAL_GetTick>
 8004870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004872:	e009      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004874:	f7fd fd4e 	bl	8002314 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d902      	bls.n	8004888 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	73fb      	strb	r3, [r7, #15]
          break;
 8004886:	e005      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ef      	beq.n	8004874 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4904      	ldr	r1, [pc, #16]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000

080048b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048c6:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048d2:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d10d      	bne.n	80048fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
       ||
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048ea:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	091b      	lsrs	r3, r3, #4
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
       ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d047      	beq.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e044      	b.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d018      	beq.n	800493e <RCCEx_PLLSAI2_Config+0x86>
 800490c:	2b03      	cmp	r3, #3
 800490e:	d825      	bhi.n	800495c <RCCEx_PLLSAI2_Config+0xa4>
 8004910:	2b01      	cmp	r3, #1
 8004912:	d002      	beq.n	800491a <RCCEx_PLLSAI2_Config+0x62>
 8004914:	2b02      	cmp	r3, #2
 8004916:	d009      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x74>
 8004918:	e020      	b.n	800495c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800491a:	4b55      	ldr	r3, [pc, #340]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11d      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492a:	e01a      	b.n	8004962 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e013      	b.n	8004966 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800493e:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800494a:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800495a:	e006      	b.n	800496a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e004      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800496a:	bf00      	nop
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	430b      	orrs	r3, r1
 8004988:	4939      	ldr	r1, [pc, #228]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d167      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004994:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fcb8 	bl	8002314 <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a8:	f7fd fcb4 	bl	8002314 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049bc:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1ef      	bne.n	80049a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d14a      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d111      	bne.n	80049f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049d4:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	0211      	lsls	r1, r2, #8
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68d2      	ldr	r2, [r2, #12]
 80049ea:	0912      	lsrs	r2, r2, #4
 80049ec:	0452      	lsls	r2, r2, #17
 80049ee:	430a      	orrs	r2, r1
 80049f0:	491f      	ldr	r1, [pc, #124]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	614b      	str	r3, [r1, #20]
 80049f6:	e011      	b.n	8004a1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6892      	ldr	r2, [r2, #8]
 8004a08:	0211      	lsls	r1, r2, #8
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6912      	ldr	r2, [r2, #16]
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0652      	lsls	r2, r2, #25
 8004a14:	430a      	orrs	r2, r1
 8004a16:	4916      	ldr	r1, [pc, #88]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fd fc74 	bl	8002314 <HAL_GetTick>
 8004a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a2e:	e009      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a30:	f7fd fc70 	bl	8002314 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d902      	bls.n	8004a44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	73fb      	strb	r3, [r7, #15]
          break;
 8004a42:	e005      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ef      	beq.n	8004a30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4904      	ldr	r1, [pc, #16]	; (8004a70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000

08004a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e040      	b.n	8004b08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fd faf0 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fc94 	bl	80053e0 <UART_SetConfig>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e022      	b.n	8004b08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 ff12 	bl	80058f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 ff99 	bl	8005a38 <UART_CheckIdleState>
 8004b06:	4603      	mov	r3, r0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	f040 8082 	bne.w	8004c2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_Transmit+0x26>
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07a      	b.n	8004c30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Transmit+0x38>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e073      	b.n	8004c30 <HAL_UART_Transmit+0x120>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd fbd9 	bl	8002314 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x80>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ba0:	e02d      	b.n	8004bfe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 ff8c 	bl	8005aca <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e039      	b.n	8004c30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e008      	b.n	8004bec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b292      	uxth	r2, r2
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3301      	adds	r3, #1
 8004bea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cb      	bne.n	8004ba2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 ff58 	bl	8005aca <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e005      	b.n	8004c30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	f040 80bf 	bne.w	8004dd0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_UART_Receive+0x26>
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0b7      	b.n	8004dd2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Receive+0x38>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b0      	b.n	8004dd2 <HAL_UART_Receive+0x19a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2222      	movs	r2, #34	; 0x22
 8004c84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c8c:	f7fd fb42 	bl	8002314 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d10e      	bne.n	8004cca <HAL_UART_Receive+0x92>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_UART_Receive+0x88>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cbe:	e02d      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	22ff      	movs	r2, #255	; 0xff
 8004cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cc8:	e028      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <HAL_UART_Receive+0xb6>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <HAL_UART_Receive+0xac>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	22ff      	movs	r2, #255	; 0xff
 8004cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ce2:	e01b      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	227f      	movs	r2, #127	; 0x7f
 8004ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cec:	e016      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf6:	d10d      	bne.n	8004d14 <HAL_UART_Receive+0xdc>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <HAL_UART_Receive+0xd2>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	227f      	movs	r2, #127	; 0x7f
 8004d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d08:	e008      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	223f      	movs	r2, #63	; 0x3f
 8004d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d12:	e003      	b.n	8004d1c <HAL_UART_Receive+0xe4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2c:	d108      	bne.n	8004d40 <HAL_UART_Receive+0x108>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e003      	b.n	8004d48 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d50:	e033      	b.n	8004dba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 feb4 	bl	8005aca <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e032      	b.n	8004dd2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	8a7b      	ldrh	r3, [r7, #18]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	3302      	adds	r3, #2
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	e00d      	b.n	8004da8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	8a7b      	ldrh	r3, [r7, #18]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1c5      	bne.n	8004d52 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e000      	b.n	8004dd2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
  }
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0ba      	sub	sp, #232	; 0xe8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e06:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d115      	bne.n	8004e44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00f      	beq.n	8004e44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 82a6 	beq.w	8005386 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      }
      return;
 8004e42:	e2a0      	b.n	8005386 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8117 	beq.w	800507c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e5e:	4b85      	ldr	r3, [pc, #532]	; (8005074 <HAL_UART_IRQHandler+0x298>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 810a 	beq.w	800507c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <HAL_UART_IRQHandler+0xbc>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d011      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xec>
 8004ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	f043 0204 	orr.w	r2, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x11c>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eee:	f043 0202 	orr.w	r2, r3, #2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d017      	beq.n	8004f34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <HAL_UART_IRQHandler+0x18a>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 820c 	beq.w	800538a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d04f      	beq.n	800505e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fe47 	bl	8005c52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d141      	bne.n	8005056 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800500a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	2b00      	cmp	r3, #0
 8005024:	d013      	beq.n	800504e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	4a13      	ldr	r2, [pc, #76]	; (8005078 <HAL_UART_IRQHandler+0x29c>)
 800502c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd faed 	bl	8002612 <HAL_DMA_Abort_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005048:	4610      	mov	r0, r2
 800504a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00f      	b.n	800506e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9b0 	bl	80053b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e00b      	b.n	800506e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9ac 	bl	80053b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	e007      	b.n	800506e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9a8 	bl	80053b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800506c:	e18d      	b.n	800538a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506e:	bf00      	nop
    return;
 8005070:	e18b      	b.n	800538a <HAL_UART_IRQHandler+0x5ae>
 8005072:	bf00      	nop
 8005074:	04000120 	.word	0x04000120
 8005078:	08005d19 	.word	0x08005d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	2b01      	cmp	r3, #1
 8005082:	f040 8146 	bne.w	8005312 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 813f 	beq.w	8005312 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8138 	beq.w	8005312 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	f040 80b4 	bne.w	8005222 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 815f 	beq.w	800538e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050da:	429a      	cmp	r2, r3
 80050dc:	f080 8157 	bcs.w	800538e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 8085 	bne.w	8005206 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800512a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800513e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1da      	bne.n	80050fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800516a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800516e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800517c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e1      	bne.n	8005146 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e3      	bne.n	8005182 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	f023 0310 	bic.w	r3, r3, #16
 80051da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e4      	bne.n	80051c6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd f9c8 	bl	8002596 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005212:	b29b      	uxth	r3, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	b29b      	uxth	r3, r3
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8d4 	bl	80053c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005220:	e0b5      	b.n	800538e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522e:	b29b      	uxth	r3, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a7 	beq.w	8005392 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80a2 	beq.w	8005392 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005270:	647b      	str	r3, [r7, #68]	; 0x44
 8005272:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800527e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e4      	bne.n	800524e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	623b      	str	r3, [r7, #32]
   return(result);
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052a8:	633a      	str	r2, [r7, #48]	; 0x30
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e3      	bne.n	8005284 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60fb      	str	r3, [r7, #12]
   return(result);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	69b9      	ldr	r1, [r7, #24]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	617b      	str	r3, [r7, #20]
   return(result);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e4      	bne.n	80052ce <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f85c 	bl	80053c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005310:	e03f      	b.n	8005392 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <HAL_UART_IRQHandler+0x560>
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005332:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fd2f 	bl	8005d98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800533a:	e02d      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01c      	beq.n	8005396 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4798      	blx	r3
    }
    return;
 8005364:	e017      	b.n	8005396 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d012      	beq.n	8005398 <HAL_UART_IRQHandler+0x5bc>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fce0 	bl	8005d44 <UART_EndTransmit_IT>
    return;
 8005384:	e008      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005386:	bf00      	nop
 8005388:	e006      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
    return;
 800538a:	bf00      	nop
 800538c:	e004      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
      return;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005396:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005398:	37e8      	adds	r7, #232	; 0xe8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop

080053a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e0:	b5b0      	push	{r4, r5, r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4bad      	ldr	r3, [pc, #692]	; (80056c0 <UART_SetConfig+0x2e0>)
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4aa2      	ldr	r2, [pc, #648]	; (80056c4 <UART_SetConfig+0x2e4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	4313      	orrs	r3, r2
 8005446:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a99      	ldr	r2, [pc, #612]	; (80056c8 <UART_SetConfig+0x2e8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d121      	bne.n	80054aa <UART_SetConfig+0xca>
 8005466:	4b99      	ldr	r3, [pc, #612]	; (80056cc <UART_SetConfig+0x2ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d817      	bhi.n	80054a4 <UART_SetConfig+0xc4>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x9c>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	0800548d 	.word	0x0800548d
 8005480:	08005499 	.word	0x08005499
 8005484:	08005493 	.word	0x08005493
 8005488:	0800549f 	.word	0x0800549f
 800548c:	2301      	movs	r3, #1
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e0e7      	b.n	8005662 <UART_SetConfig+0x282>
 8005492:	2302      	movs	r3, #2
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e0e4      	b.n	8005662 <UART_SetConfig+0x282>
 8005498:	2304      	movs	r3, #4
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e0e1      	b.n	8005662 <UART_SetConfig+0x282>
 800549e:	2308      	movs	r3, #8
 80054a0:	76fb      	strb	r3, [r7, #27]
 80054a2:	e0de      	b.n	8005662 <UART_SetConfig+0x282>
 80054a4:	2310      	movs	r3, #16
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e0db      	b.n	8005662 <UART_SetConfig+0x282>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a88      	ldr	r2, [pc, #544]	; (80056d0 <UART_SetConfig+0x2f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d132      	bne.n	800551a <UART_SetConfig+0x13a>
 80054b4:	4b85      	ldr	r3, [pc, #532]	; (80056cc <UART_SetConfig+0x2ec>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d828      	bhi.n	8005514 <UART_SetConfig+0x134>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0xe8>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	08005515 	.word	0x08005515
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005515 	.word	0x08005515
 80054d8:	08005509 	.word	0x08005509
 80054dc:	08005515 	.word	0x08005515
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005515 	.word	0x08005515
 80054e8:	08005503 	.word	0x08005503
 80054ec:	08005515 	.word	0x08005515
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005515 	.word	0x08005515
 80054f8:	0800550f 	.word	0x0800550f
 80054fc:	2300      	movs	r3, #0
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e0af      	b.n	8005662 <UART_SetConfig+0x282>
 8005502:	2302      	movs	r3, #2
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e0ac      	b.n	8005662 <UART_SetConfig+0x282>
 8005508:	2304      	movs	r3, #4
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e0a9      	b.n	8005662 <UART_SetConfig+0x282>
 800550e:	2308      	movs	r3, #8
 8005510:	76fb      	strb	r3, [r7, #27]
 8005512:	e0a6      	b.n	8005662 <UART_SetConfig+0x282>
 8005514:	2310      	movs	r3, #16
 8005516:	76fb      	strb	r3, [r7, #27]
 8005518:	e0a3      	b.n	8005662 <UART_SetConfig+0x282>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6d      	ldr	r2, [pc, #436]	; (80056d4 <UART_SetConfig+0x2f4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d120      	bne.n	8005566 <UART_SetConfig+0x186>
 8005524:	4b69      	ldr	r3, [pc, #420]	; (80056cc <UART_SetConfig+0x2ec>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d013      	beq.n	800555a <UART_SetConfig+0x17a>
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d814      	bhi.n	8005560 <UART_SetConfig+0x180>
 8005536:	2b20      	cmp	r3, #32
 8005538:	d009      	beq.n	800554e <UART_SetConfig+0x16e>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d810      	bhi.n	8005560 <UART_SetConfig+0x180>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <UART_SetConfig+0x168>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d006      	beq.n	8005554 <UART_SetConfig+0x174>
 8005546:	e00b      	b.n	8005560 <UART_SetConfig+0x180>
 8005548:	2300      	movs	r3, #0
 800554a:	76fb      	strb	r3, [r7, #27]
 800554c:	e089      	b.n	8005662 <UART_SetConfig+0x282>
 800554e:	2302      	movs	r3, #2
 8005550:	76fb      	strb	r3, [r7, #27]
 8005552:	e086      	b.n	8005662 <UART_SetConfig+0x282>
 8005554:	2304      	movs	r3, #4
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e083      	b.n	8005662 <UART_SetConfig+0x282>
 800555a:	2308      	movs	r3, #8
 800555c:	76fb      	strb	r3, [r7, #27]
 800555e:	e080      	b.n	8005662 <UART_SetConfig+0x282>
 8005560:	2310      	movs	r3, #16
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e07d      	b.n	8005662 <UART_SetConfig+0x282>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a5b      	ldr	r2, [pc, #364]	; (80056d8 <UART_SetConfig+0x2f8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d120      	bne.n	80055b2 <UART_SetConfig+0x1d2>
 8005570:	4b56      	ldr	r3, [pc, #344]	; (80056cc <UART_SetConfig+0x2ec>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d013      	beq.n	80055a6 <UART_SetConfig+0x1c6>
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d814      	bhi.n	80055ac <UART_SetConfig+0x1cc>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d009      	beq.n	800559a <UART_SetConfig+0x1ba>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d810      	bhi.n	80055ac <UART_SetConfig+0x1cc>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <UART_SetConfig+0x1b4>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d006      	beq.n	80055a0 <UART_SetConfig+0x1c0>
 8005592:	e00b      	b.n	80055ac <UART_SetConfig+0x1cc>
 8005594:	2300      	movs	r3, #0
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	e063      	b.n	8005662 <UART_SetConfig+0x282>
 800559a:	2302      	movs	r3, #2
 800559c:	76fb      	strb	r3, [r7, #27]
 800559e:	e060      	b.n	8005662 <UART_SetConfig+0x282>
 80055a0:	2304      	movs	r3, #4
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	e05d      	b.n	8005662 <UART_SetConfig+0x282>
 80055a6:	2308      	movs	r3, #8
 80055a8:	76fb      	strb	r3, [r7, #27]
 80055aa:	e05a      	b.n	8005662 <UART_SetConfig+0x282>
 80055ac:	2310      	movs	r3, #16
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e057      	b.n	8005662 <UART_SetConfig+0x282>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a49      	ldr	r2, [pc, #292]	; (80056dc <UART_SetConfig+0x2fc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d125      	bne.n	8005608 <UART_SetConfig+0x228>
 80055bc:	4b43      	ldr	r3, [pc, #268]	; (80056cc <UART_SetConfig+0x2ec>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d017      	beq.n	80055fc <UART_SetConfig+0x21c>
 80055cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d0:	d817      	bhi.n	8005602 <UART_SetConfig+0x222>
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	d00b      	beq.n	80055f0 <UART_SetConfig+0x210>
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d811      	bhi.n	8005602 <UART_SetConfig+0x222>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <UART_SetConfig+0x20a>
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e6:	d006      	beq.n	80055f6 <UART_SetConfig+0x216>
 80055e8:	e00b      	b.n	8005602 <UART_SetConfig+0x222>
 80055ea:	2300      	movs	r3, #0
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e038      	b.n	8005662 <UART_SetConfig+0x282>
 80055f0:	2302      	movs	r3, #2
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e035      	b.n	8005662 <UART_SetConfig+0x282>
 80055f6:	2304      	movs	r3, #4
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e032      	b.n	8005662 <UART_SetConfig+0x282>
 80055fc:	2308      	movs	r3, #8
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	e02f      	b.n	8005662 <UART_SetConfig+0x282>
 8005602:	2310      	movs	r3, #16
 8005604:	76fb      	strb	r3, [r7, #27]
 8005606:	e02c      	b.n	8005662 <UART_SetConfig+0x282>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <UART_SetConfig+0x2e4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d125      	bne.n	800565e <UART_SetConfig+0x27e>
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <UART_SetConfig+0x2ec>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800561c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005620:	d017      	beq.n	8005652 <UART_SetConfig+0x272>
 8005622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005626:	d817      	bhi.n	8005658 <UART_SetConfig+0x278>
 8005628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562c:	d00b      	beq.n	8005646 <UART_SetConfig+0x266>
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d811      	bhi.n	8005658 <UART_SetConfig+0x278>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <UART_SetConfig+0x260>
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d006      	beq.n	800564c <UART_SetConfig+0x26c>
 800563e:	e00b      	b.n	8005658 <UART_SetConfig+0x278>
 8005640:	2300      	movs	r3, #0
 8005642:	76fb      	strb	r3, [r7, #27]
 8005644:	e00d      	b.n	8005662 <UART_SetConfig+0x282>
 8005646:	2302      	movs	r3, #2
 8005648:	76fb      	strb	r3, [r7, #27]
 800564a:	e00a      	b.n	8005662 <UART_SetConfig+0x282>
 800564c:	2304      	movs	r3, #4
 800564e:	76fb      	strb	r3, [r7, #27]
 8005650:	e007      	b.n	8005662 <UART_SetConfig+0x282>
 8005652:	2308      	movs	r3, #8
 8005654:	76fb      	strb	r3, [r7, #27]
 8005656:	e004      	b.n	8005662 <UART_SetConfig+0x282>
 8005658:	2310      	movs	r3, #16
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e001      	b.n	8005662 <UART_SetConfig+0x282>
 800565e:	2310      	movs	r3, #16
 8005660:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <UART_SetConfig+0x2e4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	f040 8087 	bne.w	800577c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800566e:	7efb      	ldrb	r3, [r7, #27]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d837      	bhi.n	80056e4 <UART_SetConfig+0x304>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x29c>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080056a9 	.word	0x080056a9
 8005688:	080056e5 	.word	0x080056e5
 800568c:	080056af 	.word	0x080056af
 8005690:	080056e5 	.word	0x080056e5
 8005694:	080056e5 	.word	0x080056e5
 8005698:	080056e5 	.word	0x080056e5
 800569c:	080056b7 	.word	0x080056b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fca0 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 80056a4:	6178      	str	r0, [r7, #20]
        break;
 80056a6:	e022      	b.n	80056ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <UART_SetConfig+0x300>)
 80056aa:	617b      	str	r3, [r7, #20]
        break;
 80056ac:	e01f      	b.n	80056ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ae:	f7fe fc01 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80056b2:	6178      	str	r0, [r7, #20]
        break;
 80056b4:	e01b      	b.n	80056ee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ba:	617b      	str	r3, [r7, #20]
        break;
 80056bc:	e017      	b.n	80056ee <UART_SetConfig+0x30e>
 80056be:	bf00      	nop
 80056c0:	efff69f3 	.word	0xefff69f3
 80056c4:	40008000 	.word	0x40008000
 80056c8:	40013800 	.word	0x40013800
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40004400 	.word	0x40004400
 80056d4:	40004800 	.word	0x40004800
 80056d8:	40004c00 	.word	0x40004c00
 80056dc:	40005000 	.word	0x40005000
 80056e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	76bb      	strb	r3, [r7, #26]
        break;
 80056ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80f1 	beq.w	80058d8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d305      	bcc.n	8005712 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d902      	bls.n	8005718 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	76bb      	strb	r3, [r7, #26]
 8005716:	e0df      	b.n	80058d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4618      	mov	r0, r3
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	020b      	lsls	r3, r1, #8
 800572a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800572e:	0202      	lsls	r2, r0, #8
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6849      	ldr	r1, [r1, #4]
 8005734:	0849      	lsrs	r1, r1, #1
 8005736:	4608      	mov	r0, r1
 8005738:	f04f 0100 	mov.w	r1, #0
 800573c:	1814      	adds	r4, r2, r0
 800573e:	eb43 0501 	adc.w	r5, r3, r1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fb faaa 	bl	8000ca8 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4613      	mov	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005762:	d308      	bcc.n	8005776 <UART_SetConfig+0x396>
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576a:	d204      	bcs.n	8005776 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	60da      	str	r2, [r3, #12]
 8005774:	e0b0      	b.n	80058d8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	76bb      	strb	r3, [r7, #26]
 800577a:	e0ad      	b.n	80058d8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005784:	d15b      	bne.n	800583e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005786:	7efb      	ldrb	r3, [r7, #27]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d828      	bhi.n	80057de <UART_SetConfig+0x3fe>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0x3b4>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	080057df 	.word	0x080057df
 80057a4:	080057cf 	.word	0x080057cf
 80057a8:	080057df 	.word	0x080057df
 80057ac:	080057df 	.word	0x080057df
 80057b0:	080057df 	.word	0x080057df
 80057b4:	080057d7 	.word	0x080057d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fe fc14 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 80057bc:	6178      	str	r0, [r7, #20]
        break;
 80057be:	e013      	b.n	80057e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fe fc26 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 80057c4:	6178      	str	r0, [r7, #20]
        break;
 80057c6:	e00f      	b.n	80057e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c8:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <UART_SetConfig+0x510>)
 80057ca:	617b      	str	r3, [r7, #20]
        break;
 80057cc:	e00c      	b.n	80057e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ce:	f7fe fb71 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80057d2:	6178      	str	r0, [r7, #20]
        break;
 80057d4:	e008      	b.n	80057e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057da:	617b      	str	r3, [r7, #20]
        break;
 80057dc:	e004      	b.n	80057e8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	76bb      	strb	r3, [r7, #26]
        break;
 80057e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d074      	beq.n	80058d8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	005a      	lsls	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d916      	bls.n	8005838 <UART_SetConfig+0x458>
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005810:	d212      	bcs.n	8005838 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f023 030f 	bic.w	r3, r3, #15
 800581a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	b29a      	uxth	r2, r3
 8005828:	89fb      	ldrh	r3, [r7, #14]
 800582a:	4313      	orrs	r3, r2
 800582c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	89fa      	ldrh	r2, [r7, #14]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	e04f      	b.n	80058d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	76bb      	strb	r3, [r7, #26]
 800583c:	e04c      	b.n	80058d8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800583e:	7efb      	ldrb	r3, [r7, #27]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d828      	bhi.n	8005896 <UART_SetConfig+0x4b6>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x46c>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	08005897 	.word	0x08005897
 800585c:	08005887 	.word	0x08005887
 8005860:	08005897 	.word	0x08005897
 8005864:	08005897 	.word	0x08005897
 8005868:	08005897 	.word	0x08005897
 800586c:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fe fbb8 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 8005874:	6178      	str	r0, [r7, #20]
        break;
 8005876:	e013      	b.n	80058a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005878:	f7fe fbca 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 800587c:	6178      	str	r0, [r7, #20]
        break;
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <UART_SetConfig+0x510>)
 8005882:	617b      	str	r3, [r7, #20]
        break;
 8005884:	e00c      	b.n	80058a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fe fb15 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 800588a:	6178      	str	r0, [r7, #20]
        break;
 800588c:	e008      	b.n	80058a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	617b      	str	r3, [r7, #20]
        break;
 8005894:	e004      	b.n	80058a0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	76bb      	strb	r3, [r7, #26]
        break;
 800589e:	bf00      	nop
    }

    if (pclk != 0U)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	085a      	lsrs	r2, r3, #1
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	441a      	add	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d909      	bls.n	80058d4 <UART_SetConfig+0x4f4>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c6:	d205      	bcs.n	80058d4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e001      	b.n	80058d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bdb0      	pop	{r4, r5, r7, pc}
 80058ee:	bf00      	nop
 80058f0:	00f42400 	.word	0x00f42400

080058f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f2:	d10a      	bne.n	8005a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a48:	f7fc fc64 	bl	8002314 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d10e      	bne.n	8005a7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f82d 	bl	8005aca <UART_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e023      	b.n	8005ac2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d10e      	bne.n	8005aa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f817 	bl	8005aca <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e00d      	b.n	8005ac2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b09c      	sub	sp, #112	; 0x70
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ada:	e0a5      	b.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	f000 80a1 	beq.w	8005c28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae6:	f7fc fc15 	bl	8002314 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <UART_WaitOnFlagUntilTimeout+0x32>
 8005af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d13e      	bne.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b10:	667b      	str	r3, [r7, #100]	; 0x64
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3308      	adds	r3, #8
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e5      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e067      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d04f      	beq.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b96:	d147      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e6      	bne.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bf4:	623a      	str	r2, [r7, #32]
 8005bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e010      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	f43f af4a 	beq.w	8005adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3770      	adds	r7, #112	; 0x70
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b095      	sub	sp, #84	; 0x54
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d118      	bne.n	8005cfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d0c:	bf00      	nop
 8005d0e:	3754      	adds	r7, #84	; 0x54
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff fb3c 	bl	80053b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6979      	ldr	r1, [r7, #20]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	613b      	str	r3, [r7, #16]
   return(result);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e6      	bne.n	8005d4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fb08 	bl	80053a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d90:	bf00      	nop
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <__errno>:
 8005dac:	4b01      	ldr	r3, [pc, #4]	; (8005db4 <__errno+0x8>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	2000001c 	.word	0x2000001c

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4d0d      	ldr	r5, [pc, #52]	; (8005df0 <__libc_init_array+0x38>)
 8005dbc:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dbe:	1b64      	subs	r4, r4, r5
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	42a6      	cmp	r6, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	4d0b      	ldr	r5, [pc, #44]	; (8005df8 <__libc_init_array+0x40>)
 8005dca:	4c0c      	ldr	r4, [pc, #48]	; (8005dfc <__libc_init_array+0x44>)
 8005dcc:	f004 fc54 	bl	800a678 <_init>
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	42a6      	cmp	r6, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de0:	4798      	blx	r3
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dea:	4798      	blx	r3
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	0800b174 	.word	0x0800b174
 8005df4:	0800b174 	.word	0x0800b174
 8005df8:	0800b174 	.word	0x0800b174
 8005dfc:	0800b178 	.word	0x0800b178

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <__cvt>:
 8005e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e14:	ec55 4b10 	vmov	r4, r5, d0
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	460e      	mov	r6, r1
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	462b      	mov	r3, r5
 8005e20:	bfbb      	ittet	lt
 8005e22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e26:	461d      	movlt	r5, r3
 8005e28:	2300      	movge	r3, #0
 8005e2a:	232d      	movlt	r3, #45	; 0x2d
 8005e2c:	700b      	strb	r3, [r1, #0]
 8005e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e34:	4691      	mov	r9, r2
 8005e36:	f023 0820 	bic.w	r8, r3, #32
 8005e3a:	bfbc      	itt	lt
 8005e3c:	4622      	movlt	r2, r4
 8005e3e:	4614      	movlt	r4, r2
 8005e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e44:	d005      	beq.n	8005e52 <__cvt+0x42>
 8005e46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e4a:	d100      	bne.n	8005e4e <__cvt+0x3e>
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	2102      	movs	r1, #2
 8005e50:	e000      	b.n	8005e54 <__cvt+0x44>
 8005e52:	2103      	movs	r1, #3
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	ab02      	add	r3, sp, #8
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	ec45 4b10 	vmov	d0, r4, r5
 8005e60:	4653      	mov	r3, sl
 8005e62:	4632      	mov	r2, r6
 8005e64:	f001 fdc4 	bl	80079f0 <_dtoa_r>
 8005e68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	d102      	bne.n	8005e76 <__cvt+0x66>
 8005e70:	f019 0f01 	tst.w	r9, #1
 8005e74:	d022      	beq.n	8005ebc <__cvt+0xac>
 8005e76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e7a:	eb07 0906 	add.w	r9, r7, r6
 8005e7e:	d110      	bne.n	8005ea2 <__cvt+0x92>
 8005e80:	783b      	ldrb	r3, [r7, #0]
 8005e82:	2b30      	cmp	r3, #48	; 0x30
 8005e84:	d10a      	bne.n	8005e9c <__cvt+0x8c>
 8005e86:	2200      	movs	r2, #0
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e92:	b918      	cbnz	r0, 8005e9c <__cvt+0x8c>
 8005e94:	f1c6 0601 	rsb	r6, r6, #1
 8005e98:	f8ca 6000 	str.w	r6, [sl]
 8005e9c:	f8da 3000 	ldr.w	r3, [sl]
 8005ea0:	4499      	add	r9, r3
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005eae:	b108      	cbz	r0, 8005eb4 <__cvt+0xa4>
 8005eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005eb4:	2230      	movs	r2, #48	; 0x30
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	454b      	cmp	r3, r9
 8005eba:	d307      	bcc.n	8005ecc <__cvt+0xbc>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ec0:	1bdb      	subs	r3, r3, r7
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	b004      	add	sp, #16
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	1c59      	adds	r1, r3, #1
 8005ece:	9103      	str	r1, [sp, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	e7f0      	b.n	8005eb6 <__cvt+0xa6>

08005ed4 <__exponent>:
 8005ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	bfb8      	it	lt
 8005edc:	4249      	neglt	r1, r1
 8005ede:	f803 2b02 	strb.w	r2, [r3], #2
 8005ee2:	bfb4      	ite	lt
 8005ee4:	222d      	movlt	r2, #45	; 0x2d
 8005ee6:	222b      	movge	r2, #43	; 0x2b
 8005ee8:	2909      	cmp	r1, #9
 8005eea:	7042      	strb	r2, [r0, #1]
 8005eec:	dd2a      	ble.n	8005f44 <__exponent+0x70>
 8005eee:	f10d 0407 	add.w	r4, sp, #7
 8005ef2:	46a4      	mov	ip, r4
 8005ef4:	270a      	movs	r7, #10
 8005ef6:	46a6      	mov	lr, r4
 8005ef8:	460a      	mov	r2, r1
 8005efa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005efe:	fb07 1516 	mls	r5, r7, r6, r1
 8005f02:	3530      	adds	r5, #48	; 0x30
 8005f04:	2a63      	cmp	r2, #99	; 0x63
 8005f06:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f0e:	4631      	mov	r1, r6
 8005f10:	dcf1      	bgt.n	8005ef6 <__exponent+0x22>
 8005f12:	3130      	adds	r1, #48	; 0x30
 8005f14:	f1ae 0502 	sub.w	r5, lr, #2
 8005f18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f1c:	1c44      	adds	r4, r0, #1
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4561      	cmp	r1, ip
 8005f22:	d30a      	bcc.n	8005f3a <__exponent+0x66>
 8005f24:	f10d 0209 	add.w	r2, sp, #9
 8005f28:	eba2 020e 	sub.w	r2, r2, lr
 8005f2c:	4565      	cmp	r5, ip
 8005f2e:	bf88      	it	hi
 8005f30:	2200      	movhi	r2, #0
 8005f32:	4413      	add	r3, r2
 8005f34:	1a18      	subs	r0, r3, r0
 8005f36:	b003      	add	sp, #12
 8005f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f42:	e7ed      	b.n	8005f20 <__exponent+0x4c>
 8005f44:	2330      	movs	r3, #48	; 0x30
 8005f46:	3130      	adds	r1, #48	; 0x30
 8005f48:	7083      	strb	r3, [r0, #2]
 8005f4a:	70c1      	strb	r1, [r0, #3]
 8005f4c:	1d03      	adds	r3, r0, #4
 8005f4e:	e7f1      	b.n	8005f34 <__exponent+0x60>

08005f50 <_printf_float>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	ed2d 8b02 	vpush	{d8}
 8005f58:	b08d      	sub	sp, #52	; 0x34
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f60:	4616      	mov	r6, r2
 8005f62:	461f      	mov	r7, r3
 8005f64:	4605      	mov	r5, r0
 8005f66:	f002 fe9f 	bl	8008ca8 <_localeconv_r>
 8005f6a:	f8d0 a000 	ldr.w	sl, [r0]
 8005f6e:	4650      	mov	r0, sl
 8005f70:	f7fa f938 	bl	80001e4 <strlen>
 8005f74:	2300      	movs	r3, #0
 8005f76:	930a      	str	r3, [sp, #40]	; 0x28
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f84:	3307      	adds	r3, #7
 8005f86:	f023 0307 	bic.w	r3, r3, #7
 8005f8a:	f103 0208 	add.w	r2, r3, #8
 8005f8e:	f8c8 2000 	str.w	r2, [r8]
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fa2:	9307      	str	r3, [sp, #28]
 8005fa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fa8:	ee08 0a10 	vmov	s16, r0
 8005fac:	4b9f      	ldr	r3, [pc, #636]	; (800622c <_printf_float+0x2dc>)
 8005fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	f7fa fdc9 	bl	8000b4c <__aeabi_dcmpun>
 8005fba:	bb88      	cbnz	r0, 8006020 <_printf_float+0xd0>
 8005fbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc0:	4b9a      	ldr	r3, [pc, #616]	; (800622c <_printf_float+0x2dc>)
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	f7fa fda3 	bl	8000b10 <__aeabi_dcmple>
 8005fca:	bb48      	cbnz	r0, 8006020 <_printf_float+0xd0>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa fd92 	bl	8000afc <__aeabi_dcmplt>
 8005fd8:	b110      	cbz	r0, 8005fe0 <_printf_float+0x90>
 8005fda:	232d      	movs	r3, #45	; 0x2d
 8005fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe0:	4b93      	ldr	r3, [pc, #588]	; (8006230 <_printf_float+0x2e0>)
 8005fe2:	4894      	ldr	r0, [pc, #592]	; (8006234 <_printf_float+0x2e4>)
 8005fe4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fe8:	bf94      	ite	ls
 8005fea:	4698      	movls	r8, r3
 8005fec:	4680      	movhi	r8, r0
 8005fee:	2303      	movs	r3, #3
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	f023 0204 	bic.w	r2, r3, #4
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	f04f 0900 	mov.w	r9, #0
 8005ffe:	9700      	str	r7, [sp, #0]
 8006000:	4633      	mov	r3, r6
 8006002:	aa0b      	add	r2, sp, #44	; 0x2c
 8006004:	4621      	mov	r1, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 f9d8 	bl	80063bc <_printf_common>
 800600c:	3001      	adds	r0, #1
 800600e:	f040 8090 	bne.w	8006132 <_printf_float+0x1e2>
 8006012:	f04f 30ff 	mov.w	r0, #4294967295
 8006016:	b00d      	add	sp, #52	; 0x34
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7fa fd90 	bl	8000b4c <__aeabi_dcmpun>
 800602c:	b140      	cbz	r0, 8006040 <_printf_float+0xf0>
 800602e:	464b      	mov	r3, r9
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfbc      	itt	lt
 8006034:	232d      	movlt	r3, #45	; 0x2d
 8006036:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800603a:	487f      	ldr	r0, [pc, #508]	; (8006238 <_printf_float+0x2e8>)
 800603c:	4b7f      	ldr	r3, [pc, #508]	; (800623c <_printf_float+0x2ec>)
 800603e:	e7d1      	b.n	8005fe4 <_printf_float+0x94>
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006046:	9206      	str	r2, [sp, #24]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	d13f      	bne.n	80060cc <_printf_float+0x17c>
 800604c:	2306      	movs	r3, #6
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	9b05      	ldr	r3, [sp, #20]
 8006052:	6861      	ldr	r1, [r4, #4]
 8006054:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006058:	2300      	movs	r3, #0
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	ab0a      	add	r3, sp, #40	; 0x28
 800605e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006062:	ab09      	add	r3, sp, #36	; 0x24
 8006064:	ec49 8b10 	vmov	d0, r8, r9
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6022      	str	r2, [r4, #0]
 800606c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006070:	4628      	mov	r0, r5
 8006072:	f7ff fecd 	bl	8005e10 <__cvt>
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800607a:	2b47      	cmp	r3, #71	; 0x47
 800607c:	4680      	mov	r8, r0
 800607e:	d108      	bne.n	8006092 <_printf_float+0x142>
 8006080:	1cc8      	adds	r0, r1, #3
 8006082:	db02      	blt.n	800608a <_printf_float+0x13a>
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	4299      	cmp	r1, r3
 8006088:	dd41      	ble.n	800610e <_printf_float+0x1be>
 800608a:	f1ab 0b02 	sub.w	fp, fp, #2
 800608e:	fa5f fb8b 	uxtb.w	fp, fp
 8006092:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006096:	d820      	bhi.n	80060da <_printf_float+0x18a>
 8006098:	3901      	subs	r1, #1
 800609a:	465a      	mov	r2, fp
 800609c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060a0:	9109      	str	r1, [sp, #36]	; 0x24
 80060a2:	f7ff ff17 	bl	8005ed4 <__exponent>
 80060a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a8:	1813      	adds	r3, r2, r0
 80060aa:	2a01      	cmp	r2, #1
 80060ac:	4681      	mov	r9, r0
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	dc02      	bgt.n	80060b8 <_printf_float+0x168>
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	07d2      	lsls	r2, r2, #31
 80060b6:	d501      	bpl.n	80060bc <_printf_float+0x16c>
 80060b8:	3301      	adds	r3, #1
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d09c      	beq.n	8005ffe <_printf_float+0xae>
 80060c4:	232d      	movs	r3, #45	; 0x2d
 80060c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ca:	e798      	b.n	8005ffe <_printf_float+0xae>
 80060cc:	9a06      	ldr	r2, [sp, #24]
 80060ce:	2a47      	cmp	r2, #71	; 0x47
 80060d0:	d1be      	bne.n	8006050 <_printf_float+0x100>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1bc      	bne.n	8006050 <_printf_float+0x100>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e7b9      	b.n	800604e <_printf_float+0xfe>
 80060da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060de:	d118      	bne.n	8006112 <_printf_float+0x1c2>
 80060e0:	2900      	cmp	r1, #0
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	dd0b      	ble.n	80060fe <_printf_float+0x1ae>
 80060e6:	6121      	str	r1, [r4, #16]
 80060e8:	b913      	cbnz	r3, 80060f0 <_printf_float+0x1a0>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	07d0      	lsls	r0, r2, #31
 80060ee:	d502      	bpl.n	80060f6 <_printf_float+0x1a6>
 80060f0:	3301      	adds	r3, #1
 80060f2:	440b      	add	r3, r1
 80060f4:	6123      	str	r3, [r4, #16]
 80060f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060f8:	f04f 0900 	mov.w	r9, #0
 80060fc:	e7de      	b.n	80060bc <_printf_float+0x16c>
 80060fe:	b913      	cbnz	r3, 8006106 <_printf_float+0x1b6>
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	07d2      	lsls	r2, r2, #31
 8006104:	d501      	bpl.n	800610a <_printf_float+0x1ba>
 8006106:	3302      	adds	r3, #2
 8006108:	e7f4      	b.n	80060f4 <_printf_float+0x1a4>
 800610a:	2301      	movs	r3, #1
 800610c:	e7f2      	b.n	80060f4 <_printf_float+0x1a4>
 800610e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006114:	4299      	cmp	r1, r3
 8006116:	db05      	blt.n	8006124 <_printf_float+0x1d4>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	6121      	str	r1, [r4, #16]
 800611c:	07d8      	lsls	r0, r3, #31
 800611e:	d5ea      	bpl.n	80060f6 <_printf_float+0x1a6>
 8006120:	1c4b      	adds	r3, r1, #1
 8006122:	e7e7      	b.n	80060f4 <_printf_float+0x1a4>
 8006124:	2900      	cmp	r1, #0
 8006126:	bfd4      	ite	le
 8006128:	f1c1 0202 	rsble	r2, r1, #2
 800612c:	2201      	movgt	r2, #1
 800612e:	4413      	add	r3, r2
 8006130:	e7e0      	b.n	80060f4 <_printf_float+0x1a4>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	055a      	lsls	r2, r3, #21
 8006136:	d407      	bmi.n	8006148 <_printf_float+0x1f8>
 8006138:	6923      	ldr	r3, [r4, #16]
 800613a:	4642      	mov	r2, r8
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	d12c      	bne.n	80061a0 <_printf_float+0x250>
 8006146:	e764      	b.n	8006012 <_printf_float+0xc2>
 8006148:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800614c:	f240 80e0 	bls.w	8006310 <_printf_float+0x3c0>
 8006150:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006154:	2200      	movs	r2, #0
 8006156:	2300      	movs	r3, #0
 8006158:	f7fa fcc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800615c:	2800      	cmp	r0, #0
 800615e:	d034      	beq.n	80061ca <_printf_float+0x27a>
 8006160:	4a37      	ldr	r2, [pc, #220]	; (8006240 <_printf_float+0x2f0>)
 8006162:	2301      	movs	r3, #1
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af51 	beq.w	8006012 <_printf_float+0xc2>
 8006170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006174:	429a      	cmp	r2, r3
 8006176:	db02      	blt.n	800617e <_printf_float+0x22e>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07d8      	lsls	r0, r3, #31
 800617c:	d510      	bpl.n	80061a0 <_printf_float+0x250>
 800617e:	ee18 3a10 	vmov	r3, s16
 8006182:	4652      	mov	r2, sl
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f af41 	beq.w	8006012 <_printf_float+0xc2>
 8006190:	f04f 0800 	mov.w	r8, #0
 8006194:	f104 091a 	add.w	r9, r4, #26
 8006198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800619a:	3b01      	subs	r3, #1
 800619c:	4543      	cmp	r3, r8
 800619e:	dc09      	bgt.n	80061b4 <_printf_float+0x264>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	079b      	lsls	r3, r3, #30
 80061a4:	f100 8105 	bmi.w	80063b2 <_printf_float+0x462>
 80061a8:	68e0      	ldr	r0, [r4, #12]
 80061aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ac:	4298      	cmp	r0, r3
 80061ae:	bfb8      	it	lt
 80061b0:	4618      	movlt	r0, r3
 80061b2:	e730      	b.n	8006016 <_printf_float+0xc6>
 80061b4:	2301      	movs	r3, #1
 80061b6:	464a      	mov	r2, r9
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af27 	beq.w	8006012 <_printf_float+0xc2>
 80061c4:	f108 0801 	add.w	r8, r8, #1
 80061c8:	e7e6      	b.n	8006198 <_printf_float+0x248>
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dc39      	bgt.n	8006244 <_printf_float+0x2f4>
 80061d0:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <_printf_float+0x2f0>)
 80061d2:	2301      	movs	r3, #1
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f af19 	beq.w	8006012 <_printf_float+0xc2>
 80061e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d102      	bne.n	80061ee <_printf_float+0x29e>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	07d9      	lsls	r1, r3, #31
 80061ec:	d5d8      	bpl.n	80061a0 <_printf_float+0x250>
 80061ee:	ee18 3a10 	vmov	r3, s16
 80061f2:	4652      	mov	r2, sl
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f af09 	beq.w	8006012 <_printf_float+0xc2>
 8006200:	f04f 0900 	mov.w	r9, #0
 8006204:	f104 0a1a 	add.w	sl, r4, #26
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	425b      	negs	r3, r3
 800620c:	454b      	cmp	r3, r9
 800620e:	dc01      	bgt.n	8006214 <_printf_float+0x2c4>
 8006210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006212:	e792      	b.n	800613a <_printf_float+0x1ea>
 8006214:	2301      	movs	r3, #1
 8006216:	4652      	mov	r2, sl
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f43f aef7 	beq.w	8006012 <_printf_float+0xc2>
 8006224:	f109 0901 	add.w	r9, r9, #1
 8006228:	e7ee      	b.n	8006208 <_printf_float+0x2b8>
 800622a:	bf00      	nop
 800622c:	7fefffff 	.word	0x7fefffff
 8006230:	0800acb8 	.word	0x0800acb8
 8006234:	0800acbc 	.word	0x0800acbc
 8006238:	0800acc4 	.word	0x0800acc4
 800623c:	0800acc0 	.word	0x0800acc0
 8006240:	0800acc8 	.word	0x0800acc8
 8006244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006248:	429a      	cmp	r2, r3
 800624a:	bfa8      	it	ge
 800624c:	461a      	movge	r2, r3
 800624e:	2a00      	cmp	r2, #0
 8006250:	4691      	mov	r9, r2
 8006252:	dc37      	bgt.n	80062c4 <_printf_float+0x374>
 8006254:	f04f 0b00 	mov.w	fp, #0
 8006258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625c:	f104 021a 	add.w	r2, r4, #26
 8006260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	eba3 0309 	sub.w	r3, r3, r9
 8006268:	455b      	cmp	r3, fp
 800626a:	dc33      	bgt.n	80062d4 <_printf_float+0x384>
 800626c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006270:	429a      	cmp	r2, r3
 8006272:	db3b      	blt.n	80062ec <_printf_float+0x39c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	07da      	lsls	r2, r3, #31
 8006278:	d438      	bmi.n	80062ec <_printf_float+0x39c>
 800627a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627c:	9b05      	ldr	r3, [sp, #20]
 800627e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	eba2 0901 	sub.w	r9, r2, r1
 8006286:	4599      	cmp	r9, r3
 8006288:	bfa8      	it	ge
 800628a:	4699      	movge	r9, r3
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	dc35      	bgt.n	80062fe <_printf_float+0x3ae>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800629a:	f104 0a1a 	add.w	sl, r4, #26
 800629e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	eba3 0309 	sub.w	r3, r3, r9
 80062a8:	4543      	cmp	r3, r8
 80062aa:	f77f af79 	ble.w	80061a0 <_printf_float+0x250>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f aeaa 	beq.w	8006012 <_printf_float+0xc2>
 80062be:	f108 0801 	add.w	r8, r8, #1
 80062c2:	e7ec      	b.n	800629e <_printf_float+0x34e>
 80062c4:	4613      	mov	r3, r2
 80062c6:	4631      	mov	r1, r6
 80062c8:	4642      	mov	r2, r8
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d1c0      	bne.n	8006254 <_printf_float+0x304>
 80062d2:	e69e      	b.n	8006012 <_printf_float+0xc2>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	9205      	str	r2, [sp, #20]
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f ae97 	beq.w	8006012 <_printf_float+0xc2>
 80062e4:	9a05      	ldr	r2, [sp, #20]
 80062e6:	f10b 0b01 	add.w	fp, fp, #1
 80062ea:	e7b9      	b.n	8006260 <_printf_float+0x310>
 80062ec:	ee18 3a10 	vmov	r3, s16
 80062f0:	4652      	mov	r2, sl
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1be      	bne.n	800627a <_printf_float+0x32a>
 80062fc:	e689      	b.n	8006012 <_printf_float+0xc2>
 80062fe:	9a05      	ldr	r2, [sp, #20]
 8006300:	464b      	mov	r3, r9
 8006302:	4442      	add	r2, r8
 8006304:	4631      	mov	r1, r6
 8006306:	4628      	mov	r0, r5
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	d1c1      	bne.n	8006292 <_printf_float+0x342>
 800630e:	e680      	b.n	8006012 <_printf_float+0xc2>
 8006310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006312:	2a01      	cmp	r2, #1
 8006314:	dc01      	bgt.n	800631a <_printf_float+0x3ca>
 8006316:	07db      	lsls	r3, r3, #31
 8006318:	d538      	bpl.n	800638c <_printf_float+0x43c>
 800631a:	2301      	movs	r3, #1
 800631c:	4642      	mov	r2, r8
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	f43f ae74 	beq.w	8006012 <_printf_float+0xc2>
 800632a:	ee18 3a10 	vmov	r3, s16
 800632e:	4652      	mov	r2, sl
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f ae6b 	beq.w	8006012 <_printf_float+0xc2>
 800633c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	f7fa fbd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006348:	b9d8      	cbnz	r0, 8006382 <_printf_float+0x432>
 800634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800634c:	f108 0201 	add.w	r2, r8, #1
 8006350:	3b01      	subs	r3, #1
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	d10e      	bne.n	800637a <_printf_float+0x42a>
 800635c:	e659      	b.n	8006012 <_printf_float+0xc2>
 800635e:	2301      	movs	r3, #1
 8006360:	4652      	mov	r2, sl
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae52 	beq.w	8006012 <_printf_float+0xc2>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006374:	3b01      	subs	r3, #1
 8006376:	4543      	cmp	r3, r8
 8006378:	dcf1      	bgt.n	800635e <_printf_float+0x40e>
 800637a:	464b      	mov	r3, r9
 800637c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006380:	e6dc      	b.n	800613c <_printf_float+0x1ec>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 0a1a 	add.w	sl, r4, #26
 800638a:	e7f2      	b.n	8006372 <_printf_float+0x422>
 800638c:	2301      	movs	r3, #1
 800638e:	4642      	mov	r2, r8
 8006390:	e7df      	b.n	8006352 <_printf_float+0x402>
 8006392:	2301      	movs	r3, #1
 8006394:	464a      	mov	r2, r9
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae38 	beq.w	8006012 <_printf_float+0xc2>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	4543      	cmp	r3, r8
 80063ae:	dcf0      	bgt.n	8006392 <_printf_float+0x442>
 80063b0:	e6fa      	b.n	80061a8 <_printf_float+0x258>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	f104 0919 	add.w	r9, r4, #25
 80063ba:	e7f4      	b.n	80063a6 <_printf_float+0x456>

080063bc <_printf_common>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4616      	mov	r6, r2
 80063c2:	4699      	mov	r9, r3
 80063c4:	688a      	ldr	r2, [r1, #8]
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bfb8      	it	lt
 80063d0:	4613      	movlt	r3, r2
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d8:	4607      	mov	r7, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	b10a      	cbz	r2, 80063e2 <_printf_common+0x26>
 80063de:	3301      	adds	r3, #1
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	0699      	lsls	r1, r3, #26
 80063e6:	bf42      	ittt	mi
 80063e8:	6833      	ldrmi	r3, [r6, #0]
 80063ea:	3302      	addmi	r3, #2
 80063ec:	6033      	strmi	r3, [r6, #0]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	f015 0506 	ands.w	r5, r5, #6
 80063f4:	d106      	bne.n	8006404 <_printf_common+0x48>
 80063f6:	f104 0a19 	add.w	sl, r4, #25
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	6832      	ldr	r2, [r6, #0]
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc26      	bgt.n	8006452 <_printf_common+0x96>
 8006404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006408:	1e13      	subs	r3, r2, #0
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	bf18      	it	ne
 800640e:	2301      	movne	r3, #1
 8006410:	0692      	lsls	r2, r2, #26
 8006412:	d42b      	bmi.n	800646c <_printf_common+0xb0>
 8006414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006418:	4649      	mov	r1, r9
 800641a:	4638      	mov	r0, r7
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d01e      	beq.n	8006460 <_printf_common+0xa4>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	68e5      	ldr	r5, [r4, #12]
 8006426:	6832      	ldr	r2, [r6, #0]
 8006428:	f003 0306 	and.w	r3, r3, #6
 800642c:	2b04      	cmp	r3, #4
 800642e:	bf08      	it	eq
 8006430:	1aad      	subeq	r5, r5, r2
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	6922      	ldr	r2, [r4, #16]
 8006436:	bf0c      	ite	eq
 8006438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800643c:	2500      	movne	r5, #0
 800643e:	4293      	cmp	r3, r2
 8006440:	bfc4      	itt	gt
 8006442:	1a9b      	subgt	r3, r3, r2
 8006444:	18ed      	addgt	r5, r5, r3
 8006446:	2600      	movs	r6, #0
 8006448:	341a      	adds	r4, #26
 800644a:	42b5      	cmp	r5, r6
 800644c:	d11a      	bne.n	8006484 <_printf_common+0xc8>
 800644e:	2000      	movs	r0, #0
 8006450:	e008      	b.n	8006464 <_printf_common+0xa8>
 8006452:	2301      	movs	r3, #1
 8006454:	4652      	mov	r2, sl
 8006456:	4649      	mov	r1, r9
 8006458:	4638      	mov	r0, r7
 800645a:	47c0      	blx	r8
 800645c:	3001      	adds	r0, #1
 800645e:	d103      	bne.n	8006468 <_printf_common+0xac>
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	3501      	adds	r5, #1
 800646a:	e7c6      	b.n	80063fa <_printf_common+0x3e>
 800646c:	18e1      	adds	r1, r4, r3
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	2030      	movs	r0, #48	; 0x30
 8006472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006476:	4422      	add	r2, r4
 8006478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800647c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006480:	3302      	adds	r3, #2
 8006482:	e7c7      	b.n	8006414 <_printf_common+0x58>
 8006484:	2301      	movs	r3, #1
 8006486:	4622      	mov	r2, r4
 8006488:	4649      	mov	r1, r9
 800648a:	4638      	mov	r0, r7
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d0e6      	beq.n	8006460 <_printf_common+0xa4>
 8006492:	3601      	adds	r6, #1
 8006494:	e7d9      	b.n	800644a <_printf_common+0x8e>
	...

08006498 <_printf_i>:
 8006498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	4691      	mov	r9, r2
 80064a0:	7e27      	ldrb	r7, [r4, #24]
 80064a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064a4:	2f78      	cmp	r7, #120	; 0x78
 80064a6:	4680      	mov	r8, r0
 80064a8:	469a      	mov	sl, r3
 80064aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ae:	d807      	bhi.n	80064c0 <_printf_i+0x28>
 80064b0:	2f62      	cmp	r7, #98	; 0x62
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x32>
 80064b4:	2f00      	cmp	r7, #0
 80064b6:	f000 80d8 	beq.w	800666a <_printf_i+0x1d2>
 80064ba:	2f58      	cmp	r7, #88	; 0x58
 80064bc:	f000 80a3 	beq.w	8006606 <_printf_i+0x16e>
 80064c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c8:	e03a      	b.n	8006540 <_printf_i+0xa8>
 80064ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ce:	2b15      	cmp	r3, #21
 80064d0:	d8f6      	bhi.n	80064c0 <_printf_i+0x28>
 80064d2:	a001      	add	r0, pc, #4	; (adr r0, 80064d8 <_printf_i+0x40>)
 80064d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006545 	.word	0x08006545
 80064e0:	080064c1 	.word	0x080064c1
 80064e4:	080064c1 	.word	0x080064c1
 80064e8:	080064c1 	.word	0x080064c1
 80064ec:	080064c1 	.word	0x080064c1
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080064c1 	.word	0x080064c1
 80064f8:	080064c1 	.word	0x080064c1
 80064fc:	080064c1 	.word	0x080064c1
 8006500:	080064c1 	.word	0x080064c1
 8006504:	08006651 	.word	0x08006651
 8006508:	08006575 	.word	0x08006575
 800650c:	08006633 	.word	0x08006633
 8006510:	080064c1 	.word	0x080064c1
 8006514:	080064c1 	.word	0x080064c1
 8006518:	08006673 	.word	0x08006673
 800651c:	080064c1 	.word	0x080064c1
 8006520:	08006575 	.word	0x08006575
 8006524:	080064c1 	.word	0x080064c1
 8006528:	080064c1 	.word	0x080064c1
 800652c:	0800663b 	.word	0x0800663b
 8006530:	680b      	ldr	r3, [r1, #0]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	600a      	str	r2, [r1, #0]
 8006538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800653c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006540:	2301      	movs	r3, #1
 8006542:	e0a3      	b.n	800668c <_printf_i+0x1f4>
 8006544:	6825      	ldr	r5, [r4, #0]
 8006546:	6808      	ldr	r0, [r1, #0]
 8006548:	062e      	lsls	r6, r5, #24
 800654a:	f100 0304 	add.w	r3, r0, #4
 800654e:	d50a      	bpl.n	8006566 <_printf_i+0xce>
 8006550:	6805      	ldr	r5, [r0, #0]
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	2d00      	cmp	r5, #0
 8006556:	da03      	bge.n	8006560 <_printf_i+0xc8>
 8006558:	232d      	movs	r3, #45	; 0x2d
 800655a:	426d      	negs	r5, r5
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	485e      	ldr	r0, [pc, #376]	; (80066dc <_printf_i+0x244>)
 8006562:	230a      	movs	r3, #10
 8006564:	e019      	b.n	800659a <_printf_i+0x102>
 8006566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800656a:	6805      	ldr	r5, [r0, #0]
 800656c:	600b      	str	r3, [r1, #0]
 800656e:	bf18      	it	ne
 8006570:	b22d      	sxthne	r5, r5
 8006572:	e7ef      	b.n	8006554 <_printf_i+0xbc>
 8006574:	680b      	ldr	r3, [r1, #0]
 8006576:	6825      	ldr	r5, [r4, #0]
 8006578:	1d18      	adds	r0, r3, #4
 800657a:	6008      	str	r0, [r1, #0]
 800657c:	0628      	lsls	r0, r5, #24
 800657e:	d501      	bpl.n	8006584 <_printf_i+0xec>
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0xf2>
 8006584:	0669      	lsls	r1, r5, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0xe8>
 8006588:	881d      	ldrh	r5, [r3, #0]
 800658a:	4854      	ldr	r0, [pc, #336]	; (80066dc <_printf_i+0x244>)
 800658c:	2f6f      	cmp	r7, #111	; 0x6f
 800658e:	bf0c      	ite	eq
 8006590:	2308      	moveq	r3, #8
 8006592:	230a      	movne	r3, #10
 8006594:	2100      	movs	r1, #0
 8006596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800659a:	6866      	ldr	r6, [r4, #4]
 800659c:	60a6      	str	r6, [r4, #8]
 800659e:	2e00      	cmp	r6, #0
 80065a0:	bfa2      	ittt	ge
 80065a2:	6821      	ldrge	r1, [r4, #0]
 80065a4:	f021 0104 	bicge.w	r1, r1, #4
 80065a8:	6021      	strge	r1, [r4, #0]
 80065aa:	b90d      	cbnz	r5, 80065b0 <_printf_i+0x118>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	d04d      	beq.n	800664c <_printf_i+0x1b4>
 80065b0:	4616      	mov	r6, r2
 80065b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065b6:	fb03 5711 	mls	r7, r3, r1, r5
 80065ba:	5dc7      	ldrb	r7, [r0, r7]
 80065bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065c0:	462f      	mov	r7, r5
 80065c2:	42bb      	cmp	r3, r7
 80065c4:	460d      	mov	r5, r1
 80065c6:	d9f4      	bls.n	80065b2 <_printf_i+0x11a>
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d10b      	bne.n	80065e4 <_printf_i+0x14c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07df      	lsls	r7, r3, #31
 80065d0:	d508      	bpl.n	80065e4 <_printf_i+0x14c>
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6861      	ldr	r1, [r4, #4]
 80065d6:	4299      	cmp	r1, r3
 80065d8:	bfde      	ittt	le
 80065da:	2330      	movle	r3, #48	; 0x30
 80065dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065e4:	1b92      	subs	r2, r2, r6
 80065e6:	6122      	str	r2, [r4, #16]
 80065e8:	f8cd a000 	str.w	sl, [sp]
 80065ec:	464b      	mov	r3, r9
 80065ee:	aa03      	add	r2, sp, #12
 80065f0:	4621      	mov	r1, r4
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff fee2 	bl	80063bc <_printf_common>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d14c      	bne.n	8006696 <_printf_i+0x1fe>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	b004      	add	sp, #16
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	4835      	ldr	r0, [pc, #212]	; (80066dc <_printf_i+0x244>)
 8006608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	680e      	ldr	r6, [r1, #0]
 8006610:	061f      	lsls	r7, r3, #24
 8006612:	f856 5b04 	ldr.w	r5, [r6], #4
 8006616:	600e      	str	r6, [r1, #0]
 8006618:	d514      	bpl.n	8006644 <_printf_i+0x1ac>
 800661a:	07d9      	lsls	r1, r3, #31
 800661c:	bf44      	itt	mi
 800661e:	f043 0320 	orrmi.w	r3, r3, #32
 8006622:	6023      	strmi	r3, [r4, #0]
 8006624:	b91d      	cbnz	r5, 800662e <_printf_i+0x196>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f023 0320 	bic.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	2310      	movs	r3, #16
 8006630:	e7b0      	b.n	8006594 <_printf_i+0xfc>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f043 0320 	orr.w	r3, r3, #32
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2378      	movs	r3, #120	; 0x78
 800663c:	4828      	ldr	r0, [pc, #160]	; (80066e0 <_printf_i+0x248>)
 800663e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006642:	e7e3      	b.n	800660c <_printf_i+0x174>
 8006644:	065e      	lsls	r6, r3, #25
 8006646:	bf48      	it	mi
 8006648:	b2ad      	uxthmi	r5, r5
 800664a:	e7e6      	b.n	800661a <_printf_i+0x182>
 800664c:	4616      	mov	r6, r2
 800664e:	e7bb      	b.n	80065c8 <_printf_i+0x130>
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	6826      	ldr	r6, [r4, #0]
 8006654:	6960      	ldr	r0, [r4, #20]
 8006656:	1d1d      	adds	r5, r3, #4
 8006658:	600d      	str	r5, [r1, #0]
 800665a:	0635      	lsls	r5, r6, #24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	d501      	bpl.n	8006664 <_printf_i+0x1cc>
 8006660:	6018      	str	r0, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0x1d2>
 8006664:	0671      	lsls	r1, r6, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0x1c8>
 8006668:	8018      	strh	r0, [r3, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	4616      	mov	r6, r2
 8006670:	e7ba      	b.n	80065e8 <_printf_i+0x150>
 8006672:	680b      	ldr	r3, [r1, #0]
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	600a      	str	r2, [r1, #0]
 8006678:	681e      	ldr	r6, [r3, #0]
 800667a:	6862      	ldr	r2, [r4, #4]
 800667c:	2100      	movs	r1, #0
 800667e:	4630      	mov	r0, r6
 8006680:	f7f9 fdbe 	bl	8000200 <memchr>
 8006684:	b108      	cbz	r0, 800668a <_printf_i+0x1f2>
 8006686:	1b80      	subs	r0, r0, r6
 8006688:	6060      	str	r0, [r4, #4]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	2300      	movs	r3, #0
 8006690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006694:	e7a8      	b.n	80065e8 <_printf_i+0x150>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	4632      	mov	r2, r6
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	47d0      	blx	sl
 80066a0:	3001      	adds	r0, #1
 80066a2:	d0ab      	beq.n	80065fc <_printf_i+0x164>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	079b      	lsls	r3, r3, #30
 80066a8:	d413      	bmi.n	80066d2 <_printf_i+0x23a>
 80066aa:	68e0      	ldr	r0, [r4, #12]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	4298      	cmp	r0, r3
 80066b0:	bfb8      	it	lt
 80066b2:	4618      	movlt	r0, r3
 80066b4:	e7a4      	b.n	8006600 <_printf_i+0x168>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4632      	mov	r2, r6
 80066ba:	4649      	mov	r1, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	47d0      	blx	sl
 80066c0:	3001      	adds	r0, #1
 80066c2:	d09b      	beq.n	80065fc <_printf_i+0x164>
 80066c4:	3501      	adds	r5, #1
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	9903      	ldr	r1, [sp, #12]
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dcf2      	bgt.n	80066b6 <_printf_i+0x21e>
 80066d0:	e7eb      	b.n	80066aa <_printf_i+0x212>
 80066d2:	2500      	movs	r5, #0
 80066d4:	f104 0619 	add.w	r6, r4, #25
 80066d8:	e7f5      	b.n	80066c6 <_printf_i+0x22e>
 80066da:	bf00      	nop
 80066dc:	0800acca 	.word	0x0800acca
 80066e0:	0800acdb 	.word	0x0800acdb

080066e4 <_scanf_float>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	b087      	sub	sp, #28
 80066ea:	4617      	mov	r7, r2
 80066ec:	9303      	str	r3, [sp, #12]
 80066ee:	688b      	ldr	r3, [r1, #8]
 80066f0:	1e5a      	subs	r2, r3, #1
 80066f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066f6:	bf83      	ittte	hi
 80066f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066fc:	195b      	addhi	r3, r3, r5
 80066fe:	9302      	strhi	r3, [sp, #8]
 8006700:	2300      	movls	r3, #0
 8006702:	bf86      	itte	hi
 8006704:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006708:	608b      	strhi	r3, [r1, #8]
 800670a:	9302      	strls	r3, [sp, #8]
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	468b      	mov	fp, r1
 8006710:	2500      	movs	r5, #0
 8006712:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006716:	f84b 3b1c 	str.w	r3, [fp], #28
 800671a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800671e:	4680      	mov	r8, r0
 8006720:	460c      	mov	r4, r1
 8006722:	465e      	mov	r6, fp
 8006724:	46aa      	mov	sl, r5
 8006726:	46a9      	mov	r9, r5
 8006728:	9501      	str	r5, [sp, #4]
 800672a:	68a2      	ldr	r2, [r4, #8]
 800672c:	b152      	cbz	r2, 8006744 <_scanf_float+0x60>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b4e      	cmp	r3, #78	; 0x4e
 8006734:	d864      	bhi.n	8006800 <_scanf_float+0x11c>
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d83c      	bhi.n	80067b4 <_scanf_float+0xd0>
 800673a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800673e:	b2c8      	uxtb	r0, r1
 8006740:	280e      	cmp	r0, #14
 8006742:	d93a      	bls.n	80067ba <_scanf_float+0xd6>
 8006744:	f1b9 0f00 	cmp.w	r9, #0
 8006748:	d003      	beq.n	8006752 <_scanf_float+0x6e>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006756:	f1ba 0f01 	cmp.w	sl, #1
 800675a:	f200 8113 	bhi.w	8006984 <_scanf_float+0x2a0>
 800675e:	455e      	cmp	r6, fp
 8006760:	f200 8105 	bhi.w	800696e <_scanf_float+0x28a>
 8006764:	2501      	movs	r5, #1
 8006766:	4628      	mov	r0, r5
 8006768:	b007      	add	sp, #28
 800676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006772:	2a0d      	cmp	r2, #13
 8006774:	d8e6      	bhi.n	8006744 <_scanf_float+0x60>
 8006776:	a101      	add	r1, pc, #4	; (adr r1, 800677c <_scanf_float+0x98>)
 8006778:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800677c:	080068bb 	.word	0x080068bb
 8006780:	08006745 	.word	0x08006745
 8006784:	08006745 	.word	0x08006745
 8006788:	08006745 	.word	0x08006745
 800678c:	0800691b 	.word	0x0800691b
 8006790:	080068f3 	.word	0x080068f3
 8006794:	08006745 	.word	0x08006745
 8006798:	08006745 	.word	0x08006745
 800679c:	080068c9 	.word	0x080068c9
 80067a0:	08006745 	.word	0x08006745
 80067a4:	08006745 	.word	0x08006745
 80067a8:	08006745 	.word	0x08006745
 80067ac:	08006745 	.word	0x08006745
 80067b0:	08006881 	.word	0x08006881
 80067b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067b8:	e7db      	b.n	8006772 <_scanf_float+0x8e>
 80067ba:	290e      	cmp	r1, #14
 80067bc:	d8c2      	bhi.n	8006744 <_scanf_float+0x60>
 80067be:	a001      	add	r0, pc, #4	; (adr r0, 80067c4 <_scanf_float+0xe0>)
 80067c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067c4:	08006873 	.word	0x08006873
 80067c8:	08006745 	.word	0x08006745
 80067cc:	08006873 	.word	0x08006873
 80067d0:	08006907 	.word	0x08006907
 80067d4:	08006745 	.word	0x08006745
 80067d8:	08006821 	.word	0x08006821
 80067dc:	0800685d 	.word	0x0800685d
 80067e0:	0800685d 	.word	0x0800685d
 80067e4:	0800685d 	.word	0x0800685d
 80067e8:	0800685d 	.word	0x0800685d
 80067ec:	0800685d 	.word	0x0800685d
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800685d 	.word	0x0800685d
 80067f8:	0800685d 	.word	0x0800685d
 80067fc:	0800685d 	.word	0x0800685d
 8006800:	2b6e      	cmp	r3, #110	; 0x6e
 8006802:	d809      	bhi.n	8006818 <_scanf_float+0x134>
 8006804:	2b60      	cmp	r3, #96	; 0x60
 8006806:	d8b2      	bhi.n	800676e <_scanf_float+0x8a>
 8006808:	2b54      	cmp	r3, #84	; 0x54
 800680a:	d077      	beq.n	80068fc <_scanf_float+0x218>
 800680c:	2b59      	cmp	r3, #89	; 0x59
 800680e:	d199      	bne.n	8006744 <_scanf_float+0x60>
 8006810:	2d07      	cmp	r5, #7
 8006812:	d197      	bne.n	8006744 <_scanf_float+0x60>
 8006814:	2508      	movs	r5, #8
 8006816:	e029      	b.n	800686c <_scanf_float+0x188>
 8006818:	2b74      	cmp	r3, #116	; 0x74
 800681a:	d06f      	beq.n	80068fc <_scanf_float+0x218>
 800681c:	2b79      	cmp	r3, #121	; 0x79
 800681e:	e7f6      	b.n	800680e <_scanf_float+0x12a>
 8006820:	6821      	ldr	r1, [r4, #0]
 8006822:	05c8      	lsls	r0, r1, #23
 8006824:	d51a      	bpl.n	800685c <_scanf_float+0x178>
 8006826:	9b02      	ldr	r3, [sp, #8]
 8006828:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800682c:	6021      	str	r1, [r4, #0]
 800682e:	f109 0901 	add.w	r9, r9, #1
 8006832:	b11b      	cbz	r3, 800683c <_scanf_float+0x158>
 8006834:	3b01      	subs	r3, #1
 8006836:	3201      	adds	r2, #1
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	60a2      	str	r2, [r4, #8]
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	3b01      	subs	r3, #1
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	3301      	adds	r3, #1
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3b01      	subs	r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	f340 8084 	ble.w	800695c <_scanf_float+0x278>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	3301      	adds	r3, #1
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	e766      	b.n	800672a <_scanf_float+0x46>
 800685c:	eb1a 0f05 	cmn.w	sl, r5
 8006860:	f47f af70 	bne.w	8006744 <_scanf_float+0x60>
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800686a:	6022      	str	r2, [r4, #0]
 800686c:	f806 3b01 	strb.w	r3, [r6], #1
 8006870:	e7e4      	b.n	800683c <_scanf_float+0x158>
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	0610      	lsls	r0, r2, #24
 8006876:	f57f af65 	bpl.w	8006744 <_scanf_float+0x60>
 800687a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687e:	e7f4      	b.n	800686a <_scanf_float+0x186>
 8006880:	f1ba 0f00 	cmp.w	sl, #0
 8006884:	d10e      	bne.n	80068a4 <_scanf_float+0x1c0>
 8006886:	f1b9 0f00 	cmp.w	r9, #0
 800688a:	d10e      	bne.n	80068aa <_scanf_float+0x1c6>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006892:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006896:	d108      	bne.n	80068aa <_scanf_float+0x1c6>
 8006898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	f04f 0a01 	mov.w	sl, #1
 80068a2:	e7e3      	b.n	800686c <_scanf_float+0x188>
 80068a4:	f1ba 0f02 	cmp.w	sl, #2
 80068a8:	d055      	beq.n	8006956 <_scanf_float+0x272>
 80068aa:	2d01      	cmp	r5, #1
 80068ac:	d002      	beq.n	80068b4 <_scanf_float+0x1d0>
 80068ae:	2d04      	cmp	r5, #4
 80068b0:	f47f af48 	bne.w	8006744 <_scanf_float+0x60>
 80068b4:	3501      	adds	r5, #1
 80068b6:	b2ed      	uxtb	r5, r5
 80068b8:	e7d8      	b.n	800686c <_scanf_float+0x188>
 80068ba:	f1ba 0f01 	cmp.w	sl, #1
 80068be:	f47f af41 	bne.w	8006744 <_scanf_float+0x60>
 80068c2:	f04f 0a02 	mov.w	sl, #2
 80068c6:	e7d1      	b.n	800686c <_scanf_float+0x188>
 80068c8:	b97d      	cbnz	r5, 80068ea <_scanf_float+0x206>
 80068ca:	f1b9 0f00 	cmp.w	r9, #0
 80068ce:	f47f af3c 	bne.w	800674a <_scanf_float+0x66>
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068dc:	f47f af39 	bne.w	8006752 <_scanf_float+0x6e>
 80068e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	2501      	movs	r5, #1
 80068e8:	e7c0      	b.n	800686c <_scanf_float+0x188>
 80068ea:	2d03      	cmp	r5, #3
 80068ec:	d0e2      	beq.n	80068b4 <_scanf_float+0x1d0>
 80068ee:	2d05      	cmp	r5, #5
 80068f0:	e7de      	b.n	80068b0 <_scanf_float+0x1cc>
 80068f2:	2d02      	cmp	r5, #2
 80068f4:	f47f af26 	bne.w	8006744 <_scanf_float+0x60>
 80068f8:	2503      	movs	r5, #3
 80068fa:	e7b7      	b.n	800686c <_scanf_float+0x188>
 80068fc:	2d06      	cmp	r5, #6
 80068fe:	f47f af21 	bne.w	8006744 <_scanf_float+0x60>
 8006902:	2507      	movs	r5, #7
 8006904:	e7b2      	b.n	800686c <_scanf_float+0x188>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	0591      	lsls	r1, r2, #22
 800690a:	f57f af1b 	bpl.w	8006744 <_scanf_float+0x60>
 800690e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006912:	6022      	str	r2, [r4, #0]
 8006914:	f8cd 9004 	str.w	r9, [sp, #4]
 8006918:	e7a8      	b.n	800686c <_scanf_float+0x188>
 800691a:	6822      	ldr	r2, [r4, #0]
 800691c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006920:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006924:	d006      	beq.n	8006934 <_scanf_float+0x250>
 8006926:	0550      	lsls	r0, r2, #21
 8006928:	f57f af0c 	bpl.w	8006744 <_scanf_float+0x60>
 800692c:	f1b9 0f00 	cmp.w	r9, #0
 8006930:	f43f af0f 	beq.w	8006752 <_scanf_float+0x6e>
 8006934:	0591      	lsls	r1, r2, #22
 8006936:	bf58      	it	pl
 8006938:	9901      	ldrpl	r1, [sp, #4]
 800693a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800693e:	bf58      	it	pl
 8006940:	eba9 0101 	subpl.w	r1, r9, r1
 8006944:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006948:	bf58      	it	pl
 800694a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	e78a      	b.n	800686c <_scanf_float+0x188>
 8006956:	f04f 0a03 	mov.w	sl, #3
 800695a:	e787      	b.n	800686c <_scanf_float+0x188>
 800695c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006960:	4639      	mov	r1, r7
 8006962:	4640      	mov	r0, r8
 8006964:	4798      	blx	r3
 8006966:	2800      	cmp	r0, #0
 8006968:	f43f aedf 	beq.w	800672a <_scanf_float+0x46>
 800696c:	e6ea      	b.n	8006744 <_scanf_float+0x60>
 800696e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006976:	463a      	mov	r2, r7
 8006978:	4640      	mov	r0, r8
 800697a:	4798      	blx	r3
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	3b01      	subs	r3, #1
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	e6ec      	b.n	800675e <_scanf_float+0x7a>
 8006984:	1e6b      	subs	r3, r5, #1
 8006986:	2b06      	cmp	r3, #6
 8006988:	d825      	bhi.n	80069d6 <_scanf_float+0x2f2>
 800698a:	2d02      	cmp	r5, #2
 800698c:	d836      	bhi.n	80069fc <_scanf_float+0x318>
 800698e:	455e      	cmp	r6, fp
 8006990:	f67f aee8 	bls.w	8006764 <_scanf_float+0x80>
 8006994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006998:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800699c:	463a      	mov	r2, r7
 800699e:	4640      	mov	r0, r8
 80069a0:	4798      	blx	r3
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	e7f1      	b.n	800698e <_scanf_float+0x2aa>
 80069aa:	9802      	ldr	r0, [sp, #8]
 80069ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069b4:	9002      	str	r0, [sp, #8]
 80069b6:	463a      	mov	r2, r7
 80069b8:	4640      	mov	r0, r8
 80069ba:	4798      	blx	r3
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	3b01      	subs	r3, #1
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069c6:	fa5f fa8a 	uxtb.w	sl, sl
 80069ca:	f1ba 0f02 	cmp.w	sl, #2
 80069ce:	d1ec      	bne.n	80069aa <_scanf_float+0x2c6>
 80069d0:	3d03      	subs	r5, #3
 80069d2:	b2ed      	uxtb	r5, r5
 80069d4:	1b76      	subs	r6, r6, r5
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	05da      	lsls	r2, r3, #23
 80069da:	d52f      	bpl.n	8006a3c <_scanf_float+0x358>
 80069dc:	055b      	lsls	r3, r3, #21
 80069de:	d510      	bpl.n	8006a02 <_scanf_float+0x31e>
 80069e0:	455e      	cmp	r6, fp
 80069e2:	f67f aebf 	bls.w	8006764 <_scanf_float+0x80>
 80069e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069ee:	463a      	mov	r2, r7
 80069f0:	4640      	mov	r0, r8
 80069f2:	4798      	blx	r3
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	e7f1      	b.n	80069e0 <_scanf_float+0x2fc>
 80069fc:	46aa      	mov	sl, r5
 80069fe:	9602      	str	r6, [sp, #8]
 8006a00:	e7df      	b.n	80069c2 <_scanf_float+0x2de>
 8006a02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	2965      	cmp	r1, #101	; 0x65
 8006a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	d00c      	beq.n	8006a30 <_scanf_float+0x34c>
 8006a16:	2945      	cmp	r1, #69	; 0x45
 8006a18:	d00a      	beq.n	8006a30 <_scanf_float+0x34c>
 8006a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a1e:	463a      	mov	r2, r7
 8006a20:	4640      	mov	r0, r8
 8006a22:	4798      	blx	r3
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	1eb5      	subs	r5, r6, #2
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a34:	463a      	mov	r2, r7
 8006a36:	4640      	mov	r0, r8
 8006a38:	4798      	blx	r3
 8006a3a:	462e      	mov	r6, r5
 8006a3c:	6825      	ldr	r5, [r4, #0]
 8006a3e:	f015 0510 	ands.w	r5, r5, #16
 8006a42:	d158      	bne.n	8006af6 <_scanf_float+0x412>
 8006a44:	7035      	strb	r5, [r6, #0]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d11c      	bne.n	8006a8c <_scanf_float+0x3a8>
 8006a52:	9b01      	ldr	r3, [sp, #4]
 8006a54:	454b      	cmp	r3, r9
 8006a56:	eba3 0209 	sub.w	r2, r3, r9
 8006a5a:	d124      	bne.n	8006aa6 <_scanf_float+0x3c2>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4659      	mov	r1, fp
 8006a60:	4640      	mov	r0, r8
 8006a62:	f000 feab 	bl	80077bc <_strtod_r>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	6821      	ldr	r1, [r4, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f011 0f02 	tst.w	r1, #2
 8006a70:	ec57 6b10 	vmov	r6, r7, d0
 8006a74:	f103 0204 	add.w	r2, r3, #4
 8006a78:	d020      	beq.n	8006abc <_scanf_float+0x3d8>
 8006a7a:	9903      	ldr	r1, [sp, #12]
 8006a7c:	600a      	str	r2, [r1, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	e9c3 6700 	strd	r6, r7, [r3]
 8006a84:	68e3      	ldr	r3, [r4, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60e3      	str	r3, [r4, #12]
 8006a8a:	e66c      	b.n	8006766 <_scanf_float+0x82>
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0e4      	beq.n	8006a5c <_scanf_float+0x378>
 8006a92:	9905      	ldr	r1, [sp, #20]
 8006a94:	230a      	movs	r3, #10
 8006a96:	462a      	mov	r2, r5
 8006a98:	3101      	adds	r1, #1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f000 ff18 	bl	80078d0 <_strtol_r>
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	9e05      	ldr	r6, [sp, #20]
 8006aa4:	1ac2      	subs	r2, r0, r3
 8006aa6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006aaa:	429e      	cmp	r6, r3
 8006aac:	bf28      	it	cs
 8006aae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ab2:	4912      	ldr	r1, [pc, #72]	; (8006afc <_scanf_float+0x418>)
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 f82b 	bl	8006b10 <siprintf>
 8006aba:	e7cf      	b.n	8006a5c <_scanf_float+0x378>
 8006abc:	f011 0f04 	tst.w	r1, #4
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	600a      	str	r2, [r1, #0]
 8006ac4:	d1db      	bne.n	8006a7e <_scanf_float+0x39a>
 8006ac6:	f8d3 8000 	ldr.w	r8, [r3]
 8006aca:	ee10 2a10 	vmov	r2, s0
 8006ace:	ee10 0a10 	vmov	r0, s0
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7fa f839 	bl	8000b4c <__aeabi_dcmpun>
 8006ada:	b128      	cbz	r0, 8006ae8 <_scanf_float+0x404>
 8006adc:	4808      	ldr	r0, [pc, #32]	; (8006b00 <_scanf_float+0x41c>)
 8006ade:	f000 f811 	bl	8006b04 <nanf>
 8006ae2:	ed88 0a00 	vstr	s0, [r8]
 8006ae6:	e7cd      	b.n	8006a84 <_scanf_float+0x3a0>
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7fa f88c 	bl	8000c08 <__aeabi_d2f>
 8006af0:	f8c8 0000 	str.w	r0, [r8]
 8006af4:	e7c6      	b.n	8006a84 <_scanf_float+0x3a0>
 8006af6:	2500      	movs	r5, #0
 8006af8:	e635      	b.n	8006766 <_scanf_float+0x82>
 8006afa:	bf00      	nop
 8006afc:	0800acec 	.word	0x0800acec
 8006b00:	0800b108 	.word	0x0800b108

08006b04 <nanf>:
 8006b04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b0c <nanf+0x8>
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	7fc00000 	.word	0x7fc00000

08006b10 <siprintf>:
 8006b10:	b40e      	push	{r1, r2, r3}
 8006b12:	b500      	push	{lr}
 8006b14:	b09c      	sub	sp, #112	; 0x70
 8006b16:	ab1d      	add	r3, sp, #116	; 0x74
 8006b18:	9002      	str	r0, [sp, #8]
 8006b1a:	9006      	str	r0, [sp, #24]
 8006b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b20:	4809      	ldr	r0, [pc, #36]	; (8006b48 <siprintf+0x38>)
 8006b22:	9107      	str	r1, [sp, #28]
 8006b24:	9104      	str	r1, [sp, #16]
 8006b26:	4909      	ldr	r1, [pc, #36]	; (8006b4c <siprintf+0x3c>)
 8006b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2c:	9105      	str	r1, [sp, #20]
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	a902      	add	r1, sp, #8
 8006b34:	f002 feb4 	bl	80098a0 <_svfiprintf_r>
 8006b38:	9b02      	ldr	r3, [sp, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	b01c      	add	sp, #112	; 0x70
 8006b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b44:	b003      	add	sp, #12
 8006b46:	4770      	bx	lr
 8006b48:	2000001c 	.word	0x2000001c
 8006b4c:	ffff0208 	.word	0xffff0208

08006b50 <strcat>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4602      	mov	r2, r0
 8006b54:	7814      	ldrb	r4, [r2, #0]
 8006b56:	4613      	mov	r3, r2
 8006b58:	3201      	adds	r2, #1
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	d1fa      	bne.n	8006b54 <strcat+0x4>
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d1f9      	bne.n	8006b60 <strcat+0x10>
 8006b6c:	bd10      	pop	{r4, pc}

08006b6e <sulp>:
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	460d      	mov	r5, r1
 8006b74:	ec45 4b10 	vmov	d0, r4, r5
 8006b78:	4616      	mov	r6, r2
 8006b7a:	f002 fc2d 	bl	80093d8 <__ulp>
 8006b7e:	ec51 0b10 	vmov	r0, r1, d0
 8006b82:	b17e      	cbz	r6, 8006ba4 <sulp+0x36>
 8006b84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <sulp+0x36>
 8006b90:	051b      	lsls	r3, r3, #20
 8006b92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b96:	2400      	movs	r4, #0
 8006b98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	462b      	mov	r3, r5
 8006ba0:	f7f9 fd3a 	bl	8000618 <__aeabi_dmul>
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ba8 <_strtod_l>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	b0a3      	sub	sp, #140	; 0x8c
 8006bae:	461f      	mov	r7, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	931e      	str	r3, [sp, #120]	; 0x78
 8006bb4:	4ba4      	ldr	r3, [pc, #656]	; (8006e48 <_strtod_l+0x2a0>)
 8006bb6:	9219      	str	r2, [sp, #100]	; 0x64
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	4688      	mov	r8, r1
 8006bc2:	f7f9 fb0f 	bl	80001e4 <strlen>
 8006bc6:	f04f 0a00 	mov.w	sl, #0
 8006bca:	4605      	mov	r5, r0
 8006bcc:	f04f 0b00 	mov.w	fp, #0
 8006bd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	2a2b      	cmp	r2, #43	; 0x2b
 8006bda:	d04c      	beq.n	8006c76 <_strtod_l+0xce>
 8006bdc:	d839      	bhi.n	8006c52 <_strtod_l+0xaa>
 8006bde:	2a0d      	cmp	r2, #13
 8006be0:	d832      	bhi.n	8006c48 <_strtod_l+0xa0>
 8006be2:	2a08      	cmp	r2, #8
 8006be4:	d832      	bhi.n	8006c4c <_strtod_l+0xa4>
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	d03c      	beq.n	8006c64 <_strtod_l+0xbc>
 8006bea:	2300      	movs	r3, #0
 8006bec:	930e      	str	r3, [sp, #56]	; 0x38
 8006bee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006bf0:	7833      	ldrb	r3, [r6, #0]
 8006bf2:	2b30      	cmp	r3, #48	; 0x30
 8006bf4:	f040 80b4 	bne.w	8006d60 <_strtod_l+0x1b8>
 8006bf8:	7873      	ldrb	r3, [r6, #1]
 8006bfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bfe:	2b58      	cmp	r3, #88	; 0x58
 8006c00:	d16c      	bne.n	8006cdc <_strtod_l+0x134>
 8006c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	ab1e      	add	r3, sp, #120	; 0x78
 8006c08:	9702      	str	r7, [sp, #8]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	4a8f      	ldr	r2, [pc, #572]	; (8006e4c <_strtod_l+0x2a4>)
 8006c0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006c10:	a91d      	add	r1, sp, #116	; 0x74
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 fd40 	bl	8008698 <__gethex>
 8006c18:	f010 0707 	ands.w	r7, r0, #7
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	d005      	beq.n	8006c2c <_strtod_l+0x84>
 8006c20:	2f06      	cmp	r7, #6
 8006c22:	d12a      	bne.n	8006c7a <_strtod_l+0xd2>
 8006c24:	3601      	adds	r6, #1
 8006c26:	2300      	movs	r3, #0
 8006c28:	961d      	str	r6, [sp, #116]	; 0x74
 8006c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8596 	bne.w	8007760 <_strtod_l+0xbb8>
 8006c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c36:	b1db      	cbz	r3, 8006c70 <_strtod_l+0xc8>
 8006c38:	4652      	mov	r2, sl
 8006c3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c3e:	ec43 2b10 	vmov	d0, r2, r3
 8006c42:	b023      	add	sp, #140	; 0x8c
 8006c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c48:	2a20      	cmp	r2, #32
 8006c4a:	d1ce      	bne.n	8006bea <_strtod_l+0x42>
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	931d      	str	r3, [sp, #116]	; 0x74
 8006c50:	e7c0      	b.n	8006bd4 <_strtod_l+0x2c>
 8006c52:	2a2d      	cmp	r2, #45	; 0x2d
 8006c54:	d1c9      	bne.n	8006bea <_strtod_l+0x42>
 8006c56:	2201      	movs	r2, #1
 8006c58:	920e      	str	r2, [sp, #56]	; 0x38
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	921d      	str	r2, [sp, #116]	; 0x74
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1c4      	bne.n	8006bee <_strtod_l+0x46>
 8006c64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 8576 	bne.w	800775c <_strtod_l+0xbb4>
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	e7e3      	b.n	8006c3e <_strtod_l+0x96>
 8006c76:	2200      	movs	r2, #0
 8006c78:	e7ee      	b.n	8006c58 <_strtod_l+0xb0>
 8006c7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c7c:	b13a      	cbz	r2, 8006c8e <_strtod_l+0xe6>
 8006c7e:	2135      	movs	r1, #53	; 0x35
 8006c80:	a820      	add	r0, sp, #128	; 0x80
 8006c82:	f002 fcb4 	bl	80095ee <__copybits>
 8006c86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f002 f879 	bl	8008d80 <_Bfree>
 8006c8e:	3f01      	subs	r7, #1
 8006c90:	2f05      	cmp	r7, #5
 8006c92:	d807      	bhi.n	8006ca4 <_strtod_l+0xfc>
 8006c94:	e8df f007 	tbb	[pc, r7]
 8006c98:	1d180b0e 	.word	0x1d180b0e
 8006c9c:	030e      	.short	0x030e
 8006c9e:	f04f 0b00 	mov.w	fp, #0
 8006ca2:	46da      	mov	sl, fp
 8006ca4:	0728      	lsls	r0, r5, #28
 8006ca6:	d5c1      	bpl.n	8006c2c <_strtod_l+0x84>
 8006ca8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006cac:	e7be      	b.n	8006c2c <_strtod_l+0x84>
 8006cae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006cb2:	e7f7      	b.n	8006ca4 <_strtod_l+0xfc>
 8006cb4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006cb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006cba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006cc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006cc6:	e7ed      	b.n	8006ca4 <_strtod_l+0xfc>
 8006cc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006e50 <_strtod_l+0x2a8>
 8006ccc:	f04f 0a00 	mov.w	sl, #0
 8006cd0:	e7e8      	b.n	8006ca4 <_strtod_l+0xfc>
 8006cd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006cd6:	f04f 3aff 	mov.w	sl, #4294967295
 8006cda:	e7e3      	b.n	8006ca4 <_strtod_l+0xfc>
 8006cdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	921d      	str	r2, [sp, #116]	; 0x74
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d0f9      	beq.n	8006cdc <_strtod_l+0x134>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d09f      	beq.n	8006c2c <_strtod_l+0x84>
 8006cec:	2301      	movs	r3, #1
 8006cee:	f04f 0900 	mov.w	r9, #0
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006cfc:	464f      	mov	r7, r9
 8006cfe:	220a      	movs	r2, #10
 8006d00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006d02:	7806      	ldrb	r6, [r0, #0]
 8006d04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006d08:	b2d9      	uxtb	r1, r3
 8006d0a:	2909      	cmp	r1, #9
 8006d0c:	d92a      	bls.n	8006d64 <_strtod_l+0x1bc>
 8006d0e:	9907      	ldr	r1, [sp, #28]
 8006d10:	462a      	mov	r2, r5
 8006d12:	f002 fedd 	bl	8009ad0 <strncmp>
 8006d16:	b398      	cbz	r0, 8006d80 <_strtod_l+0x1d8>
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	463d      	mov	r5, r7
 8006d1e:	9007      	str	r0, [sp, #28]
 8006d20:	4602      	mov	r2, r0
 8006d22:	2b65      	cmp	r3, #101	; 0x65
 8006d24:	d001      	beq.n	8006d2a <_strtod_l+0x182>
 8006d26:	2b45      	cmp	r3, #69	; 0x45
 8006d28:	d118      	bne.n	8006d5c <_strtod_l+0x1b4>
 8006d2a:	b91d      	cbnz	r5, 8006d34 <_strtod_l+0x18c>
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	4303      	orrs	r3, r0
 8006d30:	d098      	beq.n	8006c64 <_strtod_l+0xbc>
 8006d32:	2500      	movs	r5, #0
 8006d34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006d38:	f108 0301 	add.w	r3, r8, #1
 8006d3c:	931d      	str	r3, [sp, #116]	; 0x74
 8006d3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006d42:	2b2b      	cmp	r3, #43	; 0x2b
 8006d44:	d075      	beq.n	8006e32 <_strtod_l+0x28a>
 8006d46:	2b2d      	cmp	r3, #45	; 0x2d
 8006d48:	d07b      	beq.n	8006e42 <_strtod_l+0x29a>
 8006d4a:	f04f 0c00 	mov.w	ip, #0
 8006d4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006d52:	2909      	cmp	r1, #9
 8006d54:	f240 8082 	bls.w	8006e5c <_strtod_l+0x2b4>
 8006d58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	e09d      	b.n	8006e9c <_strtod_l+0x2f4>
 8006d60:	2300      	movs	r3, #0
 8006d62:	e7c4      	b.n	8006cee <_strtod_l+0x146>
 8006d64:	2f08      	cmp	r7, #8
 8006d66:	bfd8      	it	le
 8006d68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006d6a:	f100 0001 	add.w	r0, r0, #1
 8006d6e:	bfda      	itte	le
 8006d70:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d74:	9309      	strle	r3, [sp, #36]	; 0x24
 8006d76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d7a:	3701      	adds	r7, #1
 8006d7c:	901d      	str	r0, [sp, #116]	; 0x74
 8006d7e:	e7bf      	b.n	8006d00 <_strtod_l+0x158>
 8006d80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d82:	195a      	adds	r2, r3, r5
 8006d84:	921d      	str	r2, [sp, #116]	; 0x74
 8006d86:	5d5b      	ldrb	r3, [r3, r5]
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	d037      	beq.n	8006dfc <_strtod_l+0x254>
 8006d8c:	9007      	str	r0, [sp, #28]
 8006d8e:	463d      	mov	r5, r7
 8006d90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d94:	2a09      	cmp	r2, #9
 8006d96:	d912      	bls.n	8006dbe <_strtod_l+0x216>
 8006d98:	2201      	movs	r2, #1
 8006d9a:	e7c2      	b.n	8006d22 <_strtod_l+0x17a>
 8006d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	921d      	str	r2, [sp, #116]	; 0x74
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	3001      	adds	r0, #1
 8006da6:	2b30      	cmp	r3, #48	; 0x30
 8006da8:	d0f8      	beq.n	8006d9c <_strtod_l+0x1f4>
 8006daa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006dae:	2a08      	cmp	r2, #8
 8006db0:	f200 84db 	bhi.w	800776a <_strtod_l+0xbc2>
 8006db4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006db6:	9007      	str	r0, [sp, #28]
 8006db8:	2000      	movs	r0, #0
 8006dba:	920a      	str	r2, [sp, #40]	; 0x28
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	3b30      	subs	r3, #48	; 0x30
 8006dc0:	f100 0201 	add.w	r2, r0, #1
 8006dc4:	d014      	beq.n	8006df0 <_strtod_l+0x248>
 8006dc6:	9907      	ldr	r1, [sp, #28]
 8006dc8:	4411      	add	r1, r2
 8006dca:	9107      	str	r1, [sp, #28]
 8006dcc:	462a      	mov	r2, r5
 8006dce:	eb00 0e05 	add.w	lr, r0, r5
 8006dd2:	210a      	movs	r1, #10
 8006dd4:	4572      	cmp	r2, lr
 8006dd6:	d113      	bne.n	8006e00 <_strtod_l+0x258>
 8006dd8:	182a      	adds	r2, r5, r0
 8006dda:	2a08      	cmp	r2, #8
 8006ddc:	f105 0501 	add.w	r5, r5, #1
 8006de0:	4405      	add	r5, r0
 8006de2:	dc1c      	bgt.n	8006e1e <_strtod_l+0x276>
 8006de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006de6:	220a      	movs	r2, #10
 8006de8:	fb02 3301 	mla	r3, r2, r1, r3
 8006dec:	9309      	str	r3, [sp, #36]	; 0x24
 8006dee:	2200      	movs	r2, #0
 8006df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	911d      	str	r1, [sp, #116]	; 0x74
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	4610      	mov	r0, r2
 8006dfa:	e7c9      	b.n	8006d90 <_strtod_l+0x1e8>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	e7d2      	b.n	8006da6 <_strtod_l+0x1fe>
 8006e00:	2a08      	cmp	r2, #8
 8006e02:	dc04      	bgt.n	8006e0e <_strtod_l+0x266>
 8006e04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e06:	434e      	muls	r6, r1
 8006e08:	9609      	str	r6, [sp, #36]	; 0x24
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	e7e2      	b.n	8006dd4 <_strtod_l+0x22c>
 8006e0e:	f102 0c01 	add.w	ip, r2, #1
 8006e12:	f1bc 0f10 	cmp.w	ip, #16
 8006e16:	bfd8      	it	le
 8006e18:	fb01 f909 	mulle.w	r9, r1, r9
 8006e1c:	e7f5      	b.n	8006e0a <_strtod_l+0x262>
 8006e1e:	2d10      	cmp	r5, #16
 8006e20:	bfdc      	itt	le
 8006e22:	220a      	movle	r2, #10
 8006e24:	fb02 3909 	mlale	r9, r2, r9, r3
 8006e28:	e7e1      	b.n	8006dee <_strtod_l+0x246>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	e77c      	b.n	8006d2c <_strtod_l+0x184>
 8006e32:	f04f 0c00 	mov.w	ip, #0
 8006e36:	f108 0302 	add.w	r3, r8, #2
 8006e3a:	931d      	str	r3, [sp, #116]	; 0x74
 8006e3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006e40:	e785      	b.n	8006d4e <_strtod_l+0x1a6>
 8006e42:	f04f 0c01 	mov.w	ip, #1
 8006e46:	e7f6      	b.n	8006e36 <_strtod_l+0x28e>
 8006e48:	0800af48 	.word	0x0800af48
 8006e4c:	0800acf4 	.word	0x0800acf4
 8006e50:	7ff00000 	.word	0x7ff00000
 8006e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	911d      	str	r1, [sp, #116]	; 0x74
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b30      	cmp	r3, #48	; 0x30
 8006e5e:	d0f9      	beq.n	8006e54 <_strtod_l+0x2ac>
 8006e60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006e64:	2908      	cmp	r1, #8
 8006e66:	f63f af79 	bhi.w	8006d5c <_strtod_l+0x1b4>
 8006e6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006e6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e70:	9308      	str	r3, [sp, #32]
 8006e72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e74:	1c59      	adds	r1, r3, #1
 8006e76:	911d      	str	r1, [sp, #116]	; 0x74
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006e7e:	2e09      	cmp	r6, #9
 8006e80:	d937      	bls.n	8006ef2 <_strtod_l+0x34a>
 8006e82:	9e08      	ldr	r6, [sp, #32]
 8006e84:	1b89      	subs	r1, r1, r6
 8006e86:	2908      	cmp	r1, #8
 8006e88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006e8c:	dc02      	bgt.n	8006e94 <_strtod_l+0x2ec>
 8006e8e:	4576      	cmp	r6, lr
 8006e90:	bfa8      	it	ge
 8006e92:	4676      	movge	r6, lr
 8006e94:	f1bc 0f00 	cmp.w	ip, #0
 8006e98:	d000      	beq.n	8006e9c <_strtod_l+0x2f4>
 8006e9a:	4276      	negs	r6, r6
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	d14f      	bne.n	8006f40 <_strtod_l+0x398>
 8006ea0:	9904      	ldr	r1, [sp, #16]
 8006ea2:	4301      	orrs	r1, r0
 8006ea4:	f47f aec2 	bne.w	8006c2c <_strtod_l+0x84>
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	f47f aedb 	bne.w	8006c64 <_strtod_l+0xbc>
 8006eae:	2b69      	cmp	r3, #105	; 0x69
 8006eb0:	d027      	beq.n	8006f02 <_strtod_l+0x35a>
 8006eb2:	dc24      	bgt.n	8006efe <_strtod_l+0x356>
 8006eb4:	2b49      	cmp	r3, #73	; 0x49
 8006eb6:	d024      	beq.n	8006f02 <_strtod_l+0x35a>
 8006eb8:	2b4e      	cmp	r3, #78	; 0x4e
 8006eba:	f47f aed3 	bne.w	8006c64 <_strtod_l+0xbc>
 8006ebe:	499e      	ldr	r1, [pc, #632]	; (8007138 <_strtod_l+0x590>)
 8006ec0:	a81d      	add	r0, sp, #116	; 0x74
 8006ec2:	f001 fe41 	bl	8008b48 <__match>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f aecc 	beq.w	8006c64 <_strtod_l+0xbc>
 8006ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b28      	cmp	r3, #40	; 0x28
 8006ed2:	d12d      	bne.n	8006f30 <_strtod_l+0x388>
 8006ed4:	4999      	ldr	r1, [pc, #612]	; (800713c <_strtod_l+0x594>)
 8006ed6:	aa20      	add	r2, sp, #128	; 0x80
 8006ed8:	a81d      	add	r0, sp, #116	; 0x74
 8006eda:	f001 fe49 	bl	8008b70 <__hexnan>
 8006ede:	2805      	cmp	r0, #5
 8006ee0:	d126      	bne.n	8006f30 <_strtod_l+0x388>
 8006ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ee4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006ee8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006eec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006ef0:	e69c      	b.n	8006c2c <_strtod_l+0x84>
 8006ef2:	210a      	movs	r1, #10
 8006ef4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006ef8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006efc:	e7b9      	b.n	8006e72 <_strtod_l+0x2ca>
 8006efe:	2b6e      	cmp	r3, #110	; 0x6e
 8006f00:	e7db      	b.n	8006eba <_strtod_l+0x312>
 8006f02:	498f      	ldr	r1, [pc, #572]	; (8007140 <_strtod_l+0x598>)
 8006f04:	a81d      	add	r0, sp, #116	; 0x74
 8006f06:	f001 fe1f 	bl	8008b48 <__match>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f aeaa 	beq.w	8006c64 <_strtod_l+0xbc>
 8006f10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f12:	498c      	ldr	r1, [pc, #560]	; (8007144 <_strtod_l+0x59c>)
 8006f14:	3b01      	subs	r3, #1
 8006f16:	a81d      	add	r0, sp, #116	; 0x74
 8006f18:	931d      	str	r3, [sp, #116]	; 0x74
 8006f1a:	f001 fe15 	bl	8008b48 <__match>
 8006f1e:	b910      	cbnz	r0, 8006f26 <_strtod_l+0x37e>
 8006f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f22:	3301      	adds	r3, #1
 8006f24:	931d      	str	r3, [sp, #116]	; 0x74
 8006f26:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007154 <_strtod_l+0x5ac>
 8006f2a:	f04f 0a00 	mov.w	sl, #0
 8006f2e:	e67d      	b.n	8006c2c <_strtod_l+0x84>
 8006f30:	4885      	ldr	r0, [pc, #532]	; (8007148 <_strtod_l+0x5a0>)
 8006f32:	f002 fdb5 	bl	8009aa0 <nan>
 8006f36:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006f3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006f3e:	e675      	b.n	8006c2c <_strtod_l+0x84>
 8006f40:	9b07      	ldr	r3, [sp, #28]
 8006f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f44:	1af3      	subs	r3, r6, r3
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	bf08      	it	eq
 8006f4a:	462f      	moveq	r7, r5
 8006f4c:	2d10      	cmp	r5, #16
 8006f4e:	9308      	str	r3, [sp, #32]
 8006f50:	46a8      	mov	r8, r5
 8006f52:	bfa8      	it	ge
 8006f54:	f04f 0810 	movge.w	r8, #16
 8006f58:	f7f9 fae4 	bl	8000524 <__aeabi_ui2d>
 8006f5c:	2d09      	cmp	r5, #9
 8006f5e:	4682      	mov	sl, r0
 8006f60:	468b      	mov	fp, r1
 8006f62:	dd13      	ble.n	8006f8c <_strtod_l+0x3e4>
 8006f64:	4b79      	ldr	r3, [pc, #484]	; (800714c <_strtod_l+0x5a4>)
 8006f66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f6e:	f7f9 fb53 	bl	8000618 <__aeabi_dmul>
 8006f72:	4682      	mov	sl, r0
 8006f74:	4648      	mov	r0, r9
 8006f76:	468b      	mov	fp, r1
 8006f78:	f7f9 fad4 	bl	8000524 <__aeabi_ui2d>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4650      	mov	r0, sl
 8006f82:	4659      	mov	r1, fp
 8006f84:	f7f9 f992 	bl	80002ac <__adddf3>
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	2d0f      	cmp	r5, #15
 8006f8e:	dc38      	bgt.n	8007002 <_strtod_l+0x45a>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f43f ae4a 	beq.w	8006c2c <_strtod_l+0x84>
 8006f98:	dd24      	ble.n	8006fe4 <_strtod_l+0x43c>
 8006f9a:	2b16      	cmp	r3, #22
 8006f9c:	dc0b      	bgt.n	8006fb6 <_strtod_l+0x40e>
 8006f9e:	4d6b      	ldr	r5, [pc, #428]	; (800714c <_strtod_l+0x5a4>)
 8006fa0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006fa4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006fa8:	4652      	mov	r2, sl
 8006faa:	465b      	mov	r3, fp
 8006fac:	f7f9 fb34 	bl	8000618 <__aeabi_dmul>
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	e63a      	b.n	8006c2c <_strtod_l+0x84>
 8006fb6:	9a08      	ldr	r2, [sp, #32]
 8006fb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	db20      	blt.n	8007002 <_strtod_l+0x45a>
 8006fc0:	4c62      	ldr	r4, [pc, #392]	; (800714c <_strtod_l+0x5a4>)
 8006fc2:	f1c5 050f 	rsb	r5, r5, #15
 8006fc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd2:	f7f9 fb21 	bl	8000618 <__aeabi_dmul>
 8006fd6:	9b08      	ldr	r3, [sp, #32]
 8006fd8:	1b5d      	subs	r5, r3, r5
 8006fda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fe2:	e7e3      	b.n	8006fac <_strtod_l+0x404>
 8006fe4:	9b08      	ldr	r3, [sp, #32]
 8006fe6:	3316      	adds	r3, #22
 8006fe8:	db0b      	blt.n	8007002 <_strtod_l+0x45a>
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	4a57      	ldr	r2, [pc, #348]	; (800714c <_strtod_l+0x5a4>)
 8006fee:	1b9e      	subs	r6, r3, r6
 8006ff0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006ff4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	f7f9 fc36 	bl	800086c <__aeabi_ddiv>
 8007000:	e7d6      	b.n	8006fb0 <_strtod_l+0x408>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	eba5 0808 	sub.w	r8, r5, r8
 8007008:	4498      	add	r8, r3
 800700a:	f1b8 0f00 	cmp.w	r8, #0
 800700e:	dd71      	ble.n	80070f4 <_strtod_l+0x54c>
 8007010:	f018 030f 	ands.w	r3, r8, #15
 8007014:	d00a      	beq.n	800702c <_strtod_l+0x484>
 8007016:	494d      	ldr	r1, [pc, #308]	; (800714c <_strtod_l+0x5a4>)
 8007018:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800701c:	4652      	mov	r2, sl
 800701e:	465b      	mov	r3, fp
 8007020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007024:	f7f9 faf8 	bl	8000618 <__aeabi_dmul>
 8007028:	4682      	mov	sl, r0
 800702a:	468b      	mov	fp, r1
 800702c:	f038 080f 	bics.w	r8, r8, #15
 8007030:	d04d      	beq.n	80070ce <_strtod_l+0x526>
 8007032:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007036:	dd22      	ble.n	800707e <_strtod_l+0x4d6>
 8007038:	2500      	movs	r5, #0
 800703a:	462e      	mov	r6, r5
 800703c:	9509      	str	r5, [sp, #36]	; 0x24
 800703e:	9507      	str	r5, [sp, #28]
 8007040:	2322      	movs	r3, #34	; 0x22
 8007042:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007154 <_strtod_l+0x5ac>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	f43f adec 	beq.w	8006c2c <_strtod_l+0x84>
 8007054:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007056:	4620      	mov	r0, r4
 8007058:	f001 fe92 	bl	8008d80 <_Bfree>
 800705c:	9907      	ldr	r1, [sp, #28]
 800705e:	4620      	mov	r0, r4
 8007060:	f001 fe8e 	bl	8008d80 <_Bfree>
 8007064:	4631      	mov	r1, r6
 8007066:	4620      	mov	r0, r4
 8007068:	f001 fe8a 	bl	8008d80 <_Bfree>
 800706c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800706e:	4620      	mov	r0, r4
 8007070:	f001 fe86 	bl	8008d80 <_Bfree>
 8007074:	4629      	mov	r1, r5
 8007076:	4620      	mov	r0, r4
 8007078:	f001 fe82 	bl	8008d80 <_Bfree>
 800707c:	e5d6      	b.n	8006c2c <_strtod_l+0x84>
 800707e:	2300      	movs	r3, #0
 8007080:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007084:	4650      	mov	r0, sl
 8007086:	4659      	mov	r1, fp
 8007088:	4699      	mov	r9, r3
 800708a:	f1b8 0f01 	cmp.w	r8, #1
 800708e:	dc21      	bgt.n	80070d4 <_strtod_l+0x52c>
 8007090:	b10b      	cbz	r3, 8007096 <_strtod_l+0x4ee>
 8007092:	4682      	mov	sl, r0
 8007094:	468b      	mov	fp, r1
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <_strtod_l+0x5a8>)
 8007098:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800709c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80070a0:	4652      	mov	r2, sl
 80070a2:	465b      	mov	r3, fp
 80070a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80070a8:	f7f9 fab6 	bl	8000618 <__aeabi_dmul>
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <_strtod_l+0x5ac>)
 80070ae:	460a      	mov	r2, r1
 80070b0:	400b      	ands	r3, r1
 80070b2:	4929      	ldr	r1, [pc, #164]	; (8007158 <_strtod_l+0x5b0>)
 80070b4:	428b      	cmp	r3, r1
 80070b6:	4682      	mov	sl, r0
 80070b8:	d8be      	bhi.n	8007038 <_strtod_l+0x490>
 80070ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80070be:	428b      	cmp	r3, r1
 80070c0:	bf86      	itte	hi
 80070c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800715c <_strtod_l+0x5b4>
 80070c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80070ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80070ce:	2300      	movs	r3, #0
 80070d0:	9304      	str	r3, [sp, #16]
 80070d2:	e081      	b.n	80071d8 <_strtod_l+0x630>
 80070d4:	f018 0f01 	tst.w	r8, #1
 80070d8:	d007      	beq.n	80070ea <_strtod_l+0x542>
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <_strtod_l+0x5a8>)
 80070dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 fa98 	bl	8000618 <__aeabi_dmul>
 80070e8:	2301      	movs	r3, #1
 80070ea:	f109 0901 	add.w	r9, r9, #1
 80070ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070f2:	e7ca      	b.n	800708a <_strtod_l+0x4e2>
 80070f4:	d0eb      	beq.n	80070ce <_strtod_l+0x526>
 80070f6:	f1c8 0800 	rsb	r8, r8, #0
 80070fa:	f018 020f 	ands.w	r2, r8, #15
 80070fe:	d00a      	beq.n	8007116 <_strtod_l+0x56e>
 8007100:	4b12      	ldr	r3, [pc, #72]	; (800714c <_strtod_l+0x5a4>)
 8007102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007106:	4650      	mov	r0, sl
 8007108:	4659      	mov	r1, fp
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 fbad 	bl	800086c <__aeabi_ddiv>
 8007112:	4682      	mov	sl, r0
 8007114:	468b      	mov	fp, r1
 8007116:	ea5f 1828 	movs.w	r8, r8, asr #4
 800711a:	d0d8      	beq.n	80070ce <_strtod_l+0x526>
 800711c:	f1b8 0f1f 	cmp.w	r8, #31
 8007120:	dd1e      	ble.n	8007160 <_strtod_l+0x5b8>
 8007122:	2500      	movs	r5, #0
 8007124:	462e      	mov	r6, r5
 8007126:	9509      	str	r5, [sp, #36]	; 0x24
 8007128:	9507      	str	r5, [sp, #28]
 800712a:	2322      	movs	r3, #34	; 0x22
 800712c:	f04f 0a00 	mov.w	sl, #0
 8007130:	f04f 0b00 	mov.w	fp, #0
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	e789      	b.n	800704c <_strtod_l+0x4a4>
 8007138:	0800acc5 	.word	0x0800acc5
 800713c:	0800ad08 	.word	0x0800ad08
 8007140:	0800acbd 	.word	0x0800acbd
 8007144:	0800ae4c 	.word	0x0800ae4c
 8007148:	0800b108 	.word	0x0800b108
 800714c:	0800afe8 	.word	0x0800afe8
 8007150:	0800afc0 	.word	0x0800afc0
 8007154:	7ff00000 	.word	0x7ff00000
 8007158:	7ca00000 	.word	0x7ca00000
 800715c:	7fefffff 	.word	0x7fefffff
 8007160:	f018 0310 	ands.w	r3, r8, #16
 8007164:	bf18      	it	ne
 8007166:	236a      	movne	r3, #106	; 0x6a
 8007168:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007520 <_strtod_l+0x978>
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	4650      	mov	r0, sl
 8007170:	4659      	mov	r1, fp
 8007172:	2300      	movs	r3, #0
 8007174:	f018 0f01 	tst.w	r8, #1
 8007178:	d004      	beq.n	8007184 <_strtod_l+0x5dc>
 800717a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800717e:	f7f9 fa4b 	bl	8000618 <__aeabi_dmul>
 8007182:	2301      	movs	r3, #1
 8007184:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007188:	f109 0908 	add.w	r9, r9, #8
 800718c:	d1f2      	bne.n	8007174 <_strtod_l+0x5cc>
 800718e:	b10b      	cbz	r3, 8007194 <_strtod_l+0x5ec>
 8007190:	4682      	mov	sl, r0
 8007192:	468b      	mov	fp, r1
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	b1bb      	cbz	r3, 80071c8 <_strtod_l+0x620>
 8007198:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800719c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	4659      	mov	r1, fp
 80071a4:	dd10      	ble.n	80071c8 <_strtod_l+0x620>
 80071a6:	2b1f      	cmp	r3, #31
 80071a8:	f340 8128 	ble.w	80073fc <_strtod_l+0x854>
 80071ac:	2b34      	cmp	r3, #52	; 0x34
 80071ae:	bfde      	ittt	le
 80071b0:	3b20      	suble	r3, #32
 80071b2:	f04f 32ff 	movle.w	r2, #4294967295
 80071b6:	fa02 f303 	lslle.w	r3, r2, r3
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	bfcc      	ite	gt
 80071c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80071c4:	ea03 0b01 	andle.w	fp, r3, r1
 80071c8:	2200      	movs	r2, #0
 80071ca:	2300      	movs	r3, #0
 80071cc:	4650      	mov	r0, sl
 80071ce:	4659      	mov	r1, fp
 80071d0:	f7f9 fc8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1a4      	bne.n	8007122 <_strtod_l+0x57a>
 80071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071de:	462b      	mov	r3, r5
 80071e0:	463a      	mov	r2, r7
 80071e2:	4620      	mov	r0, r4
 80071e4:	f001 fe38 	bl	8008e58 <__s2b>
 80071e8:	9009      	str	r0, [sp, #36]	; 0x24
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f43f af24 	beq.w	8007038 <_strtod_l+0x490>
 80071f0:	9b07      	ldr	r3, [sp, #28]
 80071f2:	1b9e      	subs	r6, r3, r6
 80071f4:	9b08      	ldr	r3, [sp, #32]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfb4      	ite	lt
 80071fa:	4633      	movlt	r3, r6
 80071fc:	2300      	movge	r3, #0
 80071fe:	9310      	str	r3, [sp, #64]	; 0x40
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	2500      	movs	r5, #0
 8007204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007208:	9318      	str	r3, [sp, #96]	; 0x60
 800720a:	462e      	mov	r6, r5
 800720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720e:	4620      	mov	r0, r4
 8007210:	6859      	ldr	r1, [r3, #4]
 8007212:	f001 fd75 	bl	8008d00 <_Balloc>
 8007216:	9007      	str	r0, [sp, #28]
 8007218:	2800      	cmp	r0, #0
 800721a:	f43f af11 	beq.w	8007040 <_strtod_l+0x498>
 800721e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	3202      	adds	r2, #2
 8007224:	f103 010c 	add.w	r1, r3, #12
 8007228:	0092      	lsls	r2, r2, #2
 800722a:	300c      	adds	r0, #12
 800722c:	f001 fd5a 	bl	8008ce4 <memcpy>
 8007230:	ec4b ab10 	vmov	d0, sl, fp
 8007234:	aa20      	add	r2, sp, #128	; 0x80
 8007236:	a91f      	add	r1, sp, #124	; 0x7c
 8007238:	4620      	mov	r0, r4
 800723a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800723e:	f002 f947 	bl	80094d0 <__d2b>
 8007242:	901e      	str	r0, [sp, #120]	; 0x78
 8007244:	2800      	cmp	r0, #0
 8007246:	f43f aefb 	beq.w	8007040 <_strtod_l+0x498>
 800724a:	2101      	movs	r1, #1
 800724c:	4620      	mov	r0, r4
 800724e:	f001 fe9d 	bl	8008f8c <__i2b>
 8007252:	4606      	mov	r6, r0
 8007254:	2800      	cmp	r0, #0
 8007256:	f43f aef3 	beq.w	8007040 <_strtod_l+0x498>
 800725a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800725c:	9904      	ldr	r1, [sp, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfab      	itete	ge
 8007262:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007264:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007266:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007268:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800726c:	bfac      	ite	ge
 800726e:	eb03 0902 	addge.w	r9, r3, r2
 8007272:	1ad7      	sublt	r7, r2, r3
 8007274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007276:	eba3 0801 	sub.w	r8, r3, r1
 800727a:	4490      	add	r8, r2
 800727c:	4ba3      	ldr	r3, [pc, #652]	; (800750c <_strtod_l+0x964>)
 800727e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007282:	4598      	cmp	r8, r3
 8007284:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007288:	f280 80cc 	bge.w	8007424 <_strtod_l+0x87c>
 800728c:	eba3 0308 	sub.w	r3, r3, r8
 8007290:	2b1f      	cmp	r3, #31
 8007292:	eba2 0203 	sub.w	r2, r2, r3
 8007296:	f04f 0101 	mov.w	r1, #1
 800729a:	f300 80b6 	bgt.w	800740a <_strtod_l+0x862>
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	9311      	str	r3, [sp, #68]	; 0x44
 80072a4:	2300      	movs	r3, #0
 80072a6:	930c      	str	r3, [sp, #48]	; 0x30
 80072a8:	eb09 0802 	add.w	r8, r9, r2
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	45c1      	cmp	r9, r8
 80072b0:	4417      	add	r7, r2
 80072b2:	441f      	add	r7, r3
 80072b4:	464b      	mov	r3, r9
 80072b6:	bfa8      	it	ge
 80072b8:	4643      	movge	r3, r8
 80072ba:	42bb      	cmp	r3, r7
 80072bc:	bfa8      	it	ge
 80072be:	463b      	movge	r3, r7
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bfc2      	ittt	gt
 80072c4:	eba8 0803 	subgt.w	r8, r8, r3
 80072c8:	1aff      	subgt	r7, r7, r3
 80072ca:	eba9 0903 	subgt.w	r9, r9, r3
 80072ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dd17      	ble.n	8007304 <_strtod_l+0x75c>
 80072d4:	4631      	mov	r1, r6
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 ff13 	bl	8009104 <__pow5mult>
 80072de:	4606      	mov	r6, r0
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f43f aead 	beq.w	8007040 <_strtod_l+0x498>
 80072e6:	4601      	mov	r1, r0
 80072e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072ea:	4620      	mov	r0, r4
 80072ec:	f001 fe64 	bl	8008fb8 <__multiply>
 80072f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f43f aea4 	beq.w	8007040 <_strtod_l+0x498>
 80072f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072fa:	4620      	mov	r0, r4
 80072fc:	f001 fd40 	bl	8008d80 <_Bfree>
 8007300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007302:	931e      	str	r3, [sp, #120]	; 0x78
 8007304:	f1b8 0f00 	cmp.w	r8, #0
 8007308:	f300 8091 	bgt.w	800742e <_strtod_l+0x886>
 800730c:	9b08      	ldr	r3, [sp, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd08      	ble.n	8007324 <_strtod_l+0x77c>
 8007312:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007314:	9907      	ldr	r1, [sp, #28]
 8007316:	4620      	mov	r0, r4
 8007318:	f001 fef4 	bl	8009104 <__pow5mult>
 800731c:	9007      	str	r0, [sp, #28]
 800731e:	2800      	cmp	r0, #0
 8007320:	f43f ae8e 	beq.w	8007040 <_strtod_l+0x498>
 8007324:	2f00      	cmp	r7, #0
 8007326:	dd08      	ble.n	800733a <_strtod_l+0x792>
 8007328:	9907      	ldr	r1, [sp, #28]
 800732a:	463a      	mov	r2, r7
 800732c:	4620      	mov	r0, r4
 800732e:	f001 ff43 	bl	80091b8 <__lshift>
 8007332:	9007      	str	r0, [sp, #28]
 8007334:	2800      	cmp	r0, #0
 8007336:	f43f ae83 	beq.w	8007040 <_strtod_l+0x498>
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	dd08      	ble.n	8007352 <_strtod_l+0x7aa>
 8007340:	4631      	mov	r1, r6
 8007342:	464a      	mov	r2, r9
 8007344:	4620      	mov	r0, r4
 8007346:	f001 ff37 	bl	80091b8 <__lshift>
 800734a:	4606      	mov	r6, r0
 800734c:	2800      	cmp	r0, #0
 800734e:	f43f ae77 	beq.w	8007040 <_strtod_l+0x498>
 8007352:	9a07      	ldr	r2, [sp, #28]
 8007354:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007356:	4620      	mov	r0, r4
 8007358:	f001 ffb6 	bl	80092c8 <__mdiff>
 800735c:	4605      	mov	r5, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	f43f ae6e 	beq.w	8007040 <_strtod_l+0x498>
 8007364:	68c3      	ldr	r3, [r0, #12]
 8007366:	930f      	str	r3, [sp, #60]	; 0x3c
 8007368:	2300      	movs	r3, #0
 800736a:	60c3      	str	r3, [r0, #12]
 800736c:	4631      	mov	r1, r6
 800736e:	f001 ff8f 	bl	8009290 <__mcmp>
 8007372:	2800      	cmp	r0, #0
 8007374:	da65      	bge.n	8007442 <_strtod_l+0x89a>
 8007376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007378:	ea53 030a 	orrs.w	r3, r3, sl
 800737c:	f040 8087 	bne.w	800748e <_strtod_l+0x8e6>
 8007380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007384:	2b00      	cmp	r3, #0
 8007386:	f040 8082 	bne.w	800748e <_strtod_l+0x8e6>
 800738a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800738e:	0d1b      	lsrs	r3, r3, #20
 8007390:	051b      	lsls	r3, r3, #20
 8007392:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007396:	d97a      	bls.n	800748e <_strtod_l+0x8e6>
 8007398:	696b      	ldr	r3, [r5, #20]
 800739a:	b913      	cbnz	r3, 80073a2 <_strtod_l+0x7fa>
 800739c:	692b      	ldr	r3, [r5, #16]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	dd75      	ble.n	800748e <_strtod_l+0x8e6>
 80073a2:	4629      	mov	r1, r5
 80073a4:	2201      	movs	r2, #1
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 ff06 	bl	80091b8 <__lshift>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4605      	mov	r5, r0
 80073b0:	f001 ff6e 	bl	8009290 <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	dd6a      	ble.n	800748e <_strtod_l+0x8e6>
 80073b8:	9904      	ldr	r1, [sp, #16]
 80073ba:	4a55      	ldr	r2, [pc, #340]	; (8007510 <_strtod_l+0x968>)
 80073bc:	465b      	mov	r3, fp
 80073be:	2900      	cmp	r1, #0
 80073c0:	f000 8085 	beq.w	80074ce <_strtod_l+0x926>
 80073c4:	ea02 010b 	and.w	r1, r2, fp
 80073c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80073cc:	dc7f      	bgt.n	80074ce <_strtod_l+0x926>
 80073ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80073d2:	f77f aeaa 	ble.w	800712a <_strtod_l+0x582>
 80073d6:	4a4f      	ldr	r2, [pc, #316]	; (8007514 <_strtod_l+0x96c>)
 80073d8:	2300      	movs	r3, #0
 80073da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80073de:	4650      	mov	r0, sl
 80073e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80073e4:	4659      	mov	r1, fp
 80073e6:	f7f9 f917 	bl	8000618 <__aeabi_dmul>
 80073ea:	460b      	mov	r3, r1
 80073ec:	4303      	orrs	r3, r0
 80073ee:	bf08      	it	eq
 80073f0:	2322      	moveq	r3, #34	; 0x22
 80073f2:	4682      	mov	sl, r0
 80073f4:	468b      	mov	fp, r1
 80073f6:	bf08      	it	eq
 80073f8:	6023      	streq	r3, [r4, #0]
 80073fa:	e62b      	b.n	8007054 <_strtod_l+0x4ac>
 80073fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	ea03 0a0a 	and.w	sl, r3, sl
 8007408:	e6de      	b.n	80071c8 <_strtod_l+0x620>
 800740a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800740e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007412:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007416:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800741a:	fa01 f308 	lsl.w	r3, r1, r8
 800741e:	930c      	str	r3, [sp, #48]	; 0x30
 8007420:	9111      	str	r1, [sp, #68]	; 0x44
 8007422:	e741      	b.n	80072a8 <_strtod_l+0x700>
 8007424:	2300      	movs	r3, #0
 8007426:	930c      	str	r3, [sp, #48]	; 0x30
 8007428:	2301      	movs	r3, #1
 800742a:	9311      	str	r3, [sp, #68]	; 0x44
 800742c:	e73c      	b.n	80072a8 <_strtod_l+0x700>
 800742e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007430:	4642      	mov	r2, r8
 8007432:	4620      	mov	r0, r4
 8007434:	f001 fec0 	bl	80091b8 <__lshift>
 8007438:	901e      	str	r0, [sp, #120]	; 0x78
 800743a:	2800      	cmp	r0, #0
 800743c:	f47f af66 	bne.w	800730c <_strtod_l+0x764>
 8007440:	e5fe      	b.n	8007040 <_strtod_l+0x498>
 8007442:	465f      	mov	r7, fp
 8007444:	d16e      	bne.n	8007524 <_strtod_l+0x97c>
 8007446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800744c:	b342      	cbz	r2, 80074a0 <_strtod_l+0x8f8>
 800744e:	4a32      	ldr	r2, [pc, #200]	; (8007518 <_strtod_l+0x970>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d128      	bne.n	80074a6 <_strtod_l+0x8fe>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	4650      	mov	r0, sl
 8007458:	b1eb      	cbz	r3, 8007496 <_strtod_l+0x8ee>
 800745a:	4a2d      	ldr	r2, [pc, #180]	; (8007510 <_strtod_l+0x968>)
 800745c:	403a      	ands	r2, r7
 800745e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007462:	f04f 31ff 	mov.w	r1, #4294967295
 8007466:	d819      	bhi.n	800749c <_strtod_l+0x8f4>
 8007468:	0d12      	lsrs	r2, r2, #20
 800746a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800746e:	fa01 f303 	lsl.w	r3, r1, r3
 8007472:	4298      	cmp	r0, r3
 8007474:	d117      	bne.n	80074a6 <_strtod_l+0x8fe>
 8007476:	4b29      	ldr	r3, [pc, #164]	; (800751c <_strtod_l+0x974>)
 8007478:	429f      	cmp	r7, r3
 800747a:	d102      	bne.n	8007482 <_strtod_l+0x8da>
 800747c:	3001      	adds	r0, #1
 800747e:	f43f addf 	beq.w	8007040 <_strtod_l+0x498>
 8007482:	4b23      	ldr	r3, [pc, #140]	; (8007510 <_strtod_l+0x968>)
 8007484:	403b      	ands	r3, r7
 8007486:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800748a:	f04f 0a00 	mov.w	sl, #0
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1a0      	bne.n	80073d6 <_strtod_l+0x82e>
 8007494:	e5de      	b.n	8007054 <_strtod_l+0x4ac>
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	e7ea      	b.n	8007472 <_strtod_l+0x8ca>
 800749c:	460b      	mov	r3, r1
 800749e:	e7e8      	b.n	8007472 <_strtod_l+0x8ca>
 80074a0:	ea53 030a 	orrs.w	r3, r3, sl
 80074a4:	d088      	beq.n	80073b8 <_strtod_l+0x810>
 80074a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074a8:	b1db      	cbz	r3, 80074e2 <_strtod_l+0x93a>
 80074aa:	423b      	tst	r3, r7
 80074ac:	d0ef      	beq.n	800748e <_strtod_l+0x8e6>
 80074ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	4650      	mov	r0, sl
 80074b4:	4659      	mov	r1, fp
 80074b6:	b1c3      	cbz	r3, 80074ea <_strtod_l+0x942>
 80074b8:	f7ff fb59 	bl	8006b6e <sulp>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074c4:	f7f8 fef2 	bl	80002ac <__adddf3>
 80074c8:	4682      	mov	sl, r0
 80074ca:	468b      	mov	fp, r1
 80074cc:	e7df      	b.n	800748e <_strtod_l+0x8e6>
 80074ce:	4013      	ands	r3, r2
 80074d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80074d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074dc:	f04f 3aff 	mov.w	sl, #4294967295
 80074e0:	e7d5      	b.n	800748e <_strtod_l+0x8e6>
 80074e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074e4:	ea13 0f0a 	tst.w	r3, sl
 80074e8:	e7e0      	b.n	80074ac <_strtod_l+0x904>
 80074ea:	f7ff fb40 	bl	8006b6e <sulp>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074f6:	f7f8 fed7 	bl	80002a8 <__aeabi_dsub>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	4682      	mov	sl, r0
 8007500:	468b      	mov	fp, r1
 8007502:	f7f9 faf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007506:	2800      	cmp	r0, #0
 8007508:	d0c1      	beq.n	800748e <_strtod_l+0x8e6>
 800750a:	e60e      	b.n	800712a <_strtod_l+0x582>
 800750c:	fffffc02 	.word	0xfffffc02
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	39500000 	.word	0x39500000
 8007518:	000fffff 	.word	0x000fffff
 800751c:	7fefffff 	.word	0x7fefffff
 8007520:	0800ad20 	.word	0x0800ad20
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	f002 f82e 	bl	8009588 <__ratio>
 800752c:	ec59 8b10 	vmov	r8, r9, d0
 8007530:	ee10 0a10 	vmov	r0, s0
 8007534:	2200      	movs	r2, #0
 8007536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800753a:	4649      	mov	r1, r9
 800753c:	f7f9 fae8 	bl	8000b10 <__aeabi_dcmple>
 8007540:	2800      	cmp	r0, #0
 8007542:	d07c      	beq.n	800763e <_strtod_l+0xa96>
 8007544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d04c      	beq.n	80075e4 <_strtod_l+0xa3c>
 800754a:	4b95      	ldr	r3, [pc, #596]	; (80077a0 <_strtod_l+0xbf8>)
 800754c:	2200      	movs	r2, #0
 800754e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007552:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80077a0 <_strtod_l+0xbf8>
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <_strtod_l+0xbfc>)
 800755c:	403b      	ands	r3, r7
 800755e:	9311      	str	r3, [sp, #68]	; 0x44
 8007560:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007562:	4b91      	ldr	r3, [pc, #580]	; (80077a8 <_strtod_l+0xc00>)
 8007564:	429a      	cmp	r2, r3
 8007566:	f040 80b2 	bne.w	80076ce <_strtod_l+0xb26>
 800756a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800756e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007572:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007576:	ec4b ab10 	vmov	d0, sl, fp
 800757a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800757e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007582:	f001 ff29 	bl	80093d8 <__ulp>
 8007586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758a:	ec53 2b10 	vmov	r2, r3, d0
 800758e:	f7f9 f843 	bl	8000618 <__aeabi_dmul>
 8007592:	4652      	mov	r2, sl
 8007594:	465b      	mov	r3, fp
 8007596:	f7f8 fe89 	bl	80002ac <__adddf3>
 800759a:	460b      	mov	r3, r1
 800759c:	4981      	ldr	r1, [pc, #516]	; (80077a4 <_strtod_l+0xbfc>)
 800759e:	4a83      	ldr	r2, [pc, #524]	; (80077ac <_strtod_l+0xc04>)
 80075a0:	4019      	ands	r1, r3
 80075a2:	4291      	cmp	r1, r2
 80075a4:	4682      	mov	sl, r0
 80075a6:	d95e      	bls.n	8007666 <_strtod_l+0xabe>
 80075a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d103      	bne.n	80075ba <_strtod_l+0xa12>
 80075b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b4:	3301      	adds	r3, #1
 80075b6:	f43f ad43 	beq.w	8007040 <_strtod_l+0x498>
 80075ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80077b8 <_strtod_l+0xc10>
 80075be:	f04f 3aff 	mov.w	sl, #4294967295
 80075c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80075c4:	4620      	mov	r0, r4
 80075c6:	f001 fbdb 	bl	8008d80 <_Bfree>
 80075ca:	9907      	ldr	r1, [sp, #28]
 80075cc:	4620      	mov	r0, r4
 80075ce:	f001 fbd7 	bl	8008d80 <_Bfree>
 80075d2:	4631      	mov	r1, r6
 80075d4:	4620      	mov	r0, r4
 80075d6:	f001 fbd3 	bl	8008d80 <_Bfree>
 80075da:	4629      	mov	r1, r5
 80075dc:	4620      	mov	r0, r4
 80075de:	f001 fbcf 	bl	8008d80 <_Bfree>
 80075e2:	e613      	b.n	800720c <_strtod_l+0x664>
 80075e4:	f1ba 0f00 	cmp.w	sl, #0
 80075e8:	d11b      	bne.n	8007622 <_strtod_l+0xa7a>
 80075ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075ee:	b9f3      	cbnz	r3, 800762e <_strtod_l+0xa86>
 80075f0:	4b6b      	ldr	r3, [pc, #428]	; (80077a0 <_strtod_l+0xbf8>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	4640      	mov	r0, r8
 80075f6:	4649      	mov	r1, r9
 80075f8:	f7f9 fa80 	bl	8000afc <__aeabi_dcmplt>
 80075fc:	b9d0      	cbnz	r0, 8007634 <_strtod_l+0xa8c>
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	4b6b      	ldr	r3, [pc, #428]	; (80077b0 <_strtod_l+0xc08>)
 8007604:	2200      	movs	r2, #0
 8007606:	f7f9 f807 	bl	8000618 <__aeabi_dmul>
 800760a:	4680      	mov	r8, r0
 800760c:	4689      	mov	r9, r1
 800760e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007612:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007616:	931b      	str	r3, [sp, #108]	; 0x6c
 8007618:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800761c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007620:	e79b      	b.n	800755a <_strtod_l+0x9b2>
 8007622:	f1ba 0f01 	cmp.w	sl, #1
 8007626:	d102      	bne.n	800762e <_strtod_l+0xa86>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f43f ad7e 	beq.w	800712a <_strtod_l+0x582>
 800762e:	4b61      	ldr	r3, [pc, #388]	; (80077b4 <_strtod_l+0xc0c>)
 8007630:	2200      	movs	r2, #0
 8007632:	e78c      	b.n	800754e <_strtod_l+0x9a6>
 8007634:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80077b0 <_strtod_l+0xc08>
 8007638:	f04f 0800 	mov.w	r8, #0
 800763c:	e7e7      	b.n	800760e <_strtod_l+0xa66>
 800763e:	4b5c      	ldr	r3, [pc, #368]	; (80077b0 <_strtod_l+0xc08>)
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	2200      	movs	r2, #0
 8007646:	f7f8 ffe7 	bl	8000618 <__aeabi_dmul>
 800764a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800764c:	4680      	mov	r8, r0
 800764e:	4689      	mov	r9, r1
 8007650:	b933      	cbnz	r3, 8007660 <_strtod_l+0xab8>
 8007652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007656:	9012      	str	r0, [sp, #72]	; 0x48
 8007658:	9313      	str	r3, [sp, #76]	; 0x4c
 800765a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800765e:	e7dd      	b.n	800761c <_strtod_l+0xa74>
 8007660:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007664:	e7f9      	b.n	800765a <_strtod_l+0xab2>
 8007666:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800766a:	9b04      	ldr	r3, [sp, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1a8      	bne.n	80075c2 <_strtod_l+0xa1a>
 8007670:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007674:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007676:	0d1b      	lsrs	r3, r3, #20
 8007678:	051b      	lsls	r3, r3, #20
 800767a:	429a      	cmp	r2, r3
 800767c:	d1a1      	bne.n	80075c2 <_strtod_l+0xa1a>
 800767e:	4640      	mov	r0, r8
 8007680:	4649      	mov	r1, r9
 8007682:	f7f9 fb29 	bl	8000cd8 <__aeabi_d2lz>
 8007686:	f7f8 ff99 	bl	80005bc <__aeabi_l2d>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4640      	mov	r0, r8
 8007690:	4649      	mov	r1, r9
 8007692:	f7f8 fe09 	bl	80002a8 <__aeabi_dsub>
 8007696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007698:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800769c:	ea43 030a 	orr.w	r3, r3, sl
 80076a0:	4313      	orrs	r3, r2
 80076a2:	4680      	mov	r8, r0
 80076a4:	4689      	mov	r9, r1
 80076a6:	d053      	beq.n	8007750 <_strtod_l+0xba8>
 80076a8:	a335      	add	r3, pc, #212	; (adr r3, 8007780 <_strtod_l+0xbd8>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	f7f9 fa25 	bl	8000afc <__aeabi_dcmplt>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f47f acce 	bne.w	8007054 <_strtod_l+0x4ac>
 80076b8:	a333      	add	r3, pc, #204	; (adr r3, 8007788 <_strtod_l+0xbe0>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	4640      	mov	r0, r8
 80076c0:	4649      	mov	r1, r9
 80076c2:	f7f9 fa39 	bl	8000b38 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f43f af7b 	beq.w	80075c2 <_strtod_l+0xa1a>
 80076cc:	e4c2      	b.n	8007054 <_strtod_l+0x4ac>
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	b333      	cbz	r3, 8007720 <_strtod_l+0xb78>
 80076d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076d8:	d822      	bhi.n	8007720 <_strtod_l+0xb78>
 80076da:	a32d      	add	r3, pc, #180	; (adr r3, 8007790 <_strtod_l+0xbe8>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	4640      	mov	r0, r8
 80076e2:	4649      	mov	r1, r9
 80076e4:	f7f9 fa14 	bl	8000b10 <__aeabi_dcmple>
 80076e8:	b1a0      	cbz	r0, 8007714 <_strtod_l+0xb6c>
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	f7f9 fa6b 	bl	8000bc8 <__aeabi_d2uiz>
 80076f2:	2801      	cmp	r0, #1
 80076f4:	bf38      	it	cc
 80076f6:	2001      	movcc	r0, #1
 80076f8:	f7f8 ff14 	bl	8000524 <__aeabi_ui2d>
 80076fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076fe:	4680      	mov	r8, r0
 8007700:	4689      	mov	r9, r1
 8007702:	bb13      	cbnz	r3, 800774a <_strtod_l+0xba2>
 8007704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007708:	9014      	str	r0, [sp, #80]	; 0x50
 800770a:	9315      	str	r3, [sp, #84]	; 0x54
 800770c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007710:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007718:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	930d      	str	r3, [sp, #52]	; 0x34
 8007720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007724:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007728:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800772c:	f001 fe54 	bl	80093d8 <__ulp>
 8007730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007734:	ec53 2b10 	vmov	r2, r3, d0
 8007738:	f7f8 ff6e 	bl	8000618 <__aeabi_dmul>
 800773c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007740:	f7f8 fdb4 	bl	80002ac <__adddf3>
 8007744:	4682      	mov	sl, r0
 8007746:	468b      	mov	fp, r1
 8007748:	e78f      	b.n	800766a <_strtod_l+0xac2>
 800774a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800774e:	e7dd      	b.n	800770c <_strtod_l+0xb64>
 8007750:	a311      	add	r3, pc, #68	; (adr r3, 8007798 <_strtod_l+0xbf0>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f9 f9d1 	bl	8000afc <__aeabi_dcmplt>
 800775a:	e7b4      	b.n	80076c6 <_strtod_l+0xb1e>
 800775c:	2300      	movs	r3, #0
 800775e:	930e      	str	r3, [sp, #56]	; 0x38
 8007760:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	f7ff ba65 	b.w	8006c34 <_strtod_l+0x8c>
 800776a:	2b65      	cmp	r3, #101	; 0x65
 800776c:	f43f ab5d 	beq.w	8006e2a <_strtod_l+0x282>
 8007770:	2b45      	cmp	r3, #69	; 0x45
 8007772:	f43f ab5a 	beq.w	8006e2a <_strtod_l+0x282>
 8007776:	2201      	movs	r2, #1
 8007778:	f7ff bb92 	b.w	8006ea0 <_strtod_l+0x2f8>
 800777c:	f3af 8000 	nop.w
 8007780:	94a03595 	.word	0x94a03595
 8007784:	3fdfffff 	.word	0x3fdfffff
 8007788:	35afe535 	.word	0x35afe535
 800778c:	3fe00000 	.word	0x3fe00000
 8007790:	ffc00000 	.word	0xffc00000
 8007794:	41dfffff 	.word	0x41dfffff
 8007798:	94a03595 	.word	0x94a03595
 800779c:	3fcfffff 	.word	0x3fcfffff
 80077a0:	3ff00000 	.word	0x3ff00000
 80077a4:	7ff00000 	.word	0x7ff00000
 80077a8:	7fe00000 	.word	0x7fe00000
 80077ac:	7c9fffff 	.word	0x7c9fffff
 80077b0:	3fe00000 	.word	0x3fe00000
 80077b4:	bff00000 	.word	0xbff00000
 80077b8:	7fefffff 	.word	0x7fefffff

080077bc <_strtod_r>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	; (80077c4 <_strtod_r+0x8>)
 80077be:	f7ff b9f3 	b.w	8006ba8 <_strtod_l>
 80077c2:	bf00      	nop
 80077c4:	20000084 	.word	0x20000084

080077c8 <_strtol_l.isra.0>:
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ce:	d001      	beq.n	80077d4 <_strtol_l.isra.0+0xc>
 80077d0:	2b24      	cmp	r3, #36	; 0x24
 80077d2:	d906      	bls.n	80077e2 <_strtol_l.isra.0+0x1a>
 80077d4:	f7fe faea 	bl	8005dac <__errno>
 80077d8:	2316      	movs	r3, #22
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	2000      	movs	r0, #0
 80077de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e2:	4f3a      	ldr	r7, [pc, #232]	; (80078cc <_strtol_l.isra.0+0x104>)
 80077e4:	468e      	mov	lr, r1
 80077e6:	4676      	mov	r6, lr
 80077e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80077ec:	5de5      	ldrb	r5, [r4, r7]
 80077ee:	f015 0508 	ands.w	r5, r5, #8
 80077f2:	d1f8      	bne.n	80077e6 <_strtol_l.isra.0+0x1e>
 80077f4:	2c2d      	cmp	r4, #45	; 0x2d
 80077f6:	d134      	bne.n	8007862 <_strtol_l.isra.0+0x9a>
 80077f8:	f89e 4000 	ldrb.w	r4, [lr]
 80077fc:	f04f 0801 	mov.w	r8, #1
 8007800:	f106 0e02 	add.w	lr, r6, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05c      	beq.n	80078c2 <_strtol_l.isra.0+0xfa>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d10c      	bne.n	8007826 <_strtol_l.isra.0+0x5e>
 800780c:	2c30      	cmp	r4, #48	; 0x30
 800780e:	d10a      	bne.n	8007826 <_strtol_l.isra.0+0x5e>
 8007810:	f89e 4000 	ldrb.w	r4, [lr]
 8007814:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007818:	2c58      	cmp	r4, #88	; 0x58
 800781a:	d14d      	bne.n	80078b8 <_strtol_l.isra.0+0xf0>
 800781c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007820:	2310      	movs	r3, #16
 8007822:	f10e 0e02 	add.w	lr, lr, #2
 8007826:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800782a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800782e:	2600      	movs	r6, #0
 8007830:	fbbc f9f3 	udiv	r9, ip, r3
 8007834:	4635      	mov	r5, r6
 8007836:	fb03 ca19 	mls	sl, r3, r9, ip
 800783a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800783e:	2f09      	cmp	r7, #9
 8007840:	d818      	bhi.n	8007874 <_strtol_l.isra.0+0xac>
 8007842:	463c      	mov	r4, r7
 8007844:	42a3      	cmp	r3, r4
 8007846:	dd24      	ble.n	8007892 <_strtol_l.isra.0+0xca>
 8007848:	2e00      	cmp	r6, #0
 800784a:	db1f      	blt.n	800788c <_strtol_l.isra.0+0xc4>
 800784c:	45a9      	cmp	r9, r5
 800784e:	d31d      	bcc.n	800788c <_strtol_l.isra.0+0xc4>
 8007850:	d101      	bne.n	8007856 <_strtol_l.isra.0+0x8e>
 8007852:	45a2      	cmp	sl, r4
 8007854:	db1a      	blt.n	800788c <_strtol_l.isra.0+0xc4>
 8007856:	fb05 4503 	mla	r5, r5, r3, r4
 800785a:	2601      	movs	r6, #1
 800785c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007860:	e7eb      	b.n	800783a <_strtol_l.isra.0+0x72>
 8007862:	2c2b      	cmp	r4, #43	; 0x2b
 8007864:	bf08      	it	eq
 8007866:	f89e 4000 	ldrbeq.w	r4, [lr]
 800786a:	46a8      	mov	r8, r5
 800786c:	bf08      	it	eq
 800786e:	f106 0e02 	addeq.w	lr, r6, #2
 8007872:	e7c7      	b.n	8007804 <_strtol_l.isra.0+0x3c>
 8007874:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007878:	2f19      	cmp	r7, #25
 800787a:	d801      	bhi.n	8007880 <_strtol_l.isra.0+0xb8>
 800787c:	3c37      	subs	r4, #55	; 0x37
 800787e:	e7e1      	b.n	8007844 <_strtol_l.isra.0+0x7c>
 8007880:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007884:	2f19      	cmp	r7, #25
 8007886:	d804      	bhi.n	8007892 <_strtol_l.isra.0+0xca>
 8007888:	3c57      	subs	r4, #87	; 0x57
 800788a:	e7db      	b.n	8007844 <_strtol_l.isra.0+0x7c>
 800788c:	f04f 36ff 	mov.w	r6, #4294967295
 8007890:	e7e4      	b.n	800785c <_strtol_l.isra.0+0x94>
 8007892:	2e00      	cmp	r6, #0
 8007894:	da05      	bge.n	80078a2 <_strtol_l.isra.0+0xda>
 8007896:	2322      	movs	r3, #34	; 0x22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	4665      	mov	r5, ip
 800789c:	b942      	cbnz	r2, 80078b0 <_strtol_l.isra.0+0xe8>
 800789e:	4628      	mov	r0, r5
 80078a0:	e79d      	b.n	80077de <_strtol_l.isra.0+0x16>
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	d000      	beq.n	80078aa <_strtol_l.isra.0+0xe2>
 80078a8:	426d      	negs	r5, r5
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d0f7      	beq.n	800789e <_strtol_l.isra.0+0xd6>
 80078ae:	b10e      	cbz	r6, 80078b4 <_strtol_l.isra.0+0xec>
 80078b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	e7f2      	b.n	800789e <_strtol_l.isra.0+0xd6>
 80078b8:	2430      	movs	r4, #48	; 0x30
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1b3      	bne.n	8007826 <_strtol_l.isra.0+0x5e>
 80078be:	2308      	movs	r3, #8
 80078c0:	e7b1      	b.n	8007826 <_strtol_l.isra.0+0x5e>
 80078c2:	2c30      	cmp	r4, #48	; 0x30
 80078c4:	d0a4      	beq.n	8007810 <_strtol_l.isra.0+0x48>
 80078c6:	230a      	movs	r3, #10
 80078c8:	e7ad      	b.n	8007826 <_strtol_l.isra.0+0x5e>
 80078ca:	bf00      	nop
 80078cc:	0800ad49 	.word	0x0800ad49

080078d0 <_strtol_r>:
 80078d0:	f7ff bf7a 	b.w	80077c8 <_strtol_l.isra.0>

080078d4 <quorem>:
 80078d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	6903      	ldr	r3, [r0, #16]
 80078da:	690c      	ldr	r4, [r1, #16]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	4607      	mov	r7, r0
 80078e0:	f2c0 8081 	blt.w	80079e6 <quorem+0x112>
 80078e4:	3c01      	subs	r4, #1
 80078e6:	f101 0814 	add.w	r8, r1, #20
 80078ea:	f100 0514 	add.w	r5, r0, #20
 80078ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078fc:	3301      	adds	r3, #1
 80078fe:	429a      	cmp	r2, r3
 8007900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007908:	fbb2 f6f3 	udiv	r6, r2, r3
 800790c:	d331      	bcc.n	8007972 <quorem+0x9e>
 800790e:	f04f 0e00 	mov.w	lr, #0
 8007912:	4640      	mov	r0, r8
 8007914:	46ac      	mov	ip, r5
 8007916:	46f2      	mov	sl, lr
 8007918:	f850 2b04 	ldr.w	r2, [r0], #4
 800791c:	b293      	uxth	r3, r2
 800791e:	fb06 e303 	mla	r3, r6, r3, lr
 8007922:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007926:	b29b      	uxth	r3, r3
 8007928:	ebaa 0303 	sub.w	r3, sl, r3
 800792c:	0c12      	lsrs	r2, r2, #16
 800792e:	f8dc a000 	ldr.w	sl, [ip]
 8007932:	fb06 e202 	mla	r2, r6, r2, lr
 8007936:	fa13 f38a 	uxtah	r3, r3, sl
 800793a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800793e:	fa1f fa82 	uxth.w	sl, r2
 8007942:	f8dc 2000 	ldr.w	r2, [ip]
 8007946:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800794a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007954:	4581      	cmp	r9, r0
 8007956:	f84c 3b04 	str.w	r3, [ip], #4
 800795a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800795e:	d2db      	bcs.n	8007918 <quorem+0x44>
 8007960:	f855 300b 	ldr.w	r3, [r5, fp]
 8007964:	b92b      	cbnz	r3, 8007972 <quorem+0x9e>
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	3b04      	subs	r3, #4
 800796a:	429d      	cmp	r5, r3
 800796c:	461a      	mov	r2, r3
 800796e:	d32e      	bcc.n	80079ce <quorem+0xfa>
 8007970:	613c      	str	r4, [r7, #16]
 8007972:	4638      	mov	r0, r7
 8007974:	f001 fc8c 	bl	8009290 <__mcmp>
 8007978:	2800      	cmp	r0, #0
 800797a:	db24      	blt.n	80079c6 <quorem+0xf2>
 800797c:	3601      	adds	r6, #1
 800797e:	4628      	mov	r0, r5
 8007980:	f04f 0c00 	mov.w	ip, #0
 8007984:	f858 2b04 	ldr.w	r2, [r8], #4
 8007988:	f8d0 e000 	ldr.w	lr, [r0]
 800798c:	b293      	uxth	r3, r2
 800798e:	ebac 0303 	sub.w	r3, ip, r3
 8007992:	0c12      	lsrs	r2, r2, #16
 8007994:	fa13 f38e 	uxtah	r3, r3, lr
 8007998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800799c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a6:	45c1      	cmp	r9, r8
 80079a8:	f840 3b04 	str.w	r3, [r0], #4
 80079ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079b0:	d2e8      	bcs.n	8007984 <quorem+0xb0>
 80079b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ba:	b922      	cbnz	r2, 80079c6 <quorem+0xf2>
 80079bc:	3b04      	subs	r3, #4
 80079be:	429d      	cmp	r5, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	d30a      	bcc.n	80079da <quorem+0x106>
 80079c4:	613c      	str	r4, [r7, #16]
 80079c6:	4630      	mov	r0, r6
 80079c8:	b003      	add	sp, #12
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d1cc      	bne.n	8007970 <quorem+0x9c>
 80079d6:	3c01      	subs	r4, #1
 80079d8:	e7c7      	b.n	800796a <quorem+0x96>
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	3b04      	subs	r3, #4
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d1f0      	bne.n	80079c4 <quorem+0xf0>
 80079e2:	3c01      	subs	r4, #1
 80079e4:	e7eb      	b.n	80079be <quorem+0xea>
 80079e6:	2000      	movs	r0, #0
 80079e8:	e7ee      	b.n	80079c8 <quorem+0xf4>
 80079ea:	0000      	movs	r0, r0
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_dtoa_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	ed2d 8b02 	vpush	{d8}
 80079f8:	ec57 6b10 	vmov	r6, r7, d0
 80079fc:	b095      	sub	sp, #84	; 0x54
 80079fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a10:	b975      	cbnz	r5, 8007a30 <_dtoa_r+0x40>
 8007a12:	2010      	movs	r0, #16
 8007a14:	f001 f94c 	bl	8008cb0 <malloc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a1c:	b920      	cbnz	r0, 8007a28 <_dtoa_r+0x38>
 8007a1e:	4bb2      	ldr	r3, [pc, #712]	; (8007ce8 <_dtoa_r+0x2f8>)
 8007a20:	21ea      	movs	r1, #234	; 0xea
 8007a22:	48b2      	ldr	r0, [pc, #712]	; (8007cec <_dtoa_r+0x2fc>)
 8007a24:	f002 f874 	bl	8009b10 <__assert_func>
 8007a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a2c:	6005      	str	r5, [r0, #0]
 8007a2e:	60c5      	str	r5, [r0, #12]
 8007a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a32:	6819      	ldr	r1, [r3, #0]
 8007a34:	b151      	cbz	r1, 8007a4c <_dtoa_r+0x5c>
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	604a      	str	r2, [r1, #4]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4093      	lsls	r3, r2
 8007a3e:	608b      	str	r3, [r1, #8]
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 f99d 	bl	8008d80 <_Bfree>
 8007a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	1e3b      	subs	r3, r7, #0
 8007a4e:	bfb9      	ittee	lt
 8007a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a54:	9303      	strlt	r3, [sp, #12]
 8007a56:	2300      	movge	r3, #0
 8007a58:	f8c8 3000 	strge.w	r3, [r8]
 8007a5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007a60:	4ba3      	ldr	r3, [pc, #652]	; (8007cf0 <_dtoa_r+0x300>)
 8007a62:	bfbc      	itt	lt
 8007a64:	2201      	movlt	r2, #1
 8007a66:	f8c8 2000 	strlt.w	r2, [r8]
 8007a6a:	ea33 0309 	bics.w	r3, r3, r9
 8007a6e:	d11b      	bne.n	8007aa8 <_dtoa_r+0xb8>
 8007a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a7c:	4333      	orrs	r3, r6
 8007a7e:	f000 857a 	beq.w	8008576 <_dtoa_r+0xb86>
 8007a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a84:	b963      	cbnz	r3, 8007aa0 <_dtoa_r+0xb0>
 8007a86:	4b9b      	ldr	r3, [pc, #620]	; (8007cf4 <_dtoa_r+0x304>)
 8007a88:	e024      	b.n	8007ad4 <_dtoa_r+0xe4>
 8007a8a:	4b9b      	ldr	r3, [pc, #620]	; (8007cf8 <_dtoa_r+0x308>)
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	9800      	ldr	r0, [sp, #0]
 8007a96:	b015      	add	sp, #84	; 0x54
 8007a98:	ecbd 8b02 	vpop	{d8}
 8007a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa0:	4b94      	ldr	r3, [pc, #592]	; (8007cf4 <_dtoa_r+0x304>)
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	3303      	adds	r3, #3
 8007aa6:	e7f3      	b.n	8007a90 <_dtoa_r+0xa0>
 8007aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	ec51 0b17 	vmov	r0, r1, d7
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ab8:	f7f9 f816 	bl	8000ae8 <__aeabi_dcmpeq>
 8007abc:	4680      	mov	r8, r0
 8007abe:	b158      	cbz	r0, 8007ad8 <_dtoa_r+0xe8>
 8007ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8551 	beq.w	8008570 <_dtoa_r+0xb80>
 8007ace:	488b      	ldr	r0, [pc, #556]	; (8007cfc <_dtoa_r+0x30c>)
 8007ad0:	6018      	str	r0, [r3, #0]
 8007ad2:	1e43      	subs	r3, r0, #1
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	e7dd      	b.n	8007a94 <_dtoa_r+0xa4>
 8007ad8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007adc:	aa12      	add	r2, sp, #72	; 0x48
 8007ade:	a913      	add	r1, sp, #76	; 0x4c
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f001 fcf5 	bl	80094d0 <__d2b>
 8007ae6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007aea:	4683      	mov	fp, r0
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	d07c      	beq.n	8007bea <_dtoa_r+0x1fa>
 8007af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007afa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007afe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b0a:	4b7d      	ldr	r3, [pc, #500]	; (8007d00 <_dtoa_r+0x310>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 fbc9 	bl	80002a8 <__aeabi_dsub>
 8007b16:	a36e      	add	r3, pc, #440	; (adr r3, 8007cd0 <_dtoa_r+0x2e0>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fd7c 	bl	8000618 <__aeabi_dmul>
 8007b20:	a36d      	add	r3, pc, #436	; (adr r3, 8007cd8 <_dtoa_r+0x2e8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fbc1 	bl	80002ac <__adddf3>
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f7f8 fd08 	bl	8000544 <__aeabi_i2d>
 8007b34:	a36a      	add	r3, pc, #424	; (adr r3, 8007ce0 <_dtoa_r+0x2f0>)
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f7f8 fd6d 	bl	8000618 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fbb1 	bl	80002ac <__adddf3>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	f7f9 f813 	bl	8000b78 <__aeabi_d2iz>
 8007b52:	2200      	movs	r2, #0
 8007b54:	4682      	mov	sl, r0
 8007b56:	2300      	movs	r3, #0
 8007b58:	4630      	mov	r0, r6
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	f7f8 ffce 	bl	8000afc <__aeabi_dcmplt>
 8007b60:	b148      	cbz	r0, 8007b76 <_dtoa_r+0x186>
 8007b62:	4650      	mov	r0, sl
 8007b64:	f7f8 fcee 	bl	8000544 <__aeabi_i2d>
 8007b68:	4632      	mov	r2, r6
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	f7f8 ffbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b70:	b908      	cbnz	r0, 8007b76 <_dtoa_r+0x186>
 8007b72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b76:	f1ba 0f16 	cmp.w	sl, #22
 8007b7a:	d854      	bhi.n	8007c26 <_dtoa_r+0x236>
 8007b7c:	4b61      	ldr	r3, [pc, #388]	; (8007d04 <_dtoa_r+0x314>)
 8007b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b8a:	f7f8 ffb7 	bl	8000afc <__aeabi_dcmplt>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d04b      	beq.n	8007c2a <_dtoa_r+0x23a>
 8007b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b96:	2300      	movs	r3, #0
 8007b98:	930e      	str	r3, [sp, #56]	; 0x38
 8007b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b9c:	1b5d      	subs	r5, r3, r5
 8007b9e:	1e6b      	subs	r3, r5, #1
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	bf43      	ittte	mi
 8007ba4:	2300      	movmi	r3, #0
 8007ba6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007baa:	9304      	strmi	r3, [sp, #16]
 8007bac:	f04f 0800 	movpl.w	r8, #0
 8007bb0:	f1ba 0f00 	cmp.w	sl, #0
 8007bb4:	db3b      	blt.n	8007c2e <_dtoa_r+0x23e>
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007bbc:	4453      	add	r3, sl
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9306      	str	r3, [sp, #24]
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d869      	bhi.n	8007c9e <_dtoa_r+0x2ae>
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	bfc4      	itt	gt
 8007bce:	3b04      	subgt	r3, #4
 8007bd0:	9305      	strgt	r3, [sp, #20]
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8007bd8:	bfcc      	ite	gt
 8007bda:	2500      	movgt	r5, #0
 8007bdc:	2501      	movle	r5, #1
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d869      	bhi.n	8007cb6 <_dtoa_r+0x2c6>
 8007be2:	e8df f003 	tbb	[pc, r3]
 8007be6:	4e2c      	.short	0x4e2c
 8007be8:	5a4c      	.short	0x5a4c
 8007bea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007bee:	441d      	add	r5, r3
 8007bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	bfc1      	itttt	gt
 8007bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c00:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c08:	bfda      	itte	le
 8007c0a:	f1c3 0320 	rsble	r3, r3, #32
 8007c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007c12:	4318      	orrgt	r0, r3
 8007c14:	f7f8 fc86 	bl	8000524 <__aeabi_ui2d>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c20:	3d01      	subs	r5, #1
 8007c22:	9310      	str	r3, [sp, #64]	; 0x40
 8007c24:	e771      	b.n	8007b0a <_dtoa_r+0x11a>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7b6      	b.n	8007b98 <_dtoa_r+0x1a8>
 8007c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8007c2c:	e7b5      	b.n	8007b9a <_dtoa_r+0x1aa>
 8007c2e:	f1ca 0300 	rsb	r3, sl, #0
 8007c32:	9306      	str	r3, [sp, #24]
 8007c34:	2300      	movs	r3, #0
 8007c36:	eba8 080a 	sub.w	r8, r8, sl
 8007c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c3c:	e7c2      	b.n	8007bc4 <_dtoa_r+0x1d4>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9308      	str	r3, [sp, #32]
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc39      	bgt.n	8007cbc <_dtoa_r+0x2cc>
 8007c48:	f04f 0901 	mov.w	r9, #1
 8007c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c50:	464b      	mov	r3, r9
 8007c52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c58:	2200      	movs	r2, #0
 8007c5a:	6042      	str	r2, [r0, #4]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f102 0614 	add.w	r6, r2, #20
 8007c62:	429e      	cmp	r6, r3
 8007c64:	6841      	ldr	r1, [r0, #4]
 8007c66:	d92f      	bls.n	8007cc8 <_dtoa_r+0x2d8>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f001 f849 	bl	8008d00 <_Balloc>
 8007c6e:	9000      	str	r0, [sp, #0]
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d14b      	bne.n	8007d0c <_dtoa_r+0x31c>
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <_dtoa_r+0x318>)
 8007c76:	4602      	mov	r2, r0
 8007c78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c7c:	e6d1      	b.n	8007a22 <_dtoa_r+0x32>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7de      	b.n	8007c40 <_dtoa_r+0x250>
 8007c82:	2300      	movs	r3, #0
 8007c84:	9308      	str	r3, [sp, #32]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	eb0a 0903 	add.w	r9, sl, r3
 8007c8c:	f109 0301 	add.w	r3, r9, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	bfb8      	it	lt
 8007c96:	2301      	movlt	r3, #1
 8007c98:	e7dd      	b.n	8007c56 <_dtoa_r+0x266>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f2      	b.n	8007c84 <_dtoa_r+0x294>
 8007c9e:	2501      	movs	r5, #1
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	9508      	str	r5, [sp, #32]
 8007ca6:	f04f 39ff 	mov.w	r9, #4294967295
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cb0:	2312      	movs	r3, #18
 8007cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb4:	e7cf      	b.n	8007c56 <_dtoa_r+0x266>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	9308      	str	r3, [sp, #32]
 8007cba:	e7f4      	b.n	8007ca6 <_dtoa_r+0x2b6>
 8007cbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007cc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	e7c6      	b.n	8007c56 <_dtoa_r+0x266>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	6041      	str	r1, [r0, #4]
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	e7c6      	b.n	8007c5e <_dtoa_r+0x26e>
 8007cd0:	636f4361 	.word	0x636f4361
 8007cd4:	3fd287a7 	.word	0x3fd287a7
 8007cd8:	8b60c8b3 	.word	0x8b60c8b3
 8007cdc:	3fc68a28 	.word	0x3fc68a28
 8007ce0:	509f79fb 	.word	0x509f79fb
 8007ce4:	3fd34413 	.word	0x3fd34413
 8007ce8:	0800ae56 	.word	0x0800ae56
 8007cec:	0800ae6d 	.word	0x0800ae6d
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	0800ae52 	.word	0x0800ae52
 8007cf8:	0800ae49 	.word	0x0800ae49
 8007cfc:	0800acc9 	.word	0x0800acc9
 8007d00:	3ff80000 	.word	0x3ff80000
 8007d04:	0800afe8 	.word	0x0800afe8
 8007d08:	0800aecc 	.word	0x0800aecc
 8007d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0e:	9a00      	ldr	r2, [sp, #0]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	9b01      	ldr	r3, [sp, #4]
 8007d14:	2b0e      	cmp	r3, #14
 8007d16:	f200 80ad 	bhi.w	8007e74 <_dtoa_r+0x484>
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	f000 80aa 	beq.w	8007e74 <_dtoa_r+0x484>
 8007d20:	f1ba 0f00 	cmp.w	sl, #0
 8007d24:	dd36      	ble.n	8007d94 <_dtoa_r+0x3a4>
 8007d26:	4ac3      	ldr	r2, [pc, #780]	; (8008034 <_dtoa_r+0x644>)
 8007d28:	f00a 030f 	and.w	r3, sl, #15
 8007d2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d30:	ed93 7b00 	vldr	d7, [r3]
 8007d34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d40:	eef0 8a67 	vmov.f32	s17, s15
 8007d44:	d016      	beq.n	8007d74 <_dtoa_r+0x384>
 8007d46:	4bbc      	ldr	r3, [pc, #752]	; (8008038 <_dtoa_r+0x648>)
 8007d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d50:	f7f8 fd8c 	bl	800086c <__aeabi_ddiv>
 8007d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d58:	f007 070f 	and.w	r7, r7, #15
 8007d5c:	2503      	movs	r5, #3
 8007d5e:	4eb6      	ldr	r6, [pc, #728]	; (8008038 <_dtoa_r+0x648>)
 8007d60:	b957      	cbnz	r7, 8007d78 <_dtoa_r+0x388>
 8007d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d66:	ec53 2b18 	vmov	r2, r3, d8
 8007d6a:	f7f8 fd7f 	bl	800086c <__aeabi_ddiv>
 8007d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d72:	e029      	b.n	8007dc8 <_dtoa_r+0x3d8>
 8007d74:	2502      	movs	r5, #2
 8007d76:	e7f2      	b.n	8007d5e <_dtoa_r+0x36e>
 8007d78:	07f9      	lsls	r1, r7, #31
 8007d7a:	d508      	bpl.n	8007d8e <_dtoa_r+0x39e>
 8007d7c:	ec51 0b18 	vmov	r0, r1, d8
 8007d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d84:	f7f8 fc48 	bl	8000618 <__aeabi_dmul>
 8007d88:	ec41 0b18 	vmov	d8, r0, r1
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	107f      	asrs	r7, r7, #1
 8007d90:	3608      	adds	r6, #8
 8007d92:	e7e5      	b.n	8007d60 <_dtoa_r+0x370>
 8007d94:	f000 80a6 	beq.w	8007ee4 <_dtoa_r+0x4f4>
 8007d98:	f1ca 0600 	rsb	r6, sl, #0
 8007d9c:	4ba5      	ldr	r3, [pc, #660]	; (8008034 <_dtoa_r+0x644>)
 8007d9e:	4fa6      	ldr	r7, [pc, #664]	; (8008038 <_dtoa_r+0x648>)
 8007da0:	f006 020f 	and.w	r2, r6, #15
 8007da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007db0:	f7f8 fc32 	bl	8000618 <__aeabi_dmul>
 8007db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db8:	1136      	asrs	r6, r6, #4
 8007dba:	2300      	movs	r3, #0
 8007dbc:	2502      	movs	r5, #2
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	f040 8085 	bne.w	8007ece <_dtoa_r+0x4de>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1d2      	bne.n	8007d6e <_dtoa_r+0x37e>
 8007dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 808c 	beq.w	8007ee8 <_dtoa_r+0x4f8>
 8007dd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dd4:	4b99      	ldr	r3, [pc, #612]	; (800803c <_dtoa_r+0x64c>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fe8e 	bl	8000afc <__aeabi_dcmplt>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f000 8081 	beq.w	8007ee8 <_dtoa_r+0x4f8>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d07d      	beq.n	8007ee8 <_dtoa_r+0x4f8>
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	dd3c      	ble.n	8007e6c <_dtoa_r+0x47c>
 8007df2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4b91      	ldr	r3, [pc, #580]	; (8008040 <_dtoa_r+0x650>)
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f7f8 fc0a 	bl	8000618 <__aeabi_dmul>
 8007e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e08:	3501      	adds	r5, #1
 8007e0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007e0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e12:	4628      	mov	r0, r5
 8007e14:	f7f8 fb96 	bl	8000544 <__aeabi_i2d>
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	f7f8 fbfc 	bl	8000618 <__aeabi_dmul>
 8007e20:	4b88      	ldr	r3, [pc, #544]	; (8008044 <_dtoa_r+0x654>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	f7f8 fa42 	bl	80002ac <__adddf3>
 8007e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d15c      	bne.n	8007ef2 <_dtoa_r+0x502>
 8007e38:	4b83      	ldr	r3, [pc, #524]	; (8008048 <_dtoa_r+0x658>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 fa32 	bl	80002a8 <__aeabi_dsub>
 8007e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e48:	4606      	mov	r6, r0
 8007e4a:	460f      	mov	r7, r1
 8007e4c:	f7f8 fe74 	bl	8000b38 <__aeabi_dcmpgt>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f040 8296 	bne.w	8008382 <_dtoa_r+0x992>
 8007e56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fe4b 	bl	8000afc <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f040 8288 	bne.w	800837c <_dtoa_r+0x98c>
 8007e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f2c0 8158 	blt.w	800812c <_dtoa_r+0x73c>
 8007e7c:	f1ba 0f0e 	cmp.w	sl, #14
 8007e80:	f300 8154 	bgt.w	800812c <_dtoa_r+0x73c>
 8007e84:	4b6b      	ldr	r3, [pc, #428]	; (8008034 <_dtoa_r+0x644>)
 8007e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f280 80e3 	bge.w	800805c <_dtoa_r+0x66c>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f300 80df 	bgt.w	800805c <_dtoa_r+0x66c>
 8007e9e:	f040 826d 	bne.w	800837c <_dtoa_r+0x98c>
 8007ea2:	4b69      	ldr	r3, [pc, #420]	; (8008048 <_dtoa_r+0x658>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	f7f8 fbb5 	bl	8000618 <__aeabi_dmul>
 8007eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eb2:	f7f8 fe37 	bl	8000b24 <__aeabi_dcmpge>
 8007eb6:	9e01      	ldr	r6, [sp, #4]
 8007eb8:	4637      	mov	r7, r6
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f040 8243 	bne.w	8008346 <_dtoa_r+0x956>
 8007ec0:	9d00      	ldr	r5, [sp, #0]
 8007ec2:	2331      	movs	r3, #49	; 0x31
 8007ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ec8:	f10a 0a01 	add.w	sl, sl, #1
 8007ecc:	e23f      	b.n	800834e <_dtoa_r+0x95e>
 8007ece:	07f2      	lsls	r2, r6, #31
 8007ed0:	d505      	bpl.n	8007ede <_dtoa_r+0x4ee>
 8007ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed6:	f7f8 fb9f 	bl	8000618 <__aeabi_dmul>
 8007eda:	3501      	adds	r5, #1
 8007edc:	2301      	movs	r3, #1
 8007ede:	1076      	asrs	r6, r6, #1
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	e76c      	b.n	8007dbe <_dtoa_r+0x3ce>
 8007ee4:	2502      	movs	r5, #2
 8007ee6:	e76f      	b.n	8007dc8 <_dtoa_r+0x3d8>
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	f8cd a01c 	str.w	sl, [sp, #28]
 8007eee:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef0:	e78d      	b.n	8007e0e <_dtoa_r+0x41e>
 8007ef2:	9900      	ldr	r1, [sp, #0]
 8007ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef8:	4b4e      	ldr	r3, [pc, #312]	; (8008034 <_dtoa_r+0x644>)
 8007efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007efe:	4401      	add	r1, r0
 8007f00:	9102      	str	r1, [sp, #8]
 8007f02:	9908      	ldr	r1, [sp, #32]
 8007f04:	eeb0 8a47 	vmov.f32	s16, s14
 8007f08:	eef0 8a67 	vmov.f32	s17, s15
 8007f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d045      	beq.n	8007fa4 <_dtoa_r+0x5b4>
 8007f18:	494c      	ldr	r1, [pc, #304]	; (800804c <_dtoa_r+0x65c>)
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f7f8 fca6 	bl	800086c <__aeabi_ddiv>
 8007f20:	ec53 2b18 	vmov	r2, r3, d8
 8007f24:	f7f8 f9c0 	bl	80002a8 <__aeabi_dsub>
 8007f28:	9d00      	ldr	r5, [sp, #0]
 8007f2a:	ec41 0b18 	vmov	d8, r0, r1
 8007f2e:	4639      	mov	r1, r7
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7f8 fe21 	bl	8000b78 <__aeabi_d2iz>
 8007f36:	900c      	str	r0, [sp, #48]	; 0x30
 8007f38:	f7f8 fb04 	bl	8000544 <__aeabi_i2d>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 f9b0 	bl	80002a8 <__aeabi_dsub>
 8007f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4a:	3330      	adds	r3, #48	; 0x30
 8007f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f50:	ec53 2b18 	vmov	r2, r3, d8
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	f7f8 fdd0 	bl	8000afc <__aeabi_dcmplt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d165      	bne.n	800802c <_dtoa_r+0x63c>
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4935      	ldr	r1, [pc, #212]	; (800803c <_dtoa_r+0x64c>)
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7f8 f99e 	bl	80002a8 <__aeabi_dsub>
 8007f6c:	ec53 2b18 	vmov	r2, r3, d8
 8007f70:	f7f8 fdc4 	bl	8000afc <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 80b9 	bne.w	80080ec <_dtoa_r+0x6fc>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	f43f af75 	beq.w	8007e6c <_dtoa_r+0x47c>
 8007f82:	4b2f      	ldr	r3, [pc, #188]	; (8008040 <_dtoa_r+0x650>)
 8007f84:	ec51 0b18 	vmov	r0, r1, d8
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f7f8 fb45 	bl	8000618 <__aeabi_dmul>
 8007f8e:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <_dtoa_r+0x650>)
 8007f90:	ec41 0b18 	vmov	d8, r0, r1
 8007f94:	2200      	movs	r2, #0
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 fb3d 	bl	8000618 <__aeabi_dmul>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	e7c4      	b.n	8007f2e <_dtoa_r+0x53e>
 8007fa4:	ec51 0b17 	vmov	r0, r1, d7
 8007fa8:	f7f8 fb36 	bl	8000618 <__aeabi_dmul>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	9d00      	ldr	r5, [sp, #0]
 8007fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007fb2:	ec41 0b18 	vmov	d8, r0, r1
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7f8 fddd 	bl	8000b78 <__aeabi_d2iz>
 8007fbe:	9011      	str	r0, [sp, #68]	; 0x44
 8007fc0:	f7f8 fac0 	bl	8000544 <__aeabi_i2d>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 f96c 	bl	80002a8 <__aeabi_dsub>
 8007fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fd2:	3330      	adds	r3, #48	; 0x30
 8007fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	429d      	cmp	r5, r3
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	d134      	bne.n	8008050 <_dtoa_r+0x660>
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <_dtoa_r+0x65c>)
 8007fe8:	ec51 0b18 	vmov	r0, r1, d8
 8007fec:	f7f8 f95e 	bl	80002ac <__adddf3>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	f7f8 fd9e 	bl	8000b38 <__aeabi_dcmpgt>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d175      	bne.n	80080ec <_dtoa_r+0x6fc>
 8008000:	ec53 2b18 	vmov	r2, r3, d8
 8008004:	4911      	ldr	r1, [pc, #68]	; (800804c <_dtoa_r+0x65c>)
 8008006:	2000      	movs	r0, #0
 8008008:	f7f8 f94e 	bl	80002a8 <__aeabi_dsub>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fd72 	bl	8000afc <__aeabi_dcmplt>
 8008018:	2800      	cmp	r0, #0
 800801a:	f43f af27 	beq.w	8007e6c <_dtoa_r+0x47c>
 800801e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008020:	1e6b      	subs	r3, r5, #1
 8008022:	930c      	str	r3, [sp, #48]	; 0x30
 8008024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008028:	2b30      	cmp	r3, #48	; 0x30
 800802a:	d0f8      	beq.n	800801e <_dtoa_r+0x62e>
 800802c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008030:	e04a      	b.n	80080c8 <_dtoa_r+0x6d8>
 8008032:	bf00      	nop
 8008034:	0800afe8 	.word	0x0800afe8
 8008038:	0800afc0 	.word	0x0800afc0
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	40240000 	.word	0x40240000
 8008044:	401c0000 	.word	0x401c0000
 8008048:	40140000 	.word	0x40140000
 800804c:	3fe00000 	.word	0x3fe00000
 8008050:	4baf      	ldr	r3, [pc, #700]	; (8008310 <_dtoa_r+0x920>)
 8008052:	f7f8 fae1 	bl	8000618 <__aeabi_dmul>
 8008056:	4606      	mov	r6, r0
 8008058:	460f      	mov	r7, r1
 800805a:	e7ac      	b.n	8007fb6 <_dtoa_r+0x5c6>
 800805c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008060:	9d00      	ldr	r5, [sp, #0]
 8008062:	4642      	mov	r2, r8
 8008064:	464b      	mov	r3, r9
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fbff 	bl	800086c <__aeabi_ddiv>
 800806e:	f7f8 fd83 	bl	8000b78 <__aeabi_d2iz>
 8008072:	9002      	str	r0, [sp, #8]
 8008074:	f7f8 fa66 	bl	8000544 <__aeabi_i2d>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	f7f8 facc 	bl	8000618 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 f90e 	bl	80002a8 <__aeabi_dsub>
 800808c:	9e02      	ldr	r6, [sp, #8]
 800808e:	9f01      	ldr	r7, [sp, #4]
 8008090:	3630      	adds	r6, #48	; 0x30
 8008092:	f805 6b01 	strb.w	r6, [r5], #1
 8008096:	9e00      	ldr	r6, [sp, #0]
 8008098:	1bae      	subs	r6, r5, r6
 800809a:	42b7      	cmp	r7, r6
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	d137      	bne.n	8008112 <_dtoa_r+0x722>
 80080a2:	f7f8 f903 	bl	80002ac <__adddf3>
 80080a6:	4642      	mov	r2, r8
 80080a8:	464b      	mov	r3, r9
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	f7f8 fd43 	bl	8000b38 <__aeabi_dcmpgt>
 80080b2:	b9c8      	cbnz	r0, 80080e8 <_dtoa_r+0x6f8>
 80080b4:	4642      	mov	r2, r8
 80080b6:	464b      	mov	r3, r9
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 80080c0:	b110      	cbz	r0, 80080c8 <_dtoa_r+0x6d8>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	07d9      	lsls	r1, r3, #31
 80080c6:	d40f      	bmi.n	80080e8 <_dtoa_r+0x6f8>
 80080c8:	4620      	mov	r0, r4
 80080ca:	4659      	mov	r1, fp
 80080cc:	f000 fe58 	bl	8008d80 <_Bfree>
 80080d0:	2300      	movs	r3, #0
 80080d2:	702b      	strb	r3, [r5, #0]
 80080d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d6:	f10a 0001 	add.w	r0, sl, #1
 80080da:	6018      	str	r0, [r3, #0]
 80080dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f43f acd8 	beq.w	8007a94 <_dtoa_r+0xa4>
 80080e4:	601d      	str	r5, [r3, #0]
 80080e6:	e4d5      	b.n	8007a94 <_dtoa_r+0xa4>
 80080e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80080ec:	462b      	mov	r3, r5
 80080ee:	461d      	mov	r5, r3
 80080f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f4:	2a39      	cmp	r2, #57	; 0x39
 80080f6:	d108      	bne.n	800810a <_dtoa_r+0x71a>
 80080f8:	9a00      	ldr	r2, [sp, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d1f7      	bne.n	80080ee <_dtoa_r+0x6fe>
 80080fe:	9a07      	ldr	r2, [sp, #28]
 8008100:	9900      	ldr	r1, [sp, #0]
 8008102:	3201      	adds	r2, #1
 8008104:	9207      	str	r2, [sp, #28]
 8008106:	2230      	movs	r2, #48	; 0x30
 8008108:	700a      	strb	r2, [r1, #0]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	3201      	adds	r2, #1
 800810e:	701a      	strb	r2, [r3, #0]
 8008110:	e78c      	b.n	800802c <_dtoa_r+0x63c>
 8008112:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <_dtoa_r+0x920>)
 8008114:	2200      	movs	r2, #0
 8008116:	f7f8 fa7f 	bl	8000618 <__aeabi_dmul>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f7f8 fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008126:	2800      	cmp	r0, #0
 8008128:	d09b      	beq.n	8008062 <_dtoa_r+0x672>
 800812a:	e7cd      	b.n	80080c8 <_dtoa_r+0x6d8>
 800812c:	9a08      	ldr	r2, [sp, #32]
 800812e:	2a00      	cmp	r2, #0
 8008130:	f000 80c4 	beq.w	80082bc <_dtoa_r+0x8cc>
 8008134:	9a05      	ldr	r2, [sp, #20]
 8008136:	2a01      	cmp	r2, #1
 8008138:	f300 80a8 	bgt.w	800828c <_dtoa_r+0x89c>
 800813c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800813e:	2a00      	cmp	r2, #0
 8008140:	f000 80a0 	beq.w	8008284 <_dtoa_r+0x894>
 8008144:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008148:	9e06      	ldr	r6, [sp, #24]
 800814a:	4645      	mov	r5, r8
 800814c:	9a04      	ldr	r2, [sp, #16]
 800814e:	2101      	movs	r1, #1
 8008150:	441a      	add	r2, r3
 8008152:	4620      	mov	r0, r4
 8008154:	4498      	add	r8, r3
 8008156:	9204      	str	r2, [sp, #16]
 8008158:	f000 ff18 	bl	8008f8c <__i2b>
 800815c:	4607      	mov	r7, r0
 800815e:	2d00      	cmp	r5, #0
 8008160:	dd0b      	ble.n	800817a <_dtoa_r+0x78a>
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd08      	ble.n	800817a <_dtoa_r+0x78a>
 8008168:	42ab      	cmp	r3, r5
 800816a:	9a04      	ldr	r2, [sp, #16]
 800816c:	bfa8      	it	ge
 800816e:	462b      	movge	r3, r5
 8008170:	eba8 0803 	sub.w	r8, r8, r3
 8008174:	1aed      	subs	r5, r5, r3
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	9b06      	ldr	r3, [sp, #24]
 800817c:	b1fb      	cbz	r3, 80081be <_dtoa_r+0x7ce>
 800817e:	9b08      	ldr	r3, [sp, #32]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 809f 	beq.w	80082c4 <_dtoa_r+0x8d4>
 8008186:	2e00      	cmp	r6, #0
 8008188:	dd11      	ble.n	80081ae <_dtoa_r+0x7be>
 800818a:	4639      	mov	r1, r7
 800818c:	4632      	mov	r2, r6
 800818e:	4620      	mov	r0, r4
 8008190:	f000 ffb8 	bl	8009104 <__pow5mult>
 8008194:	465a      	mov	r2, fp
 8008196:	4601      	mov	r1, r0
 8008198:	4607      	mov	r7, r0
 800819a:	4620      	mov	r0, r4
 800819c:	f000 ff0c 	bl	8008fb8 <__multiply>
 80081a0:	4659      	mov	r1, fp
 80081a2:	9007      	str	r0, [sp, #28]
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fdeb 	bl	8008d80 <_Bfree>
 80081aa:	9b07      	ldr	r3, [sp, #28]
 80081ac:	469b      	mov	fp, r3
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	1b9a      	subs	r2, r3, r6
 80081b2:	d004      	beq.n	80081be <_dtoa_r+0x7ce>
 80081b4:	4659      	mov	r1, fp
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 ffa4 	bl	8009104 <__pow5mult>
 80081bc:	4683      	mov	fp, r0
 80081be:	2101      	movs	r1, #1
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fee3 	bl	8008f8c <__i2b>
 80081c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	dd7c      	ble.n	80082c8 <_dtoa_r+0x8d8>
 80081ce:	461a      	mov	r2, r3
 80081d0:	4601      	mov	r1, r0
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 ff96 	bl	8009104 <__pow5mult>
 80081d8:	9b05      	ldr	r3, [sp, #20]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	4606      	mov	r6, r0
 80081de:	dd76      	ble.n	80082ce <_dtoa_r+0x8de>
 80081e0:	2300      	movs	r3, #0
 80081e2:	9306      	str	r3, [sp, #24]
 80081e4:	6933      	ldr	r3, [r6, #16]
 80081e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081ea:	6918      	ldr	r0, [r3, #16]
 80081ec:	f000 fe7e 	bl	8008eec <__hi0bits>
 80081f0:	f1c0 0020 	rsb	r0, r0, #32
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	4418      	add	r0, r3
 80081f8:	f010 001f 	ands.w	r0, r0, #31
 80081fc:	f000 8086 	beq.w	800830c <_dtoa_r+0x91c>
 8008200:	f1c0 0320 	rsb	r3, r0, #32
 8008204:	2b04      	cmp	r3, #4
 8008206:	dd7f      	ble.n	8008308 <_dtoa_r+0x918>
 8008208:	f1c0 001c 	rsb	r0, r0, #28
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	4403      	add	r3, r0
 8008210:	4480      	add	r8, r0
 8008212:	4405      	add	r5, r0
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dd05      	ble.n	8008228 <_dtoa_r+0x838>
 800821c:	4659      	mov	r1, fp
 800821e:	4642      	mov	r2, r8
 8008220:	4620      	mov	r0, r4
 8008222:	f000 ffc9 	bl	80091b8 <__lshift>
 8008226:	4683      	mov	fp, r0
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dd05      	ble.n	800823a <_dtoa_r+0x84a>
 800822e:	4631      	mov	r1, r6
 8008230:	461a      	mov	r2, r3
 8008232:	4620      	mov	r0, r4
 8008234:	f000 ffc0 	bl	80091b8 <__lshift>
 8008238:	4606      	mov	r6, r0
 800823a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d069      	beq.n	8008314 <_dtoa_r+0x924>
 8008240:	4631      	mov	r1, r6
 8008242:	4658      	mov	r0, fp
 8008244:	f001 f824 	bl	8009290 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	da63      	bge.n	8008314 <_dtoa_r+0x924>
 800824c:	2300      	movs	r3, #0
 800824e:	4659      	mov	r1, fp
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fdb6 	bl	8008dc4 <__multadd>
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800825e:	4683      	mov	fp, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 818f 	beq.w	8008584 <_dtoa_r+0xb94>
 8008266:	4639      	mov	r1, r7
 8008268:	2300      	movs	r3, #0
 800826a:	220a      	movs	r2, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fda9 	bl	8008dc4 <__multadd>
 8008272:	f1b9 0f00 	cmp.w	r9, #0
 8008276:	4607      	mov	r7, r0
 8008278:	f300 808e 	bgt.w	8008398 <_dtoa_r+0x9a8>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	2b02      	cmp	r3, #2
 8008280:	dc50      	bgt.n	8008324 <_dtoa_r+0x934>
 8008282:	e089      	b.n	8008398 <_dtoa_r+0x9a8>
 8008284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800828a:	e75d      	b.n	8008148 <_dtoa_r+0x758>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	1e5e      	subs	r6, r3, #1
 8008290:	9b06      	ldr	r3, [sp, #24]
 8008292:	42b3      	cmp	r3, r6
 8008294:	bfbf      	itttt	lt
 8008296:	9b06      	ldrlt	r3, [sp, #24]
 8008298:	9606      	strlt	r6, [sp, #24]
 800829a:	1af2      	sublt	r2, r6, r3
 800829c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800829e:	bfb6      	itet	lt
 80082a0:	189b      	addlt	r3, r3, r2
 80082a2:	1b9e      	subge	r6, r3, r6
 80082a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	bfb8      	it	lt
 80082aa:	2600      	movlt	r6, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bfb5      	itete	lt
 80082b0:	eba8 0503 	sublt.w	r5, r8, r3
 80082b4:	9b01      	ldrge	r3, [sp, #4]
 80082b6:	2300      	movlt	r3, #0
 80082b8:	4645      	movge	r5, r8
 80082ba:	e747      	b.n	800814c <_dtoa_r+0x75c>
 80082bc:	9e06      	ldr	r6, [sp, #24]
 80082be:	9f08      	ldr	r7, [sp, #32]
 80082c0:	4645      	mov	r5, r8
 80082c2:	e74c      	b.n	800815e <_dtoa_r+0x76e>
 80082c4:	9a06      	ldr	r2, [sp, #24]
 80082c6:	e775      	b.n	80081b4 <_dtoa_r+0x7c4>
 80082c8:	9b05      	ldr	r3, [sp, #20]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	dc18      	bgt.n	8008300 <_dtoa_r+0x910>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	b9b3      	cbnz	r3, 8008300 <_dtoa_r+0x910>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d8:	b9a3      	cbnz	r3, 8008304 <_dtoa_r+0x914>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	0d1b      	lsrs	r3, r3, #20
 80082e2:	051b      	lsls	r3, r3, #20
 80082e4:	b12b      	cbz	r3, 80082f2 <_dtoa_r+0x902>
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	f108 0801 	add.w	r8, r8, #1
 80082f0:	2301      	movs	r3, #1
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f47f af74 	bne.w	80081e4 <_dtoa_r+0x7f4>
 80082fc:	2001      	movs	r0, #1
 80082fe:	e779      	b.n	80081f4 <_dtoa_r+0x804>
 8008300:	2300      	movs	r3, #0
 8008302:	e7f6      	b.n	80082f2 <_dtoa_r+0x902>
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	e7f4      	b.n	80082f2 <_dtoa_r+0x902>
 8008308:	d085      	beq.n	8008216 <_dtoa_r+0x826>
 800830a:	4618      	mov	r0, r3
 800830c:	301c      	adds	r0, #28
 800830e:	e77d      	b.n	800820c <_dtoa_r+0x81c>
 8008310:	40240000 	.word	0x40240000
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	dc38      	bgt.n	800838c <_dtoa_r+0x99c>
 800831a:	9b05      	ldr	r3, [sp, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	dd35      	ble.n	800838c <_dtoa_r+0x99c>
 8008320:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008324:	f1b9 0f00 	cmp.w	r9, #0
 8008328:	d10d      	bne.n	8008346 <_dtoa_r+0x956>
 800832a:	4631      	mov	r1, r6
 800832c:	464b      	mov	r3, r9
 800832e:	2205      	movs	r2, #5
 8008330:	4620      	mov	r0, r4
 8008332:	f000 fd47 	bl	8008dc4 <__multadd>
 8008336:	4601      	mov	r1, r0
 8008338:	4606      	mov	r6, r0
 800833a:	4658      	mov	r0, fp
 800833c:	f000 ffa8 	bl	8009290 <__mcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	f73f adbd 	bgt.w	8007ec0 <_dtoa_r+0x4d0>
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	9d00      	ldr	r5, [sp, #0]
 800834a:	ea6f 0a03 	mvn.w	sl, r3
 800834e:	f04f 0800 	mov.w	r8, #0
 8008352:	4631      	mov	r1, r6
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fd13 	bl	8008d80 <_Bfree>
 800835a:	2f00      	cmp	r7, #0
 800835c:	f43f aeb4 	beq.w	80080c8 <_dtoa_r+0x6d8>
 8008360:	f1b8 0f00 	cmp.w	r8, #0
 8008364:	d005      	beq.n	8008372 <_dtoa_r+0x982>
 8008366:	45b8      	cmp	r8, r7
 8008368:	d003      	beq.n	8008372 <_dtoa_r+0x982>
 800836a:	4641      	mov	r1, r8
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fd07 	bl	8008d80 <_Bfree>
 8008372:	4639      	mov	r1, r7
 8008374:	4620      	mov	r0, r4
 8008376:	f000 fd03 	bl	8008d80 <_Bfree>
 800837a:	e6a5      	b.n	80080c8 <_dtoa_r+0x6d8>
 800837c:	2600      	movs	r6, #0
 800837e:	4637      	mov	r7, r6
 8008380:	e7e1      	b.n	8008346 <_dtoa_r+0x956>
 8008382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008388:	4637      	mov	r7, r6
 800838a:	e599      	b.n	8007ec0 <_dtoa_r+0x4d0>
 800838c:	9b08      	ldr	r3, [sp, #32]
 800838e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 80fd 	beq.w	8008592 <_dtoa_r+0xba2>
 8008398:	2d00      	cmp	r5, #0
 800839a:	dd05      	ble.n	80083a8 <_dtoa_r+0x9b8>
 800839c:	4639      	mov	r1, r7
 800839e:	462a      	mov	r2, r5
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 ff09 	bl	80091b8 <__lshift>
 80083a6:	4607      	mov	r7, r0
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d05c      	beq.n	8008468 <_dtoa_r+0xa78>
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fca5 	bl	8008d00 <_Balloc>
 80083b6:	4605      	mov	r5, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <_dtoa_r+0x9d6>
 80083ba:	4b80      	ldr	r3, [pc, #512]	; (80085bc <_dtoa_r+0xbcc>)
 80083bc:	4602      	mov	r2, r0
 80083be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083c2:	f7ff bb2e 	b.w	8007a22 <_dtoa_r+0x32>
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	3202      	adds	r2, #2
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	f107 010c 	add.w	r1, r7, #12
 80083d0:	300c      	adds	r0, #12
 80083d2:	f000 fc87 	bl	8008ce4 <memcpy>
 80083d6:	2201      	movs	r2, #1
 80083d8:	4629      	mov	r1, r5
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 feec 	bl	80091b8 <__lshift>
 80083e0:	9b00      	ldr	r3, [sp, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	444b      	add	r3, r9
 80083ea:	9307      	str	r3, [sp, #28]
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	46b8      	mov	r8, r7
 80083f4:	9306      	str	r3, [sp, #24]
 80083f6:	4607      	mov	r7, r0
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	4631      	mov	r1, r6
 80083fc:	3b01      	subs	r3, #1
 80083fe:	4658      	mov	r0, fp
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	f7ff fa67 	bl	80078d4 <quorem>
 8008406:	4603      	mov	r3, r0
 8008408:	3330      	adds	r3, #48	; 0x30
 800840a:	9004      	str	r0, [sp, #16]
 800840c:	4641      	mov	r1, r8
 800840e:	4658      	mov	r0, fp
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	f000 ff3d 	bl	8009290 <__mcmp>
 8008416:	463a      	mov	r2, r7
 8008418:	4681      	mov	r9, r0
 800841a:	4631      	mov	r1, r6
 800841c:	4620      	mov	r0, r4
 800841e:	f000 ff53 	bl	80092c8 <__mdiff>
 8008422:	68c2      	ldr	r2, [r0, #12]
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	4605      	mov	r5, r0
 8008428:	bb02      	cbnz	r2, 800846c <_dtoa_r+0xa7c>
 800842a:	4601      	mov	r1, r0
 800842c:	4658      	mov	r0, fp
 800842e:	f000 ff2f 	bl	8009290 <__mcmp>
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	4602      	mov	r2, r0
 8008436:	4629      	mov	r1, r5
 8008438:	4620      	mov	r0, r4
 800843a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800843e:	f000 fc9f 	bl	8008d80 <_Bfree>
 8008442:	9b05      	ldr	r3, [sp, #20]
 8008444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008446:	9d01      	ldr	r5, [sp, #4]
 8008448:	ea43 0102 	orr.w	r1, r3, r2
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	430b      	orrs	r3, r1
 8008450:	9b08      	ldr	r3, [sp, #32]
 8008452:	d10d      	bne.n	8008470 <_dtoa_r+0xa80>
 8008454:	2b39      	cmp	r3, #57	; 0x39
 8008456:	d029      	beq.n	80084ac <_dtoa_r+0xabc>
 8008458:	f1b9 0f00 	cmp.w	r9, #0
 800845c:	dd01      	ble.n	8008462 <_dtoa_r+0xa72>
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	3331      	adds	r3, #49	; 0x31
 8008462:	9a02      	ldr	r2, [sp, #8]
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	e774      	b.n	8008352 <_dtoa_r+0x962>
 8008468:	4638      	mov	r0, r7
 800846a:	e7b9      	b.n	80083e0 <_dtoa_r+0x9f0>
 800846c:	2201      	movs	r2, #1
 800846e:	e7e2      	b.n	8008436 <_dtoa_r+0xa46>
 8008470:	f1b9 0f00 	cmp.w	r9, #0
 8008474:	db06      	blt.n	8008484 <_dtoa_r+0xa94>
 8008476:	9905      	ldr	r1, [sp, #20]
 8008478:	ea41 0909 	orr.w	r9, r1, r9
 800847c:	9906      	ldr	r1, [sp, #24]
 800847e:	ea59 0101 	orrs.w	r1, r9, r1
 8008482:	d120      	bne.n	80084c6 <_dtoa_r+0xad6>
 8008484:	2a00      	cmp	r2, #0
 8008486:	ddec      	ble.n	8008462 <_dtoa_r+0xa72>
 8008488:	4659      	mov	r1, fp
 800848a:	2201      	movs	r2, #1
 800848c:	4620      	mov	r0, r4
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	f000 fe92 	bl	80091b8 <__lshift>
 8008494:	4631      	mov	r1, r6
 8008496:	4683      	mov	fp, r0
 8008498:	f000 fefa 	bl	8009290 <__mcmp>
 800849c:	2800      	cmp	r0, #0
 800849e:	9b01      	ldr	r3, [sp, #4]
 80084a0:	dc02      	bgt.n	80084a8 <_dtoa_r+0xab8>
 80084a2:	d1de      	bne.n	8008462 <_dtoa_r+0xa72>
 80084a4:	07da      	lsls	r2, r3, #31
 80084a6:	d5dc      	bpl.n	8008462 <_dtoa_r+0xa72>
 80084a8:	2b39      	cmp	r3, #57	; 0x39
 80084aa:	d1d8      	bne.n	800845e <_dtoa_r+0xa6e>
 80084ac:	9a02      	ldr	r2, [sp, #8]
 80084ae:	2339      	movs	r3, #57	; 0x39
 80084b0:	7013      	strb	r3, [r2, #0]
 80084b2:	462b      	mov	r3, r5
 80084b4:	461d      	mov	r5, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084bc:	2a39      	cmp	r2, #57	; 0x39
 80084be:	d050      	beq.n	8008562 <_dtoa_r+0xb72>
 80084c0:	3201      	adds	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e745      	b.n	8008352 <_dtoa_r+0x962>
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	dd03      	ble.n	80084d2 <_dtoa_r+0xae2>
 80084ca:	2b39      	cmp	r3, #57	; 0x39
 80084cc:	d0ee      	beq.n	80084ac <_dtoa_r+0xabc>
 80084ce:	3301      	adds	r3, #1
 80084d0:	e7c7      	b.n	8008462 <_dtoa_r+0xa72>
 80084d2:	9a01      	ldr	r2, [sp, #4]
 80084d4:	9907      	ldr	r1, [sp, #28]
 80084d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084da:	428a      	cmp	r2, r1
 80084dc:	d02a      	beq.n	8008534 <_dtoa_r+0xb44>
 80084de:	4659      	mov	r1, fp
 80084e0:	2300      	movs	r3, #0
 80084e2:	220a      	movs	r2, #10
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fc6d 	bl	8008dc4 <__multadd>
 80084ea:	45b8      	cmp	r8, r7
 80084ec:	4683      	mov	fp, r0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	f04f 020a 	mov.w	r2, #10
 80084f6:	4641      	mov	r1, r8
 80084f8:	4620      	mov	r0, r4
 80084fa:	d107      	bne.n	800850c <_dtoa_r+0xb1c>
 80084fc:	f000 fc62 	bl	8008dc4 <__multadd>
 8008500:	4680      	mov	r8, r0
 8008502:	4607      	mov	r7, r0
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	3301      	adds	r3, #1
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	e775      	b.n	80083f8 <_dtoa_r+0xa08>
 800850c:	f000 fc5a 	bl	8008dc4 <__multadd>
 8008510:	4639      	mov	r1, r7
 8008512:	4680      	mov	r8, r0
 8008514:	2300      	movs	r3, #0
 8008516:	220a      	movs	r2, #10
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fc53 	bl	8008dc4 <__multadd>
 800851e:	4607      	mov	r7, r0
 8008520:	e7f0      	b.n	8008504 <_dtoa_r+0xb14>
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	9a00      	ldr	r2, [sp, #0]
 8008528:	bfcc      	ite	gt
 800852a:	464d      	movgt	r5, r9
 800852c:	2501      	movle	r5, #1
 800852e:	4415      	add	r5, r2
 8008530:	f04f 0800 	mov.w	r8, #0
 8008534:	4659      	mov	r1, fp
 8008536:	2201      	movs	r2, #1
 8008538:	4620      	mov	r0, r4
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	f000 fe3c 	bl	80091b8 <__lshift>
 8008540:	4631      	mov	r1, r6
 8008542:	4683      	mov	fp, r0
 8008544:	f000 fea4 	bl	8009290 <__mcmp>
 8008548:	2800      	cmp	r0, #0
 800854a:	dcb2      	bgt.n	80084b2 <_dtoa_r+0xac2>
 800854c:	d102      	bne.n	8008554 <_dtoa_r+0xb64>
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	07db      	lsls	r3, r3, #31
 8008552:	d4ae      	bmi.n	80084b2 <_dtoa_r+0xac2>
 8008554:	462b      	mov	r3, r5
 8008556:	461d      	mov	r5, r3
 8008558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800855c:	2a30      	cmp	r2, #48	; 0x30
 800855e:	d0fa      	beq.n	8008556 <_dtoa_r+0xb66>
 8008560:	e6f7      	b.n	8008352 <_dtoa_r+0x962>
 8008562:	9a00      	ldr	r2, [sp, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d1a5      	bne.n	80084b4 <_dtoa_r+0xac4>
 8008568:	f10a 0a01 	add.w	sl, sl, #1
 800856c:	2331      	movs	r3, #49	; 0x31
 800856e:	e779      	b.n	8008464 <_dtoa_r+0xa74>
 8008570:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <_dtoa_r+0xbd0>)
 8008572:	f7ff baaf 	b.w	8007ad4 <_dtoa_r+0xe4>
 8008576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008578:	2b00      	cmp	r3, #0
 800857a:	f47f aa86 	bne.w	8007a8a <_dtoa_r+0x9a>
 800857e:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <_dtoa_r+0xbd4>)
 8008580:	f7ff baa8 	b.w	8007ad4 <_dtoa_r+0xe4>
 8008584:	f1b9 0f00 	cmp.w	r9, #0
 8008588:	dc03      	bgt.n	8008592 <_dtoa_r+0xba2>
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	2b02      	cmp	r3, #2
 800858e:	f73f aec9 	bgt.w	8008324 <_dtoa_r+0x934>
 8008592:	9d00      	ldr	r5, [sp, #0]
 8008594:	4631      	mov	r1, r6
 8008596:	4658      	mov	r0, fp
 8008598:	f7ff f99c 	bl	80078d4 <quorem>
 800859c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085a0:	f805 3b01 	strb.w	r3, [r5], #1
 80085a4:	9a00      	ldr	r2, [sp, #0]
 80085a6:	1aaa      	subs	r2, r5, r2
 80085a8:	4591      	cmp	r9, r2
 80085aa:	ddba      	ble.n	8008522 <_dtoa_r+0xb32>
 80085ac:	4659      	mov	r1, fp
 80085ae:	2300      	movs	r3, #0
 80085b0:	220a      	movs	r2, #10
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fc06 	bl	8008dc4 <__multadd>
 80085b8:	4683      	mov	fp, r0
 80085ba:	e7eb      	b.n	8008594 <_dtoa_r+0xba4>
 80085bc:	0800aecc 	.word	0x0800aecc
 80085c0:	0800acc8 	.word	0x0800acc8
 80085c4:	0800ae49 	.word	0x0800ae49

080085c8 <rshift>:
 80085c8:	6903      	ldr	r3, [r0, #16]
 80085ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085d6:	f100 0414 	add.w	r4, r0, #20
 80085da:	dd45      	ble.n	8008668 <rshift+0xa0>
 80085dc:	f011 011f 	ands.w	r1, r1, #31
 80085e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085e8:	d10c      	bne.n	8008604 <rshift+0x3c>
 80085ea:	f100 0710 	add.w	r7, r0, #16
 80085ee:	4629      	mov	r1, r5
 80085f0:	42b1      	cmp	r1, r6
 80085f2:	d334      	bcc.n	800865e <rshift+0x96>
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	1eea      	subs	r2, r5, #3
 80085fa:	4296      	cmp	r6, r2
 80085fc:	bf38      	it	cc
 80085fe:	2300      	movcc	r3, #0
 8008600:	4423      	add	r3, r4
 8008602:	e015      	b.n	8008630 <rshift+0x68>
 8008604:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008608:	f1c1 0820 	rsb	r8, r1, #32
 800860c:	40cf      	lsrs	r7, r1
 800860e:	f105 0e04 	add.w	lr, r5, #4
 8008612:	46a1      	mov	r9, r4
 8008614:	4576      	cmp	r6, lr
 8008616:	46f4      	mov	ip, lr
 8008618:	d815      	bhi.n	8008646 <rshift+0x7e>
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	009a      	lsls	r2, r3, #2
 800861e:	3a04      	subs	r2, #4
 8008620:	3501      	adds	r5, #1
 8008622:	42ae      	cmp	r6, r5
 8008624:	bf38      	it	cc
 8008626:	2200      	movcc	r2, #0
 8008628:	18a3      	adds	r3, r4, r2
 800862a:	50a7      	str	r7, [r4, r2]
 800862c:	b107      	cbz	r7, 8008630 <rshift+0x68>
 800862e:	3304      	adds	r3, #4
 8008630:	1b1a      	subs	r2, r3, r4
 8008632:	42a3      	cmp	r3, r4
 8008634:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008638:	bf08      	it	eq
 800863a:	2300      	moveq	r3, #0
 800863c:	6102      	str	r2, [r0, #16]
 800863e:	bf08      	it	eq
 8008640:	6143      	streq	r3, [r0, #20]
 8008642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008646:	f8dc c000 	ldr.w	ip, [ip]
 800864a:	fa0c fc08 	lsl.w	ip, ip, r8
 800864e:	ea4c 0707 	orr.w	r7, ip, r7
 8008652:	f849 7b04 	str.w	r7, [r9], #4
 8008656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800865a:	40cf      	lsrs	r7, r1
 800865c:	e7da      	b.n	8008614 <rshift+0x4c>
 800865e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008662:	f847 cf04 	str.w	ip, [r7, #4]!
 8008666:	e7c3      	b.n	80085f0 <rshift+0x28>
 8008668:	4623      	mov	r3, r4
 800866a:	e7e1      	b.n	8008630 <rshift+0x68>

0800866c <__hexdig_fun>:
 800866c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008670:	2b09      	cmp	r3, #9
 8008672:	d802      	bhi.n	800867a <__hexdig_fun+0xe>
 8008674:	3820      	subs	r0, #32
 8008676:	b2c0      	uxtb	r0, r0
 8008678:	4770      	bx	lr
 800867a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800867e:	2b05      	cmp	r3, #5
 8008680:	d801      	bhi.n	8008686 <__hexdig_fun+0x1a>
 8008682:	3847      	subs	r0, #71	; 0x47
 8008684:	e7f7      	b.n	8008676 <__hexdig_fun+0xa>
 8008686:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800868a:	2b05      	cmp	r3, #5
 800868c:	d801      	bhi.n	8008692 <__hexdig_fun+0x26>
 800868e:	3827      	subs	r0, #39	; 0x27
 8008690:	e7f1      	b.n	8008676 <__hexdig_fun+0xa>
 8008692:	2000      	movs	r0, #0
 8008694:	4770      	bx	lr
	...

08008698 <__gethex>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	ed2d 8b02 	vpush	{d8}
 80086a0:	b089      	sub	sp, #36	; 0x24
 80086a2:	ee08 0a10 	vmov	s16, r0
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	4bbc      	ldr	r3, [pc, #752]	; (800899c <__gethex+0x304>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	4618      	mov	r0, r3
 80086b0:	468b      	mov	fp, r1
 80086b2:	4690      	mov	r8, r2
 80086b4:	f7f7 fd96 	bl	80001e4 <strlen>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	f8db 2000 	ldr.w	r2, [fp]
 80086be:	4403      	add	r3, r0
 80086c0:	4682      	mov	sl, r0
 80086c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	1c93      	adds	r3, r2, #2
 80086ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80086ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80086d2:	32fe      	adds	r2, #254	; 0xfe
 80086d4:	18d1      	adds	r1, r2, r3
 80086d6:	461f      	mov	r7, r3
 80086d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086dc:	9100      	str	r1, [sp, #0]
 80086de:	2830      	cmp	r0, #48	; 0x30
 80086e0:	d0f8      	beq.n	80086d4 <__gethex+0x3c>
 80086e2:	f7ff ffc3 	bl	800866c <__hexdig_fun>
 80086e6:	4604      	mov	r4, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d13a      	bne.n	8008762 <__gethex+0xca>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	4652      	mov	r2, sl
 80086f0:	4638      	mov	r0, r7
 80086f2:	f001 f9ed 	bl	8009ad0 <strncmp>
 80086f6:	4605      	mov	r5, r0
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d168      	bne.n	80087ce <__gethex+0x136>
 80086fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008700:	eb07 060a 	add.w	r6, r7, sl
 8008704:	f7ff ffb2 	bl	800866c <__hexdig_fun>
 8008708:	2800      	cmp	r0, #0
 800870a:	d062      	beq.n	80087d2 <__gethex+0x13a>
 800870c:	4633      	mov	r3, r6
 800870e:	7818      	ldrb	r0, [r3, #0]
 8008710:	2830      	cmp	r0, #48	; 0x30
 8008712:	461f      	mov	r7, r3
 8008714:	f103 0301 	add.w	r3, r3, #1
 8008718:	d0f9      	beq.n	800870e <__gethex+0x76>
 800871a:	f7ff ffa7 	bl	800866c <__hexdig_fun>
 800871e:	2301      	movs	r3, #1
 8008720:	fab0 f480 	clz	r4, r0
 8008724:	0964      	lsrs	r4, r4, #5
 8008726:	4635      	mov	r5, r6
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	463a      	mov	r2, r7
 800872c:	4616      	mov	r6, r2
 800872e:	3201      	adds	r2, #1
 8008730:	7830      	ldrb	r0, [r6, #0]
 8008732:	f7ff ff9b 	bl	800866c <__hexdig_fun>
 8008736:	2800      	cmp	r0, #0
 8008738:	d1f8      	bne.n	800872c <__gethex+0x94>
 800873a:	9901      	ldr	r1, [sp, #4]
 800873c:	4652      	mov	r2, sl
 800873e:	4630      	mov	r0, r6
 8008740:	f001 f9c6 	bl	8009ad0 <strncmp>
 8008744:	b980      	cbnz	r0, 8008768 <__gethex+0xd0>
 8008746:	b94d      	cbnz	r5, 800875c <__gethex+0xc4>
 8008748:	eb06 050a 	add.w	r5, r6, sl
 800874c:	462a      	mov	r2, r5
 800874e:	4616      	mov	r6, r2
 8008750:	3201      	adds	r2, #1
 8008752:	7830      	ldrb	r0, [r6, #0]
 8008754:	f7ff ff8a 	bl	800866c <__hexdig_fun>
 8008758:	2800      	cmp	r0, #0
 800875a:	d1f8      	bne.n	800874e <__gethex+0xb6>
 800875c:	1bad      	subs	r5, r5, r6
 800875e:	00ad      	lsls	r5, r5, #2
 8008760:	e004      	b.n	800876c <__gethex+0xd4>
 8008762:	2400      	movs	r4, #0
 8008764:	4625      	mov	r5, r4
 8008766:	e7e0      	b.n	800872a <__gethex+0x92>
 8008768:	2d00      	cmp	r5, #0
 800876a:	d1f7      	bne.n	800875c <__gethex+0xc4>
 800876c:	7833      	ldrb	r3, [r6, #0]
 800876e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008772:	2b50      	cmp	r3, #80	; 0x50
 8008774:	d13b      	bne.n	80087ee <__gethex+0x156>
 8008776:	7873      	ldrb	r3, [r6, #1]
 8008778:	2b2b      	cmp	r3, #43	; 0x2b
 800877a:	d02c      	beq.n	80087d6 <__gethex+0x13e>
 800877c:	2b2d      	cmp	r3, #45	; 0x2d
 800877e:	d02e      	beq.n	80087de <__gethex+0x146>
 8008780:	1c71      	adds	r1, r6, #1
 8008782:	f04f 0900 	mov.w	r9, #0
 8008786:	7808      	ldrb	r0, [r1, #0]
 8008788:	f7ff ff70 	bl	800866c <__hexdig_fun>
 800878c:	1e43      	subs	r3, r0, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b18      	cmp	r3, #24
 8008792:	d82c      	bhi.n	80087ee <__gethex+0x156>
 8008794:	f1a0 0210 	sub.w	r2, r0, #16
 8008798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879c:	f7ff ff66 	bl	800866c <__hexdig_fun>
 80087a0:	1e43      	subs	r3, r0, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b18      	cmp	r3, #24
 80087a6:	d91d      	bls.n	80087e4 <__gethex+0x14c>
 80087a8:	f1b9 0f00 	cmp.w	r9, #0
 80087ac:	d000      	beq.n	80087b0 <__gethex+0x118>
 80087ae:	4252      	negs	r2, r2
 80087b0:	4415      	add	r5, r2
 80087b2:	f8cb 1000 	str.w	r1, [fp]
 80087b6:	b1e4      	cbz	r4, 80087f2 <__gethex+0x15a>
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bf14      	ite	ne
 80087be:	2700      	movne	r7, #0
 80087c0:	2706      	moveq	r7, #6
 80087c2:	4638      	mov	r0, r7
 80087c4:	b009      	add	sp, #36	; 0x24
 80087c6:	ecbd 8b02 	vpop	{d8}
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	463e      	mov	r6, r7
 80087d0:	4625      	mov	r5, r4
 80087d2:	2401      	movs	r4, #1
 80087d4:	e7ca      	b.n	800876c <__gethex+0xd4>
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	1cb1      	adds	r1, r6, #2
 80087dc:	e7d3      	b.n	8008786 <__gethex+0xee>
 80087de:	f04f 0901 	mov.w	r9, #1
 80087e2:	e7fa      	b.n	80087da <__gethex+0x142>
 80087e4:	230a      	movs	r3, #10
 80087e6:	fb03 0202 	mla	r2, r3, r2, r0
 80087ea:	3a10      	subs	r2, #16
 80087ec:	e7d4      	b.n	8008798 <__gethex+0x100>
 80087ee:	4631      	mov	r1, r6
 80087f0:	e7df      	b.n	80087b2 <__gethex+0x11a>
 80087f2:	1bf3      	subs	r3, r6, r7
 80087f4:	3b01      	subs	r3, #1
 80087f6:	4621      	mov	r1, r4
 80087f8:	2b07      	cmp	r3, #7
 80087fa:	dc0b      	bgt.n	8008814 <__gethex+0x17c>
 80087fc:	ee18 0a10 	vmov	r0, s16
 8008800:	f000 fa7e 	bl	8008d00 <_Balloc>
 8008804:	4604      	mov	r4, r0
 8008806:	b940      	cbnz	r0, 800881a <__gethex+0x182>
 8008808:	4b65      	ldr	r3, [pc, #404]	; (80089a0 <__gethex+0x308>)
 800880a:	4602      	mov	r2, r0
 800880c:	21de      	movs	r1, #222	; 0xde
 800880e:	4865      	ldr	r0, [pc, #404]	; (80089a4 <__gethex+0x30c>)
 8008810:	f001 f97e 	bl	8009b10 <__assert_func>
 8008814:	3101      	adds	r1, #1
 8008816:	105b      	asrs	r3, r3, #1
 8008818:	e7ee      	b.n	80087f8 <__gethex+0x160>
 800881a:	f100 0914 	add.w	r9, r0, #20
 800881e:	f04f 0b00 	mov.w	fp, #0
 8008822:	f1ca 0301 	rsb	r3, sl, #1
 8008826:	f8cd 9008 	str.w	r9, [sp, #8]
 800882a:	f8cd b000 	str.w	fp, [sp]
 800882e:	9306      	str	r3, [sp, #24]
 8008830:	42b7      	cmp	r7, r6
 8008832:	d340      	bcc.n	80088b6 <__gethex+0x21e>
 8008834:	9802      	ldr	r0, [sp, #8]
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	f840 3b04 	str.w	r3, [r0], #4
 800883c:	eba0 0009 	sub.w	r0, r0, r9
 8008840:	1080      	asrs	r0, r0, #2
 8008842:	0146      	lsls	r6, r0, #5
 8008844:	6120      	str	r0, [r4, #16]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fb50 	bl	8008eec <__hi0bits>
 800884c:	1a30      	subs	r0, r6, r0
 800884e:	f8d8 6000 	ldr.w	r6, [r8]
 8008852:	42b0      	cmp	r0, r6
 8008854:	dd63      	ble.n	800891e <__gethex+0x286>
 8008856:	1b87      	subs	r7, r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	4620      	mov	r0, r4
 800885c:	f000 feea 	bl	8009634 <__any_on>
 8008860:	4682      	mov	sl, r0
 8008862:	b1a8      	cbz	r0, 8008890 <__gethex+0x1f8>
 8008864:	1e7b      	subs	r3, r7, #1
 8008866:	1159      	asrs	r1, r3, #5
 8008868:	f003 021f 	and.w	r2, r3, #31
 800886c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008870:	f04f 0a01 	mov.w	sl, #1
 8008874:	fa0a f202 	lsl.w	r2, sl, r2
 8008878:	420a      	tst	r2, r1
 800887a:	d009      	beq.n	8008890 <__gethex+0x1f8>
 800887c:	4553      	cmp	r3, sl
 800887e:	dd05      	ble.n	800888c <__gethex+0x1f4>
 8008880:	1eb9      	subs	r1, r7, #2
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fed6 	bl	8009634 <__any_on>
 8008888:	2800      	cmp	r0, #0
 800888a:	d145      	bne.n	8008918 <__gethex+0x280>
 800888c:	f04f 0a02 	mov.w	sl, #2
 8008890:	4639      	mov	r1, r7
 8008892:	4620      	mov	r0, r4
 8008894:	f7ff fe98 	bl	80085c8 <rshift>
 8008898:	443d      	add	r5, r7
 800889a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800889e:	42ab      	cmp	r3, r5
 80088a0:	da4c      	bge.n	800893c <__gethex+0x2a4>
 80088a2:	ee18 0a10 	vmov	r0, s16
 80088a6:	4621      	mov	r1, r4
 80088a8:	f000 fa6a 	bl	8008d80 <_Bfree>
 80088ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088ae:	2300      	movs	r3, #0
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	27a3      	movs	r7, #163	; 0xa3
 80088b4:	e785      	b.n	80087c2 <__gethex+0x12a>
 80088b6:	1e73      	subs	r3, r6, #1
 80088b8:	9a05      	ldr	r2, [sp, #20]
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d019      	beq.n	80088f8 <__gethex+0x260>
 80088c4:	f1bb 0f20 	cmp.w	fp, #32
 80088c8:	d107      	bne.n	80088da <__gethex+0x242>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	9a00      	ldr	r2, [sp, #0]
 80088ce:	f843 2b04 	str.w	r2, [r3], #4
 80088d2:	9302      	str	r3, [sp, #8]
 80088d4:	2300      	movs	r3, #0
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	469b      	mov	fp, r3
 80088da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80088de:	f7ff fec5 	bl	800866c <__hexdig_fun>
 80088e2:	9b00      	ldr	r3, [sp, #0]
 80088e4:	f000 000f 	and.w	r0, r0, #15
 80088e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80088ec:	4303      	orrs	r3, r0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	f10b 0b04 	add.w	fp, fp, #4
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	e00d      	b.n	8008914 <__gethex+0x27c>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	9a06      	ldr	r2, [sp, #24]
 80088fc:	4413      	add	r3, r2
 80088fe:	42bb      	cmp	r3, r7
 8008900:	d3e0      	bcc.n	80088c4 <__gethex+0x22c>
 8008902:	4618      	mov	r0, r3
 8008904:	9901      	ldr	r1, [sp, #4]
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	4652      	mov	r2, sl
 800890a:	f001 f8e1 	bl	8009ad0 <strncmp>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	2800      	cmp	r0, #0
 8008912:	d1d7      	bne.n	80088c4 <__gethex+0x22c>
 8008914:	461e      	mov	r6, r3
 8008916:	e78b      	b.n	8008830 <__gethex+0x198>
 8008918:	f04f 0a03 	mov.w	sl, #3
 800891c:	e7b8      	b.n	8008890 <__gethex+0x1f8>
 800891e:	da0a      	bge.n	8008936 <__gethex+0x29e>
 8008920:	1a37      	subs	r7, r6, r0
 8008922:	4621      	mov	r1, r4
 8008924:	ee18 0a10 	vmov	r0, s16
 8008928:	463a      	mov	r2, r7
 800892a:	f000 fc45 	bl	80091b8 <__lshift>
 800892e:	1bed      	subs	r5, r5, r7
 8008930:	4604      	mov	r4, r0
 8008932:	f100 0914 	add.w	r9, r0, #20
 8008936:	f04f 0a00 	mov.w	sl, #0
 800893a:	e7ae      	b.n	800889a <__gethex+0x202>
 800893c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008940:	42a8      	cmp	r0, r5
 8008942:	dd72      	ble.n	8008a2a <__gethex+0x392>
 8008944:	1b45      	subs	r5, r0, r5
 8008946:	42ae      	cmp	r6, r5
 8008948:	dc36      	bgt.n	80089b8 <__gethex+0x320>
 800894a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d02a      	beq.n	80089a8 <__gethex+0x310>
 8008952:	2b03      	cmp	r3, #3
 8008954:	d02c      	beq.n	80089b0 <__gethex+0x318>
 8008956:	2b01      	cmp	r3, #1
 8008958:	d115      	bne.n	8008986 <__gethex+0x2ee>
 800895a:	42ae      	cmp	r6, r5
 800895c:	d113      	bne.n	8008986 <__gethex+0x2ee>
 800895e:	2e01      	cmp	r6, #1
 8008960:	d10b      	bne.n	800897a <__gethex+0x2e2>
 8008962:	9a04      	ldr	r2, [sp, #16]
 8008964:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	2301      	movs	r3, #1
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	f8c9 3000 	str.w	r3, [r9]
 8008972:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008974:	2762      	movs	r7, #98	; 0x62
 8008976:	601c      	str	r4, [r3, #0]
 8008978:	e723      	b.n	80087c2 <__gethex+0x12a>
 800897a:	1e71      	subs	r1, r6, #1
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fe59 	bl	8009634 <__any_on>
 8008982:	2800      	cmp	r0, #0
 8008984:	d1ed      	bne.n	8008962 <__gethex+0x2ca>
 8008986:	ee18 0a10 	vmov	r0, s16
 800898a:	4621      	mov	r1, r4
 800898c:	f000 f9f8 	bl	8008d80 <_Bfree>
 8008990:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008992:	2300      	movs	r3, #0
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	2750      	movs	r7, #80	; 0x50
 8008998:	e713      	b.n	80087c2 <__gethex+0x12a>
 800899a:	bf00      	nop
 800899c:	0800af48 	.word	0x0800af48
 80089a0:	0800aecc 	.word	0x0800aecc
 80089a4:	0800aedd 	.word	0x0800aedd
 80089a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1eb      	bne.n	8008986 <__gethex+0x2ee>
 80089ae:	e7d8      	b.n	8008962 <__gethex+0x2ca>
 80089b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1d5      	bne.n	8008962 <__gethex+0x2ca>
 80089b6:	e7e6      	b.n	8008986 <__gethex+0x2ee>
 80089b8:	1e6f      	subs	r7, r5, #1
 80089ba:	f1ba 0f00 	cmp.w	sl, #0
 80089be:	d131      	bne.n	8008a24 <__gethex+0x38c>
 80089c0:	b127      	cbz	r7, 80089cc <__gethex+0x334>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fe35 	bl	8009634 <__any_on>
 80089ca:	4682      	mov	sl, r0
 80089cc:	117b      	asrs	r3, r7, #5
 80089ce:	2101      	movs	r1, #1
 80089d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80089d4:	f007 071f 	and.w	r7, r7, #31
 80089d8:	fa01 f707 	lsl.w	r7, r1, r7
 80089dc:	421f      	tst	r7, r3
 80089de:	4629      	mov	r1, r5
 80089e0:	4620      	mov	r0, r4
 80089e2:	bf18      	it	ne
 80089e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80089e8:	1b76      	subs	r6, r6, r5
 80089ea:	f7ff fded 	bl	80085c8 <rshift>
 80089ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80089f2:	2702      	movs	r7, #2
 80089f4:	f1ba 0f00 	cmp.w	sl, #0
 80089f8:	d048      	beq.n	8008a8c <__gethex+0x3f4>
 80089fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d015      	beq.n	8008a2e <__gethex+0x396>
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d017      	beq.n	8008a36 <__gethex+0x39e>
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d109      	bne.n	8008a1e <__gethex+0x386>
 8008a0a:	f01a 0f02 	tst.w	sl, #2
 8008a0e:	d006      	beq.n	8008a1e <__gethex+0x386>
 8008a10:	f8d9 0000 	ldr.w	r0, [r9]
 8008a14:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a18:	f01a 0f01 	tst.w	sl, #1
 8008a1c:	d10e      	bne.n	8008a3c <__gethex+0x3a4>
 8008a1e:	f047 0710 	orr.w	r7, r7, #16
 8008a22:	e033      	b.n	8008a8c <__gethex+0x3f4>
 8008a24:	f04f 0a01 	mov.w	sl, #1
 8008a28:	e7d0      	b.n	80089cc <__gethex+0x334>
 8008a2a:	2701      	movs	r7, #1
 8008a2c:	e7e2      	b.n	80089f4 <__gethex+0x35c>
 8008a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a30:	f1c3 0301 	rsb	r3, r3, #1
 8008a34:	9315      	str	r3, [sp, #84]	; 0x54
 8008a36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0f0      	beq.n	8008a1e <__gethex+0x386>
 8008a3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a4c:	f04f 0c00 	mov.w	ip, #0
 8008a50:	4618      	mov	r0, r3
 8008a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a5a:	d01c      	beq.n	8008a96 <__gethex+0x3fe>
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	6002      	str	r2, [r0, #0]
 8008a60:	2f02      	cmp	r7, #2
 8008a62:	f104 0314 	add.w	r3, r4, #20
 8008a66:	d13f      	bne.n	8008ae8 <__gethex+0x450>
 8008a68:	f8d8 2000 	ldr.w	r2, [r8]
 8008a6c:	3a01      	subs	r2, #1
 8008a6e:	42b2      	cmp	r2, r6
 8008a70:	d10a      	bne.n	8008a88 <__gethex+0x3f0>
 8008a72:	1171      	asrs	r1, r6, #5
 8008a74:	2201      	movs	r2, #1
 8008a76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a7a:	f006 061f 	and.w	r6, r6, #31
 8008a7e:	fa02 f606 	lsl.w	r6, r2, r6
 8008a82:	421e      	tst	r6, r3
 8008a84:	bf18      	it	ne
 8008a86:	4617      	movne	r7, r2
 8008a88:	f047 0720 	orr.w	r7, r7, #32
 8008a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a8e:	601c      	str	r4, [r3, #0]
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	601d      	str	r5, [r3, #0]
 8008a94:	e695      	b.n	80087c2 <__gethex+0x12a>
 8008a96:	4299      	cmp	r1, r3
 8008a98:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a9c:	d8d8      	bhi.n	8008a50 <__gethex+0x3b8>
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	459b      	cmp	fp, r3
 8008aa2:	db19      	blt.n	8008ad8 <__gethex+0x440>
 8008aa4:	6861      	ldr	r1, [r4, #4]
 8008aa6:	ee18 0a10 	vmov	r0, s16
 8008aaa:	3101      	adds	r1, #1
 8008aac:	f000 f928 	bl	8008d00 <_Balloc>
 8008ab0:	4681      	mov	r9, r0
 8008ab2:	b918      	cbnz	r0, 8008abc <__gethex+0x424>
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <__gethex+0x488>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	2184      	movs	r1, #132	; 0x84
 8008aba:	e6a8      	b.n	800880e <__gethex+0x176>
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	3202      	adds	r2, #2
 8008ac0:	f104 010c 	add.w	r1, r4, #12
 8008ac4:	0092      	lsls	r2, r2, #2
 8008ac6:	300c      	adds	r0, #12
 8008ac8:	f000 f90c 	bl	8008ce4 <memcpy>
 8008acc:	4621      	mov	r1, r4
 8008ace:	ee18 0a10 	vmov	r0, s16
 8008ad2:	f000 f955 	bl	8008d80 <_Bfree>
 8008ad6:	464c      	mov	r4, r9
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ae0:	6122      	str	r2, [r4, #16]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]
 8008ae6:	e7bb      	b.n	8008a60 <__gethex+0x3c8>
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	455a      	cmp	r2, fp
 8008aec:	dd0b      	ble.n	8008b06 <__gethex+0x46e>
 8008aee:	2101      	movs	r1, #1
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7ff fd69 	bl	80085c8 <rshift>
 8008af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008afa:	3501      	adds	r5, #1
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	f6ff aed0 	blt.w	80088a2 <__gethex+0x20a>
 8008b02:	2701      	movs	r7, #1
 8008b04:	e7c0      	b.n	8008a88 <__gethex+0x3f0>
 8008b06:	f016 061f 	ands.w	r6, r6, #31
 8008b0a:	d0fa      	beq.n	8008b02 <__gethex+0x46a>
 8008b0c:	449a      	add	sl, r3
 8008b0e:	f1c6 0620 	rsb	r6, r6, #32
 8008b12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008b16:	f000 f9e9 	bl	8008eec <__hi0bits>
 8008b1a:	42b0      	cmp	r0, r6
 8008b1c:	dbe7      	blt.n	8008aee <__gethex+0x456>
 8008b1e:	e7f0      	b.n	8008b02 <__gethex+0x46a>
 8008b20:	0800aecc 	.word	0x0800aecc

08008b24 <L_shift>:
 8008b24:	f1c2 0208 	rsb	r2, r2, #8
 8008b28:	0092      	lsls	r2, r2, #2
 8008b2a:	b570      	push	{r4, r5, r6, lr}
 8008b2c:	f1c2 0620 	rsb	r6, r2, #32
 8008b30:	6843      	ldr	r3, [r0, #4]
 8008b32:	6804      	ldr	r4, [r0, #0]
 8008b34:	fa03 f506 	lsl.w	r5, r3, r6
 8008b38:	432c      	orrs	r4, r5
 8008b3a:	40d3      	lsrs	r3, r2
 8008b3c:	6004      	str	r4, [r0, #0]
 8008b3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b42:	4288      	cmp	r0, r1
 8008b44:	d3f4      	bcc.n	8008b30 <L_shift+0xc>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}

08008b48 <__match>:
 8008b48:	b530      	push	{r4, r5, lr}
 8008b4a:	6803      	ldr	r3, [r0, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	b914      	cbnz	r4, 8008b5a <__match+0x12>
 8008b54:	6003      	str	r3, [r0, #0]
 8008b56:	2001      	movs	r0, #1
 8008b58:	bd30      	pop	{r4, r5, pc}
 8008b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b62:	2d19      	cmp	r5, #25
 8008b64:	bf98      	it	ls
 8008b66:	3220      	addls	r2, #32
 8008b68:	42a2      	cmp	r2, r4
 8008b6a:	d0f0      	beq.n	8008b4e <__match+0x6>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7f3      	b.n	8008b58 <__match+0x10>

08008b70 <__hexnan>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	680b      	ldr	r3, [r1, #0]
 8008b76:	6801      	ldr	r1, [r0, #0]
 8008b78:	115e      	asrs	r6, r3, #5
 8008b7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b7e:	f013 031f 	ands.w	r3, r3, #31
 8008b82:	b087      	sub	sp, #28
 8008b84:	bf18      	it	ne
 8008b86:	3604      	addne	r6, #4
 8008b88:	2500      	movs	r5, #0
 8008b8a:	1f37      	subs	r7, r6, #4
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	4690      	mov	r8, r2
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b96:	46b9      	mov	r9, r7
 8008b98:	463c      	mov	r4, r7
 8008b9a:	9502      	str	r5, [sp, #8]
 8008b9c:	46ab      	mov	fp, r5
 8008b9e:	784a      	ldrb	r2, [r1, #1]
 8008ba0:	1c4b      	adds	r3, r1, #1
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	b342      	cbz	r2, 8008bf8 <__hexnan+0x88>
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	9105      	str	r1, [sp, #20]
 8008baa:	9204      	str	r2, [sp, #16]
 8008bac:	f7ff fd5e 	bl	800866c <__hexdig_fun>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d14f      	bne.n	8008c54 <__hexnan+0xe4>
 8008bb4:	9a04      	ldr	r2, [sp, #16]
 8008bb6:	9905      	ldr	r1, [sp, #20]
 8008bb8:	2a20      	cmp	r2, #32
 8008bba:	d818      	bhi.n	8008bee <__hexnan+0x7e>
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	459b      	cmp	fp, r3
 8008bc0:	dd13      	ble.n	8008bea <__hexnan+0x7a>
 8008bc2:	454c      	cmp	r4, r9
 8008bc4:	d206      	bcs.n	8008bd4 <__hexnan+0x64>
 8008bc6:	2d07      	cmp	r5, #7
 8008bc8:	dc04      	bgt.n	8008bd4 <__hexnan+0x64>
 8008bca:	462a      	mov	r2, r5
 8008bcc:	4649      	mov	r1, r9
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f7ff ffa8 	bl	8008b24 <L_shift>
 8008bd4:	4544      	cmp	r4, r8
 8008bd6:	d950      	bls.n	8008c7a <__hexnan+0x10a>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f1a4 0904 	sub.w	r9, r4, #4
 8008bde:	f844 3c04 	str.w	r3, [r4, #-4]
 8008be2:	f8cd b008 	str.w	fp, [sp, #8]
 8008be6:	464c      	mov	r4, r9
 8008be8:	461d      	mov	r5, r3
 8008bea:	9903      	ldr	r1, [sp, #12]
 8008bec:	e7d7      	b.n	8008b9e <__hexnan+0x2e>
 8008bee:	2a29      	cmp	r2, #41	; 0x29
 8008bf0:	d156      	bne.n	8008ca0 <__hexnan+0x130>
 8008bf2:	3102      	adds	r1, #2
 8008bf4:	f8ca 1000 	str.w	r1, [sl]
 8008bf8:	f1bb 0f00 	cmp.w	fp, #0
 8008bfc:	d050      	beq.n	8008ca0 <__hexnan+0x130>
 8008bfe:	454c      	cmp	r4, r9
 8008c00:	d206      	bcs.n	8008c10 <__hexnan+0xa0>
 8008c02:	2d07      	cmp	r5, #7
 8008c04:	dc04      	bgt.n	8008c10 <__hexnan+0xa0>
 8008c06:	462a      	mov	r2, r5
 8008c08:	4649      	mov	r1, r9
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff ff8a 	bl	8008b24 <L_shift>
 8008c10:	4544      	cmp	r4, r8
 8008c12:	d934      	bls.n	8008c7e <__hexnan+0x10e>
 8008c14:	f1a8 0204 	sub.w	r2, r8, #4
 8008c18:	4623      	mov	r3, r4
 8008c1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c22:	429f      	cmp	r7, r3
 8008c24:	d2f9      	bcs.n	8008c1a <__hexnan+0xaa>
 8008c26:	1b3b      	subs	r3, r7, r4
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	3401      	adds	r4, #1
 8008c30:	3e03      	subs	r6, #3
 8008c32:	42b4      	cmp	r4, r6
 8008c34:	bf88      	it	hi
 8008c36:	2304      	movhi	r3, #4
 8008c38:	4443      	add	r3, r8
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f843 2b04 	str.w	r2, [r3], #4
 8008c40:	429f      	cmp	r7, r3
 8008c42:	d2fb      	bcs.n	8008c3c <__hexnan+0xcc>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	b91b      	cbnz	r3, 8008c50 <__hexnan+0xe0>
 8008c48:	4547      	cmp	r7, r8
 8008c4a:	d127      	bne.n	8008c9c <__hexnan+0x12c>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	2005      	movs	r0, #5
 8008c52:	e026      	b.n	8008ca2 <__hexnan+0x132>
 8008c54:	3501      	adds	r5, #1
 8008c56:	2d08      	cmp	r5, #8
 8008c58:	f10b 0b01 	add.w	fp, fp, #1
 8008c5c:	dd06      	ble.n	8008c6c <__hexnan+0xfc>
 8008c5e:	4544      	cmp	r4, r8
 8008c60:	d9c3      	bls.n	8008bea <__hexnan+0x7a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c68:	2501      	movs	r5, #1
 8008c6a:	3c04      	subs	r4, #4
 8008c6c:	6822      	ldr	r2, [r4, #0]
 8008c6e:	f000 000f 	and.w	r0, r0, #15
 8008c72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008c76:	6022      	str	r2, [r4, #0]
 8008c78:	e7b7      	b.n	8008bea <__hexnan+0x7a>
 8008c7a:	2508      	movs	r5, #8
 8008c7c:	e7b5      	b.n	8008bea <__hexnan+0x7a>
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0df      	beq.n	8008c44 <__hexnan+0xd4>
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295
 8008c88:	f1c3 0320 	rsb	r3, r3, #32
 8008c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c94:	401a      	ands	r2, r3
 8008c96:	f846 2c04 	str.w	r2, [r6, #-4]
 8008c9a:	e7d3      	b.n	8008c44 <__hexnan+0xd4>
 8008c9c:	3f04      	subs	r7, #4
 8008c9e:	e7d1      	b.n	8008c44 <__hexnan+0xd4>
 8008ca0:	2004      	movs	r0, #4
 8008ca2:	b007      	add	sp, #28
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ca8 <_localeconv_r>:
 8008ca8:	4800      	ldr	r0, [pc, #0]	; (8008cac <_localeconv_r+0x4>)
 8008caa:	4770      	bx	lr
 8008cac:	20000174 	.word	0x20000174

08008cb0 <malloc>:
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <malloc+0xc>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	f000 bd3d 	b.w	8009734 <_malloc_r>
 8008cba:	bf00      	nop
 8008cbc:	2000001c 	.word	0x2000001c

08008cc0 <__ascii_mbtowc>:
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	b901      	cbnz	r1, 8008cc6 <__ascii_mbtowc+0x6>
 8008cc4:	a901      	add	r1, sp, #4
 8008cc6:	b142      	cbz	r2, 8008cda <__ascii_mbtowc+0x1a>
 8008cc8:	b14b      	cbz	r3, 8008cde <__ascii_mbtowc+0x1e>
 8008cca:	7813      	ldrb	r3, [r2, #0]
 8008ccc:	600b      	str	r3, [r1, #0]
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	1e10      	subs	r0, r2, #0
 8008cd2:	bf18      	it	ne
 8008cd4:	2001      	movne	r0, #1
 8008cd6:	b002      	add	sp, #8
 8008cd8:	4770      	bx	lr
 8008cda:	4610      	mov	r0, r2
 8008cdc:	e7fb      	b.n	8008cd6 <__ascii_mbtowc+0x16>
 8008cde:	f06f 0001 	mvn.w	r0, #1
 8008ce2:	e7f8      	b.n	8008cd6 <__ascii_mbtowc+0x16>

08008ce4 <memcpy>:
 8008ce4:	440a      	add	r2, r1
 8008ce6:	4291      	cmp	r1, r2
 8008ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cec:	d100      	bne.n	8008cf0 <memcpy+0xc>
 8008cee:	4770      	bx	lr
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfa:	4291      	cmp	r1, r2
 8008cfc:	d1f9      	bne.n	8008cf2 <memcpy+0xe>
 8008cfe:	bd10      	pop	{r4, pc}

08008d00 <_Balloc>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	b976      	cbnz	r6, 8008d28 <_Balloc+0x28>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	f7ff ffd0 	bl	8008cb0 <malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6260      	str	r0, [r4, #36]	; 0x24
 8008d14:	b920      	cbnz	r0, 8008d20 <_Balloc+0x20>
 8008d16:	4b18      	ldr	r3, [pc, #96]	; (8008d78 <_Balloc+0x78>)
 8008d18:	4818      	ldr	r0, [pc, #96]	; (8008d7c <_Balloc+0x7c>)
 8008d1a:	2166      	movs	r1, #102	; 0x66
 8008d1c:	f000 fef8 	bl	8009b10 <__assert_func>
 8008d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d24:	6006      	str	r6, [r0, #0]
 8008d26:	60c6      	str	r6, [r0, #12]
 8008d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2a:	68f3      	ldr	r3, [r6, #12]
 8008d2c:	b183      	cbz	r3, 8008d50 <_Balloc+0x50>
 8008d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d36:	b9b8      	cbnz	r0, 8008d68 <_Balloc+0x68>
 8008d38:	2101      	movs	r1, #1
 8008d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d3e:	1d72      	adds	r2, r6, #5
 8008d40:	0092      	lsls	r2, r2, #2
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fc97 	bl	8009676 <_calloc_r>
 8008d48:	b160      	cbz	r0, 8008d64 <_Balloc+0x64>
 8008d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d4e:	e00e      	b.n	8008d6e <_Balloc+0x6e>
 8008d50:	2221      	movs	r2, #33	; 0x21
 8008d52:	2104      	movs	r1, #4
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fc8e 	bl	8009676 <_calloc_r>
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	60f0      	str	r0, [r6, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e4      	bne.n	8008d2e <_Balloc+0x2e>
 8008d64:	2000      	movs	r0, #0
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	6802      	ldr	r2, [r0, #0]
 8008d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d74:	e7f7      	b.n	8008d66 <_Balloc+0x66>
 8008d76:	bf00      	nop
 8008d78:	0800ae56 	.word	0x0800ae56
 8008d7c:	0800af5c 	.word	0x0800af5c

08008d80 <_Bfree>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b976      	cbnz	r6, 8008da8 <_Bfree+0x28>
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	f7ff ff90 	bl	8008cb0 <malloc>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6268      	str	r0, [r5, #36]	; 0x24
 8008d94:	b920      	cbnz	r0, 8008da0 <_Bfree+0x20>
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <_Bfree+0x3c>)
 8008d98:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <_Bfree+0x40>)
 8008d9a:	218a      	movs	r1, #138	; 0x8a
 8008d9c:	f000 feb8 	bl	8009b10 <__assert_func>
 8008da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da4:	6006      	str	r6, [r0, #0]
 8008da6:	60c6      	str	r6, [r0, #12]
 8008da8:	b13c      	cbz	r4, 8008dba <_Bfree+0x3a>
 8008daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db4:	6021      	str	r1, [r4, #0]
 8008db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	0800ae56 	.word	0x0800ae56
 8008dc0:	0800af5c 	.word	0x0800af5c

08008dc4 <__multadd>:
 8008dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	690e      	ldr	r6, [r1, #16]
 8008dca:	4607      	mov	r7, r0
 8008dcc:	4698      	mov	r8, r3
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f101 0014 	add.w	r0, r1, #20
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	6805      	ldr	r5, [r0, #0]
 8008dd8:	b2a9      	uxth	r1, r5
 8008dda:	fb02 8101 	mla	r1, r2, r1, r8
 8008dde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008de2:	0c2d      	lsrs	r5, r5, #16
 8008de4:	fb02 c505 	mla	r5, r2, r5, ip
 8008de8:	b289      	uxth	r1, r1
 8008dea:	3301      	adds	r3, #1
 8008dec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008df0:	429e      	cmp	r6, r3
 8008df2:	f840 1b04 	str.w	r1, [r0], #4
 8008df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008dfa:	dcec      	bgt.n	8008dd6 <__multadd+0x12>
 8008dfc:	f1b8 0f00 	cmp.w	r8, #0
 8008e00:	d022      	beq.n	8008e48 <__multadd+0x84>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	42b3      	cmp	r3, r6
 8008e06:	dc19      	bgt.n	8008e3c <__multadd+0x78>
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	f7ff ff77 	bl	8008d00 <_Balloc>
 8008e12:	4605      	mov	r5, r0
 8008e14:	b928      	cbnz	r0, 8008e22 <__multadd+0x5e>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <__multadd+0x8c>)
 8008e1a:	480e      	ldr	r0, [pc, #56]	; (8008e54 <__multadd+0x90>)
 8008e1c:	21b5      	movs	r1, #181	; 0xb5
 8008e1e:	f000 fe77 	bl	8009b10 <__assert_func>
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	3202      	adds	r2, #2
 8008e26:	f104 010c 	add.w	r1, r4, #12
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	300c      	adds	r0, #12
 8008e2e:	f7ff ff59 	bl	8008ce4 <memcpy>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff ffa3 	bl	8008d80 <_Bfree>
 8008e3a:	462c      	mov	r4, r5
 8008e3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e40:	3601      	adds	r6, #1
 8008e42:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e46:	6126      	str	r6, [r4, #16]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4e:	bf00      	nop
 8008e50:	0800aecc 	.word	0x0800aecc
 8008e54:	0800af5c 	.word	0x0800af5c

08008e58 <__s2b>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	4615      	mov	r5, r2
 8008e60:	461f      	mov	r7, r3
 8008e62:	2209      	movs	r2, #9
 8008e64:	3308      	adds	r3, #8
 8008e66:	4606      	mov	r6, r0
 8008e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	2201      	movs	r2, #1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	db09      	blt.n	8008e88 <__s2b+0x30>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ff43 	bl	8008d00 <_Balloc>
 8008e7a:	b940      	cbnz	r0, 8008e8e <__s2b+0x36>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <__s2b+0x8c>)
 8008e80:	4819      	ldr	r0, [pc, #100]	; (8008ee8 <__s2b+0x90>)
 8008e82:	21ce      	movs	r1, #206	; 0xce
 8008e84:	f000 fe44 	bl	8009b10 <__assert_func>
 8008e88:	0052      	lsls	r2, r2, #1
 8008e8a:	3101      	adds	r1, #1
 8008e8c:	e7f0      	b.n	8008e70 <__s2b+0x18>
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	6143      	str	r3, [r0, #20]
 8008e92:	2d09      	cmp	r5, #9
 8008e94:	f04f 0301 	mov.w	r3, #1
 8008e98:	6103      	str	r3, [r0, #16]
 8008e9a:	dd16      	ble.n	8008eca <__s2b+0x72>
 8008e9c:	f104 0909 	add.w	r9, r4, #9
 8008ea0:	46c8      	mov	r8, r9
 8008ea2:	442c      	add	r4, r5
 8008ea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	3b30      	subs	r3, #48	; 0x30
 8008eac:	220a      	movs	r2, #10
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff88 	bl	8008dc4 <__multadd>
 8008eb4:	45a0      	cmp	r8, r4
 8008eb6:	d1f5      	bne.n	8008ea4 <__s2b+0x4c>
 8008eb8:	f1a5 0408 	sub.w	r4, r5, #8
 8008ebc:	444c      	add	r4, r9
 8008ebe:	1b2d      	subs	r5, r5, r4
 8008ec0:	1963      	adds	r3, r4, r5
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	db04      	blt.n	8008ed0 <__s2b+0x78>
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	340a      	adds	r4, #10
 8008ecc:	2509      	movs	r5, #9
 8008ece:	e7f6      	b.n	8008ebe <__s2b+0x66>
 8008ed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ed4:	4601      	mov	r1, r0
 8008ed6:	3b30      	subs	r3, #48	; 0x30
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ff72 	bl	8008dc4 <__multadd>
 8008ee0:	e7ee      	b.n	8008ec0 <__s2b+0x68>
 8008ee2:	bf00      	nop
 8008ee4:	0800aecc 	.word	0x0800aecc
 8008ee8:	0800af5c 	.word	0x0800af5c

08008eec <__hi0bits>:
 8008eec:	0c03      	lsrs	r3, r0, #16
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	b9d3      	cbnz	r3, 8008f28 <__hi0bits+0x3c>
 8008ef2:	0400      	lsls	r0, r0, #16
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008efa:	bf04      	itt	eq
 8008efc:	0200      	lsleq	r0, r0, #8
 8008efe:	3308      	addeq	r3, #8
 8008f00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f04:	bf04      	itt	eq
 8008f06:	0100      	lsleq	r0, r0, #4
 8008f08:	3304      	addeq	r3, #4
 8008f0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f0e:	bf04      	itt	eq
 8008f10:	0080      	lsleq	r0, r0, #2
 8008f12:	3302      	addeq	r3, #2
 8008f14:	2800      	cmp	r0, #0
 8008f16:	db05      	blt.n	8008f24 <__hi0bits+0x38>
 8008f18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f1c:	f103 0301 	add.w	r3, r3, #1
 8008f20:	bf08      	it	eq
 8008f22:	2320      	moveq	r3, #32
 8008f24:	4618      	mov	r0, r3
 8008f26:	4770      	bx	lr
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e7e4      	b.n	8008ef6 <__hi0bits+0xa>

08008f2c <__lo0bits>:
 8008f2c:	6803      	ldr	r3, [r0, #0]
 8008f2e:	f013 0207 	ands.w	r2, r3, #7
 8008f32:	4601      	mov	r1, r0
 8008f34:	d00b      	beq.n	8008f4e <__lo0bits+0x22>
 8008f36:	07da      	lsls	r2, r3, #31
 8008f38:	d424      	bmi.n	8008f84 <__lo0bits+0x58>
 8008f3a:	0798      	lsls	r0, r3, #30
 8008f3c:	bf49      	itett	mi
 8008f3e:	085b      	lsrmi	r3, r3, #1
 8008f40:	089b      	lsrpl	r3, r3, #2
 8008f42:	2001      	movmi	r0, #1
 8008f44:	600b      	strmi	r3, [r1, #0]
 8008f46:	bf5c      	itt	pl
 8008f48:	600b      	strpl	r3, [r1, #0]
 8008f4a:	2002      	movpl	r0, #2
 8008f4c:	4770      	bx	lr
 8008f4e:	b298      	uxth	r0, r3
 8008f50:	b9b0      	cbnz	r0, 8008f80 <__lo0bits+0x54>
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	2010      	movs	r0, #16
 8008f56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f5a:	bf04      	itt	eq
 8008f5c:	0a1b      	lsreq	r3, r3, #8
 8008f5e:	3008      	addeq	r0, #8
 8008f60:	071a      	lsls	r2, r3, #28
 8008f62:	bf04      	itt	eq
 8008f64:	091b      	lsreq	r3, r3, #4
 8008f66:	3004      	addeq	r0, #4
 8008f68:	079a      	lsls	r2, r3, #30
 8008f6a:	bf04      	itt	eq
 8008f6c:	089b      	lsreq	r3, r3, #2
 8008f6e:	3002      	addeq	r0, #2
 8008f70:	07da      	lsls	r2, r3, #31
 8008f72:	d403      	bmi.n	8008f7c <__lo0bits+0x50>
 8008f74:	085b      	lsrs	r3, r3, #1
 8008f76:	f100 0001 	add.w	r0, r0, #1
 8008f7a:	d005      	beq.n	8008f88 <__lo0bits+0x5c>
 8008f7c:	600b      	str	r3, [r1, #0]
 8008f7e:	4770      	bx	lr
 8008f80:	4610      	mov	r0, r2
 8008f82:	e7e8      	b.n	8008f56 <__lo0bits+0x2a>
 8008f84:	2000      	movs	r0, #0
 8008f86:	4770      	bx	lr
 8008f88:	2020      	movs	r0, #32
 8008f8a:	4770      	bx	lr

08008f8c <__i2b>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	460c      	mov	r4, r1
 8008f90:	2101      	movs	r1, #1
 8008f92:	f7ff feb5 	bl	8008d00 <_Balloc>
 8008f96:	4602      	mov	r2, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__i2b+0x1a>
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <__i2b+0x24>)
 8008f9c:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <__i2b+0x28>)
 8008f9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fa2:	f000 fdb5 	bl	8009b10 <__assert_func>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	6144      	str	r4, [r0, #20]
 8008faa:	6103      	str	r3, [r0, #16]
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800aecc 	.word	0x0800aecc
 8008fb4:	0800af5c 	.word	0x0800af5c

08008fb8 <__multiply>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	690a      	ldr	r2, [r1, #16]
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	bfb8      	it	lt
 8008fc6:	460b      	movlt	r3, r1
 8008fc8:	460d      	mov	r5, r1
 8008fca:	bfbc      	itt	lt
 8008fcc:	4625      	movlt	r5, r4
 8008fce:	461c      	movlt	r4, r3
 8008fd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008fd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008fd8:	68ab      	ldr	r3, [r5, #8]
 8008fda:	6869      	ldr	r1, [r5, #4]
 8008fdc:	eb0a 0709 	add.w	r7, sl, r9
 8008fe0:	42bb      	cmp	r3, r7
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	bfb8      	it	lt
 8008fe6:	3101      	addlt	r1, #1
 8008fe8:	f7ff fe8a 	bl	8008d00 <_Balloc>
 8008fec:	b930      	cbnz	r0, 8008ffc <__multiply+0x44>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	4b42      	ldr	r3, [pc, #264]	; (80090fc <__multiply+0x144>)
 8008ff2:	4843      	ldr	r0, [pc, #268]	; (8009100 <__multiply+0x148>)
 8008ff4:	f240 115d 	movw	r1, #349	; 0x15d
 8008ff8:	f000 fd8a 	bl	8009b10 <__assert_func>
 8008ffc:	f100 0614 	add.w	r6, r0, #20
 8009000:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009004:	4633      	mov	r3, r6
 8009006:	2200      	movs	r2, #0
 8009008:	4543      	cmp	r3, r8
 800900a:	d31e      	bcc.n	800904a <__multiply+0x92>
 800900c:	f105 0c14 	add.w	ip, r5, #20
 8009010:	f104 0314 	add.w	r3, r4, #20
 8009014:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009018:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800901c:	9202      	str	r2, [sp, #8]
 800901e:	ebac 0205 	sub.w	r2, ip, r5
 8009022:	3a15      	subs	r2, #21
 8009024:	f022 0203 	bic.w	r2, r2, #3
 8009028:	3204      	adds	r2, #4
 800902a:	f105 0115 	add.w	r1, r5, #21
 800902e:	458c      	cmp	ip, r1
 8009030:	bf38      	it	cc
 8009032:	2204      	movcc	r2, #4
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	9a02      	ldr	r2, [sp, #8]
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	429a      	cmp	r2, r3
 800903c:	d808      	bhi.n	8009050 <__multiply+0x98>
 800903e:	2f00      	cmp	r7, #0
 8009040:	dc55      	bgt.n	80090ee <__multiply+0x136>
 8009042:	6107      	str	r7, [r0, #16]
 8009044:	b005      	add	sp, #20
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	f843 2b04 	str.w	r2, [r3], #4
 800904e:	e7db      	b.n	8009008 <__multiply+0x50>
 8009050:	f8b3 a000 	ldrh.w	sl, [r3]
 8009054:	f1ba 0f00 	cmp.w	sl, #0
 8009058:	d020      	beq.n	800909c <__multiply+0xe4>
 800905a:	f105 0e14 	add.w	lr, r5, #20
 800905e:	46b1      	mov	r9, r6
 8009060:	2200      	movs	r2, #0
 8009062:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009066:	f8d9 b000 	ldr.w	fp, [r9]
 800906a:	b2a1      	uxth	r1, r4
 800906c:	fa1f fb8b 	uxth.w	fp, fp
 8009070:	fb0a b101 	mla	r1, sl, r1, fp
 8009074:	4411      	add	r1, r2
 8009076:	f8d9 2000 	ldr.w	r2, [r9]
 800907a:	0c24      	lsrs	r4, r4, #16
 800907c:	0c12      	lsrs	r2, r2, #16
 800907e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009082:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009086:	b289      	uxth	r1, r1
 8009088:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800908c:	45f4      	cmp	ip, lr
 800908e:	f849 1b04 	str.w	r1, [r9], #4
 8009092:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009096:	d8e4      	bhi.n	8009062 <__multiply+0xaa>
 8009098:	9901      	ldr	r1, [sp, #4]
 800909a:	5072      	str	r2, [r6, r1]
 800909c:	9a03      	ldr	r2, [sp, #12]
 800909e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090a2:	3304      	adds	r3, #4
 80090a4:	f1b9 0f00 	cmp.w	r9, #0
 80090a8:	d01f      	beq.n	80090ea <__multiply+0x132>
 80090aa:	6834      	ldr	r4, [r6, #0]
 80090ac:	f105 0114 	add.w	r1, r5, #20
 80090b0:	46b6      	mov	lr, r6
 80090b2:	f04f 0a00 	mov.w	sl, #0
 80090b6:	880a      	ldrh	r2, [r1, #0]
 80090b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80090bc:	fb09 b202 	mla	r2, r9, r2, fp
 80090c0:	4492      	add	sl, r2
 80090c2:	b2a4      	uxth	r4, r4
 80090c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80090c8:	f84e 4b04 	str.w	r4, [lr], #4
 80090cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80090d0:	f8be 2000 	ldrh.w	r2, [lr]
 80090d4:	0c24      	lsrs	r4, r4, #16
 80090d6:	fb09 2404 	mla	r4, r9, r4, r2
 80090da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80090de:	458c      	cmp	ip, r1
 80090e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090e4:	d8e7      	bhi.n	80090b6 <__multiply+0xfe>
 80090e6:	9a01      	ldr	r2, [sp, #4]
 80090e8:	50b4      	str	r4, [r6, r2]
 80090ea:	3604      	adds	r6, #4
 80090ec:	e7a3      	b.n	8009036 <__multiply+0x7e>
 80090ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1a5      	bne.n	8009042 <__multiply+0x8a>
 80090f6:	3f01      	subs	r7, #1
 80090f8:	e7a1      	b.n	800903e <__multiply+0x86>
 80090fa:	bf00      	nop
 80090fc:	0800aecc 	.word	0x0800aecc
 8009100:	0800af5c 	.word	0x0800af5c

08009104 <__pow5mult>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	4615      	mov	r5, r2
 800910a:	f012 0203 	ands.w	r2, r2, #3
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	d007      	beq.n	8009124 <__pow5mult+0x20>
 8009114:	4c25      	ldr	r4, [pc, #148]	; (80091ac <__pow5mult+0xa8>)
 8009116:	3a01      	subs	r2, #1
 8009118:	2300      	movs	r3, #0
 800911a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800911e:	f7ff fe51 	bl	8008dc4 <__multadd>
 8009122:	4607      	mov	r7, r0
 8009124:	10ad      	asrs	r5, r5, #2
 8009126:	d03d      	beq.n	80091a4 <__pow5mult+0xa0>
 8009128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800912a:	b97c      	cbnz	r4, 800914c <__pow5mult+0x48>
 800912c:	2010      	movs	r0, #16
 800912e:	f7ff fdbf 	bl	8008cb0 <malloc>
 8009132:	4602      	mov	r2, r0
 8009134:	6270      	str	r0, [r6, #36]	; 0x24
 8009136:	b928      	cbnz	r0, 8009144 <__pow5mult+0x40>
 8009138:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <__pow5mult+0xac>)
 800913a:	481e      	ldr	r0, [pc, #120]	; (80091b4 <__pow5mult+0xb0>)
 800913c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009140:	f000 fce6 	bl	8009b10 <__assert_func>
 8009144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009148:	6004      	str	r4, [r0, #0]
 800914a:	60c4      	str	r4, [r0, #12]
 800914c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009154:	b94c      	cbnz	r4, 800916a <__pow5mult+0x66>
 8009156:	f240 2171 	movw	r1, #625	; 0x271
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff16 	bl	8008f8c <__i2b>
 8009160:	2300      	movs	r3, #0
 8009162:	f8c8 0008 	str.w	r0, [r8, #8]
 8009166:	4604      	mov	r4, r0
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	07eb      	lsls	r3, r5, #31
 8009170:	d50a      	bpl.n	8009188 <__pow5mult+0x84>
 8009172:	4639      	mov	r1, r7
 8009174:	4622      	mov	r2, r4
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff ff1e 	bl	8008fb8 <__multiply>
 800917c:	4639      	mov	r1, r7
 800917e:	4680      	mov	r8, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff fdfd 	bl	8008d80 <_Bfree>
 8009186:	4647      	mov	r7, r8
 8009188:	106d      	asrs	r5, r5, #1
 800918a:	d00b      	beq.n	80091a4 <__pow5mult+0xa0>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	b938      	cbnz	r0, 80091a0 <__pow5mult+0x9c>
 8009190:	4622      	mov	r2, r4
 8009192:	4621      	mov	r1, r4
 8009194:	4630      	mov	r0, r6
 8009196:	f7ff ff0f 	bl	8008fb8 <__multiply>
 800919a:	6020      	str	r0, [r4, #0]
 800919c:	f8c0 9000 	str.w	r9, [r0]
 80091a0:	4604      	mov	r4, r0
 80091a2:	e7e4      	b.n	800916e <__pow5mult+0x6a>
 80091a4:	4638      	mov	r0, r7
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	bf00      	nop
 80091ac:	0800b0b0 	.word	0x0800b0b0
 80091b0:	0800ae56 	.word	0x0800ae56
 80091b4:	0800af5c 	.word	0x0800af5c

080091b8 <__lshift>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	460c      	mov	r4, r1
 80091be:	6849      	ldr	r1, [r1, #4]
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	4607      	mov	r7, r0
 80091ca:	4691      	mov	r9, r2
 80091cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d0:	f108 0601 	add.w	r6, r8, #1
 80091d4:	42b3      	cmp	r3, r6
 80091d6:	db0b      	blt.n	80091f0 <__lshift+0x38>
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff fd91 	bl	8008d00 <_Balloc>
 80091de:	4605      	mov	r5, r0
 80091e0:	b948      	cbnz	r0, 80091f6 <__lshift+0x3e>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b28      	ldr	r3, [pc, #160]	; (8009288 <__lshift+0xd0>)
 80091e6:	4829      	ldr	r0, [pc, #164]	; (800928c <__lshift+0xd4>)
 80091e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091ec:	f000 fc90 	bl	8009b10 <__assert_func>
 80091f0:	3101      	adds	r1, #1
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	e7ee      	b.n	80091d4 <__lshift+0x1c>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f100 0114 	add.w	r1, r0, #20
 80091fc:	f100 0210 	add.w	r2, r0, #16
 8009200:	4618      	mov	r0, r3
 8009202:	4553      	cmp	r3, sl
 8009204:	db33      	blt.n	800926e <__lshift+0xb6>
 8009206:	6920      	ldr	r0, [r4, #16]
 8009208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800920c:	f104 0314 	add.w	r3, r4, #20
 8009210:	f019 091f 	ands.w	r9, r9, #31
 8009214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800921c:	d02b      	beq.n	8009276 <__lshift+0xbe>
 800921e:	f1c9 0e20 	rsb	lr, r9, #32
 8009222:	468a      	mov	sl, r1
 8009224:	2200      	movs	r2, #0
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	fa00 f009 	lsl.w	r0, r0, r9
 800922c:	4302      	orrs	r2, r0
 800922e:	f84a 2b04 	str.w	r2, [sl], #4
 8009232:	f853 2b04 	ldr.w	r2, [r3], #4
 8009236:	459c      	cmp	ip, r3
 8009238:	fa22 f20e 	lsr.w	r2, r2, lr
 800923c:	d8f3      	bhi.n	8009226 <__lshift+0x6e>
 800923e:	ebac 0304 	sub.w	r3, ip, r4
 8009242:	3b15      	subs	r3, #21
 8009244:	f023 0303 	bic.w	r3, r3, #3
 8009248:	3304      	adds	r3, #4
 800924a:	f104 0015 	add.w	r0, r4, #21
 800924e:	4584      	cmp	ip, r0
 8009250:	bf38      	it	cc
 8009252:	2304      	movcc	r3, #4
 8009254:	50ca      	str	r2, [r1, r3]
 8009256:	b10a      	cbz	r2, 800925c <__lshift+0xa4>
 8009258:	f108 0602 	add.w	r6, r8, #2
 800925c:	3e01      	subs	r6, #1
 800925e:	4638      	mov	r0, r7
 8009260:	612e      	str	r6, [r5, #16]
 8009262:	4621      	mov	r1, r4
 8009264:	f7ff fd8c 	bl	8008d80 <_Bfree>
 8009268:	4628      	mov	r0, r5
 800926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009272:	3301      	adds	r3, #1
 8009274:	e7c5      	b.n	8009202 <__lshift+0x4a>
 8009276:	3904      	subs	r1, #4
 8009278:	f853 2b04 	ldr.w	r2, [r3], #4
 800927c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009280:	459c      	cmp	ip, r3
 8009282:	d8f9      	bhi.n	8009278 <__lshift+0xc0>
 8009284:	e7ea      	b.n	800925c <__lshift+0xa4>
 8009286:	bf00      	nop
 8009288:	0800aecc 	.word	0x0800aecc
 800928c:	0800af5c 	.word	0x0800af5c

08009290 <__mcmp>:
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	6902      	ldr	r2, [r0, #16]
 8009294:	690c      	ldr	r4, [r1, #16]
 8009296:	1b12      	subs	r2, r2, r4
 8009298:	d10e      	bne.n	80092b8 <__mcmp+0x28>
 800929a:	f100 0314 	add.w	r3, r0, #20
 800929e:	3114      	adds	r1, #20
 80092a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092b0:	42a5      	cmp	r5, r4
 80092b2:	d003      	beq.n	80092bc <__mcmp+0x2c>
 80092b4:	d305      	bcc.n	80092c2 <__mcmp+0x32>
 80092b6:	2201      	movs	r2, #1
 80092b8:	4610      	mov	r0, r2
 80092ba:	bd30      	pop	{r4, r5, pc}
 80092bc:	4283      	cmp	r3, r0
 80092be:	d3f3      	bcc.n	80092a8 <__mcmp+0x18>
 80092c0:	e7fa      	b.n	80092b8 <__mcmp+0x28>
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	e7f7      	b.n	80092b8 <__mcmp+0x28>

080092c8 <__mdiff>:
 80092c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	4606      	mov	r6, r0
 80092d0:	4611      	mov	r1, r2
 80092d2:	4620      	mov	r0, r4
 80092d4:	4617      	mov	r7, r2
 80092d6:	f7ff ffdb 	bl	8009290 <__mcmp>
 80092da:	1e05      	subs	r5, r0, #0
 80092dc:	d110      	bne.n	8009300 <__mdiff+0x38>
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff fd0d 	bl	8008d00 <_Balloc>
 80092e6:	b930      	cbnz	r0, 80092f6 <__mdiff+0x2e>
 80092e8:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <__mdiff+0x108>)
 80092ea:	4602      	mov	r2, r0
 80092ec:	f240 2132 	movw	r1, #562	; 0x232
 80092f0:	4838      	ldr	r0, [pc, #224]	; (80093d4 <__mdiff+0x10c>)
 80092f2:	f000 fc0d 	bl	8009b10 <__assert_func>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009300:	bfa4      	itt	ge
 8009302:	463b      	movge	r3, r7
 8009304:	4627      	movge	r7, r4
 8009306:	4630      	mov	r0, r6
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	bfa6      	itte	ge
 800930c:	461c      	movge	r4, r3
 800930e:	2500      	movge	r5, #0
 8009310:	2501      	movlt	r5, #1
 8009312:	f7ff fcf5 	bl	8008d00 <_Balloc>
 8009316:	b920      	cbnz	r0, 8009322 <__mdiff+0x5a>
 8009318:	4b2d      	ldr	r3, [pc, #180]	; (80093d0 <__mdiff+0x108>)
 800931a:	4602      	mov	r2, r0
 800931c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009320:	e7e6      	b.n	80092f0 <__mdiff+0x28>
 8009322:	693e      	ldr	r6, [r7, #16]
 8009324:	60c5      	str	r5, [r0, #12]
 8009326:	6925      	ldr	r5, [r4, #16]
 8009328:	f107 0114 	add.w	r1, r7, #20
 800932c:	f104 0914 	add.w	r9, r4, #20
 8009330:	f100 0e14 	add.w	lr, r0, #20
 8009334:	f107 0210 	add.w	r2, r7, #16
 8009338:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800933c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009340:	46f2      	mov	sl, lr
 8009342:	2700      	movs	r7, #0
 8009344:	f859 3b04 	ldr.w	r3, [r9], #4
 8009348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800934c:	fa1f f883 	uxth.w	r8, r3
 8009350:	fa17 f78b 	uxtah	r7, r7, fp
 8009354:	0c1b      	lsrs	r3, r3, #16
 8009356:	eba7 0808 	sub.w	r8, r7, r8
 800935a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800935e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009362:	fa1f f888 	uxth.w	r8, r8
 8009366:	141f      	asrs	r7, r3, #16
 8009368:	454d      	cmp	r5, r9
 800936a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800936e:	f84a 3b04 	str.w	r3, [sl], #4
 8009372:	d8e7      	bhi.n	8009344 <__mdiff+0x7c>
 8009374:	1b2b      	subs	r3, r5, r4
 8009376:	3b15      	subs	r3, #21
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	3304      	adds	r3, #4
 800937e:	3415      	adds	r4, #21
 8009380:	42a5      	cmp	r5, r4
 8009382:	bf38      	it	cc
 8009384:	2304      	movcc	r3, #4
 8009386:	4419      	add	r1, r3
 8009388:	4473      	add	r3, lr
 800938a:	469e      	mov	lr, r3
 800938c:	460d      	mov	r5, r1
 800938e:	4565      	cmp	r5, ip
 8009390:	d30e      	bcc.n	80093b0 <__mdiff+0xe8>
 8009392:	f10c 0203 	add.w	r2, ip, #3
 8009396:	1a52      	subs	r2, r2, r1
 8009398:	f022 0203 	bic.w	r2, r2, #3
 800939c:	3903      	subs	r1, #3
 800939e:	458c      	cmp	ip, r1
 80093a0:	bf38      	it	cc
 80093a2:	2200      	movcc	r2, #0
 80093a4:	441a      	add	r2, r3
 80093a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093aa:	b17b      	cbz	r3, 80093cc <__mdiff+0x104>
 80093ac:	6106      	str	r6, [r0, #16]
 80093ae:	e7a5      	b.n	80092fc <__mdiff+0x34>
 80093b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80093b4:	fa17 f488 	uxtah	r4, r7, r8
 80093b8:	1422      	asrs	r2, r4, #16
 80093ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80093be:	b2a4      	uxth	r4, r4
 80093c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80093c4:	f84e 4b04 	str.w	r4, [lr], #4
 80093c8:	1417      	asrs	r7, r2, #16
 80093ca:	e7e0      	b.n	800938e <__mdiff+0xc6>
 80093cc:	3e01      	subs	r6, #1
 80093ce:	e7ea      	b.n	80093a6 <__mdiff+0xde>
 80093d0:	0800aecc 	.word	0x0800aecc
 80093d4:	0800af5c 	.word	0x0800af5c

080093d8 <__ulp>:
 80093d8:	b082      	sub	sp, #8
 80093da:	ed8d 0b00 	vstr	d0, [sp]
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	4912      	ldr	r1, [pc, #72]	; (800942c <__ulp+0x54>)
 80093e2:	4019      	ands	r1, r3
 80093e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80093e8:	2900      	cmp	r1, #0
 80093ea:	dd05      	ble.n	80093f8 <__ulp+0x20>
 80093ec:	2200      	movs	r2, #0
 80093ee:	460b      	mov	r3, r1
 80093f0:	ec43 2b10 	vmov	d0, r2, r3
 80093f4:	b002      	add	sp, #8
 80093f6:	4770      	bx	lr
 80093f8:	4249      	negs	r1, r1
 80093fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80093fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	da04      	bge.n	8009416 <__ulp+0x3e>
 800940c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009410:	fa41 f300 	asr.w	r3, r1, r0
 8009414:	e7ec      	b.n	80093f0 <__ulp+0x18>
 8009416:	f1a0 0114 	sub.w	r1, r0, #20
 800941a:	291e      	cmp	r1, #30
 800941c:	bfda      	itte	le
 800941e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009422:	fa20 f101 	lsrle.w	r1, r0, r1
 8009426:	2101      	movgt	r1, #1
 8009428:	460a      	mov	r2, r1
 800942a:	e7e1      	b.n	80093f0 <__ulp+0x18>
 800942c:	7ff00000 	.word	0x7ff00000

08009430 <__b2d>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	6905      	ldr	r5, [r0, #16]
 8009434:	f100 0714 	add.w	r7, r0, #20
 8009438:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800943c:	1f2e      	subs	r6, r5, #4
 800943e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009442:	4620      	mov	r0, r4
 8009444:	f7ff fd52 	bl	8008eec <__hi0bits>
 8009448:	f1c0 0320 	rsb	r3, r0, #32
 800944c:	280a      	cmp	r0, #10
 800944e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80094cc <__b2d+0x9c>
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	dc14      	bgt.n	8009480 <__b2d+0x50>
 8009456:	f1c0 0e0b 	rsb	lr, r0, #11
 800945a:	fa24 f10e 	lsr.w	r1, r4, lr
 800945e:	42b7      	cmp	r7, r6
 8009460:	ea41 030c 	orr.w	r3, r1, ip
 8009464:	bf34      	ite	cc
 8009466:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800946a:	2100      	movcs	r1, #0
 800946c:	3015      	adds	r0, #21
 800946e:	fa04 f000 	lsl.w	r0, r4, r0
 8009472:	fa21 f10e 	lsr.w	r1, r1, lr
 8009476:	ea40 0201 	orr.w	r2, r0, r1
 800947a:	ec43 2b10 	vmov	d0, r2, r3
 800947e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009480:	42b7      	cmp	r7, r6
 8009482:	bf3a      	itte	cc
 8009484:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009488:	f1a5 0608 	subcc.w	r6, r5, #8
 800948c:	2100      	movcs	r1, #0
 800948e:	380b      	subs	r0, #11
 8009490:	d017      	beq.n	80094c2 <__b2d+0x92>
 8009492:	f1c0 0c20 	rsb	ip, r0, #32
 8009496:	fa04 f500 	lsl.w	r5, r4, r0
 800949a:	42be      	cmp	r6, r7
 800949c:	fa21 f40c 	lsr.w	r4, r1, ip
 80094a0:	ea45 0504 	orr.w	r5, r5, r4
 80094a4:	bf8c      	ite	hi
 80094a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80094aa:	2400      	movls	r4, #0
 80094ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80094b0:	fa01 f000 	lsl.w	r0, r1, r0
 80094b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80094b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094bc:	ea40 0204 	orr.w	r2, r0, r4
 80094c0:	e7db      	b.n	800947a <__b2d+0x4a>
 80094c2:	ea44 030c 	orr.w	r3, r4, ip
 80094c6:	460a      	mov	r2, r1
 80094c8:	e7d7      	b.n	800947a <__b2d+0x4a>
 80094ca:	bf00      	nop
 80094cc:	3ff00000 	.word	0x3ff00000

080094d0 <__d2b>:
 80094d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4689      	mov	r9, r1
 80094d6:	2101      	movs	r1, #1
 80094d8:	ec57 6b10 	vmov	r6, r7, d0
 80094dc:	4690      	mov	r8, r2
 80094de:	f7ff fc0f 	bl	8008d00 <_Balloc>
 80094e2:	4604      	mov	r4, r0
 80094e4:	b930      	cbnz	r0, 80094f4 <__d2b+0x24>
 80094e6:	4602      	mov	r2, r0
 80094e8:	4b25      	ldr	r3, [pc, #148]	; (8009580 <__d2b+0xb0>)
 80094ea:	4826      	ldr	r0, [pc, #152]	; (8009584 <__d2b+0xb4>)
 80094ec:	f240 310a 	movw	r1, #778	; 0x30a
 80094f0:	f000 fb0e 	bl	8009b10 <__assert_func>
 80094f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094fc:	bb35      	cbnz	r5, 800954c <__d2b+0x7c>
 80094fe:	2e00      	cmp	r6, #0
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	d028      	beq.n	8009556 <__d2b+0x86>
 8009504:	4668      	mov	r0, sp
 8009506:	9600      	str	r6, [sp, #0]
 8009508:	f7ff fd10 	bl	8008f2c <__lo0bits>
 800950c:	9900      	ldr	r1, [sp, #0]
 800950e:	b300      	cbz	r0, 8009552 <__d2b+0x82>
 8009510:	9a01      	ldr	r2, [sp, #4]
 8009512:	f1c0 0320 	rsb	r3, r0, #32
 8009516:	fa02 f303 	lsl.w	r3, r2, r3
 800951a:	430b      	orrs	r3, r1
 800951c:	40c2      	lsrs	r2, r0
 800951e:	6163      	str	r3, [r4, #20]
 8009520:	9201      	str	r2, [sp, #4]
 8009522:	9b01      	ldr	r3, [sp, #4]
 8009524:	61a3      	str	r3, [r4, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	bf14      	ite	ne
 800952a:	2202      	movne	r2, #2
 800952c:	2201      	moveq	r2, #1
 800952e:	6122      	str	r2, [r4, #16]
 8009530:	b1d5      	cbz	r5, 8009568 <__d2b+0x98>
 8009532:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009536:	4405      	add	r5, r0
 8009538:	f8c9 5000 	str.w	r5, [r9]
 800953c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009540:	f8c8 0000 	str.w	r0, [r8]
 8009544:	4620      	mov	r0, r4
 8009546:	b003      	add	sp, #12
 8009548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800954c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009550:	e7d5      	b.n	80094fe <__d2b+0x2e>
 8009552:	6161      	str	r1, [r4, #20]
 8009554:	e7e5      	b.n	8009522 <__d2b+0x52>
 8009556:	a801      	add	r0, sp, #4
 8009558:	f7ff fce8 	bl	8008f2c <__lo0bits>
 800955c:	9b01      	ldr	r3, [sp, #4]
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	2201      	movs	r2, #1
 8009562:	6122      	str	r2, [r4, #16]
 8009564:	3020      	adds	r0, #32
 8009566:	e7e3      	b.n	8009530 <__d2b+0x60>
 8009568:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800956c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009570:	f8c9 0000 	str.w	r0, [r9]
 8009574:	6918      	ldr	r0, [r3, #16]
 8009576:	f7ff fcb9 	bl	8008eec <__hi0bits>
 800957a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800957e:	e7df      	b.n	8009540 <__d2b+0x70>
 8009580:	0800aecc 	.word	0x0800aecc
 8009584:	0800af5c 	.word	0x0800af5c

08009588 <__ratio>:
 8009588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	4688      	mov	r8, r1
 800958e:	4669      	mov	r1, sp
 8009590:	4681      	mov	r9, r0
 8009592:	f7ff ff4d 	bl	8009430 <__b2d>
 8009596:	a901      	add	r1, sp, #4
 8009598:	4640      	mov	r0, r8
 800959a:	ec55 4b10 	vmov	r4, r5, d0
 800959e:	f7ff ff47 	bl	8009430 <__b2d>
 80095a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80095aa:	eba3 0c02 	sub.w	ip, r3, r2
 80095ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095b8:	ec51 0b10 	vmov	r0, r1, d0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfd6      	itet	le
 80095c0:	460a      	movle	r2, r1
 80095c2:	462a      	movgt	r2, r5
 80095c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095c8:	468b      	mov	fp, r1
 80095ca:	462f      	mov	r7, r5
 80095cc:	bfd4      	ite	le
 80095ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80095d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095d6:	4620      	mov	r0, r4
 80095d8:	ee10 2a10 	vmov	r2, s0
 80095dc:	465b      	mov	r3, fp
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f7 f944 	bl	800086c <__aeabi_ddiv>
 80095e4:	ec41 0b10 	vmov	d0, r0, r1
 80095e8:	b003      	add	sp, #12
 80095ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095ee <__copybits>:
 80095ee:	3901      	subs	r1, #1
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	1149      	asrs	r1, r1, #5
 80095f4:	6914      	ldr	r4, [r2, #16]
 80095f6:	3101      	adds	r1, #1
 80095f8:	f102 0314 	add.w	r3, r2, #20
 80095fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009604:	1f05      	subs	r5, r0, #4
 8009606:	42a3      	cmp	r3, r4
 8009608:	d30c      	bcc.n	8009624 <__copybits+0x36>
 800960a:	1aa3      	subs	r3, r4, r2
 800960c:	3b11      	subs	r3, #17
 800960e:	f023 0303 	bic.w	r3, r3, #3
 8009612:	3211      	adds	r2, #17
 8009614:	42a2      	cmp	r2, r4
 8009616:	bf88      	it	hi
 8009618:	2300      	movhi	r3, #0
 800961a:	4418      	add	r0, r3
 800961c:	2300      	movs	r3, #0
 800961e:	4288      	cmp	r0, r1
 8009620:	d305      	bcc.n	800962e <__copybits+0x40>
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	f853 6b04 	ldr.w	r6, [r3], #4
 8009628:	f845 6f04 	str.w	r6, [r5, #4]!
 800962c:	e7eb      	b.n	8009606 <__copybits+0x18>
 800962e:	f840 3b04 	str.w	r3, [r0], #4
 8009632:	e7f4      	b.n	800961e <__copybits+0x30>

08009634 <__any_on>:
 8009634:	f100 0214 	add.w	r2, r0, #20
 8009638:	6900      	ldr	r0, [r0, #16]
 800963a:	114b      	asrs	r3, r1, #5
 800963c:	4298      	cmp	r0, r3
 800963e:	b510      	push	{r4, lr}
 8009640:	db11      	blt.n	8009666 <__any_on+0x32>
 8009642:	dd0a      	ble.n	800965a <__any_on+0x26>
 8009644:	f011 011f 	ands.w	r1, r1, #31
 8009648:	d007      	beq.n	800965a <__any_on+0x26>
 800964a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800964e:	fa24 f001 	lsr.w	r0, r4, r1
 8009652:	fa00 f101 	lsl.w	r1, r0, r1
 8009656:	428c      	cmp	r4, r1
 8009658:	d10b      	bne.n	8009672 <__any_on+0x3e>
 800965a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800965e:	4293      	cmp	r3, r2
 8009660:	d803      	bhi.n	800966a <__any_on+0x36>
 8009662:	2000      	movs	r0, #0
 8009664:	bd10      	pop	{r4, pc}
 8009666:	4603      	mov	r3, r0
 8009668:	e7f7      	b.n	800965a <__any_on+0x26>
 800966a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800966e:	2900      	cmp	r1, #0
 8009670:	d0f5      	beq.n	800965e <__any_on+0x2a>
 8009672:	2001      	movs	r0, #1
 8009674:	e7f6      	b.n	8009664 <__any_on+0x30>

08009676 <_calloc_r>:
 8009676:	b513      	push	{r0, r1, r4, lr}
 8009678:	434a      	muls	r2, r1
 800967a:	4611      	mov	r1, r2
 800967c:	9201      	str	r2, [sp, #4]
 800967e:	f000 f859 	bl	8009734 <_malloc_r>
 8009682:	4604      	mov	r4, r0
 8009684:	b118      	cbz	r0, 800968e <_calloc_r+0x18>
 8009686:	9a01      	ldr	r2, [sp, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	f7fc fbb9 	bl	8005e00 <memset>
 800968e:	4620      	mov	r0, r4
 8009690:	b002      	add	sp, #8
 8009692:	bd10      	pop	{r4, pc}

08009694 <_free_r>:
 8009694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009696:	2900      	cmp	r1, #0
 8009698:	d048      	beq.n	800972c <_free_r+0x98>
 800969a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969e:	9001      	str	r0, [sp, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f1a1 0404 	sub.w	r4, r1, #4
 80096a6:	bfb8      	it	lt
 80096a8:	18e4      	addlt	r4, r4, r3
 80096aa:	f000 fa7b 	bl	8009ba4 <__malloc_lock>
 80096ae:	4a20      	ldr	r2, [pc, #128]	; (8009730 <_free_r+0x9c>)
 80096b0:	9801      	ldr	r0, [sp, #4]
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	4615      	mov	r5, r2
 80096b6:	b933      	cbnz	r3, 80096c6 <_free_r+0x32>
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	6014      	str	r4, [r2, #0]
 80096bc:	b003      	add	sp, #12
 80096be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c2:	f000 ba75 	b.w	8009bb0 <__malloc_unlock>
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	d90b      	bls.n	80096e2 <_free_r+0x4e>
 80096ca:	6821      	ldr	r1, [r4, #0]
 80096cc:	1862      	adds	r2, r4, r1
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bf04      	itt	eq
 80096d2:	681a      	ldreq	r2, [r3, #0]
 80096d4:	685b      	ldreq	r3, [r3, #4]
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	bf04      	itt	eq
 80096da:	1852      	addeq	r2, r2, r1
 80096dc:	6022      	streq	r2, [r4, #0]
 80096de:	602c      	str	r4, [r5, #0]
 80096e0:	e7ec      	b.n	80096bc <_free_r+0x28>
 80096e2:	461a      	mov	r2, r3
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	b10b      	cbz	r3, 80096ec <_free_r+0x58>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d9fa      	bls.n	80096e2 <_free_r+0x4e>
 80096ec:	6811      	ldr	r1, [r2, #0]
 80096ee:	1855      	adds	r5, r2, r1
 80096f0:	42a5      	cmp	r5, r4
 80096f2:	d10b      	bne.n	800970c <_free_r+0x78>
 80096f4:	6824      	ldr	r4, [r4, #0]
 80096f6:	4421      	add	r1, r4
 80096f8:	1854      	adds	r4, r2, r1
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	d1dd      	bne.n	80096bc <_free_r+0x28>
 8009700:	681c      	ldr	r4, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	6053      	str	r3, [r2, #4]
 8009706:	4421      	add	r1, r4
 8009708:	6011      	str	r1, [r2, #0]
 800970a:	e7d7      	b.n	80096bc <_free_r+0x28>
 800970c:	d902      	bls.n	8009714 <_free_r+0x80>
 800970e:	230c      	movs	r3, #12
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e7d3      	b.n	80096bc <_free_r+0x28>
 8009714:	6825      	ldr	r5, [r4, #0]
 8009716:	1961      	adds	r1, r4, r5
 8009718:	428b      	cmp	r3, r1
 800971a:	bf04      	itt	eq
 800971c:	6819      	ldreq	r1, [r3, #0]
 800971e:	685b      	ldreq	r3, [r3, #4]
 8009720:	6063      	str	r3, [r4, #4]
 8009722:	bf04      	itt	eq
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	6054      	str	r4, [r2, #4]
 800972a:	e7c7      	b.n	80096bc <_free_r+0x28>
 800972c:	b003      	add	sp, #12
 800972e:	bd30      	pop	{r4, r5, pc}
 8009730:	20000278 	.word	0x20000278

08009734 <_malloc_r>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	1ccd      	adds	r5, r1, #3
 8009738:	f025 0503 	bic.w	r5, r5, #3
 800973c:	3508      	adds	r5, #8
 800973e:	2d0c      	cmp	r5, #12
 8009740:	bf38      	it	cc
 8009742:	250c      	movcc	r5, #12
 8009744:	2d00      	cmp	r5, #0
 8009746:	4606      	mov	r6, r0
 8009748:	db01      	blt.n	800974e <_malloc_r+0x1a>
 800974a:	42a9      	cmp	r1, r5
 800974c:	d903      	bls.n	8009756 <_malloc_r+0x22>
 800974e:	230c      	movs	r3, #12
 8009750:	6033      	str	r3, [r6, #0]
 8009752:	2000      	movs	r0, #0
 8009754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009756:	f000 fa25 	bl	8009ba4 <__malloc_lock>
 800975a:	4921      	ldr	r1, [pc, #132]	; (80097e0 <_malloc_r+0xac>)
 800975c:	680a      	ldr	r2, [r1, #0]
 800975e:	4614      	mov	r4, r2
 8009760:	b99c      	cbnz	r4, 800978a <_malloc_r+0x56>
 8009762:	4f20      	ldr	r7, [pc, #128]	; (80097e4 <_malloc_r+0xb0>)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	b923      	cbnz	r3, 8009772 <_malloc_r+0x3e>
 8009768:	4621      	mov	r1, r4
 800976a:	4630      	mov	r0, r6
 800976c:	f000 f9a0 	bl	8009ab0 <_sbrk_r>
 8009770:	6038      	str	r0, [r7, #0]
 8009772:	4629      	mov	r1, r5
 8009774:	4630      	mov	r0, r6
 8009776:	f000 f99b 	bl	8009ab0 <_sbrk_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d123      	bne.n	80097c6 <_malloc_r+0x92>
 800977e:	230c      	movs	r3, #12
 8009780:	6033      	str	r3, [r6, #0]
 8009782:	4630      	mov	r0, r6
 8009784:	f000 fa14 	bl	8009bb0 <__malloc_unlock>
 8009788:	e7e3      	b.n	8009752 <_malloc_r+0x1e>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	1b5b      	subs	r3, r3, r5
 800978e:	d417      	bmi.n	80097c0 <_malloc_r+0x8c>
 8009790:	2b0b      	cmp	r3, #11
 8009792:	d903      	bls.n	800979c <_malloc_r+0x68>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	441c      	add	r4, r3
 8009798:	6025      	str	r5, [r4, #0]
 800979a:	e004      	b.n	80097a6 <_malloc_r+0x72>
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	42a2      	cmp	r2, r4
 80097a0:	bf0c      	ite	eq
 80097a2:	600b      	streq	r3, [r1, #0]
 80097a4:	6053      	strne	r3, [r2, #4]
 80097a6:	4630      	mov	r0, r6
 80097a8:	f000 fa02 	bl	8009bb0 <__malloc_unlock>
 80097ac:	f104 000b 	add.w	r0, r4, #11
 80097b0:	1d23      	adds	r3, r4, #4
 80097b2:	f020 0007 	bic.w	r0, r0, #7
 80097b6:	1ac2      	subs	r2, r0, r3
 80097b8:	d0cc      	beq.n	8009754 <_malloc_r+0x20>
 80097ba:	1a1b      	subs	r3, r3, r0
 80097bc:	50a3      	str	r3, [r4, r2]
 80097be:	e7c9      	b.n	8009754 <_malloc_r+0x20>
 80097c0:	4622      	mov	r2, r4
 80097c2:	6864      	ldr	r4, [r4, #4]
 80097c4:	e7cc      	b.n	8009760 <_malloc_r+0x2c>
 80097c6:	1cc4      	adds	r4, r0, #3
 80097c8:	f024 0403 	bic.w	r4, r4, #3
 80097cc:	42a0      	cmp	r0, r4
 80097ce:	d0e3      	beq.n	8009798 <_malloc_r+0x64>
 80097d0:	1a21      	subs	r1, r4, r0
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 f96c 	bl	8009ab0 <_sbrk_r>
 80097d8:	3001      	adds	r0, #1
 80097da:	d1dd      	bne.n	8009798 <_malloc_r+0x64>
 80097dc:	e7cf      	b.n	800977e <_malloc_r+0x4a>
 80097de:	bf00      	nop
 80097e0:	20000278 	.word	0x20000278
 80097e4:	2000027c 	.word	0x2000027c

080097e8 <__ssputs_r>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	688e      	ldr	r6, [r1, #8]
 80097ee:	429e      	cmp	r6, r3
 80097f0:	4682      	mov	sl, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	4690      	mov	r8, r2
 80097f6:	461f      	mov	r7, r3
 80097f8:	d838      	bhi.n	800986c <__ssputs_r+0x84>
 80097fa:	898a      	ldrh	r2, [r1, #12]
 80097fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009800:	d032      	beq.n	8009868 <__ssputs_r+0x80>
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	6909      	ldr	r1, [r1, #16]
 8009806:	eba5 0901 	sub.w	r9, r5, r1
 800980a:	6965      	ldr	r5, [r4, #20]
 800980c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009814:	3301      	adds	r3, #1
 8009816:	444b      	add	r3, r9
 8009818:	106d      	asrs	r5, r5, #1
 800981a:	429d      	cmp	r5, r3
 800981c:	bf38      	it	cc
 800981e:	461d      	movcc	r5, r3
 8009820:	0553      	lsls	r3, r2, #21
 8009822:	d531      	bpl.n	8009888 <__ssputs_r+0xa0>
 8009824:	4629      	mov	r1, r5
 8009826:	f7ff ff85 	bl	8009734 <_malloc_r>
 800982a:	4606      	mov	r6, r0
 800982c:	b950      	cbnz	r0, 8009844 <__ssputs_r+0x5c>
 800982e:	230c      	movs	r3, #12
 8009830:	f8ca 3000 	str.w	r3, [sl]
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009844:	6921      	ldr	r1, [r4, #16]
 8009846:	464a      	mov	r2, r9
 8009848:	f7ff fa4c 	bl	8008ce4 <memcpy>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009856:	81a3      	strh	r3, [r4, #12]
 8009858:	6126      	str	r6, [r4, #16]
 800985a:	6165      	str	r5, [r4, #20]
 800985c:	444e      	add	r6, r9
 800985e:	eba5 0509 	sub.w	r5, r5, r9
 8009862:	6026      	str	r6, [r4, #0]
 8009864:	60a5      	str	r5, [r4, #8]
 8009866:	463e      	mov	r6, r7
 8009868:	42be      	cmp	r6, r7
 800986a:	d900      	bls.n	800986e <__ssputs_r+0x86>
 800986c:	463e      	mov	r6, r7
 800986e:	4632      	mov	r2, r6
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	4641      	mov	r1, r8
 8009874:	f000 f97c 	bl	8009b70 <memmove>
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	1b9b      	subs	r3, r3, r6
 800987e:	4432      	add	r2, r6
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	2000      	movs	r0, #0
 8009886:	e7db      	b.n	8009840 <__ssputs_r+0x58>
 8009888:	462a      	mov	r2, r5
 800988a:	f000 f997 	bl	8009bbc <_realloc_r>
 800988e:	4606      	mov	r6, r0
 8009890:	2800      	cmp	r0, #0
 8009892:	d1e1      	bne.n	8009858 <__ssputs_r+0x70>
 8009894:	6921      	ldr	r1, [r4, #16]
 8009896:	4650      	mov	r0, sl
 8009898:	f7ff fefc 	bl	8009694 <_free_r>
 800989c:	e7c7      	b.n	800982e <__ssputs_r+0x46>
	...

080098a0 <_svfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4698      	mov	r8, r3
 80098a6:	898b      	ldrh	r3, [r1, #12]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	b09d      	sub	sp, #116	; 0x74
 80098ac:	4607      	mov	r7, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	d50e      	bpl.n	80098d2 <_svfiprintf_r+0x32>
 80098b4:	690b      	ldr	r3, [r1, #16]
 80098b6:	b963      	cbnz	r3, 80098d2 <_svfiprintf_r+0x32>
 80098b8:	2140      	movs	r1, #64	; 0x40
 80098ba:	f7ff ff3b 	bl	8009734 <_malloc_r>
 80098be:	6028      	str	r0, [r5, #0]
 80098c0:	6128      	str	r0, [r5, #16]
 80098c2:	b920      	cbnz	r0, 80098ce <_svfiprintf_r+0x2e>
 80098c4:	230c      	movs	r3, #12
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e0d1      	b.n	8009a72 <_svfiprintf_r+0x1d2>
 80098ce:	2340      	movs	r3, #64	; 0x40
 80098d0:	616b      	str	r3, [r5, #20]
 80098d2:	2300      	movs	r3, #0
 80098d4:	9309      	str	r3, [sp, #36]	; 0x24
 80098d6:	2320      	movs	r3, #32
 80098d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e0:	2330      	movs	r3, #48	; 0x30
 80098e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a8c <_svfiprintf_r+0x1ec>
 80098e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ea:	f04f 0901 	mov.w	r9, #1
 80098ee:	4623      	mov	r3, r4
 80098f0:	469a      	mov	sl, r3
 80098f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f6:	b10a      	cbz	r2, 80098fc <_svfiprintf_r+0x5c>
 80098f8:	2a25      	cmp	r2, #37	; 0x25
 80098fa:	d1f9      	bne.n	80098f0 <_svfiprintf_r+0x50>
 80098fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009900:	d00b      	beq.n	800991a <_svfiprintf_r+0x7a>
 8009902:	465b      	mov	r3, fp
 8009904:	4622      	mov	r2, r4
 8009906:	4629      	mov	r1, r5
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff ff6d 	bl	80097e8 <__ssputs_r>
 800990e:	3001      	adds	r0, #1
 8009910:	f000 80aa 	beq.w	8009a68 <_svfiprintf_r+0x1c8>
 8009914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009916:	445a      	add	r2, fp
 8009918:	9209      	str	r2, [sp, #36]	; 0x24
 800991a:	f89a 3000 	ldrb.w	r3, [sl]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 80a2 	beq.w	8009a68 <_svfiprintf_r+0x1c8>
 8009924:	2300      	movs	r3, #0
 8009926:	f04f 32ff 	mov.w	r2, #4294967295
 800992a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800992e:	f10a 0a01 	add.w	sl, sl, #1
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	9307      	str	r3, [sp, #28]
 8009936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993a:	931a      	str	r3, [sp, #104]	; 0x68
 800993c:	4654      	mov	r4, sl
 800993e:	2205      	movs	r2, #5
 8009940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009944:	4851      	ldr	r0, [pc, #324]	; (8009a8c <_svfiprintf_r+0x1ec>)
 8009946:	f7f6 fc5b 	bl	8000200 <memchr>
 800994a:	9a04      	ldr	r2, [sp, #16]
 800994c:	b9d8      	cbnz	r0, 8009986 <_svfiprintf_r+0xe6>
 800994e:	06d0      	lsls	r0, r2, #27
 8009950:	bf44      	itt	mi
 8009952:	2320      	movmi	r3, #32
 8009954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009958:	0711      	lsls	r1, r2, #28
 800995a:	bf44      	itt	mi
 800995c:	232b      	movmi	r3, #43	; 0x2b
 800995e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009962:	f89a 3000 	ldrb.w	r3, [sl]
 8009966:	2b2a      	cmp	r3, #42	; 0x2a
 8009968:	d015      	beq.n	8009996 <_svfiprintf_r+0xf6>
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	4654      	mov	r4, sl
 800996e:	2000      	movs	r0, #0
 8009970:	f04f 0c0a 	mov.w	ip, #10
 8009974:	4621      	mov	r1, r4
 8009976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997a:	3b30      	subs	r3, #48	; 0x30
 800997c:	2b09      	cmp	r3, #9
 800997e:	d94e      	bls.n	8009a1e <_svfiprintf_r+0x17e>
 8009980:	b1b0      	cbz	r0, 80099b0 <_svfiprintf_r+0x110>
 8009982:	9207      	str	r2, [sp, #28]
 8009984:	e014      	b.n	80099b0 <_svfiprintf_r+0x110>
 8009986:	eba0 0308 	sub.w	r3, r0, r8
 800998a:	fa09 f303 	lsl.w	r3, r9, r3
 800998e:	4313      	orrs	r3, r2
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	46a2      	mov	sl, r4
 8009994:	e7d2      	b.n	800993c <_svfiprintf_r+0x9c>
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	1d19      	adds	r1, r3, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	9103      	str	r1, [sp, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bfbb      	ittet	lt
 80099a2:	425b      	neglt	r3, r3
 80099a4:	f042 0202 	orrlt.w	r2, r2, #2
 80099a8:	9307      	strge	r3, [sp, #28]
 80099aa:	9307      	strlt	r3, [sp, #28]
 80099ac:	bfb8      	it	lt
 80099ae:	9204      	strlt	r2, [sp, #16]
 80099b0:	7823      	ldrb	r3, [r4, #0]
 80099b2:	2b2e      	cmp	r3, #46	; 0x2e
 80099b4:	d10c      	bne.n	80099d0 <_svfiprintf_r+0x130>
 80099b6:	7863      	ldrb	r3, [r4, #1]
 80099b8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ba:	d135      	bne.n	8009a28 <_svfiprintf_r+0x188>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	1d1a      	adds	r2, r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9203      	str	r2, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bfb8      	it	lt
 80099c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099cc:	3402      	adds	r4, #2
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a9c <_svfiprintf_r+0x1fc>
 80099d4:	7821      	ldrb	r1, [r4, #0]
 80099d6:	2203      	movs	r2, #3
 80099d8:	4650      	mov	r0, sl
 80099da:	f7f6 fc11 	bl	8000200 <memchr>
 80099de:	b140      	cbz	r0, 80099f2 <_svfiprintf_r+0x152>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	eba0 000a 	sub.w	r0, r0, sl
 80099e6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	4303      	orrs	r3, r0
 80099ee:	3401      	adds	r4, #1
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f6:	4826      	ldr	r0, [pc, #152]	; (8009a90 <_svfiprintf_r+0x1f0>)
 80099f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099fc:	2206      	movs	r2, #6
 80099fe:	f7f6 fbff 	bl	8000200 <memchr>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d038      	beq.n	8009a78 <_svfiprintf_r+0x1d8>
 8009a06:	4b23      	ldr	r3, [pc, #140]	; (8009a94 <_svfiprintf_r+0x1f4>)
 8009a08:	bb1b      	cbnz	r3, 8009a52 <_svfiprintf_r+0x1b2>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	3307      	adds	r3, #7
 8009a0e:	f023 0307 	bic.w	r3, r3, #7
 8009a12:	3308      	adds	r3, #8
 8009a14:	9303      	str	r3, [sp, #12]
 8009a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a18:	4433      	add	r3, r6
 8009a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1c:	e767      	b.n	80098ee <_svfiprintf_r+0x4e>
 8009a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a22:	460c      	mov	r4, r1
 8009a24:	2001      	movs	r0, #1
 8009a26:	e7a5      	b.n	8009974 <_svfiprintf_r+0xd4>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	3401      	adds	r4, #1
 8009a2c:	9305      	str	r3, [sp, #20]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f04f 0c0a 	mov.w	ip, #10
 8009a34:	4620      	mov	r0, r4
 8009a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a3a:	3a30      	subs	r2, #48	; 0x30
 8009a3c:	2a09      	cmp	r2, #9
 8009a3e:	d903      	bls.n	8009a48 <_svfiprintf_r+0x1a8>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0c5      	beq.n	80099d0 <_svfiprintf_r+0x130>
 8009a44:	9105      	str	r1, [sp, #20]
 8009a46:	e7c3      	b.n	80099d0 <_svfiprintf_r+0x130>
 8009a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7f0      	b.n	8009a34 <_svfiprintf_r+0x194>
 8009a52:	ab03      	add	r3, sp, #12
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	462a      	mov	r2, r5
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <_svfiprintf_r+0x1f8>)
 8009a5a:	a904      	add	r1, sp, #16
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7fc fa77 	bl	8005f50 <_printf_float>
 8009a62:	1c42      	adds	r2, r0, #1
 8009a64:	4606      	mov	r6, r0
 8009a66:	d1d6      	bne.n	8009a16 <_svfiprintf_r+0x176>
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	065b      	lsls	r3, r3, #25
 8009a6c:	f53f af2c 	bmi.w	80098c8 <_svfiprintf_r+0x28>
 8009a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a72:	b01d      	add	sp, #116	; 0x74
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <_svfiprintf_r+0x1f8>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fc fd08 	bl	8006498 <_printf_i>
 8009a88:	e7eb      	b.n	8009a62 <_svfiprintf_r+0x1c2>
 8009a8a:	bf00      	nop
 8009a8c:	0800b0bc 	.word	0x0800b0bc
 8009a90:	0800b0c6 	.word	0x0800b0c6
 8009a94:	08005f51 	.word	0x08005f51
 8009a98:	080097e9 	.word	0x080097e9
 8009a9c:	0800b0c2 	.word	0x0800b0c2

08009aa0 <nan>:
 8009aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009aa8 <nan+0x8>
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	7ff80000 	.word	0x7ff80000

08009ab0 <_sbrk_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d06      	ldr	r5, [pc, #24]	; (8009acc <_sbrk_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f8 fa36 	bl	8001f2c <_sbrk>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_sbrk_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_sbrk_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200004e0 	.word	0x200004e0

08009ad0 <strncmp>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	b16a      	cbz	r2, 8009af0 <strncmp+0x20>
 8009ad4:	3901      	subs	r1, #1
 8009ad6:	1884      	adds	r4, r0, r2
 8009ad8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009adc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d103      	bne.n	8009aec <strncmp+0x1c>
 8009ae4:	42a0      	cmp	r0, r4
 8009ae6:	d001      	beq.n	8009aec <strncmp+0x1c>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f5      	bne.n	8009ad8 <strncmp+0x8>
 8009aec:	1a98      	subs	r0, r3, r2
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	4610      	mov	r0, r2
 8009af2:	e7fc      	b.n	8009aee <strncmp+0x1e>

08009af4 <__ascii_wctomb>:
 8009af4:	b149      	cbz	r1, 8009b0a <__ascii_wctomb+0x16>
 8009af6:	2aff      	cmp	r2, #255	; 0xff
 8009af8:	bf85      	ittet	hi
 8009afa:	238a      	movhi	r3, #138	; 0x8a
 8009afc:	6003      	strhi	r3, [r0, #0]
 8009afe:	700a      	strbls	r2, [r1, #0]
 8009b00:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b04:	bf98      	it	ls
 8009b06:	2001      	movls	r0, #1
 8009b08:	4770      	bx	lr
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	4770      	bx	lr
	...

08009b10 <__assert_func>:
 8009b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b12:	4614      	mov	r4, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <__assert_func+0x2c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	68d8      	ldr	r0, [r3, #12]
 8009b1e:	b14c      	cbz	r4, 8009b34 <__assert_func+0x24>
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <__assert_func+0x30>)
 8009b22:	9100      	str	r1, [sp, #0]
 8009b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b28:	4906      	ldr	r1, [pc, #24]	; (8009b44 <__assert_func+0x34>)
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	f000 f80e 	bl	8009b4c <fiprintf>
 8009b30:	f000 fa84 	bl	800a03c <abort>
 8009b34:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <__assert_func+0x38>)
 8009b36:	461c      	mov	r4, r3
 8009b38:	e7f3      	b.n	8009b22 <__assert_func+0x12>
 8009b3a:	bf00      	nop
 8009b3c:	2000001c 	.word	0x2000001c
 8009b40:	0800b0cd 	.word	0x0800b0cd
 8009b44:	0800b0da 	.word	0x0800b0da
 8009b48:	0800b108 	.word	0x0800b108

08009b4c <fiprintf>:
 8009b4c:	b40e      	push	{r1, r2, r3}
 8009b4e:	b503      	push	{r0, r1, lr}
 8009b50:	4601      	mov	r1, r0
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <fiprintf+0x20>)
 8009b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f000 f87d 	bl	8009c5c <_vfiprintf_r>
 8009b62:	b002      	add	sp, #8
 8009b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b68:	b003      	add	sp, #12
 8009b6a:	4770      	bx	lr
 8009b6c:	2000001c 	.word	0x2000001c

08009b70 <memmove>:
 8009b70:	4288      	cmp	r0, r1
 8009b72:	b510      	push	{r4, lr}
 8009b74:	eb01 0402 	add.w	r4, r1, r2
 8009b78:	d902      	bls.n	8009b80 <memmove+0x10>
 8009b7a:	4284      	cmp	r4, r0
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	d807      	bhi.n	8009b90 <memmove+0x20>
 8009b80:	1e43      	subs	r3, r0, #1
 8009b82:	42a1      	cmp	r1, r4
 8009b84:	d008      	beq.n	8009b98 <memmove+0x28>
 8009b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b8e:	e7f8      	b.n	8009b82 <memmove+0x12>
 8009b90:	4402      	add	r2, r0
 8009b92:	4601      	mov	r1, r0
 8009b94:	428a      	cmp	r2, r1
 8009b96:	d100      	bne.n	8009b9a <memmove+0x2a>
 8009b98:	bd10      	pop	{r4, pc}
 8009b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ba2:	e7f7      	b.n	8009b94 <memmove+0x24>

08009ba4 <__malloc_lock>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__malloc_lock+0x8>)
 8009ba6:	f000 bc09 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	200004e8 	.word	0x200004e8

08009bb0 <__malloc_unlock>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__malloc_unlock+0x8>)
 8009bb2:	f000 bc04 	b.w	800a3be <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	200004e8 	.word	0x200004e8

08009bbc <_realloc_r>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	b921      	cbnz	r1, 8009bd0 <_realloc_r+0x14>
 8009bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bca:	4611      	mov	r1, r2
 8009bcc:	f7ff bdb2 	b.w	8009734 <_malloc_r>
 8009bd0:	b922      	cbnz	r2, 8009bdc <_realloc_r+0x20>
 8009bd2:	f7ff fd5f 	bl	8009694 <_free_r>
 8009bd6:	4625      	mov	r5, r4
 8009bd8:	4628      	mov	r0, r5
 8009bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bdc:	f000 fc54 	bl	800a488 <_malloc_usable_size_r>
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d20f      	bcs.n	8009c04 <_realloc_r+0x48>
 8009be4:	4621      	mov	r1, r4
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff fda4 	bl	8009734 <_malloc_r>
 8009bec:	4605      	mov	r5, r0
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d0f2      	beq.n	8009bd8 <_realloc_r+0x1c>
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4622      	mov	r2, r4
 8009bf6:	f7ff f875 	bl	8008ce4 <memcpy>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff fd49 	bl	8009694 <_free_r>
 8009c02:	e7e9      	b.n	8009bd8 <_realloc_r+0x1c>
 8009c04:	4635      	mov	r5, r6
 8009c06:	e7e7      	b.n	8009bd8 <_realloc_r+0x1c>

08009c08 <__sfputc_r>:
 8009c08:	6893      	ldr	r3, [r2, #8]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	b410      	push	{r4}
 8009c10:	6093      	str	r3, [r2, #8]
 8009c12:	da08      	bge.n	8009c26 <__sfputc_r+0x1e>
 8009c14:	6994      	ldr	r4, [r2, #24]
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	db01      	blt.n	8009c1e <__sfputc_r+0x16>
 8009c1a:	290a      	cmp	r1, #10
 8009c1c:	d103      	bne.n	8009c26 <__sfputc_r+0x1e>
 8009c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c22:	f000 b94b 	b.w	8009ebc <__swbuf_r>
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	1c58      	adds	r0, r3, #1
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	7019      	strb	r1, [r3, #0]
 8009c2e:	4608      	mov	r0, r1
 8009c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <__sfputs_r>:
 8009c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c38:	4606      	mov	r6, r0
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	18d5      	adds	r5, r2, r3
 8009c40:	42ac      	cmp	r4, r5
 8009c42:	d101      	bne.n	8009c48 <__sfputs_r+0x12>
 8009c44:	2000      	movs	r0, #0
 8009c46:	e007      	b.n	8009c58 <__sfputs_r+0x22>
 8009c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7ff ffda 	bl	8009c08 <__sfputc_r>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d1f3      	bne.n	8009c40 <__sfputs_r+0xa>
 8009c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c5c <_vfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	460d      	mov	r5, r1
 8009c62:	b09d      	sub	sp, #116	; 0x74
 8009c64:	4614      	mov	r4, r2
 8009c66:	4698      	mov	r8, r3
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b118      	cbz	r0, 8009c74 <_vfiprintf_r+0x18>
 8009c6c:	6983      	ldr	r3, [r0, #24]
 8009c6e:	b90b      	cbnz	r3, 8009c74 <_vfiprintf_r+0x18>
 8009c70:	f000 fb06 	bl	800a280 <__sinit>
 8009c74:	4b89      	ldr	r3, [pc, #548]	; (8009e9c <_vfiprintf_r+0x240>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	d11b      	bne.n	8009cb2 <_vfiprintf_r+0x56>
 8009c7a:	6875      	ldr	r5, [r6, #4]
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f000 fb97 	bl	800a3bc <__retarget_lock_acquire_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	071b      	lsls	r3, r3, #28
 8009c92:	d501      	bpl.n	8009c98 <_vfiprintf_r+0x3c>
 8009c94:	692b      	ldr	r3, [r5, #16]
 8009c96:	b9eb      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x78>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f000 f960 	bl	8009f60 <__swsetup_r>
 8009ca0:	b1c0      	cbz	r0, 8009cd4 <_vfiprintf_r+0x78>
 8009ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca4:	07dc      	lsls	r4, r3, #31
 8009ca6:	d50e      	bpl.n	8009cc6 <_vfiprintf_r+0x6a>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b01d      	add	sp, #116	; 0x74
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <_vfiprintf_r+0x244>)
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d101      	bne.n	8009cbc <_vfiprintf_r+0x60>
 8009cb8:	68b5      	ldr	r5, [r6, #8]
 8009cba:	e7df      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <_vfiprintf_r+0x248>)
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf08      	it	eq
 8009cc2:	68f5      	ldreq	r5, [r6, #12]
 8009cc4:	e7da      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	0598      	lsls	r0, r3, #22
 8009cca:	d4ed      	bmi.n	8009ca8 <_vfiprintf_r+0x4c>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cce:	f000 fb76 	bl	800a3be <__retarget_lock_release_recursive>
 8009cd2:	e7e9      	b.n	8009ca8 <_vfiprintf_r+0x4c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ea8 <_vfiprintf_r+0x24c>
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_vfiprintf_r+0xa2>
 8009cfa:	2a25      	cmp	r2, #37	; 0x25
 8009cfc:	d1f9      	bne.n	8009cf2 <_vfiprintf_r+0x96>
 8009cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009d02:	d00b      	beq.n	8009d1c <_vfiprintf_r+0xc0>
 8009d04:	465b      	mov	r3, fp
 8009d06:	4622      	mov	r2, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ff93 	bl	8009c36 <__sfputs_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f000 80aa 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d18:	445a      	add	r2, fp
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80a2 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	f10a 0a01 	add.w	sl, sl, #1
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2205      	movs	r2, #5
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4858      	ldr	r0, [pc, #352]	; (8009ea8 <_vfiprintf_r+0x24c>)
 8009d48:	f7f6 fa5a 	bl	8000200 <memchr>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	b9d8      	cbnz	r0, 8009d88 <_vfiprintf_r+0x12c>
 8009d50:	06d1      	lsls	r1, r2, #27
 8009d52:	bf44      	itt	mi
 8009d54:	2320      	movmi	r3, #32
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	0713      	lsls	r3, r2, #28
 8009d5c:	bf44      	itt	mi
 8009d5e:	232b      	movmi	r3, #43	; 0x2b
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	d015      	beq.n	8009d98 <_vfiprintf_r+0x13c>
 8009d6c:	9a07      	ldr	r2, [sp, #28]
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2000      	movs	r0, #0
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4621      	mov	r1, r4
 8009d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7c:	3b30      	subs	r3, #48	; 0x30
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d94e      	bls.n	8009e20 <_vfiprintf_r+0x1c4>
 8009d82:	b1b0      	cbz	r0, 8009db2 <_vfiprintf_r+0x156>
 8009d84:	9207      	str	r2, [sp, #28]
 8009d86:	e014      	b.n	8009db2 <_vfiprintf_r+0x156>
 8009d88:	eba0 0308 	sub.w	r3, r0, r8
 8009d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	46a2      	mov	sl, r4
 8009d96:	e7d2      	b.n	8009d3e <_vfiprintf_r+0xe2>
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbb      	ittet	lt
 8009da4:	425b      	neglt	r3, r3
 8009da6:	f042 0202 	orrlt.w	r2, r2, #2
 8009daa:	9307      	strge	r3, [sp, #28]
 8009dac:	9307      	strlt	r3, [sp, #28]
 8009dae:	bfb8      	it	lt
 8009db0:	9204      	strlt	r2, [sp, #16]
 8009db2:	7823      	ldrb	r3, [r4, #0]
 8009db4:	2b2e      	cmp	r3, #46	; 0x2e
 8009db6:	d10c      	bne.n	8009dd2 <_vfiprintf_r+0x176>
 8009db8:	7863      	ldrb	r3, [r4, #1]
 8009dba:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbc:	d135      	bne.n	8009e2a <_vfiprintf_r+0x1ce>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9203      	str	r2, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfb8      	it	lt
 8009dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dce:	3402      	adds	r4, #2
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009eb8 <_vfiprintf_r+0x25c>
 8009dd6:	7821      	ldrb	r1, [r4, #0]
 8009dd8:	2203      	movs	r2, #3
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fa10 	bl	8000200 <memchr>
 8009de0:	b140      	cbz	r0, 8009df4 <_vfiprintf_r+0x198>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	eba0 000a 	sub.w	r0, r0, sl
 8009de8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	4303      	orrs	r3, r0
 8009df0:	3401      	adds	r4, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	482c      	ldr	r0, [pc, #176]	; (8009eac <_vfiprintf_r+0x250>)
 8009dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfe:	2206      	movs	r2, #6
 8009e00:	f7f6 f9fe 	bl	8000200 <memchr>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d03f      	beq.n	8009e88 <_vfiprintf_r+0x22c>
 8009e08:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <_vfiprintf_r+0x254>)
 8009e0a:	bb1b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x1f8>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	3307      	adds	r3, #7
 8009e10:	f023 0307 	bic.w	r3, r3, #7
 8009e14:	3308      	adds	r3, #8
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	443b      	add	r3, r7
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	e767      	b.n	8009cf0 <_vfiprintf_r+0x94>
 8009e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e24:	460c      	mov	r4, r1
 8009e26:	2001      	movs	r0, #1
 8009e28:	e7a5      	b.n	8009d76 <_vfiprintf_r+0x11a>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f04f 0c0a 	mov.w	ip, #10
 8009e36:	4620      	mov	r0, r4
 8009e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3c:	3a30      	subs	r2, #48	; 0x30
 8009e3e:	2a09      	cmp	r2, #9
 8009e40:	d903      	bls.n	8009e4a <_vfiprintf_r+0x1ee>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c5      	beq.n	8009dd2 <_vfiprintf_r+0x176>
 8009e46:	9105      	str	r1, [sp, #20]
 8009e48:	e7c3      	b.n	8009dd2 <_vfiprintf_r+0x176>
 8009e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4e:	4604      	mov	r4, r0
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7f0      	b.n	8009e36 <_vfiprintf_r+0x1da>
 8009e54:	ab03      	add	r3, sp, #12
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7fc f876 	bl	8005f50 <_printf_float>
 8009e64:	4607      	mov	r7, r0
 8009e66:	1c78      	adds	r0, r7, #1
 8009e68:	d1d6      	bne.n	8009e18 <_vfiprintf_r+0x1bc>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6c:	07d9      	lsls	r1, r3, #31
 8009e6e:	d405      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e70:	89ab      	ldrh	r3, [r5, #12]
 8009e72:	059a      	lsls	r2, r3, #22
 8009e74:	d402      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e78:	f000 faa1 	bl	800a3be <__retarget_lock_release_recursive>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af12 	bmi.w	8009ca8 <_vfiprintf_r+0x4c>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	e711      	b.n	8009cac <_vfiprintf_r+0x50>
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7fc fb00 	bl	8006498 <_printf_i>
 8009e98:	e7e4      	b.n	8009e64 <_vfiprintf_r+0x208>
 8009e9a:	bf00      	nop
 8009e9c:	0800b12c 	.word	0x0800b12c
 8009ea0:	0800b14c 	.word	0x0800b14c
 8009ea4:	0800b10c 	.word	0x0800b10c
 8009ea8:	0800b0bc 	.word	0x0800b0bc
 8009eac:	0800b0c6 	.word	0x0800b0c6
 8009eb0:	08005f51 	.word	0x08005f51
 8009eb4:	08009c37 	.word	0x08009c37
 8009eb8:	0800b0c2 	.word	0x0800b0c2

08009ebc <__swbuf_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	b118      	cbz	r0, 8009ece <__swbuf_r+0x12>
 8009ec6:	6983      	ldr	r3, [r0, #24]
 8009ec8:	b90b      	cbnz	r3, 8009ece <__swbuf_r+0x12>
 8009eca:	f000 f9d9 	bl	800a280 <__sinit>
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <__swbuf_r+0x98>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	d12b      	bne.n	8009f2c <__swbuf_r+0x70>
 8009ed4:	686c      	ldr	r4, [r5, #4]
 8009ed6:	69a3      	ldr	r3, [r4, #24]
 8009ed8:	60a3      	str	r3, [r4, #8]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	071a      	lsls	r2, r3, #28
 8009ede:	d52f      	bpl.n	8009f40 <__swbuf_r+0x84>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	b36b      	cbz	r3, 8009f40 <__swbuf_r+0x84>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	1ac0      	subs	r0, r0, r3
 8009eea:	6963      	ldr	r3, [r4, #20]
 8009eec:	b2f6      	uxtb	r6, r6
 8009eee:	4283      	cmp	r3, r0
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	dc04      	bgt.n	8009efe <__swbuf_r+0x42>
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f000 f92e 	bl	800a158 <_fflush_r>
 8009efc:	bb30      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	6022      	str	r2, [r4, #0]
 8009f0a:	701e      	strb	r6, [r3, #0]
 8009f0c:	6963      	ldr	r3, [r4, #20]
 8009f0e:	3001      	adds	r0, #1
 8009f10:	4283      	cmp	r3, r0
 8009f12:	d004      	beq.n	8009f1e <__swbuf_r+0x62>
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	07db      	lsls	r3, r3, #31
 8009f18:	d506      	bpl.n	8009f28 <__swbuf_r+0x6c>
 8009f1a:	2e0a      	cmp	r6, #10
 8009f1c:	d104      	bne.n	8009f28 <__swbuf_r+0x6c>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f919 	bl	800a158 <_fflush_r>
 8009f26:	b988      	cbnz	r0, 8009f4c <__swbuf_r+0x90>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <__swbuf_r+0x9c>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swbuf_r+0x7a>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7cf      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <__swbuf_r+0xa0>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7ca      	b.n	8009ed6 <__swbuf_r+0x1a>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4628      	mov	r0, r5
 8009f44:	f000 f80c 	bl	8009f60 <__swsetup_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0cb      	beq.n	8009ee4 <__swbuf_r+0x28>
 8009f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f50:	e7ea      	b.n	8009f28 <__swbuf_r+0x6c>
 8009f52:	bf00      	nop
 8009f54:	0800b12c 	.word	0x0800b12c
 8009f58:	0800b14c 	.word	0x0800b14c
 8009f5c:	0800b10c 	.word	0x0800b10c

08009f60 <__swsetup_r>:
 8009f60:	4b32      	ldr	r3, [pc, #200]	; (800a02c <__swsetup_r+0xcc>)
 8009f62:	b570      	push	{r4, r5, r6, lr}
 8009f64:	681d      	ldr	r5, [r3, #0]
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	b125      	cbz	r5, 8009f76 <__swsetup_r+0x16>
 8009f6c:	69ab      	ldr	r3, [r5, #24]
 8009f6e:	b913      	cbnz	r3, 8009f76 <__swsetup_r+0x16>
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 f985 	bl	800a280 <__sinit>
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <__swsetup_r+0xd0>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	d10f      	bne.n	8009f9c <__swsetup_r+0x3c>
 8009f7c:	686c      	ldr	r4, [r5, #4]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f84:	0719      	lsls	r1, r3, #28
 8009f86:	d42c      	bmi.n	8009fe2 <__swsetup_r+0x82>
 8009f88:	06dd      	lsls	r5, r3, #27
 8009f8a:	d411      	bmi.n	8009fb0 <__swsetup_r+0x50>
 8009f8c:	2309      	movs	r3, #9
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	e03e      	b.n	800a01a <__swsetup_r+0xba>
 8009f9c:	4b25      	ldr	r3, [pc, #148]	; (800a034 <__swsetup_r+0xd4>)
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	d101      	bne.n	8009fa6 <__swsetup_r+0x46>
 8009fa2:	68ac      	ldr	r4, [r5, #8]
 8009fa4:	e7eb      	b.n	8009f7e <__swsetup_r+0x1e>
 8009fa6:	4b24      	ldr	r3, [pc, #144]	; (800a038 <__swsetup_r+0xd8>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	bf08      	it	eq
 8009fac:	68ec      	ldreq	r4, [r5, #12]
 8009fae:	e7e6      	b.n	8009f7e <__swsetup_r+0x1e>
 8009fb0:	0758      	lsls	r0, r3, #29
 8009fb2:	d512      	bpl.n	8009fda <__swsetup_r+0x7a>
 8009fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fb6:	b141      	cbz	r1, 8009fca <__swsetup_r+0x6a>
 8009fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fbc:	4299      	cmp	r1, r3
 8009fbe:	d002      	beq.n	8009fc6 <__swsetup_r+0x66>
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7ff fb67 	bl	8009694 <_free_r>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd0:	81a3      	strh	r3, [r4, #12]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6063      	str	r3, [r4, #4]
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f043 0308 	orr.w	r3, r3, #8
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	b94b      	cbnz	r3, 8009ffa <__swsetup_r+0x9a>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff0:	d003      	beq.n	8009ffa <__swsetup_r+0x9a>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 fa07 	bl	800a408 <__smakebuf_r>
 8009ffa:	89a0      	ldrh	r0, [r4, #12]
 8009ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a000:	f010 0301 	ands.w	r3, r0, #1
 800a004:	d00a      	beq.n	800a01c <__swsetup_r+0xbc>
 800a006:	2300      	movs	r3, #0
 800a008:	60a3      	str	r3, [r4, #8]
 800a00a:	6963      	ldr	r3, [r4, #20]
 800a00c:	425b      	negs	r3, r3
 800a00e:	61a3      	str	r3, [r4, #24]
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	b943      	cbnz	r3, 800a026 <__swsetup_r+0xc6>
 800a014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a018:	d1ba      	bne.n	8009f90 <__swsetup_r+0x30>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	0781      	lsls	r1, r0, #30
 800a01e:	bf58      	it	pl
 800a020:	6963      	ldrpl	r3, [r4, #20]
 800a022:	60a3      	str	r3, [r4, #8]
 800a024:	e7f4      	b.n	800a010 <__swsetup_r+0xb0>
 800a026:	2000      	movs	r0, #0
 800a028:	e7f7      	b.n	800a01a <__swsetup_r+0xba>
 800a02a:	bf00      	nop
 800a02c:	2000001c 	.word	0x2000001c
 800a030:	0800b12c 	.word	0x0800b12c
 800a034:	0800b14c 	.word	0x0800b14c
 800a038:	0800b10c 	.word	0x0800b10c

0800a03c <abort>:
 800a03c:	b508      	push	{r3, lr}
 800a03e:	2006      	movs	r0, #6
 800a040:	f000 fa52 	bl	800a4e8 <raise>
 800a044:	2001      	movs	r0, #1
 800a046:	f7f7 fef9 	bl	8001e3c <_exit>
	...

0800a04c <__sflush_r>:
 800a04c:	898a      	ldrh	r2, [r1, #12]
 800a04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a052:	4605      	mov	r5, r0
 800a054:	0710      	lsls	r0, r2, #28
 800a056:	460c      	mov	r4, r1
 800a058:	d458      	bmi.n	800a10c <__sflush_r+0xc0>
 800a05a:	684b      	ldr	r3, [r1, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dc05      	bgt.n	800a06c <__sflush_r+0x20>
 800a060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	dc02      	bgt.n	800a06c <__sflush_r+0x20>
 800a066:	2000      	movs	r0, #0
 800a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a06c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d0f9      	beq.n	800a066 <__sflush_r+0x1a>
 800a072:	2300      	movs	r3, #0
 800a074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a078:	682f      	ldr	r7, [r5, #0]
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	d032      	beq.n	800a0e4 <__sflush_r+0x98>
 800a07e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	075a      	lsls	r2, r3, #29
 800a084:	d505      	bpl.n	800a092 <__sflush_r+0x46>
 800a086:	6863      	ldr	r3, [r4, #4]
 800a088:	1ac0      	subs	r0, r0, r3
 800a08a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a08c:	b10b      	cbz	r3, 800a092 <__sflush_r+0x46>
 800a08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a090:	1ac0      	subs	r0, r0, r3
 800a092:	2300      	movs	r3, #0
 800a094:	4602      	mov	r2, r0
 800a096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a098:	6a21      	ldr	r1, [r4, #32]
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b0      	blx	r6
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	d106      	bne.n	800a0b2 <__sflush_r+0x66>
 800a0a4:	6829      	ldr	r1, [r5, #0]
 800a0a6:	291d      	cmp	r1, #29
 800a0a8:	d82c      	bhi.n	800a104 <__sflush_r+0xb8>
 800a0aa:	4a2a      	ldr	r2, [pc, #168]	; (800a154 <__sflush_r+0x108>)
 800a0ac:	40ca      	lsrs	r2, r1
 800a0ae:	07d6      	lsls	r6, r2, #31
 800a0b0:	d528      	bpl.n	800a104 <__sflush_r+0xb8>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6062      	str	r2, [r4, #4]
 800a0b6:	04d9      	lsls	r1, r3, #19
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	6022      	str	r2, [r4, #0]
 800a0bc:	d504      	bpl.n	800a0c8 <__sflush_r+0x7c>
 800a0be:	1c42      	adds	r2, r0, #1
 800a0c0:	d101      	bne.n	800a0c6 <__sflush_r+0x7a>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	b903      	cbnz	r3, 800a0c8 <__sflush_r+0x7c>
 800a0c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a0c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ca:	602f      	str	r7, [r5, #0]
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d0ca      	beq.n	800a066 <__sflush_r+0x1a>
 800a0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d002      	beq.n	800a0de <__sflush_r+0x92>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff fadb 	bl	8009694 <_free_r>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a0e2:	e7c1      	b.n	800a068 <__sflush_r+0x1c>
 800a0e4:	6a21      	ldr	r1, [r4, #32]
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b0      	blx	r6
 800a0ec:	1c41      	adds	r1, r0, #1
 800a0ee:	d1c7      	bne.n	800a080 <__sflush_r+0x34>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0c4      	beq.n	800a080 <__sflush_r+0x34>
 800a0f6:	2b1d      	cmp	r3, #29
 800a0f8:	d001      	beq.n	800a0fe <__sflush_r+0xb2>
 800a0fa:	2b16      	cmp	r3, #22
 800a0fc:	d101      	bne.n	800a102 <__sflush_r+0xb6>
 800a0fe:	602f      	str	r7, [r5, #0]
 800a100:	e7b1      	b.n	800a066 <__sflush_r+0x1a>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	e7ad      	b.n	800a068 <__sflush_r+0x1c>
 800a10c:	690f      	ldr	r7, [r1, #16]
 800a10e:	2f00      	cmp	r7, #0
 800a110:	d0a9      	beq.n	800a066 <__sflush_r+0x1a>
 800a112:	0793      	lsls	r3, r2, #30
 800a114:	680e      	ldr	r6, [r1, #0]
 800a116:	bf08      	it	eq
 800a118:	694b      	ldreq	r3, [r1, #20]
 800a11a:	600f      	str	r7, [r1, #0]
 800a11c:	bf18      	it	ne
 800a11e:	2300      	movne	r3, #0
 800a120:	eba6 0807 	sub.w	r8, r6, r7
 800a124:	608b      	str	r3, [r1, #8]
 800a126:	f1b8 0f00 	cmp.w	r8, #0
 800a12a:	dd9c      	ble.n	800a066 <__sflush_r+0x1a>
 800a12c:	6a21      	ldr	r1, [r4, #32]
 800a12e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a130:	4643      	mov	r3, r8
 800a132:	463a      	mov	r2, r7
 800a134:	4628      	mov	r0, r5
 800a136:	47b0      	blx	r6
 800a138:	2800      	cmp	r0, #0
 800a13a:	dc06      	bgt.n	800a14a <__sflush_r+0xfe>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e78e      	b.n	800a068 <__sflush_r+0x1c>
 800a14a:	4407      	add	r7, r0
 800a14c:	eba8 0800 	sub.w	r8, r8, r0
 800a150:	e7e9      	b.n	800a126 <__sflush_r+0xda>
 800a152:	bf00      	nop
 800a154:	20400001 	.word	0x20400001

0800a158 <_fflush_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	690b      	ldr	r3, [r1, #16]
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b913      	cbnz	r3, 800a168 <_fflush_r+0x10>
 800a162:	2500      	movs	r5, #0
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	b118      	cbz	r0, 800a172 <_fflush_r+0x1a>
 800a16a:	6983      	ldr	r3, [r0, #24]
 800a16c:	b90b      	cbnz	r3, 800a172 <_fflush_r+0x1a>
 800a16e:	f000 f887 	bl	800a280 <__sinit>
 800a172:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <_fflush_r+0x6c>)
 800a174:	429c      	cmp	r4, r3
 800a176:	d11b      	bne.n	800a1b0 <_fflush_r+0x58>
 800a178:	686c      	ldr	r4, [r5, #4]
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0ef      	beq.n	800a162 <_fflush_r+0xa>
 800a182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a184:	07d0      	lsls	r0, r2, #31
 800a186:	d404      	bmi.n	800a192 <_fflush_r+0x3a>
 800a188:	0599      	lsls	r1, r3, #22
 800a18a:	d402      	bmi.n	800a192 <_fflush_r+0x3a>
 800a18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18e:	f000 f915 	bl	800a3bc <__retarget_lock_acquire_recursive>
 800a192:	4628      	mov	r0, r5
 800a194:	4621      	mov	r1, r4
 800a196:	f7ff ff59 	bl	800a04c <__sflush_r>
 800a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a19c:	07da      	lsls	r2, r3, #31
 800a19e:	4605      	mov	r5, r0
 800a1a0:	d4e0      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	059b      	lsls	r3, r3, #22
 800a1a6:	d4dd      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f000 f908 	bl	800a3be <__retarget_lock_release_recursive>
 800a1ae:	e7d9      	b.n	800a164 <_fflush_r+0xc>
 800a1b0:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <_fflush_r+0x70>)
 800a1b2:	429c      	cmp	r4, r3
 800a1b4:	d101      	bne.n	800a1ba <_fflush_r+0x62>
 800a1b6:	68ac      	ldr	r4, [r5, #8]
 800a1b8:	e7df      	b.n	800a17a <_fflush_r+0x22>
 800a1ba:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <_fflush_r+0x74>)
 800a1bc:	429c      	cmp	r4, r3
 800a1be:	bf08      	it	eq
 800a1c0:	68ec      	ldreq	r4, [r5, #12]
 800a1c2:	e7da      	b.n	800a17a <_fflush_r+0x22>
 800a1c4:	0800b12c 	.word	0x0800b12c
 800a1c8:	0800b14c 	.word	0x0800b14c
 800a1cc:	0800b10c 	.word	0x0800b10c

0800a1d0 <std>:
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1de:	6083      	str	r3, [r0, #8]
 800a1e0:	8181      	strh	r1, [r0, #12]
 800a1e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1e4:	81c2      	strh	r2, [r0, #14]
 800a1e6:	6183      	str	r3, [r0, #24]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	2208      	movs	r2, #8
 800a1ec:	305c      	adds	r0, #92	; 0x5c
 800a1ee:	f7fb fe07 	bl	8005e00 <memset>
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x38>)
 800a1f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1f6:	4b05      	ldr	r3, [pc, #20]	; (800a20c <std+0x3c>)
 800a1f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <std+0x40>)
 800a1fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <std+0x44>)
 800a200:	6224      	str	r4, [r4, #32]
 800a202:	6323      	str	r3, [r4, #48]	; 0x30
 800a204:	bd10      	pop	{r4, pc}
 800a206:	bf00      	nop
 800a208:	0800a521 	.word	0x0800a521
 800a20c:	0800a543 	.word	0x0800a543
 800a210:	0800a57b 	.word	0x0800a57b
 800a214:	0800a59f 	.word	0x0800a59f

0800a218 <_cleanup_r>:
 800a218:	4901      	ldr	r1, [pc, #4]	; (800a220 <_cleanup_r+0x8>)
 800a21a:	f000 b8af 	b.w	800a37c <_fwalk_reent>
 800a21e:	bf00      	nop
 800a220:	0800a159 	.word	0x0800a159

0800a224 <__sfmoreglue>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	1e4a      	subs	r2, r1, #1
 800a228:	2568      	movs	r5, #104	; 0x68
 800a22a:	4355      	muls	r5, r2
 800a22c:	460e      	mov	r6, r1
 800a22e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a232:	f7ff fa7f 	bl	8009734 <_malloc_r>
 800a236:	4604      	mov	r4, r0
 800a238:	b140      	cbz	r0, 800a24c <__sfmoreglue+0x28>
 800a23a:	2100      	movs	r1, #0
 800a23c:	e9c0 1600 	strd	r1, r6, [r0]
 800a240:	300c      	adds	r0, #12
 800a242:	60a0      	str	r0, [r4, #8]
 800a244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a248:	f7fb fdda 	bl	8005e00 <memset>
 800a24c:	4620      	mov	r0, r4
 800a24e:	bd70      	pop	{r4, r5, r6, pc}

0800a250 <__sfp_lock_acquire>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_acquire+0x8>)
 800a252:	f000 b8b3 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 800a256:	bf00      	nop
 800a258:	200004ec 	.word	0x200004ec

0800a25c <__sfp_lock_release>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sfp_lock_release+0x8>)
 800a25e:	f000 b8ae 	b.w	800a3be <__retarget_lock_release_recursive>
 800a262:	bf00      	nop
 800a264:	200004ec 	.word	0x200004ec

0800a268 <__sinit_lock_acquire>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sinit_lock_acquire+0x8>)
 800a26a:	f000 b8a7 	b.w	800a3bc <__retarget_lock_acquire_recursive>
 800a26e:	bf00      	nop
 800a270:	200004e7 	.word	0x200004e7

0800a274 <__sinit_lock_release>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__sinit_lock_release+0x8>)
 800a276:	f000 b8a2 	b.w	800a3be <__retarget_lock_release_recursive>
 800a27a:	bf00      	nop
 800a27c:	200004e7 	.word	0x200004e7

0800a280 <__sinit>:
 800a280:	b510      	push	{r4, lr}
 800a282:	4604      	mov	r4, r0
 800a284:	f7ff fff0 	bl	800a268 <__sinit_lock_acquire>
 800a288:	69a3      	ldr	r3, [r4, #24]
 800a28a:	b11b      	cbz	r3, 800a294 <__sinit+0x14>
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a290:	f7ff bff0 	b.w	800a274 <__sinit_lock_release>
 800a294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a298:	6523      	str	r3, [r4, #80]	; 0x50
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <__sinit+0x68>)
 800a29c:	4a13      	ldr	r2, [pc, #76]	; (800a2ec <__sinit+0x6c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	bf04      	itt	eq
 800a2a6:	2301      	moveq	r3, #1
 800a2a8:	61a3      	streq	r3, [r4, #24]
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f820 	bl	800a2f0 <__sfp>
 800a2b0:	6060      	str	r0, [r4, #4]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 f81c 	bl	800a2f0 <__sfp>
 800a2b8:	60a0      	str	r0, [r4, #8]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 f818 	bl	800a2f0 <__sfp>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	60e0      	str	r0, [r4, #12]
 800a2c4:	2104      	movs	r1, #4
 800a2c6:	6860      	ldr	r0, [r4, #4]
 800a2c8:	f7ff ff82 	bl	800a1d0 <std>
 800a2cc:	68a0      	ldr	r0, [r4, #8]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	2109      	movs	r1, #9
 800a2d2:	f7ff ff7d 	bl	800a1d0 <std>
 800a2d6:	68e0      	ldr	r0, [r4, #12]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	2112      	movs	r1, #18
 800a2dc:	f7ff ff78 	bl	800a1d0 <std>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	61a3      	str	r3, [r4, #24]
 800a2e4:	e7d2      	b.n	800a28c <__sinit+0xc>
 800a2e6:	bf00      	nop
 800a2e8:	0800acb4 	.word	0x0800acb4
 800a2ec:	0800a219 	.word	0x0800a219

0800a2f0 <__sfp>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	f7ff ffac 	bl	800a250 <__sfp_lock_acquire>
 800a2f8:	4b1e      	ldr	r3, [pc, #120]	; (800a374 <__sfp+0x84>)
 800a2fa:	681e      	ldr	r6, [r3, #0]
 800a2fc:	69b3      	ldr	r3, [r6, #24]
 800a2fe:	b913      	cbnz	r3, 800a306 <__sfp+0x16>
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff ffbd 	bl	800a280 <__sinit>
 800a306:	3648      	adds	r6, #72	; 0x48
 800a308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	d503      	bpl.n	800a318 <__sfp+0x28>
 800a310:	6833      	ldr	r3, [r6, #0]
 800a312:	b30b      	cbz	r3, 800a358 <__sfp+0x68>
 800a314:	6836      	ldr	r6, [r6, #0]
 800a316:	e7f7      	b.n	800a308 <__sfp+0x18>
 800a318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a31c:	b9d5      	cbnz	r5, 800a354 <__sfp+0x64>
 800a31e:	4b16      	ldr	r3, [pc, #88]	; (800a378 <__sfp+0x88>)
 800a320:	60e3      	str	r3, [r4, #12]
 800a322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a326:	6665      	str	r5, [r4, #100]	; 0x64
 800a328:	f000 f847 	bl	800a3ba <__retarget_lock_init_recursive>
 800a32c:	f7ff ff96 	bl	800a25c <__sfp_lock_release>
 800a330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a338:	6025      	str	r5, [r4, #0]
 800a33a:	61a5      	str	r5, [r4, #24]
 800a33c:	2208      	movs	r2, #8
 800a33e:	4629      	mov	r1, r5
 800a340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a344:	f7fb fd5c 	bl	8005e00 <memset>
 800a348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a34c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a350:	4620      	mov	r0, r4
 800a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a354:	3468      	adds	r4, #104	; 0x68
 800a356:	e7d9      	b.n	800a30c <__sfp+0x1c>
 800a358:	2104      	movs	r1, #4
 800a35a:	4638      	mov	r0, r7
 800a35c:	f7ff ff62 	bl	800a224 <__sfmoreglue>
 800a360:	4604      	mov	r4, r0
 800a362:	6030      	str	r0, [r6, #0]
 800a364:	2800      	cmp	r0, #0
 800a366:	d1d5      	bne.n	800a314 <__sfp+0x24>
 800a368:	f7ff ff78 	bl	800a25c <__sfp_lock_release>
 800a36c:	230c      	movs	r3, #12
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	e7ee      	b.n	800a350 <__sfp+0x60>
 800a372:	bf00      	nop
 800a374:	0800acb4 	.word	0x0800acb4
 800a378:	ffff0001 	.word	0xffff0001

0800a37c <_fwalk_reent>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4606      	mov	r6, r0
 800a382:	4688      	mov	r8, r1
 800a384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a388:	2700      	movs	r7, #0
 800a38a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a38e:	f1b9 0901 	subs.w	r9, r9, #1
 800a392:	d505      	bpl.n	800a3a0 <_fwalk_reent+0x24>
 800a394:	6824      	ldr	r4, [r4, #0]
 800a396:	2c00      	cmp	r4, #0
 800a398:	d1f7      	bne.n	800a38a <_fwalk_reent+0xe>
 800a39a:	4638      	mov	r0, r7
 800a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a0:	89ab      	ldrh	r3, [r5, #12]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d907      	bls.n	800a3b6 <_fwalk_reent+0x3a>
 800a3a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	d003      	beq.n	800a3b6 <_fwalk_reent+0x3a>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	47c0      	blx	r8
 800a3b4:	4307      	orrs	r7, r0
 800a3b6:	3568      	adds	r5, #104	; 0x68
 800a3b8:	e7e9      	b.n	800a38e <_fwalk_reent+0x12>

0800a3ba <__retarget_lock_init_recursive>:
 800a3ba:	4770      	bx	lr

0800a3bc <__retarget_lock_acquire_recursive>:
 800a3bc:	4770      	bx	lr

0800a3be <__retarget_lock_release_recursive>:
 800a3be:	4770      	bx	lr

0800a3c0 <__swhatbuf_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	461d      	mov	r5, r3
 800a3d0:	da07      	bge.n	800a3e2 <__swhatbuf_r+0x22>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	89b3      	ldrh	r3, [r6, #12]
 800a3d8:	061a      	lsls	r2, r3, #24
 800a3da:	d410      	bmi.n	800a3fe <__swhatbuf_r+0x3e>
 800a3dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e0:	e00e      	b.n	800a400 <__swhatbuf_r+0x40>
 800a3e2:	466a      	mov	r2, sp
 800a3e4:	f000 f902 	bl	800a5ec <_fstat_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dbf2      	blt.n	800a3d2 <__swhatbuf_r+0x12>
 800a3ec:	9a01      	ldr	r2, [sp, #4]
 800a3ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3f6:	425a      	negs	r2, r3
 800a3f8:	415a      	adcs	r2, r3
 800a3fa:	602a      	str	r2, [r5, #0]
 800a3fc:	e7ee      	b.n	800a3dc <__swhatbuf_r+0x1c>
 800a3fe:	2340      	movs	r3, #64	; 0x40
 800a400:	2000      	movs	r0, #0
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	b016      	add	sp, #88	; 0x58
 800a406:	bd70      	pop	{r4, r5, r6, pc}

0800a408 <__smakebuf_r>:
 800a408:	898b      	ldrh	r3, [r1, #12]
 800a40a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a40c:	079d      	lsls	r5, r3, #30
 800a40e:	4606      	mov	r6, r0
 800a410:	460c      	mov	r4, r1
 800a412:	d507      	bpl.n	800a424 <__smakebuf_r+0x1c>
 800a414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	2301      	movs	r3, #1
 800a41e:	6163      	str	r3, [r4, #20]
 800a420:	b002      	add	sp, #8
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	ab01      	add	r3, sp, #4
 800a426:	466a      	mov	r2, sp
 800a428:	f7ff ffca 	bl	800a3c0 <__swhatbuf_r>
 800a42c:	9900      	ldr	r1, [sp, #0]
 800a42e:	4605      	mov	r5, r0
 800a430:	4630      	mov	r0, r6
 800a432:	f7ff f97f 	bl	8009734 <_malloc_r>
 800a436:	b948      	cbnz	r0, 800a44c <__smakebuf_r+0x44>
 800a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d4ef      	bmi.n	800a420 <__smakebuf_r+0x18>
 800a440:	f023 0303 	bic.w	r3, r3, #3
 800a444:	f043 0302 	orr.w	r3, r3, #2
 800a448:	81a3      	strh	r3, [r4, #12]
 800a44a:	e7e3      	b.n	800a414 <__smakebuf_r+0xc>
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <__smakebuf_r+0x7c>)
 800a44e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	9b00      	ldr	r3, [sp, #0]
 800a45c:	6163      	str	r3, [r4, #20]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	6120      	str	r0, [r4, #16]
 800a462:	b15b      	cbz	r3, 800a47c <__smakebuf_r+0x74>
 800a464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f8d1 	bl	800a610 <_isatty_r>
 800a46e:	b128      	cbz	r0, 800a47c <__smakebuf_r+0x74>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	89a0      	ldrh	r0, [r4, #12]
 800a47e:	4305      	orrs	r5, r0
 800a480:	81a5      	strh	r5, [r4, #12]
 800a482:	e7cd      	b.n	800a420 <__smakebuf_r+0x18>
 800a484:	0800a219 	.word	0x0800a219

0800a488 <_malloc_usable_size_r>:
 800a488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a48c:	1f18      	subs	r0, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfbc      	itt	lt
 800a492:	580b      	ldrlt	r3, [r1, r0]
 800a494:	18c0      	addlt	r0, r0, r3
 800a496:	4770      	bx	lr

0800a498 <_raise_r>:
 800a498:	291f      	cmp	r1, #31
 800a49a:	b538      	push	{r3, r4, r5, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	d904      	bls.n	800a4ac <_raise_r+0x14>
 800a4a2:	2316      	movs	r3, #22
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ae:	b112      	cbz	r2, 800a4b6 <_raise_r+0x1e>
 800a4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4b4:	b94b      	cbnz	r3, 800a4ca <_raise_r+0x32>
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f830 	bl	800a51c <_getpid_r>
 800a4bc:	462a      	mov	r2, r5
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c6:	f000 b817 	b.w	800a4f8 <_kill_r>
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d00a      	beq.n	800a4e4 <_raise_r+0x4c>
 800a4ce:	1c59      	adds	r1, r3, #1
 800a4d0:	d103      	bne.n	800a4da <_raise_r+0x42>
 800a4d2:	2316      	movs	r3, #22
 800a4d4:	6003      	str	r3, [r0, #0]
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	e7e7      	b.n	800a4aa <_raise_r+0x12>
 800a4da:	2400      	movs	r4, #0
 800a4dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	4798      	blx	r3
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e7e0      	b.n	800a4aa <_raise_r+0x12>

0800a4e8 <raise>:
 800a4e8:	4b02      	ldr	r3, [pc, #8]	; (800a4f4 <raise+0xc>)
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	f7ff bfd3 	b.w	800a498 <_raise_r>
 800a4f2:	bf00      	nop
 800a4f4:	2000001c 	.word	0x2000001c

0800a4f8 <_kill_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d07      	ldr	r5, [pc, #28]	; (800a518 <_kill_r+0x20>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	4611      	mov	r1, r2
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	f7f7 fc89 	bl	8001e1c <_kill>
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	d102      	bne.n	800a514 <_kill_r+0x1c>
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	b103      	cbz	r3, 800a514 <_kill_r+0x1c>
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	bd38      	pop	{r3, r4, r5, pc}
 800a516:	bf00      	nop
 800a518:	200004e0 	.word	0x200004e0

0800a51c <_getpid_r>:
 800a51c:	f7f7 bc76 	b.w	8001e0c <_getpid>

0800a520 <__sread>:
 800a520:	b510      	push	{r4, lr}
 800a522:	460c      	mov	r4, r1
 800a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a528:	f000 f894 	bl	800a654 <_read_r>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	bfab      	itete	ge
 800a530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a532:	89a3      	ldrhlt	r3, [r4, #12]
 800a534:	181b      	addge	r3, r3, r0
 800a536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a53a:	bfac      	ite	ge
 800a53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a53e:	81a3      	strhlt	r3, [r4, #12]
 800a540:	bd10      	pop	{r4, pc}

0800a542 <__swrite>:
 800a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a546:	461f      	mov	r7, r3
 800a548:	898b      	ldrh	r3, [r1, #12]
 800a54a:	05db      	lsls	r3, r3, #23
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	4616      	mov	r6, r2
 800a552:	d505      	bpl.n	800a560 <__swrite+0x1e>
 800a554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a558:	2302      	movs	r3, #2
 800a55a:	2200      	movs	r2, #0
 800a55c:	f000 f868 	bl	800a630 <_lseek_r>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a576:	f000 b817 	b.w	800a5a8 <_write_r>

0800a57a <__sseek>:
 800a57a:	b510      	push	{r4, lr}
 800a57c:	460c      	mov	r4, r1
 800a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a582:	f000 f855 	bl	800a630 <_lseek_r>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	bf15      	itete	ne
 800a58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a596:	81a3      	strheq	r3, [r4, #12]
 800a598:	bf18      	it	ne
 800a59a:	81a3      	strhne	r3, [r4, #12]
 800a59c:	bd10      	pop	{r4, pc}

0800a59e <__sclose>:
 800a59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a2:	f000 b813 	b.w	800a5cc <_close_r>
	...

0800a5a8 <_write_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_write_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 fc67 	bl	8001e8a <_write>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_write_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_write_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	200004e0 	.word	0x200004e0

0800a5cc <_close_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d06      	ldr	r5, [pc, #24]	; (800a5e8 <_close_r+0x1c>)
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	602b      	str	r3, [r5, #0]
 800a5d8:	f7f7 fc73 	bl	8001ec2 <_close>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_close_r+0x1a>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_close_r+0x1a>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	200004e0 	.word	0x200004e0

0800a5ec <_fstat_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	; (800a60c <_fstat_r+0x20>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	f7f7 fc6e 	bl	8001eda <_fstat>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d102      	bne.n	800a608 <_fstat_r+0x1c>
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	b103      	cbz	r3, 800a608 <_fstat_r+0x1c>
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	200004e0 	.word	0x200004e0

0800a610 <_isatty_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	; (800a62c <_isatty_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f7 fc6d 	bl	8001efa <_isatty>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_isatty_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_isatty_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	200004e0 	.word	0x200004e0

0800a630 <_lseek_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_lseek_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 fc66 	bl	8001f10 <_lseek>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_lseek_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_lseek_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	200004e0 	.word	0x200004e0

0800a654 <_read_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_read_r+0x20>)
 800a658:	4604      	mov	r4, r0
 800a65a:	4608      	mov	r0, r1
 800a65c:	4611      	mov	r1, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	f7f7 fbf4 	bl	8001e50 <_read>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_read_r+0x1e>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_read_r+0x1e>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	200004e0 	.word	0x200004e0

0800a678 <_init>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	bf00      	nop
 800a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67e:	bc08      	pop	{r3}
 800a680:	469e      	mov	lr, r3
 800a682:	4770      	bx	lr

0800a684 <_fini>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr
